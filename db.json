{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.jpeg","path":"images/logo.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/index.md","hash":"7153061642bdd2aaedcda731278a5934ff88759b","modified":1661260525943},{"_id":"source/Vue/change.md","hash":"01da9f47a27eb736b43bd12ec2321715e2b54e4d","modified":1655911608869},{"_id":"source/_posts/about-design-model.md","hash":"7b8490c60039588448d0d7582c30f5eb93c03981","modified":1661782254184},{"_id":"source/Vue/dependency.md","hash":"6e38909af4945785fb09db5abe4a064ff6066d9f","modified":1655911608869},{"_id":"source/Vue/index.md","hash":"4015b33dec697a3f2f6351db6de2edcdaf2a8e31","modified":1655911608885},{"_id":"source/_posts/about-dom.md","hash":"8b9d82b293d05a8607338ba7805995668a2a75bc","modified":1661782266298},{"_id":"source/_posts/about-fe-theory.md","hash":"5a090673e16c377c4d2d578998cb29d6fb88aa5a","modified":1658123245279},{"_id":"source/_posts/about-map.md","hash":"f39821c6d8c12680cecf25f6abddd8430f3ed0eb","modified":1659598283549},{"_id":"source/_posts/about-symbol.md","hash":"99d71ea1b58e50276b11a2debd131027221678e0","modified":1660887762437},{"_id":"source/_posts/browser-render.md","hash":"8107a2769a4c38a9f05241326b48506743725658","modified":1661260525909},{"_id":"source/_posts/about-use-hexo.md","hash":"bba5bc4aff5263c99eed59daf779fe7a3fbd2b93","modified":1661260525908},{"_id":"source/_posts/devan-operation.md","hash":"6bbc2c6364decd9a99cb4f72c1626a757fa4a871","modified":1660807793069},{"_id":"source/_posts/create-fixed-length-array.md","hash":"bb6b775930a2282b80b9b78f0239c17461fec807","modified":1660101146408},{"_id":"source/_posts/create-vscode-plugin.md","hash":"653b6b918bb11faa8cc85909e37b971d5d07bf0e","modified":1659679736829},{"_id":"source/_posts/document-location.md","hash":"2edfccf29ce6fa6ce3eb7ff5c961df6d8446ddd3","modified":1660619166205},{"_id":"source/_posts/fake-array.md","hash":"1c2ab5ff218428b5e1de4a589f681afd808e21ec","modified":1659597456091},{"_id":"source/_posts/github生成令牌-Personal-access-tokens-操作步骤.md","hash":"36bc1839b5bbc1938ce1e8b84ada86cb81b5683b","modified":1656566299719},{"_id":"source/_posts/hello-world.md","hash":"270b836ccfe6be2557efe7cff4f7508dcbe21bba","modified":1655912733937},{"_id":"source/_posts/github推送代码弹窗应该怎么输入？.md","hash":"4b012a4cc4f906f27b1073639d349af384637565","modified":1656566532389},{"_id":"source/_posts/js-transform.md","hash":"e696a1a70a8634cac69b43cd2892f45e82838a37","modified":1660101077050},{"_id":"source/_posts/meta标签的使用.md","hash":"bb4ea509d4e70d028ab897066775a3c5daa92e4c","modified":1661260525920},{"_id":"source/_posts/origin-type-and-reference-type.md","hash":"10b010393111f0a8cf7c4644b8acd4bfc87cf2ef","modified":1660101267201},{"_id":"source/_posts/react-render.md","hash":"3d1ecf1f8ba758118a9958874f508559db7f5a93","modified":1661260525922},{"_id":"source/_posts/question-about-render.md","hash":"362aefe2d4a9469e1320feb49412433993979820","modified":1660101293040},{"_id":"source/_posts/var-const-let.md","hash":"41e5f191349193383557269ea8ec33cf0d9ce21c","modified":1661260525929},{"_id":"source/commonweal/index.md","hash":"ad7fb815e56ba127e811a3567a619a7ab7edf654","modified":1660024567905},{"_id":"source/_posts/text-type-about-markdown.md","hash":"1941d05026a48958afe6e9ac0b0c8a8dda6abb93","modified":1660101353231},{"_id":"source/_posts/vue3-render.md","hash":"0e7f667b40d879002559a3e6be9ea488e11a467b","modified":1661260525930},{"_id":"source/_posts/fake-array/array_from.png","hash":"50733fd866277f6aa27e12e432f2511fa886855f","modified":1661260525913},{"_id":"source/_posts/fake-array/document.png","hash":"c0e73c5d922eaf7f899856685f5fbd8245517fe8","modified":1661260525913},{"_id":"source/_posts/fake-array/prototype_call.png","hash":"166ae1ed6f21a1c4ee961508d06adae89f22c6d6","modified":1661260525914},{"_id":"source/_posts/fake-array/slice_call.png","hash":"a97bd9fef96df18bbe6097521df710bd9615090a","modified":1661260525915},{"_id":"source/_posts/js-transform/js-transform.html","hash":"f4f8d85e5386d9b251c24aea038d4c57c88ede50","modified":1661260525919},{"_id":"source/_posts/vue3-render/render.png","hash":"0b20ebf2700ccd675e40f6330e07dce8341807a0","modified":1661260525931},{"_id":"source/_posts/about-design-model/how-to-inherit.png","hash":"2610b10429de1454b684733ede30778da89da750","modified":1661781876587},{"_id":"source/_posts/about-design-model/parasitic-inherit.png","hash":"dcde79d7db360d5f56bf441be778908d3056f693","modified":1661781189502},{"_id":"source/_posts/about-design-model/prototype.png","hash":"fe3518ce58c5945b8f5db473d69be75f67a98b0a","modified":1661473380896},{"_id":"source/_posts/about-design-model/prototype-inherit.png","hash":"a5f0085a3caf9e0519fe3cb26129dd144cfc7594","modified":1661780681443},{"_id":"source/_posts/about-design-model/public-and-private.png","hash":"275fce752eaeadf6eee22e10bf14451ed9eb675c","modified":1661474395605},{"_id":"source/_posts/about-design-model/static-and-public.png","hash":"aef2330dce27ebc420b7654abdf1859266ec48a4","modified":1661776571365},{"_id":"source/_posts/react-render/update_class.png","hash":"5854028928496a0b6c4ad02452cd07c12650f8e8","modified":1661260525928},{"_id":"source/_posts/react-render/force_update.png","hash":"f0333239066cd2e4a8cdf12bff8fcdfcc01a7616","modified":1661260525926},{"_id":"source/_posts/vue3-render/render_node1.png","hash":"4a4266c87a315afeb55de174b11784431f3c40b9","modified":1661260525935},{"_id":"source/_posts/vue3-render/render_node2.png","hash":"bd8cbab05ce653b80a1cc89e609b7ae9c309b7fe","modified":1661260525937},{"_id":"source/_posts/about-design-model/class-inherit.png","hash":"7316cf53af5ae3d11eb708f911ddc2b9fbf35027","modified":1661778764040},{"_id":"source/_posts/about-design-model/parasitic-combination-inherit.png","hash":"5b7c9be2d070fe04cd77d8923eaa4e1585ad9e02","modified":1661781801481},{"_id":"source/_posts/about-design-model/parasitic-inherit-change.png","hash":"0b683e58266a2816c17a932a910be6ce1bdbbf1e","modified":1661781479054},{"_id":"source/_posts/react-render/fiber_tree.png","hash":"947d11b845e1abb74cbb2d4e135767a377692041","modified":1661260525925},{"_id":"source/_posts/js-transform/convert-table.png","hash":"fdffd1b86ddacb402a9a3a423cffd91fcc229fce","modified":1661260525918},{"_id":"source/_posts/vue3-render/render_function.png","hash":"ab09e61382c872069a70212525d4333d6ba8cd19","modified":1661260525934},{"_id":"source/_posts/about-design-model/safe-model.png","hash":"8ddf098b287fc1582ef3c57f6641b8cdfe529ee0","modified":1661777810132},{"_id":"source/_posts/about-design-model/test-prototype-inherit.png","hash":"ffe8e406495b76ed7e8fa5fa95247335f0842bd8","modified":1661780919335},{"_id":"source/_posts/about-design-model/combination-inherit.png","hash":"51a2c5f4775a37e5f2a21ab257749912178476c3","modified":1661780148819},{"_id":"source/_posts/about-design-model/constructor-inherit.png","hash":"e1eb49fe9cd4796f60678113b6f865f2e1576464","modified":1661779797948},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1654110695000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1654110695000},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1654110695000},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1654110695000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1654110695000},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1654110695000},{"_id":"themes/next/README.md","hash":"56638e4978154a2f2a3f03ba84047b77b4a499cc","modified":1654110695000},{"_id":"themes/next/_vendors.yml","hash":"8c2886a6af624f04fc6a376daf48c0698ea71bf7","modified":1654110695000},{"_id":"themes/next/package.json","hash":"b32be32269dd2e241790a766a60357bfe13f2d45","modified":1654110695000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1654110695000},{"_id":"themes/next/_config.yml","hash":"b75f1cb8165a894de430ff61ec0a11b437662f31","modified":1660035061195},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1654110695000},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1654110695000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1654110695000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1654110695000},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1654110695000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1654110695000},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1654110695000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1654110695000},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1654110695000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1654110695000},{"_id":"themes/next/.github/release-drafter.yml","hash":"423275ec021104b263cd88776936a8c8d6872b66","modified":1654110695000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1654110695000},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1654110695000},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1654110695000},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1654110695000},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1654110695000},{"_id":"themes/next/languages/bn.yml","hash":"fccbf2855392186e11daa8590121073594037b7b","modified":1654110695000},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1654110695000},{"_id":"themes/next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1654110695000},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1654110695000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1656425734955},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1654110695000},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1654110695000},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1654110695000},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1654110695000},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1654110695000},{"_id":"themes/next/languages/ko.yml","hash":"819c19eb9d142e5411f77cf3821d90f740ee114a","modified":1654110695000},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1654110695000},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1654110695000},{"_id":"themes/next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1654110695000},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1654110695000},{"_id":"themes/next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1654110695000},{"_id":"themes/next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1654110695000},{"_id":"themes/next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1654110695000},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1654110695000},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1654110695000},{"_id":"themes/next/languages/zh-hk.yml","hash":"c1ee97ceb56da76ecdc7b69fa975f28c8574441b","modified":1656425734971},{"_id":"themes/next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1654110695000},{"_id":"themes/next/languages/zh-tw.yml","hash":"70c45076ad722b777956048fcc430eac37844c11","modified":1656425734986},{"_id":"themes/next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1654110695000},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1654110695000},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1654110695000},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1654110695000},{"_id":"themes/next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1654110695000},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1654110695000},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1654110695000},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1654110695000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1654110695000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1654110695000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1654110695000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1654110695000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"434cc0674290958b1e9bbc46c3486f073c0722db","modified":1654110695000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"e9d51e93f239a2d4b69722c69db3463b4baf0f4c","modified":1654110695000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"b6c111344bc0f3500ca69d7590791ff85ef1090d","modified":1654110695000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"e48d1ced9a673d3f0911a700d3e68c0f4ca79263","modified":1654110695000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"80a20c3a7522249f051a48239db41d1317e9b552","modified":1654110695000},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1654110695000},{"_id":"themes/next/docs/ru/README.md","hash":"6c82bfd2ec8248c248da701f091b548a7a133580","modified":1654110695000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1654110695000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"ccf27b9249524b9fec1c15497b4353c8d1748c6c","modified":1654110695000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1654110695000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1654110695000},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1654110695000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1654110695000},{"_id":"themes/next/layout/_macro/post.njk","hash":"434b3e76a040a816169e1929657e4176e7b8164c","modified":1654110695000},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1654110695000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1654110695000},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1654110695000},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1654110695000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1654110695000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1654110695000},{"_id":"themes/next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1654110695000},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1654110695000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1654110695000},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1654110695000},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1654110695000},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1654110695000},{"_id":"themes/next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1654110695000},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1654110695000},{"_id":"themes/next/source/css/noscript.styl","hash":"263eddabfae40e54c0591e7baa8403ade8cdd56d","modified":1654110695000},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1656425735120},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1641603456899},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1641603456915},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1641603456915},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1656425735120},{"_id":"themes/next/source/images/logo.jpeg","hash":"cf0f17140f5d4eefe4607db39c354c73eb9b6500","modified":1661260525946},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1654110695000},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1656425735120},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1654110695000},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1654110695000},{"_id":"themes/next/source/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1654110695000},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1654110695000},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1654110695000},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1654110695000},{"_id":"themes/next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1654110695000},{"_id":"themes/next/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":1654110695000},{"_id":"themes/next/source/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1654110695000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1654110695000},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1654110695000},{"_id":"themes/next/scripts/filters/minify.js","hash":"f160e39943e39d7276da86adb47c3f08e5f22c7a","modified":1654110695000},{"_id":"themes/next/scripts/filters/post.js","hash":"30e03a1d4828259f82d46e64cbfe2955b6cff9a9","modified":1654110695000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1654110695000},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1654110695000},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1654110695000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1654110695000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1654110695000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1654110695000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1654110695000},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1654110695000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1654110695000},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1654110695000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1654110695000},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1654110695000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1654110695000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1654110695000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1654110695000},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1654110695000},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1654110695000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1654110695000},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1654110695000},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1654110695000},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1654110695000},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1654110695000},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1654110695000},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1654110695000},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1654110695000},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1654110695000},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1654110695000},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1654110695000},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1654110695000},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1654110695000},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1654110695000},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1654110695000},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1654110695000},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1654110695000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1654110695000},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1654110695000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1654110695000},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1654110695000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1654110695000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1654110695000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1654110695000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1654110695000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1654110695000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1654110695000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1654110695000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1654110695000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1654110695000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1654110695000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1654110695000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1654110695000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1654110695000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1654110695000},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1654110695000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1654110695000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1654110695000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1654110695000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1654110695000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1654110695000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1654110695000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1654110695000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1654110695000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1654110695000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1654110695000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1654110695000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1654110695000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1654110695000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1654110695000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1654110695000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1654110695000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1654110695000},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1654110695000},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1654110695000},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1654110695000},{"_id":"themes/next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1654110695000},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1654110695000},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1654110695000},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1654110695000},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1654110695000},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1654110695000},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1654110695000},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1654110695000},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1654110695000},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1654110695000},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1654110695000},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1654110695000},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1654110695000},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1654110695000},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"ff642130354a0b3be0d708c43044ed4d710b5e83","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1654110695000},{"_id":"source/_posts/vue3-render/vue3_render.png","hash":"c27773553432184cba670aac70e69865c21a4727","modified":1661260525942},{"_id":"themes/next/source/images/avatar.jpg","hash":"6c8990146a8952732d3fa65f7933f4644c62f475","modified":1661260525946},{"_id":"public/atom.xml","hash":"9d38813fccfab94bc01e96d64d623e2139553292","modified":1661782374760},{"_id":"public/index.html","hash":"55f148277cfd5b983b6d842b3691b16a1c171ab1","modified":1661782374760},{"_id":"public/Vue/dependency.html","hash":"91cf8829742ec4b8d0256e8c1804169e9b1895d3","modified":1661782374760},{"_id":"public/Vue/index.html","hash":"40e9bb008d0c01528d1b71c8121c02981d82de8f","modified":1661782374760},{"_id":"public/commonweal/index.html","hash":"e943ece6432569288c17b56170a3eb18a7c261c9","modified":1661782374760},{"_id":"public/2022/08/23/js-transform/js-transform/index.html","hash":"b498e7b024eece3e939720d941956643365a13db","modified":1661782374760},{"_id":"public/2022/08/19/about-symbol/index.html","hash":"a5a58c1c3e7d0d1bff7feb6204193ea3e94f72b8","modified":1661782374760},{"_id":"public/2022/08/05/create-vscode-plugin/index.html","hash":"13113387249724e2d25e03336798a80900ee3b74","modified":1661782374760},{"_id":"public/2022/08/04/fake-array/index.html","hash":"b1aaaddc69fde2cd2a11c3b418a20644b95b1269","modified":1661782374760},{"_id":"public/2022/07/19/origin-type-and-reference-type/index.html","hash":"1c9827d1655b027b50c1bfd8d64162fa8d5dd335","modified":1661782374760},{"_id":"public/2022/07/05/document-location/index.html","hash":"b8198a7afcdcad6f2028f6b1dd15c82d071949ad","modified":1661782374760},{"_id":"public/2022/06/30/github生成令牌-Personal-access-tokens-操作步骤/index.html","hash":"ccbc1448329f61690668a135b86b79bf49d3cceb","modified":1661782374760},{"_id":"public/2022/06/27/text-type-about-markdown/index.html","hash":"84c3786b7af6d14586a1183998f25930fbe2611d","modified":1661782374760},{"_id":"public/2022/06/23/question-about-render/index.html","hash":"ddedeca5fe73c41a2f17c138bf79b0ad481613a2","modified":1661782374760},{"_id":"public/2022/06/22/vue3-render/index.html","hash":"b2b3adbdb98129f4151bf1d724c27626c16758d6","modified":1661782374760},{"_id":"public/2022/06/22/react-render/index.html","hash":"d0c8b5ec8396b89fbeb8a128778ebe8f9d63ee6a","modified":1661782374760},{"_id":"public/2022/03/26/about-use-hexo/index.html","hash":"79af645cb92490532b7aa4f522fbbedacc2855b5","modified":1661782374760},{"_id":"public/2022/03/26/var-const-let/index.html","hash":"b59f1db0759aaa403ecebaf4449a66be7bd2be99","modified":1661782374760},{"_id":"public/2022/01/08/hello-world/index.html","hash":"4e2958ce321f217d7857b5f3d29450165e697140","modified":1661782374760},{"_id":"public/archives/page/2/index.html","hash":"e515bcd5dadc00fd225fb1e5499e7f5fcb6e58cb","modified":1661782374760},{"_id":"public/archives/2022/page/2/index.html","hash":"64bbc7c08e5675dbbad54137c79ec66e1cf56ded","modified":1661782374760},{"_id":"public/archives/2022/01/index.html","hash":"a5715d6e785c9284d0889bd37a36bbb2b84e4253","modified":1661782374760},{"_id":"public/archives/2022/03/index.html","hash":"fbf8888483a023f544561f030042de346013703a","modified":1661782374760},{"_id":"public/archives/2022/05/index.html","hash":"2c36d56d04aea0dc0e538b558adc15a58720c543","modified":1661782374760},{"_id":"public/archives/2022/06/index.html","hash":"f0a2d5f8730812659a19763167a28db4fb4d5dee","modified":1661782374760},{"_id":"public/archives/2022/07/index.html","hash":"76a9290591c67c41cd7146befb16f5286fb4ce0f","modified":1661782374760},{"_id":"public/archives/2022/08/index.html","hash":"2755c2481db6267f5c370d1847cb37d8f8e763f8","modified":1661782374760},{"_id":"public/Vue/change.html","hash":"99c8c6b6171e509a2c3a45fcfd40cadea270295e","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/index.html","hash":"95403ac79298db008f402c2713d31c045ba1a4da","modified":1661782374760},{"_id":"public/2022/08/09/devan-operation/index.html","hash":"564ed4ef54d85f90e1ad25a1f978636dc997b3c4","modified":1661782374760},{"_id":"public/2022/08/04/about-map/index.html","hash":"8e43758b43cc0878533982d9876ac4118983ff17","modified":1661782374760},{"_id":"public/2022/07/31/about-dom/index.html","hash":"6b3e92fd854dd77715015edafca5c5bc38b323e8","modified":1661782374760},{"_id":"public/2022/07/19/js-transform/index.html","hash":"ed4505ec8e963c42d4780f118812630d3a781d45","modified":1661782374760},{"_id":"public/2022/07/12/about-fe-theory/index.html","hash":"bfbdd4f6b20109ee889a0c620de7faaa820f8539","modified":1661782374760},{"_id":"public/2022/06/30/github推送代码弹窗应该怎么输入？/index.html","hash":"81e6e2766d78b5e64efba8c8676fe643062cc754","modified":1661782374760},{"_id":"public/2022/06/28/meta标签的使用/index.html","hash":"9b1dc3d12f850a996c39d70ece7919b87af77a3d","modified":1661782374760},{"_id":"public/2022/06/27/create-fixed-length-array/index.html","hash":"b3a3fd1a5cca9303320d4550cbf70ba31e99581f","modified":1661782374760},{"_id":"public/2022/05/23/browser-render/index.html","hash":"705cc5c56de3c63a6374b79c9046bcfc4bb8c0d3","modified":1661782374760},{"_id":"public/archives/index.html","hash":"1833b2d145fcf10dabedb819e45be95dfb4a3eee","modified":1661782374760},{"_id":"public/archives/2022/index.html","hash":"1fc7dc23eafb7897d132fcc2e061554ef15cbbe8","modified":1661782374760},{"_id":"public/default-index/index.html","hash":"1a9acb222786dc5822e0f1c5ac0d992cef0b7269","modified":1661782374760},{"_id":"public/default-index/page/2/index.html","hash":"eadcda54e92ea57bc0adbdc14cef4f382d1664f9","modified":1661782374760},{"_id":"public/default-index/page/3/index.html","hash":"014a867c429b6149f66ec38e320f3daf67f7f825","modified":1661782374760},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1661782374760},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1661782374760},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1661782374760},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1661782374760},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1661782374760},{"_id":"public/images/logo.jpeg","hash":"cf0f17140f5d4eefe4607db39c354c73eb9b6500","modified":1661782374760},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1661782374760},{"_id":"public/2022/08/04/fake-array/document.png","hash":"c0e73c5d922eaf7f899856685f5fbd8245517fe8","modified":1661782374760},{"_id":"public/2022/08/04/fake-array/prototype_call.png","hash":"166ae1ed6f21a1c4ee961508d06adae89f22c6d6","modified":1661782374760},{"_id":"public/2022/08/04/fake-array/slice_call.png","hash":"a97bd9fef96df18bbe6097521df710bd9615090a","modified":1661782374760},{"_id":"public/2022/08/04/fake-array/array_from.png","hash":"50733fd866277f6aa27e12e432f2511fa886855f","modified":1661782374760},{"_id":"public/2022/06/22/vue3-render/render.png","hash":"0b20ebf2700ccd675e40f6330e07dce8341807a0","modified":1661782374760},{"_id":"public/images/avatar.jpg","hash":"6c8990146a8952732d3fa65f7933f4644c62f475","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/how-to-inherit.png","hash":"2610b10429de1454b684733ede30778da89da750","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/prototype-inherit.png","hash":"a5f0085a3caf9e0519fe3cb26129dd144cfc7594","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/parasitic-inherit.png","hash":"dcde79d7db360d5f56bf441be778908d3056f693","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/prototype.png","hash":"fe3518ce58c5945b8f5db473d69be75f67a98b0a","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/public-and-private.png","hash":"275fce752eaeadf6eee22e10bf14451ed9eb675c","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/static-and-public.png","hash":"aef2330dce27ebc420b7654abdf1859266ec48a4","modified":1661782374760},{"_id":"public/2022/06/22/react-render/force_update.png","hash":"f0333239066cd2e4a8cdf12bff8fcdfcc01a7616","modified":1661782374760},{"_id":"public/2022/06/22/react-render/update_class.png","hash":"5854028928496a0b6c4ad02452cd07c12650f8e8","modified":1661782374760},{"_id":"public/2022/06/22/vue3-render/render_node1.png","hash":"4a4266c87a315afeb55de174b11784431f3c40b9","modified":1661782374760},{"_id":"public/2022/06/22/vue3-render/render_node2.png","hash":"bd8cbab05ce653b80a1cc89e609b7ae9c309b7fe","modified":1661782374760},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1661782374760},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1661782374760},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1661782374760},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1661782374760},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1661782374760},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1661782374760},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1661782374760},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1661782374760},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1661782374760},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1661782374760},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1661782374760},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1661782374760},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1661782374760},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1661782374760},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1661782374760},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1661782374760},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1661782374760},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1661782374760},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1661782374760},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1661782374760},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1661782374760},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1661782374760},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1661782374760},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1661782374760},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1661782374760},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1661782374760},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1661782374760},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1661782374760},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1661782374760},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1661782374760},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1661782374760},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1661782374760},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1661782374760},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1661782374760},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1661782374760},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1661782374760},{"_id":"public/2022/07/19/js-transform/js-transform.html","hash":"18caf0ae505ad384d3fa4c402aaf049e263f6fc0","modified":1661782374760},{"_id":"public/css/main.css","hash":"691e6c349d2c53e152277bb709c31758dc8ada9d","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/class-inherit.png","hash":"7316cf53af5ae3d11eb708f911ddc2b9fbf35027","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/parasitic-combination-inherit.png","hash":"5b7c9be2d070fe04cd77d8923eaa4e1585ad9e02","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/parasitic-inherit-change.png","hash":"0b683e58266a2816c17a932a910be6ce1bdbbf1e","modified":1661782374760},{"_id":"public/2022/07/19/js-transform/convert-table.png","hash":"fdffd1b86ddacb402a9a3a423cffd91fcc229fce","modified":1661782374760},{"_id":"public/2022/06/22/react-render/fiber_tree.png","hash":"947d11b845e1abb74cbb2d4e135767a377692041","modified":1661782374760},{"_id":"public/2022/06/22/vue3-render/render_function.png","hash":"ab09e61382c872069a70212525d4333d6ba8cd19","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/safe-model.png","hash":"8ddf098b287fc1582ef3c57f6641b8cdfe529ee0","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/test-prototype-inherit.png","hash":"ffe8e406495b76ed7e8fa5fa95247335f0842bd8","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/combination-inherit.png","hash":"51a2c5f4775a37e5f2a21ab257749912178476c3","modified":1661782374760},{"_id":"public/2022/08/20/about-design-model/constructor-inherit.png","hash":"e1eb49fe9cd4796f60678113b6f865f2e1576464","modified":1661782374760},{"_id":"public/2022/06/22/vue3-render/vue3_render.png","hash":"c27773553432184cba670aac70e69865c21a4727","modified":1661782374760},{"_id":"source/_posts/es6-object-strong.md","hash":"6ae821db818da9d8730d16f9569103b5e560f350","modified":1662097772109},{"_id":"source/_posts/how-to-debug-browser.md","hash":"fcf96d128930c24a6ee8d2fd21bcaac7231bcf0e","modified":1662088228162},{"_id":"source/vue/index.md","hash":"a57df7e0596d7db725d855a700185c74dcfed5c4","modified":1643106514167},{"_id":"source/vue/change.md","hash":"0657a56e1da4d07caae9b44aae3d845ade2e7325","modified":1643105454040},{"_id":"source/vue/dependency.md","hash":"b96d71c3fd9006df71d6a7e7a25602472b1caa0d","modified":1643105980849},{"_id":"themes/next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1654110695000},{"_id":"themes/next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1654110695000}],"Category":[],"Data":[],"Page":[{"_content":"#### This is Sun Jinkang＇s page.\n","source":"index.md","raw":"#### This is Sun Jinkang＇s page.\n","date":"2022-08-23T13:15:25.943Z","updated":"2022-08-23T13:15:25.943Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"cl7eubjkz0000hgtk7h388yjc","content":"<h4 id=\"This-is-Sun-Jinkang＇s-page\"><a href=\"#This-is-Sun-Jinkang＇s-page\" class=\"headerlink\" title=\"This is Sun Jinkang＇s page.\"></a>This is Sun Jinkang＇s page.</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"This-is-Sun-Jinkang＇s-page\"><a href=\"#This-is-Sun-Jinkang＇s-page\" class=\"headerlink\" title=\"This is Sun Jinkang＇s page.\"></a>This is Sun Jinkang＇s page.</h4>"},{"title":"commonweal","date":"2022-08-09T05:51:41.000Z","_content":"\n### 找不到对应页面，请确认是否存在页面！！！","source":"commonweal/index.md","raw":"---\ntitle: commonweal\ndate: 2022-08-09 13:51:41\n---\n\n### 找不到对应页面，请确认是否存在页面！！！","updated":"2022-08-09T05:56:07.905Z","path":"commonweal/index.html","_id":"cl7eubjld0008hgtkcqto2uyo","comments":1,"layout":"page","content":"<h3 id=\"找不到对应页面，请确认是否存在页面！！！\"><a href=\"#找不到对应页面，请确认是否存在页面！！！\" class=\"headerlink\" title=\"找不到对应页面，请确认是否存在页面！！！\"></a>找不到对应页面，请确认是否存在页面！！！</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"找不到对应页面，请确认是否存在页面！！！\"><a href=\"#找不到对应页面，请确认是否存在页面！！！\" class=\"headerlink\" title=\"找不到对应页面，请确认是否存在页面！！！\"></a>找不到对应页面，请确认是否存在页面！！！</h3>"},{"title":"3.x生态环境","date":"2022-01-25T09:02:52.000Z","_content":"#### [Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！](https://gist.github.com/yyx990803/bf9a625eeff8b471bf0701afb8e3fe75)\n[基于 Vite 的极速构建工具链](https://vitejs.dev/)\n\n`<script setup>` 带来的开发体验更丝滑的组合式 API 语法\n\n[Volar 提供的单文件组件 TypeScript IDE 支持](https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar)\n\n[vue-tsc 提供的针对单文件组件的命令行类型检查和生成](https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc)\n\n[Pinia 提供的更简洁的状态管理](https://pinia.vuejs.org/) / [Vuex4](https://next.vuex.vuejs.org/)\n\n[新的开发者工具扩展，同时支持 Vue 2/Vue 3，并且提供一个插件系统来允许社区库自行扩展开发者工具面板](https://devtools.vuejs.org/plugin/plugins-guide.html)\n\n[vuejs/core](https://github.com/vuejs/core)\n\n[Vue Router 4.0](https://next.router.vuejs.org/)\n[代码地址](https://github.com/vuejs/router)\n\n[vuejs/docs](https://github.com/vuejs/docs)\n\n[vuejs/test-utils](https://github.com/vuejs/test-utils)\n\n[vuejs/babel-plugin-jsx](https://github.com/vuejs/babel-plugin-jsx)\n\n[Element Plus(稳定版本预计于2022/02/07发布)](https://element-plus.gitee.io/zh-CN/)\n\n[Ant Design Vue(从v2开始支持vue3，v3目前为beta版本)](https://next.antdv.com/)\n\n其他Vue UI框架：[Vuetify](https://vuetifyjs.com/zh-Hans/)、[Quasar](https://quasar.dev/)\n\n[全新的文档(目前只能预览)](https://staging.vuejs.org/)（[中文翻译中](https://staging-cn.vuejs.org/)）","source":"vue/dependency.md","raw":"---\ntitle: 3.x生态环境\ndate: 2022-01-25 17:02:52\n---\n#### [Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！](https://gist.github.com/yyx990803/bf9a625eeff8b471bf0701afb8e3fe75)\n[基于 Vite 的极速构建工具链](https://vitejs.dev/)\n\n`<script setup>` 带来的开发体验更丝滑的组合式 API 语法\n\n[Volar 提供的单文件组件 TypeScript IDE 支持](https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar)\n\n[vue-tsc 提供的针对单文件组件的命令行类型检查和生成](https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc)\n\n[Pinia 提供的更简洁的状态管理](https://pinia.vuejs.org/) / [Vuex4](https://next.vuex.vuejs.org/)\n\n[新的开发者工具扩展，同时支持 Vue 2/Vue 3，并且提供一个插件系统来允许社区库自行扩展开发者工具面板](https://devtools.vuejs.org/plugin/plugins-guide.html)\n\n[vuejs/core](https://github.com/vuejs/core)\n\n[Vue Router 4.0](https://next.router.vuejs.org/)\n[代码地址](https://github.com/vuejs/router)\n\n[vuejs/docs](https://github.com/vuejs/docs)\n\n[vuejs/test-utils](https://github.com/vuejs/test-utils)\n\n[vuejs/babel-plugin-jsx](https://github.com/vuejs/babel-plugin-jsx)\n\n[Element Plus(稳定版本预计于2022/02/07发布)](https://element-plus.gitee.io/zh-CN/)\n\n[Ant Design Vue(从v2开始支持vue3，v3目前为beta版本)](https://next.antdv.com/)\n\n其他Vue UI框架：[Vuetify](https://vuetifyjs.com/zh-Hans/)、[Quasar](https://quasar.dev/)\n\n[全新的文档(目前只能预览)](https://staging.vuejs.org/)（[中文翻译中](https://staging-cn.vuejs.org/)）","updated":"2022-01-25T10:19:40.849Z","path":"vue/dependency.html","comments":1,"layout":"page","_id":"cl7k23wt00000vgtt4mji0p7p","content":"<h4 id=\"Vue-3-将在-2022-年-2-月-7-日成为新的默认版本！\"><a href=\"#Vue-3-将在-2022-年-2-月-7-日成为新的默认版本！\" class=\"headerlink\" title=\"Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！\"></a><a href=\"https://gist.github.com/yyx990803/bf9a625eeff8b471bf0701afb8e3fe75\">Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！</a></h4><p><a href=\"https://vitejs.dev/\">基于 Vite 的极速构建工具链</a></p>\n<p><code>&lt;script setup&gt;</code> 带来的开发体验更丝滑的组合式 API 语法</p>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar\">Volar 提供的单文件组件 TypeScript IDE 支持</a></p>\n<p><a href=\"https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc\">vue-tsc 提供的针对单文件组件的命令行类型检查和生成</a></p>\n<p><a href=\"https://pinia.vuejs.org/\">Pinia 提供的更简洁的状态管理</a> / <a href=\"https://next.vuex.vuejs.org/\">Vuex4</a></p>\n<p><a href=\"https://devtools.vuejs.org/plugin/plugins-guide.html\">新的开发者工具扩展，同时支持 Vue 2/Vue 3，并且提供一个插件系统来允许社区库自行扩展开发者工具面板</a></p>\n<p><a href=\"https://github.com/vuejs/core\">vuejs/core</a></p>\n<p><a href=\"https://next.router.vuejs.org/\">Vue Router 4.0</a><br><a href=\"https://github.com/vuejs/router\">代码地址</a></p>\n<p><a href=\"https://github.com/vuejs/docs\">vuejs/docs</a></p>\n<p><a href=\"https://github.com/vuejs/test-utils\">vuejs/test-utils</a></p>\n<p><a href=\"https://github.com/vuejs/babel-plugin-jsx\">vuejs/babel-plugin-jsx</a></p>\n<p><a href=\"https://element-plus.gitee.io/zh-CN/\">Element Plus(稳定版本预计于2022/02/07发布)</a></p>\n<p><a href=\"https://next.antdv.com/\">Ant Design Vue(从v2开始支持vue3，v3目前为beta版本)</a></p>\n<p>其他Vue UI框架：<a href=\"https://vuetifyjs.com/zh-Hans/\">Vuetify</a>、<a href=\"https://quasar.dev/\">Quasar</a></p>\n<p><a href=\"https://staging.vuejs.org/\">全新的文档(目前只能预览)</a>（<a href=\"https://staging-cn.vuejs.org/\">中文翻译中</a>）</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Vue-3-将在-2022-年-2-月-7-日成为新的默认版本！\"><a href=\"#Vue-3-将在-2022-年-2-月-7-日成为新的默认版本！\" class=\"headerlink\" title=\"Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！\"></a><a href=\"https://gist.github.com/yyx990803/bf9a625eeff8b471bf0701afb8e3fe75\">Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！</a></h4><p><a href=\"https://vitejs.dev/\">基于 Vite 的极速构建工具链</a></p>\n<p><code>&lt;script setup&gt;</code> 带来的开发体验更丝滑的组合式 API 语法</p>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar\">Volar 提供的单文件组件 TypeScript IDE 支持</a></p>\n<p><a href=\"https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc\">vue-tsc 提供的针对单文件组件的命令行类型检查和生成</a></p>\n<p><a href=\"https://pinia.vuejs.org/\">Pinia 提供的更简洁的状态管理</a> / <a href=\"https://next.vuex.vuejs.org/\">Vuex4</a></p>\n<p><a href=\"https://devtools.vuejs.org/plugin/plugins-guide.html\">新的开发者工具扩展，同时支持 Vue 2/Vue 3，并且提供一个插件系统来允许社区库自行扩展开发者工具面板</a></p>\n<p><a href=\"https://github.com/vuejs/core\">vuejs/core</a></p>\n<p><a href=\"https://next.router.vuejs.org/\">Vue Router 4.0</a><br><a href=\"https://github.com/vuejs/router\">代码地址</a></p>\n<p><a href=\"https://github.com/vuejs/docs\">vuejs/docs</a></p>\n<p><a href=\"https://github.com/vuejs/test-utils\">vuejs/test-utils</a></p>\n<p><a href=\"https://github.com/vuejs/babel-plugin-jsx\">vuejs/babel-plugin-jsx</a></p>\n<p><a href=\"https://element-plus.gitee.io/zh-CN/\">Element Plus(稳定版本预计于2022/02/07发布)</a></p>\n<p><a href=\"https://next.antdv.com/\">Ant Design Vue(从v2开始支持vue3，v3目前为beta版本)</a></p>\n<p>其他Vue UI框架：<a href=\"https://vuetifyjs.com/zh-Hans/\">Vuetify</a>、<a href=\"https://quasar.dev/\">Quasar</a></p>\n<p><a href=\"https://staging.vuejs.org/\">全新的文档(目前只能预览)</a>（<a href=\"https://staging-cn.vuejs.org/\">中文翻译中</a>）</p>\n"},{"title":"2.x迁移到3.x变更点","date":"2022-01-25T06:17:57.000Z","_content":"### 生命周期变更\n| 选项式 API | Hook inside setup |\n| :------: | :------: |\n| beforeCreate | Not needed* |\n| created | Not needed* |\n| beforeMount | onBeforeMount |\n| mounted | onMounted |\n| beforeUpdate | onBeforeUpdate |\n| updated | onUpdated |\n| beforeUnmount | onBeforeUnmount |\n| unmounted | onUnmounted |\n| errorCaptured | onErrorCaptured |\n| renderTracked | onRenderTracked |\n| renderTriggered | onRenderTriggered |\n| activated | onActivated |\n| deactivated | onDeactivated |\n\n### vue3允许组件有多个根节点\n\n### 移除过滤器\n过滤器已移除，且不再支持，建议用计算属性或方法代替过滤器，而不是使用过滤器\n\n### template应用挂载变更\n在 Vue 2.x 中，当挂载一个具有 template 的应用时，被渲染的内容会替换我们要挂载的目标元素。\n在 Vue 3.x 中，被渲染的应用会作为子元素插入，从而替换目标元素的 innerHTML\n\n### 过渡的 class 名更改\n过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from\n\n### <transition> 组件的相关 prop 名称变化\nleave-class 已经被重命名为 leave-from-class (在渲染函数或 JSX 中可以写为：leaveFromClass)\nenter-class 已经被重命名为 enter-from-class (在渲染函数或 JSX 中可以写为：enterFromClass)\n\n### Transition Group 根元素\n<transition-group> 不再默认渲染根元素，但仍然可以用 tag attribute 创建根元素，希望保留原效果的，设置 tag='span' 即可\n\n### 移除v-on.native修饰符\nv-on 的 .native 修饰符已被移除。同时，新增的 emits 选项允许子组件定义真正会被触发的事件。因此，对于子组件中未被定义为组件触发的所有事件监听器，Vue 现在将把它们作为原生事件监听器添加到子组件的根元素中 (除非在子组件的选项中设置了 inheritAttrs: false)。\n\n### v-if 与 v-for 的优先级变更\n| vue2 | vue3 |\n| :--- | :--- |\n| 在一个元素上同时使用 v-if 和 v-for 时，v-for 会优先作用 | v-if 总是优先于 v-for 生效 |\n\n### v-bind 合并行为\n| vue2 | vue3 |\n| :--- | :--- |\n| 如果一个元素同时定义了 v-bind=\"object\" 和一个相同的独立 attribute，那么这个独立 attribute 总是会覆盖 object 中的绑定（即不分先后） | 如果一个元素同时定义了 v-bind=\"object\" 和一个相同的独立 attribute，那么绑定的声明顺序将决定它们如何被合并（即后覆盖前） |\n\n### VNode 生命周期事件\n| vue2 | vue3 |\n| :--- | :--- |\n| 事件来监听组件生命周期,以 hook: 前缀开头，并跟随相应的生命周期钩子的名字 | 以 vnode- 前缀开头，事件也可用于 HTML 元素 |\n\n举例：vnode- 前缀：@vnode-updated=\"onUpdated\"；或者在驼峰命名法的情况下附带前缀 vnode：@vnodeUpdated=\"onUpdated\"；\n生命周期钩子 beforeDestroy 和 destroyed 已经分别被重命名为 beforeUnmount 和 unmounted，所以相应的事件名也需要更新。\n\n[从vue2迁移官方文档(注意vue3改为默认安装版本后官方文档地址可能发生迁移，该跳转地址可能存在问题)](https://v3.cn.vuejs.org/guide/migration/introduction.html)\n","source":"vue/change.md","raw":"---\ntitle: 2.x迁移到3.x变更点\ndate: 2022-01-25 14:17:57\n---\n### 生命周期变更\n| 选项式 API | Hook inside setup |\n| :------: | :------: |\n| beforeCreate | Not needed* |\n| created | Not needed* |\n| beforeMount | onBeforeMount |\n| mounted | onMounted |\n| beforeUpdate | onBeforeUpdate |\n| updated | onUpdated |\n| beforeUnmount | onBeforeUnmount |\n| unmounted | onUnmounted |\n| errorCaptured | onErrorCaptured |\n| renderTracked | onRenderTracked |\n| renderTriggered | onRenderTriggered |\n| activated | onActivated |\n| deactivated | onDeactivated |\n\n### vue3允许组件有多个根节点\n\n### 移除过滤器\n过滤器已移除，且不再支持，建议用计算属性或方法代替过滤器，而不是使用过滤器\n\n### template应用挂载变更\n在 Vue 2.x 中，当挂载一个具有 template 的应用时，被渲染的内容会替换我们要挂载的目标元素。\n在 Vue 3.x 中，被渲染的应用会作为子元素插入，从而替换目标元素的 innerHTML\n\n### 过渡的 class 名更改\n过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from\n\n### <transition> 组件的相关 prop 名称变化\nleave-class 已经被重命名为 leave-from-class (在渲染函数或 JSX 中可以写为：leaveFromClass)\nenter-class 已经被重命名为 enter-from-class (在渲染函数或 JSX 中可以写为：enterFromClass)\n\n### Transition Group 根元素\n<transition-group> 不再默认渲染根元素，但仍然可以用 tag attribute 创建根元素，希望保留原效果的，设置 tag='span' 即可\n\n### 移除v-on.native修饰符\nv-on 的 .native 修饰符已被移除。同时，新增的 emits 选项允许子组件定义真正会被触发的事件。因此，对于子组件中未被定义为组件触发的所有事件监听器，Vue 现在将把它们作为原生事件监听器添加到子组件的根元素中 (除非在子组件的选项中设置了 inheritAttrs: false)。\n\n### v-if 与 v-for 的优先级变更\n| vue2 | vue3 |\n| :--- | :--- |\n| 在一个元素上同时使用 v-if 和 v-for 时，v-for 会优先作用 | v-if 总是优先于 v-for 生效 |\n\n### v-bind 合并行为\n| vue2 | vue3 |\n| :--- | :--- |\n| 如果一个元素同时定义了 v-bind=\"object\" 和一个相同的独立 attribute，那么这个独立 attribute 总是会覆盖 object 中的绑定（即不分先后） | 如果一个元素同时定义了 v-bind=\"object\" 和一个相同的独立 attribute，那么绑定的声明顺序将决定它们如何被合并（即后覆盖前） |\n\n### VNode 生命周期事件\n| vue2 | vue3 |\n| :--- | :--- |\n| 事件来监听组件生命周期,以 hook: 前缀开头，并跟随相应的生命周期钩子的名字 | 以 vnode- 前缀开头，事件也可用于 HTML 元素 |\n\n举例：vnode- 前缀：@vnode-updated=\"onUpdated\"；或者在驼峰命名法的情况下附带前缀 vnode：@vnodeUpdated=\"onUpdated\"；\n生命周期钩子 beforeDestroy 和 destroyed 已经分别被重命名为 beforeUnmount 和 unmounted，所以相应的事件名也需要更新。\n\n[从vue2迁移官方文档(注意vue3改为默认安装版本后官方文档地址可能发生迁移，该跳转地址可能存在问题)](https://v3.cn.vuejs.org/guide/migration/introduction.html)\n","updated":"2022-01-25T10:10:54.040Z","path":"vue/change.html","comments":1,"layout":"page","_id":"cl7k23wt20001vgttc5qefyai","content":"<h3 id=\"生命周期变更\"><a href=\"#生命周期变更\" class=\"headerlink\" title=\"生命周期变更\"></a>生命周期变更</h3><table>\n<thead>\n<tr>\n<th align=\"center\">选项式 API</th>\n<th align=\"center\">Hook inside setup</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">beforeCreate</td>\n<td align=\"center\">Not needed*</td>\n</tr>\n<tr>\n<td align=\"center\">created</td>\n<td align=\"center\">Not needed*</td>\n</tr>\n<tr>\n<td align=\"center\">beforeMount</td>\n<td align=\"center\">onBeforeMount</td>\n</tr>\n<tr>\n<td align=\"center\">mounted</td>\n<td align=\"center\">onMounted</td>\n</tr>\n<tr>\n<td align=\"center\">beforeUpdate</td>\n<td align=\"center\">onBeforeUpdate</td>\n</tr>\n<tr>\n<td align=\"center\">updated</td>\n<td align=\"center\">onUpdated</td>\n</tr>\n<tr>\n<td align=\"center\">beforeUnmount</td>\n<td align=\"center\">onBeforeUnmount</td>\n</tr>\n<tr>\n<td align=\"center\">unmounted</td>\n<td align=\"center\">onUnmounted</td>\n</tr>\n<tr>\n<td align=\"center\">errorCaptured</td>\n<td align=\"center\">onErrorCaptured</td>\n</tr>\n<tr>\n<td align=\"center\">renderTracked</td>\n<td align=\"center\">onRenderTracked</td>\n</tr>\n<tr>\n<td align=\"center\">renderTriggered</td>\n<td align=\"center\">onRenderTriggered</td>\n</tr>\n<tr>\n<td align=\"center\">activated</td>\n<td align=\"center\">onActivated</td>\n</tr>\n<tr>\n<td align=\"center\">deactivated</td>\n<td align=\"center\">onDeactivated</td>\n</tr>\n</tbody></table>\n<h3 id=\"vue3允许组件有多个根节点\"><a href=\"#vue3允许组件有多个根节点\" class=\"headerlink\" title=\"vue3允许组件有多个根节点\"></a>vue3允许组件有多个根节点</h3><h3 id=\"移除过滤器\"><a href=\"#移除过滤器\" class=\"headerlink\" title=\"移除过滤器\"></a>移除过滤器</h3><p>过滤器已移除，且不再支持，建议用计算属性或方法代替过滤器，而不是使用过滤器</p>\n<h3 id=\"template应用挂载变更\"><a href=\"#template应用挂载变更\" class=\"headerlink\" title=\"template应用挂载变更\"></a>template应用挂载变更</h3><p>在 Vue 2.x 中，当挂载一个具有 template 的应用时，被渲染的内容会替换我们要挂载的目标元素。<br>在 Vue 3.x 中，被渲染的应用会作为子元素插入，从而替换目标元素的 innerHTML</p>\n<h3 id=\"过渡的-class-名更改\"><a href=\"#过渡的-class-名更改\" class=\"headerlink\" title=\"过渡的 class 名更改\"></a>过渡的 class 名更改</h3><p>过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from</p>\n<h3 id=\"组件的相关-prop-名称变化\"><a href=\"#组件的相关-prop-名称变化\" class=\"headerlink\" title=\" 组件的相关 prop 名称变化\"></a><transition> 组件的相关 prop 名称变化</transition></h3><p>leave-class 已经被重命名为 leave-from-class (在渲染函数或 JSX 中可以写为：leaveFromClass)<br>enter-class 已经被重命名为 enter-from-class (在渲染函数或 JSX 中可以写为：enterFromClass)</p>\n<h3 id=\"Transition-Group-根元素\"><a href=\"#Transition-Group-根元素\" class=\"headerlink\" title=\"Transition Group 根元素\"></a>Transition Group 根元素</h3><p><transition-group> 不再默认渲染根元素，但仍然可以用 tag attribute 创建根元素，希望保留原效果的，设置 tag=’span’ 即可</transition-group></p>\n<h3 id=\"移除v-on-native修饰符\"><a href=\"#移除v-on-native修饰符\" class=\"headerlink\" title=\"移除v-on.native修饰符\"></a>移除v-on.native修饰符</h3><p>v-on 的 .native 修饰符已被移除。同时，新增的 emits 选项允许子组件定义真正会被触发的事件。因此，对于子组件中未被定义为组件触发的所有事件监听器，Vue 现在将把它们作为原生事件监听器添加到子组件的根元素中 (除非在子组件的选项中设置了 inheritAttrs: false)。</p>\n<h3 id=\"v-if-与-v-for-的优先级变更\"><a href=\"#v-if-与-v-for-的优先级变更\" class=\"headerlink\" title=\"v-if 与 v-for 的优先级变更\"></a>v-if 与 v-for 的优先级变更</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">在一个元素上同时使用 v-if 和 v-for 时，v-for 会优先作用</td>\n<td align=\"left\">v-if 总是优先于 v-for 生效</td>\n</tr>\n</tbody></table>\n<h3 id=\"v-bind-合并行为\"><a href=\"#v-bind-合并行为\" class=\"headerlink\" title=\"v-bind 合并行为\"></a>v-bind 合并行为</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">如果一个元素同时定义了 v-bind=”object” 和一个相同的独立 attribute，那么这个独立 attribute 总是会覆盖 object 中的绑定（即不分先后）</td>\n<td align=\"left\">如果一个元素同时定义了 v-bind=”object” 和一个相同的独立 attribute，那么绑定的声明顺序将决定它们如何被合并（即后覆盖前）</td>\n</tr>\n</tbody></table>\n<h3 id=\"VNode-生命周期事件\"><a href=\"#VNode-生命周期事件\" class=\"headerlink\" title=\"VNode 生命周期事件\"></a>VNode 生命周期事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">事件来监听组件生命周期,以 hook: 前缀开头，并跟随相应的生命周期钩子的名字</td>\n<td align=\"left\">以 vnode- 前缀开头，事件也可用于 HTML 元素</td>\n</tr>\n</tbody></table>\n<p>举例：vnode- 前缀：@vnode-updated=”onUpdated”；或者在驼峰命名法的情况下附带前缀 vnode：@vnodeUpdated=”onUpdated”；<br>生命周期钩子 beforeDestroy 和 destroyed 已经分别被重命名为 beforeUnmount 和 unmounted，所以相应的事件名也需要更新。</p>\n<p><a href=\"https://v3.cn.vuejs.org/guide/migration/introduction.html\">从vue2迁移官方文档(注意vue3改为默认安装版本后官方文档地址可能发生迁移，该跳转地址可能存在问题)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"生命周期变更\"><a href=\"#生命周期变更\" class=\"headerlink\" title=\"生命周期变更\"></a>生命周期变更</h3><table>\n<thead>\n<tr>\n<th align=\"center\">选项式 API</th>\n<th align=\"center\">Hook inside setup</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">beforeCreate</td>\n<td align=\"center\">Not needed*</td>\n</tr>\n<tr>\n<td align=\"center\">created</td>\n<td align=\"center\">Not needed*</td>\n</tr>\n<tr>\n<td align=\"center\">beforeMount</td>\n<td align=\"center\">onBeforeMount</td>\n</tr>\n<tr>\n<td align=\"center\">mounted</td>\n<td align=\"center\">onMounted</td>\n</tr>\n<tr>\n<td align=\"center\">beforeUpdate</td>\n<td align=\"center\">onBeforeUpdate</td>\n</tr>\n<tr>\n<td align=\"center\">updated</td>\n<td align=\"center\">onUpdated</td>\n</tr>\n<tr>\n<td align=\"center\">beforeUnmount</td>\n<td align=\"center\">onBeforeUnmount</td>\n</tr>\n<tr>\n<td align=\"center\">unmounted</td>\n<td align=\"center\">onUnmounted</td>\n</tr>\n<tr>\n<td align=\"center\">errorCaptured</td>\n<td align=\"center\">onErrorCaptured</td>\n</tr>\n<tr>\n<td align=\"center\">renderTracked</td>\n<td align=\"center\">onRenderTracked</td>\n</tr>\n<tr>\n<td align=\"center\">renderTriggered</td>\n<td align=\"center\">onRenderTriggered</td>\n</tr>\n<tr>\n<td align=\"center\">activated</td>\n<td align=\"center\">onActivated</td>\n</tr>\n<tr>\n<td align=\"center\">deactivated</td>\n<td align=\"center\">onDeactivated</td>\n</tr>\n</tbody></table>\n<h3 id=\"vue3允许组件有多个根节点\"><a href=\"#vue3允许组件有多个根节点\" class=\"headerlink\" title=\"vue3允许组件有多个根节点\"></a>vue3允许组件有多个根节点</h3><h3 id=\"移除过滤器\"><a href=\"#移除过滤器\" class=\"headerlink\" title=\"移除过滤器\"></a>移除过滤器</h3><p>过滤器已移除，且不再支持，建议用计算属性或方法代替过滤器，而不是使用过滤器</p>\n<h3 id=\"template应用挂载变更\"><a href=\"#template应用挂载变更\" class=\"headerlink\" title=\"template应用挂载变更\"></a>template应用挂载变更</h3><p>在 Vue 2.x 中，当挂载一个具有 template 的应用时，被渲染的内容会替换我们要挂载的目标元素。<br>在 Vue 3.x 中，被渲染的应用会作为子元素插入，从而替换目标元素的 innerHTML</p>\n<h3 id=\"过渡的-class-名更改\"><a href=\"#过渡的-class-名更改\" class=\"headerlink\" title=\"过渡的 class 名更改\"></a>过渡的 class 名更改</h3><p>过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from</p>\n<h3 id=\"组件的相关-prop-名称变化\"><a href=\"#组件的相关-prop-名称变化\" class=\"headerlink\" title=\" 组件的相关 prop 名称变化\"></a><transition> 组件的相关 prop 名称变化</transition></h3><p>leave-class 已经被重命名为 leave-from-class (在渲染函数或 JSX 中可以写为：leaveFromClass)<br>enter-class 已经被重命名为 enter-from-class (在渲染函数或 JSX 中可以写为：enterFromClass)</p>\n<h3 id=\"Transition-Group-根元素\"><a href=\"#Transition-Group-根元素\" class=\"headerlink\" title=\"Transition Group 根元素\"></a>Transition Group 根元素</h3><p><transition-group> 不再默认渲染根元素，但仍然可以用 tag attribute 创建根元素，希望保留原效果的，设置 tag=’span’ 即可</transition-group></p>\n<h3 id=\"移除v-on-native修饰符\"><a href=\"#移除v-on-native修饰符\" class=\"headerlink\" title=\"移除v-on.native修饰符\"></a>移除v-on.native修饰符</h3><p>v-on 的 .native 修饰符已被移除。同时，新增的 emits 选项允许子组件定义真正会被触发的事件。因此，对于子组件中未被定义为组件触发的所有事件监听器，Vue 现在将把它们作为原生事件监听器添加到子组件的根元素中 (除非在子组件的选项中设置了 inheritAttrs: false)。</p>\n<h3 id=\"v-if-与-v-for-的优先级变更\"><a href=\"#v-if-与-v-for-的优先级变更\" class=\"headerlink\" title=\"v-if 与 v-for 的优先级变更\"></a>v-if 与 v-for 的优先级变更</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">在一个元素上同时使用 v-if 和 v-for 时，v-for 会优先作用</td>\n<td align=\"left\">v-if 总是优先于 v-for 生效</td>\n</tr>\n</tbody></table>\n<h3 id=\"v-bind-合并行为\"><a href=\"#v-bind-合并行为\" class=\"headerlink\" title=\"v-bind 合并行为\"></a>v-bind 合并行为</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">如果一个元素同时定义了 v-bind=”object” 和一个相同的独立 attribute，那么这个独立 attribute 总是会覆盖 object 中的绑定（即不分先后）</td>\n<td align=\"left\">如果一个元素同时定义了 v-bind=”object” 和一个相同的独立 attribute，那么绑定的声明顺序将决定它们如何被合并（即后覆盖前）</td>\n</tr>\n</tbody></table>\n<h3 id=\"VNode-生命周期事件\"><a href=\"#VNode-生命周期事件\" class=\"headerlink\" title=\"VNode 生命周期事件\"></a>VNode 生命周期事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">事件来监听组件生命周期,以 hook: 前缀开头，并跟随相应的生命周期钩子的名字</td>\n<td align=\"left\">以 vnode- 前缀开头，事件也可用于 HTML 元素</td>\n</tr>\n</tbody></table>\n<p>举例：vnode- 前缀：@vnode-updated=”onUpdated”；或者在驼峰命名法的情况下附带前缀 vnode：@vnodeUpdated=”onUpdated”；<br>生命周期钩子 beforeDestroy 和 destroyed 已经分别被重命名为 beforeUnmount 和 unmounted，所以相应的事件名也需要更新。</p>\n<p><a href=\"https://v3.cn.vuejs.org/guide/migration/introduction.html\">从vue2迁移官方文档(注意vue3改为默认安装版本后官方文档地址可能发生迁移，该跳转地址可能存在问题)</a></p>\n"},{"title":"vue","date":"2022-01-07T09:11:56.000Z","_content":"## VUE 2\n\n### 本部分用于记录vue2相关的文章地址\n暂无\n\n## VUE 3\n\n### 本部分用于记录vue3相关的文章地址\n[2.x迁移到3.x变更点](/vue/change.html)\n[vue3.x生态环境](/vue/dependency.html)","source":"vue/index.md","raw":"---\ntitle: vue\ndate: 2022-01-07 17:11:56\n---\n## VUE 2\n\n### 本部分用于记录vue2相关的文章地址\n暂无\n\n## VUE 3\n\n### 本部分用于记录vue3相关的文章地址\n[2.x迁移到3.x变更点](/vue/change.html)\n[vue3.x生态环境](/vue/dependency.html)","updated":"2022-01-25T10:28:34.167Z","path":"vue/index.html","comments":1,"layout":"page","_id":"cl7k23wt30002vgttdde55sbv","content":"<h2 id=\"VUE-2\"><a href=\"#VUE-2\" class=\"headerlink\" title=\"VUE 2\"></a>VUE 2</h2><h3 id=\"本部分用于记录vue2相关的文章地址\"><a href=\"#本部分用于记录vue2相关的文章地址\" class=\"headerlink\" title=\"本部分用于记录vue2相关的文章地址\"></a>本部分用于记录vue2相关的文章地址</h3><p>暂无</p>\n<h2 id=\"VUE-3\"><a href=\"#VUE-3\" class=\"headerlink\" title=\"VUE 3\"></a>VUE 3</h2><h3 id=\"本部分用于记录vue3相关的文章地址\"><a href=\"#本部分用于记录vue3相关的文章地址\" class=\"headerlink\" title=\"本部分用于记录vue3相关的文章地址\"></a>本部分用于记录vue3相关的文章地址</h3><p><a href=\"/vue/change.html\">2.x迁移到3.x变更点</a><br><a href=\"/vue/dependency.html\">vue3.x生态环境</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"VUE-2\"><a href=\"#VUE-2\" class=\"headerlink\" title=\"VUE 2\"></a>VUE 2</h2><h3 id=\"本部分用于记录vue2相关的文章地址\"><a href=\"#本部分用于记录vue2相关的文章地址\" class=\"headerlink\" title=\"本部分用于记录vue2相关的文章地址\"></a>本部分用于记录vue2相关的文章地址</h3><p>暂无</p>\n<h2 id=\"VUE-3\"><a href=\"#VUE-3\" class=\"headerlink\" title=\"VUE 3\"></a>VUE 3</h2><h3 id=\"本部分用于记录vue3相关的文章地址\"><a href=\"#本部分用于记录vue3相关的文章地址\" class=\"headerlink\" title=\"本部分用于记录vue3相关的文章地址\"></a>本部分用于记录vue3相关的文章地址</h3><p><a href=\"/vue/change.html\">2.x迁移到3.x变更点</a><br><a href=\"/vue/dependency.html\">vue3.x生态环境</a></p>\n"}],"Post":[{"title":"JavaScript设计模式","date":"2022-08-20T06:47:46.000Z","_content":"\n#### 面向对象\n一、面向过程与面向对象\n面向对象编程就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性)与动作（方法)。这个对象我们称之为类。面向对象编程思想其中有一个特点就是封装，就是说把你需要的功能放在一个对象里\n二、封装\n1、使用原型(prototype)为类添加属性和方法的两种方式(**注意两种不能混用**)：\n(1)为原型对象属性赋值\n```javascript\nBook.prototype.display = function() {\n  // ....\n}\n```\n(2)将一个对象赋值给类的原型对象\n```javascript\nBook.prototype = {\n  display = function() {}\n}\n```\n\n2、使用this和原型(prototype)为类添加属性和方法的区别：\n(1)使用this添加的属性和方法是在当前对象上添加的，每次通过类创建新对象时，this指向的属性和方法都会得到相应的创建\n(2)通过prototype继承的属性和方法是每个对象通过prototype访问到的，新创建对象时，不会再新创建属性和方法\n\n3、constructor是什么？\nconstructor是一个属性，当创建一个函数或者对象时都会为其创建一个原型对象prototype，在 prototype对象中又会像函数中创建 this一样创建一个constructor属性，那么constructor属性指向的就是拥有整个原型对象的函数或对象。\n[prototype](prototype.png)\n\n4、属性与方法的封装\n(1)私有属性与私有方法\n由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的,通过此特性创建类的私有变量以及私有方法\n(2)共有属性和共有方法\n在函数内部通过 this创建的属性和方法，在类创建对象时，每个对象自身都拥有一份并且可以在外部访问到。因此通过this创建的属性可看作是对象共有属性和对象共有方法\n(3)特权方法(类的构造器)\n通过this创建的方法，不但可以访问这些对象的共有属性与共有方法，而且还能访问到类（创建时）或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性,因此这些在创建对象时调用的特权方法还可以看作是类的构造器\n[public-and-private](public-and-private.png)\n\n5、在类的外部通过点语法定义的属性和方法以及在外部通过 prototype定义的属性和方法作用\n(1)类的外部通过点语法定义的属性和方法：通过new关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到,所以新创建的对象中无法获取他们，但是可以通过类来使用。因此在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法\n(2)外部通过 prototype定义的属性和方法: 类通过prototype创建的属性或者方法在类实例的对象中是可以通过 this访问到的，所以我们将prototype对象中的属性和方法称为共有属性和共有方法\n[static-and-public](static-and-public.png)\n通过new关键字创建的对象实质是对新对象 this 的不断赋值，并将prototype指向类的prototype所指向的对象，而类的构造函数外面通过点语法定义的属性方法是不会添加到新创建的对象上去的。因此要想在新创建的对象中使用 isChinese就得通过Book类使用而不能通过this，如 Book.isChinese，而类的原型 prototype 上定义的属性在新对象里就可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。\n\n6、闭包\n闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量\n\n7、创建对象的安全模式\nnew关键字的作用可以看作是对当前对象的this不停地赋值,没有用new，所以就会直接执行函数，而函数在全局作用域中执行所以在全局作用域中 this指向的当前对象自然就是全局变量\n[safe-model](safe-model.png)\n\n三、继承\n1、子类的原型对象 - 类式继承\n[class-inherit](class-inherit.png)\n声明2个类而已，类式继承需要将第一个类的实例赋值给第二个类的原型\n类的原型对象的作用就是为类的原型添加共有方法,但类不能直接访问这些属性和方法,必须通过原型prototype来访问。而我们实例化一个父类的时候，新创建的对象复制了父类的构造函数内的属性与方法并且将原型_proto_指向了父类的原型对象，这样就拥有了父类的原型对象上的属性与方法，并且这个新创建的对象可直接访问到父类原型对象上的属性与方法。如果我们将这个新创建的对象赋值给子类的原型，那么子类的原型就可以访问到父类的原型属性和方法。\n新创建的对象不仅仅可以访问父类原型上的属性和方法，同样也可访问从父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型,那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。这是类式继承的原理\n\n(1)可以使用instanceof来检测某个对象是否是某个类的实例，或者说某个对象是否继承了某个类\n注意：instanceof是通过判断对象的 prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构\n**instanceof是判断前面的对象是否是后面类(对象)的实例，它并不表示两者的继承，在实现上面的 subClass 继承superClass时是通过将 superClass的实例赋值给subClass 的原型prototype，所以说SubClass.prototype继承了superClass**\n\n(2)类式继承的缺点\n其一：由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的共有属性要是引用类型，就会在子类中被所有实例共用,因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其他子类\n其二：由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的,因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化\n\n2、创建即继承 - 构造函数继承\n[constructor-inherit](constructor-inherit.png)\nSuperClass.call(this，id);这条语句是构造函数式继承的精华，由于 call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共用，这样就违背了代码复用的原则\n\n3、将优点为我所用 - 组合继承\n(1)类式继承是通过子类的原型prototype对父类实例化来实现的,构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的\n[combination-inherit](combination-inherit.png)\n在子类构造函数中执行父类构造函数，在子类原型上实例化父类就是组合模式\n(2)缺点\n在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。因此父类构造函数调用了两遍\n\n4、洁净的继承者 - 原型式继承\n[prototype-inherit](prototype-inherit.png)\n对类式继承的一个封装，其实其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现的，目的是为了创建要返回的新的实例化对象\n[test-prototype-inherit](test-prototype-inherit.png)\n\n5、如虎添翼 - 寄生式继承\n[parasitic-inherit](parasitic-inherit.png)\n寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展,这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法\n\n6、终极继承者 - 寄生组合式继承\n寄生式继承和构造函数继承\n\n寄生式继承的改造\n[parasitic-inherit-change](parasitic-inherit-change.png)\n\n[parasitic-combination-inherit](parasitic-combination-inherit.png)\n\n[how-to-inherit](how-to-inherit.png)\n\n**子类再想添加原型方法必须通过 prototype.对象，通过点语法的形式一个一个添加方法了，否则直接赋予对象就会覆盖掉从父类原型继承的对象**\n","source":"_posts/about-design-model.md","raw":"---\ntitle: JavaScript设计模式\ndate: 2022-08-20 14:47:46\ntags:\n---\n\n#### 面向对象\n一、面向过程与面向对象\n面向对象编程就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性)与动作（方法)。这个对象我们称之为类。面向对象编程思想其中有一个特点就是封装，就是说把你需要的功能放在一个对象里\n二、封装\n1、使用原型(prototype)为类添加属性和方法的两种方式(**注意两种不能混用**)：\n(1)为原型对象属性赋值\n```javascript\nBook.prototype.display = function() {\n  // ....\n}\n```\n(2)将一个对象赋值给类的原型对象\n```javascript\nBook.prototype = {\n  display = function() {}\n}\n```\n\n2、使用this和原型(prototype)为类添加属性和方法的区别：\n(1)使用this添加的属性和方法是在当前对象上添加的，每次通过类创建新对象时，this指向的属性和方法都会得到相应的创建\n(2)通过prototype继承的属性和方法是每个对象通过prototype访问到的，新创建对象时，不会再新创建属性和方法\n\n3、constructor是什么？\nconstructor是一个属性，当创建一个函数或者对象时都会为其创建一个原型对象prototype，在 prototype对象中又会像函数中创建 this一样创建一个constructor属性，那么constructor属性指向的就是拥有整个原型对象的函数或对象。\n[prototype](prototype.png)\n\n4、属性与方法的封装\n(1)私有属性与私有方法\n由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的,通过此特性创建类的私有变量以及私有方法\n(2)共有属性和共有方法\n在函数内部通过 this创建的属性和方法，在类创建对象时，每个对象自身都拥有一份并且可以在外部访问到。因此通过this创建的属性可看作是对象共有属性和对象共有方法\n(3)特权方法(类的构造器)\n通过this创建的方法，不但可以访问这些对象的共有属性与共有方法，而且还能访问到类（创建时）或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性,因此这些在创建对象时调用的特权方法还可以看作是类的构造器\n[public-and-private](public-and-private.png)\n\n5、在类的外部通过点语法定义的属性和方法以及在外部通过 prototype定义的属性和方法作用\n(1)类的外部通过点语法定义的属性和方法：通过new关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到,所以新创建的对象中无法获取他们，但是可以通过类来使用。因此在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法\n(2)外部通过 prototype定义的属性和方法: 类通过prototype创建的属性或者方法在类实例的对象中是可以通过 this访问到的，所以我们将prototype对象中的属性和方法称为共有属性和共有方法\n[static-and-public](static-and-public.png)\n通过new关键字创建的对象实质是对新对象 this 的不断赋值，并将prototype指向类的prototype所指向的对象，而类的构造函数外面通过点语法定义的属性方法是不会添加到新创建的对象上去的。因此要想在新创建的对象中使用 isChinese就得通过Book类使用而不能通过this，如 Book.isChinese，而类的原型 prototype 上定义的属性在新对象里就可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。\n\n6、闭包\n闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量\n\n7、创建对象的安全模式\nnew关键字的作用可以看作是对当前对象的this不停地赋值,没有用new，所以就会直接执行函数，而函数在全局作用域中执行所以在全局作用域中 this指向的当前对象自然就是全局变量\n[safe-model](safe-model.png)\n\n三、继承\n1、子类的原型对象 - 类式继承\n[class-inherit](class-inherit.png)\n声明2个类而已，类式继承需要将第一个类的实例赋值给第二个类的原型\n类的原型对象的作用就是为类的原型添加共有方法,但类不能直接访问这些属性和方法,必须通过原型prototype来访问。而我们实例化一个父类的时候，新创建的对象复制了父类的构造函数内的属性与方法并且将原型_proto_指向了父类的原型对象，这样就拥有了父类的原型对象上的属性与方法，并且这个新创建的对象可直接访问到父类原型对象上的属性与方法。如果我们将这个新创建的对象赋值给子类的原型，那么子类的原型就可以访问到父类的原型属性和方法。\n新创建的对象不仅仅可以访问父类原型上的属性和方法，同样也可访问从父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型,那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。这是类式继承的原理\n\n(1)可以使用instanceof来检测某个对象是否是某个类的实例，或者说某个对象是否继承了某个类\n注意：instanceof是通过判断对象的 prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构\n**instanceof是判断前面的对象是否是后面类(对象)的实例，它并不表示两者的继承，在实现上面的 subClass 继承superClass时是通过将 superClass的实例赋值给subClass 的原型prototype，所以说SubClass.prototype继承了superClass**\n\n(2)类式继承的缺点\n其一：由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的共有属性要是引用类型，就会在子类中被所有实例共用,因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其他子类\n其二：由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的,因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化\n\n2、创建即继承 - 构造函数继承\n[constructor-inherit](constructor-inherit.png)\nSuperClass.call(this，id);这条语句是构造函数式继承的精华，由于 call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共用，这样就违背了代码复用的原则\n\n3、将优点为我所用 - 组合继承\n(1)类式继承是通过子类的原型prototype对父类实例化来实现的,构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的\n[combination-inherit](combination-inherit.png)\n在子类构造函数中执行父类构造函数，在子类原型上实例化父类就是组合模式\n(2)缺点\n在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。因此父类构造函数调用了两遍\n\n4、洁净的继承者 - 原型式继承\n[prototype-inherit](prototype-inherit.png)\n对类式继承的一个封装，其实其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现的，目的是为了创建要返回的新的实例化对象\n[test-prototype-inherit](test-prototype-inherit.png)\n\n5、如虎添翼 - 寄生式继承\n[parasitic-inherit](parasitic-inherit.png)\n寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展,这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法\n\n6、终极继承者 - 寄生组合式继承\n寄生式继承和构造函数继承\n\n寄生式继承的改造\n[parasitic-inherit-change](parasitic-inherit-change.png)\n\n[parasitic-combination-inherit](parasitic-combination-inherit.png)\n\n[how-to-inherit](how-to-inherit.png)\n\n**子类再想添加原型方法必须通过 prototype.对象，通过点语法的形式一个一个添加方法了，否则直接赋予对象就会覆盖掉从父类原型继承的对象**\n","slug":"about-design-model","published":1,"updated":"2022-08-29T14:10:54.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eubjl10001hgtk95gl9b11","content":"<h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>一、面向过程与面向对象<br>面向对象编程就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性)与动作（方法)。这个对象我们称之为类。面向对象编程思想其中有一个特点就是封装，就是说把你需要的功能放在一个对象里<br>二、封装<br>1、使用原型(prototype)为类添加属性和方法的两种方式(<strong>注意两种不能混用</strong>)：<br>(1)为原型对象属性赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype.display = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2)将一个对象赋值给类的原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype = &#123;</span><br><span class=\"line\">  display = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、使用this和原型(prototype)为类添加属性和方法的区别：<br>(1)使用this添加的属性和方法是在当前对象上添加的，每次通过类创建新对象时，this指向的属性和方法都会得到相应的创建<br>(2)通过prototype继承的属性和方法是每个对象通过prototype访问到的，新创建对象时，不会再新创建属性和方法</p>\n<p>3、constructor是什么？<br>constructor是一个属性，当创建一个函数或者对象时都会为其创建一个原型对象prototype，在 prototype对象中又会像函数中创建 this一样创建一个constructor属性，那么constructor属性指向的就是拥有整个原型对象的函数或对象。<br><a href=\"prototype.png\">prototype</a></p>\n<p>4、属性与方法的封装<br>(1)私有属性与私有方法<br>由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的,通过此特性创建类的私有变量以及私有方法<br>(2)共有属性和共有方法<br>在函数内部通过 this创建的属性和方法，在类创建对象时，每个对象自身都拥有一份并且可以在外部访问到。因此通过this创建的属性可看作是对象共有属性和对象共有方法<br>(3)特权方法(类的构造器)<br>通过this创建的方法，不但可以访问这些对象的共有属性与共有方法，而且还能访问到类（创建时）或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性,因此这些在创建对象时调用的特权方法还可以看作是类的构造器<br><a href=\"public-and-private.png\">public-and-private</a></p>\n<p>5、在类的外部通过点语法定义的属性和方法以及在外部通过 prototype定义的属性和方法作用<br>(1)类的外部通过点语法定义的属性和方法：通过new关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到,所以新创建的对象中无法获取他们，但是可以通过类来使用。因此在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法<br>(2)外部通过 prototype定义的属性和方法: 类通过prototype创建的属性或者方法在类实例的对象中是可以通过 this访问到的，所以我们将prototype对象中的属性和方法称为共有属性和共有方法<br><a href=\"static-and-public.png\">static-and-public</a><br>通过new关键字创建的对象实质是对新对象 this 的不断赋值，并将prototype指向类的prototype所指向的对象，而类的构造函数外面通过点语法定义的属性方法是不会添加到新创建的对象上去的。因此要想在新创建的对象中使用 isChinese就得通过Book类使用而不能通过this，如 Book.isChinese，而类的原型 prototype 上定义的属性在新对象里就可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。</p>\n<p>6、闭包<br>闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量</p>\n<p>7、创建对象的安全模式<br>new关键字的作用可以看作是对当前对象的this不停地赋值,没有用new，所以就会直接执行函数，而函数在全局作用域中执行所以在全局作用域中 this指向的当前对象自然就是全局变量<br><a href=\"safe-model.png\">safe-model</a></p>\n<p>三、继承<br>1、子类的原型对象 - 类式继承<br><a href=\"class-inherit.png\">class-inherit</a><br>声明2个类而已，类式继承需要将第一个类的实例赋值给第二个类的原型<br>类的原型对象的作用就是为类的原型添加共有方法,但类不能直接访问这些属性和方法,必须通过原型prototype来访问。而我们实例化一个父类的时候，新创建的对象复制了父类的构造函数内的属性与方法并且将原型_proto_指向了父类的原型对象，这样就拥有了父类的原型对象上的属性与方法，并且这个新创建的对象可直接访问到父类原型对象上的属性与方法。如果我们将这个新创建的对象赋值给子类的原型，那么子类的原型就可以访问到父类的原型属性和方法。<br>新创建的对象不仅仅可以访问父类原型上的属性和方法，同样也可访问从父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型,那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。这是类式继承的原理</p>\n<p>(1)可以使用instanceof来检测某个对象是否是某个类的实例，或者说某个对象是否继承了某个类<br>注意：instanceof是通过判断对象的 prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构<br><strong>instanceof是判断前面的对象是否是后面类(对象)的实例，它并不表示两者的继承，在实现上面的 subClass 继承superClass时是通过将 superClass的实例赋值给subClass 的原型prototype，所以说SubClass.prototype继承了superClass</strong></p>\n<p>(2)类式继承的缺点<br>其一：由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的共有属性要是引用类型，就会在子类中被所有实例共用,因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其他子类<br>其二：由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的,因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化</p>\n<p>2、创建即继承 - 构造函数继承<br><a href=\"constructor-inherit.png\">constructor-inherit</a><br>SuperClass.call(this，id);这条语句是构造函数式继承的精华，由于 call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共用，这样就违背了代码复用的原则</p>\n<p>3、将优点为我所用 - 组合继承<br>(1)类式继承是通过子类的原型prototype对父类实例化来实现的,构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的<br><a href=\"combination-inherit.png\">combination-inherit</a><br>在子类构造函数中执行父类构造函数，在子类原型上实例化父类就是组合模式<br>(2)缺点<br>在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。因此父类构造函数调用了两遍</p>\n<p>4、洁净的继承者 - 原型式继承<br><a href=\"prototype-inherit.png\">prototype-inherit</a><br>对类式继承的一个封装，其实其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现的，目的是为了创建要返回的新的实例化对象<br><a href=\"test-prototype-inherit.png\">test-prototype-inherit</a></p>\n<p>5、如虎添翼 - 寄生式继承<br><a href=\"parasitic-inherit.png\">parasitic-inherit</a><br>寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展,这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法</p>\n<p>6、终极继承者 - 寄生组合式继承<br>寄生式继承和构造函数继承</p>\n<p>寄生式继承的改造<br><a href=\"parasitic-inherit-change.png\">parasitic-inherit-change</a></p>\n<p><a href=\"parasitic-combination-inherit.png\">parasitic-combination-inherit</a></p>\n<p><a href=\"how-to-inherit.png\">how-to-inherit</a></p>\n<p><strong>子类再想添加原型方法必须通过 prototype.对象，通过点语法的形式一个一个添加方法了，否则直接赋予对象就会覆盖掉从父类原型继承的对象</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>一、面向过程与面向对象<br>面向对象编程就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性)与动作（方法)。这个对象我们称之为类。面向对象编程思想其中有一个特点就是封装，就是说把你需要的功能放在一个对象里<br>二、封装<br>1、使用原型(prototype)为类添加属性和方法的两种方式(<strong>注意两种不能混用</strong>)：<br>(1)为原型对象属性赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype.display = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2)将一个对象赋值给类的原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype = &#123;</span><br><span class=\"line\">  display = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、使用this和原型(prototype)为类添加属性和方法的区别：<br>(1)使用this添加的属性和方法是在当前对象上添加的，每次通过类创建新对象时，this指向的属性和方法都会得到相应的创建<br>(2)通过prototype继承的属性和方法是每个对象通过prototype访问到的，新创建对象时，不会再新创建属性和方法</p>\n<p>3、constructor是什么？<br>constructor是一个属性，当创建一个函数或者对象时都会为其创建一个原型对象prototype，在 prototype对象中又会像函数中创建 this一样创建一个constructor属性，那么constructor属性指向的就是拥有整个原型对象的函数或对象。<br><a href=\"prototype.png\">prototype</a></p>\n<p>4、属性与方法的封装<br>(1)私有属性与私有方法<br>由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的,通过此特性创建类的私有变量以及私有方法<br>(2)共有属性和共有方法<br>在函数内部通过 this创建的属性和方法，在类创建对象时，每个对象自身都拥有一份并且可以在外部访问到。因此通过this创建的属性可看作是对象共有属性和对象共有方法<br>(3)特权方法(类的构造器)<br>通过this创建的方法，不但可以访问这些对象的共有属性与共有方法，而且还能访问到类（创建时）或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性,因此这些在创建对象时调用的特权方法还可以看作是类的构造器<br><a href=\"public-and-private.png\">public-and-private</a></p>\n<p>5、在类的外部通过点语法定义的属性和方法以及在外部通过 prototype定义的属性和方法作用<br>(1)类的外部通过点语法定义的属性和方法：通过new关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到,所以新创建的对象中无法获取他们，但是可以通过类来使用。因此在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法<br>(2)外部通过 prototype定义的属性和方法: 类通过prototype创建的属性或者方法在类实例的对象中是可以通过 this访问到的，所以我们将prototype对象中的属性和方法称为共有属性和共有方法<br><a href=\"static-and-public.png\">static-and-public</a><br>通过new关键字创建的对象实质是对新对象 this 的不断赋值，并将prototype指向类的prototype所指向的对象，而类的构造函数外面通过点语法定义的属性方法是不会添加到新创建的对象上去的。因此要想在新创建的对象中使用 isChinese就得通过Book类使用而不能通过this，如 Book.isChinese，而类的原型 prototype 上定义的属性在新对象里就可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。</p>\n<p>6、闭包<br>闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量</p>\n<p>7、创建对象的安全模式<br>new关键字的作用可以看作是对当前对象的this不停地赋值,没有用new，所以就会直接执行函数，而函数在全局作用域中执行所以在全局作用域中 this指向的当前对象自然就是全局变量<br><a href=\"safe-model.png\">safe-model</a></p>\n<p>三、继承<br>1、子类的原型对象 - 类式继承<br><a href=\"class-inherit.png\">class-inherit</a><br>声明2个类而已，类式继承需要将第一个类的实例赋值给第二个类的原型<br>类的原型对象的作用就是为类的原型添加共有方法,但类不能直接访问这些属性和方法,必须通过原型prototype来访问。而我们实例化一个父类的时候，新创建的对象复制了父类的构造函数内的属性与方法并且将原型_proto_指向了父类的原型对象，这样就拥有了父类的原型对象上的属性与方法，并且这个新创建的对象可直接访问到父类原型对象上的属性与方法。如果我们将这个新创建的对象赋值给子类的原型，那么子类的原型就可以访问到父类的原型属性和方法。<br>新创建的对象不仅仅可以访问父类原型上的属性和方法，同样也可访问从父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型,那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。这是类式继承的原理</p>\n<p>(1)可以使用instanceof来检测某个对象是否是某个类的实例，或者说某个对象是否继承了某个类<br>注意：instanceof是通过判断对象的 prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构<br><strong>instanceof是判断前面的对象是否是后面类(对象)的实例，它并不表示两者的继承，在实现上面的 subClass 继承superClass时是通过将 superClass的实例赋值给subClass 的原型prototype，所以说SubClass.prototype继承了superClass</strong></p>\n<p>(2)类式继承的缺点<br>其一：由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的共有属性要是引用类型，就会在子类中被所有实例共用,因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其他子类<br>其二：由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的,因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化</p>\n<p>2、创建即继承 - 构造函数继承<br><a href=\"constructor-inherit.png\">constructor-inherit</a><br>SuperClass.call(this，id);这条语句是构造函数式继承的精华，由于 call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共用，这样就违背了代码复用的原则</p>\n<p>3、将优点为我所用 - 组合继承<br>(1)类式继承是通过子类的原型prototype对父类实例化来实现的,构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的<br><a href=\"combination-inherit.png\">combination-inherit</a><br>在子类构造函数中执行父类构造函数，在子类原型上实例化父类就是组合模式<br>(2)缺点<br>在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。因此父类构造函数调用了两遍</p>\n<p>4、洁净的继承者 - 原型式继承<br><a href=\"prototype-inherit.png\">prototype-inherit</a><br>对类式继承的一个封装，其实其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现的，目的是为了创建要返回的新的实例化对象<br><a href=\"test-prototype-inherit.png\">test-prototype-inherit</a></p>\n<p>5、如虎添翼 - 寄生式继承<br><a href=\"parasitic-inherit.png\">parasitic-inherit</a><br>寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展,这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法</p>\n<p>6、终极继承者 - 寄生组合式继承<br>寄生式继承和构造函数继承</p>\n<p>寄生式继承的改造<br><a href=\"parasitic-inherit-change.png\">parasitic-inherit-change</a></p>\n<p><a href=\"parasitic-combination-inherit.png\">parasitic-combination-inherit</a></p>\n<p><a href=\"how-to-inherit.png\">how-to-inherit</a></p>\n<p><strong>子类再想添加原型方法必须通过 prototype.对象，通过点语法的形式一个一个添加方法了，否则直接赋予对象就会覆盖掉从父类原型继承的对象</strong></p>\n"},{"title":"javascript DOM编程艺术阅读笔记","date":"2022-07-31T05:42:45.000Z","_content":"\n#### JavaScript简史\n1、DOM\nDOM是一套对文档的内容进行抽象和概念化的方法。\n\n第0级DOM(DOM Level 0)\n试验性质的初级DOM，在还未形成统一标准的初期阶段，“第0级DOM”的常见用途是翻转图片和验证表单数据。\n\n第1级DMO(DOM Level 1)\nNetscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”(DOM Level 1) 。\n\n2、浏览器战争\n2.1 DHTML\nDHTML是“Dynamic HTML”(动态HTML)的简称。DHTML并不是一项新技术，而是描述HTML、CSS和.JavaScript技术组合的术语。背后含义:\n(1)利用HTML把网页标记为各种元素;\n(2)利用CSS设置元素样式和它们的显示位置;\n(3)利用JavaScript实时地操控页面和改变样式。\n\n#### JavaScript语法\n循环语句\n1、while循环\n```javascript\nwhile (condition){\n  statements;\n}\n```\ndo...while循环\n```javascript\ndo {\n  statements;\n} while (condition);\n```\n  2、for循环\n```javascript\nfor (initial condition; test condition; alter condition){\n  statements;\n}\n```\n\n函数\n1、变量的作用域\n全局变量(global variable)可以在脚本中的任何位置被引用。一旦你在某个脚本里声明了一个全局变量，就可以从这个脚本中的任何位置―一包括函数内部—―引用它。全局变量的作用域是整个脚本。\n局部变量(local variable）只存在于声明它的那个函数的内部，在那个函数的外部是无法引用它的。局部变量的作用域仅限于某个特定的函数。\n\n对象\n对象（object）是一种非常重要的数据类型，但此前我们还没有认真对待它。对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性（property)和方法(method) :\n-属性是隶属于某个特定对象的变量\n-方法是只有某个特定对象才能调用的函数\n对象就是由一些属性和方法组合在一起而构成的一个数据实体\n\n1、用户定义对象(user-defined object)\n由程序员自行创建的对象\n\n2、内建对象(native object)\nJavaScript提供了一系列预先定义好的对象，这些可以拿来就用的对象称为内建对象( native object) \nArray、Math、Date等\n\n3、宿主对象(host object)\n由浏览器提供的预定义对象被称为宿主对象(host object ) \n宿主对象包括document、Form、Image和Element等。我们可以通过这些对象获得关于网页上表单、图像和各种表单元素等信息\n\n#### DOM\n1、文档:DOM中的'D'\n如果没有document(文档），DOM也就无从谈起。当创建了一个网页并把它加载到Web浏览器中时，DOM就在幕后悄然而生。它把你编写的网页文档转换为一个文档对象\n\n2、对象:DOM中的'O'\n如上对象\n\n3、模型:DOM中的'M'\nDOM中的“M”代表着“Model”(模型)，但说它代表着“Map”(地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表着一列真正的火车、一张城市街道图代表着一个实际存在的城市那样，DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型)，可以通过JavaScript去读取这张地图\n\n4、节点\n(1)元素节点\n(2)文本节点\n(3)属性节点\n(4)CSS\n(5)获取元素\n-getElementById 返回一个对象\n-getElementsByTagName 返回一个对象数组，使用通配符（*）获取文档中总共有多少元素节点\n```javascript\nvar shopping = document.getElementById(\"purchases\") ;\nvar items = shopping.getElementsByTagName(\"*\") ;\n```\n-getElementsByClassName 返回一个对象数组\n使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可\n注意，即使在元素的class属性中，类名的顺序和参数中指定的不一样，也照样会匹配该元素。不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。\n```javascript\nvar shopping = document.getElementById(\"purchases\");\nvar sales = shopping.getElementsByClassName(\"sale\");\n```\n\n5、获取和设置属性\n(1)getAttribute 只能通过元素节点调用\n(2)setAttribute 只能通过元素节点调用，修改属性值\n细节:通过setAttribute对文档做出修改后，在通过浏览器的viewsource(查看源代码）选项去查看文档的源代码时看到的仍将是改变前的属性值，也就是说，setAttribute做出的修改不会反映在文档本身的源代码里。这种“表里不一”的现象源自DOM的工作模式:先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。这正是DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。\n\n#### 案例研究：JavaScript图片库\nDOM是一种适用于多种环境和多种程序设计语言的通用型API。如果想把DOM技巧运用在Web浏览器以外的应用环境里，严格遵守“第1级DOM”能够避免与兼容性有关的任何问题。\n1、childNodes属性 用来获取任何一个元素的所有子元素\n2、nodeType属性 共有12中可取值\n以下3种具有实用价值：\n-元素节点的nodeType属性值是1\n-属性节点的nodeType属性值是2\n-文本节点的nodeType属性值是3\n3、nodeValue属性 得到和设置节点的值\n4、firstChild和lastChild\n\n#### 最佳实践\n1、平稳退化\n平稳退化(graceful degradation)，虽然某些功能无法使用，但最基本的操作仍能顺利完成\n2、“javascript:”伪协议\n“真”协议用来在因特网上的计算机之间传输数据包，如HTTP协议(http://) 、FTP协议（ftp://)等，伪协议则是一种非标准化的协议\n“javascript:”伪协议让我们通过一个链接来调用JavaScript函数\n```javascript\n<a href=\"javascript:popUp('http://www.example.com/');\">Example</a>\n```\n3、CSS\n结构与样式分离\n渐进增强，用一些额外的信息层去包裹原始数据\n4、分离javascript\n5、向后兼容\n(1)对象检测：检测浏览器对JavaScript的支持程度\n(2)浏览器嗅探技术\n通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。\n首先，浏览器有时会“撒谎”。因为历史原因，有些浏览器会把自己报告为另外一种浏览器，还有一些浏览器允许用户任意修改这些信息\n其次，为了适用于多种不同的浏览器，浏览器嗅探脚本会变得越来越复杂。如果想让浏览器嗅探脚本能够跨平台工作，就必须测试所有可能出现的供应商和版本号组合。这是一个无穷尽的任务，测试的组合情况越多，代码就越复杂和冗长\n最后，许多浏览器嗅探脚本在进行这类测试时要求浏览器的版本号必须得到精确的匹配。因此，每当市场上出现新版本时，就不得不修改这些脚本\n6、性能考虑\n(1)尽量少访问DOM和尽量减少标记\n(2)合并和放置脚本\n多个脚本合并，减少请求次数\n把所有/<script/>标签都放到文档的末尾，/</body/>标记之前，就可以让页面变得更快\n(3)压缩脚本\n压缩工具：\n-Douglas Crockford的JSMin (http://www.crockford.com/javascript/jsmin.html)\n-雅虎的YUI Compressor (http://developer.yahoo.com/yui/compressor)\n-谷歌的Closure Compiler (http://closure-compiler.appspot.com/home)\n\n#### 动态创建标记\n1、document.write & innerHTML属性\n2、DOM方法\n(1)createElement\n(1)appendChild\n(1)createTextNode\n(1)insertBefore\n3、Ajax\n(1)XMLHttpRequest对象\n```javascript\nfunction getHTTPObject () {\n  if (typeof XMLHttpRequest == \"undefined\") xMLHttpRequest =function () {\n    try { return new Activexobject ( \"Msxm12.XMLHTTP.6.0\"); )catch (e) { }\n    try { return new ActivexObject (\"Msxm12.XMLHTTP.3.0\");)catch (e) { }\n    try { return new ActivexObject ( \"Msxm12.XMLHTTP\"); )catch (e) { }\n    return false;\n  }\n  return new XMLHttpRequest ( ) ;\n}\n```\n\nXHTML5\n本质上是使用严格的XML规则编写的HTML5。从技术角度说，Web浏览器应该将任何XHTML5文档都视为XML文档，而不是HTML文档。而在现实中，你还得在文档的头部发送正确的MIME类型，即application/xhtml+xml。有些浏览器不认识这个MIME类型，因而一般要在服务器端对浏览器进行探查后再发送。否则最坏的情况，页面很可能根本不会在浏览器中呈现。因此，绝大多数XHTML页面仍然是以HTML类型发送的。\n\n#### CSS-DOM\n1、三位一体的网页\n(1)结构层\n网页的结构层(structural layer)由HTML或XHTML之类的标记语言负责创建\n(2)表示层\n表示层(presentation layer)由CSS负责完成。CSS描述页面内容应该如何呈现\n(3)行为层\n行为层(behavior layer)负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM主宰的领域\n(4)分离\n-使用(X)HTML去搭建文档的结构\n-使用CSS去设置文档的呈现效果\n-使用DOM脚本去实现文档的行为\n2、style属性\n在外部样式表里声明的样式不会进入style对象，在文档的<head>部分里声明的样式也是如此\nstyle对象只包含在HTML代码里用style属性声明的样式\n3、何时该使用DOM脚本设置样式\n(1)根据元素在节点树里的位置来设置样式\n(2)根据某种条件反复设置某种样式\n(3)响应事件\n4、className属性\n\n#### HTML5\n1、canvas\n2、video和audio\n\n疑问点：\n1、遇到的知识点觉得掌握了，没有记录，后面又忘了\n重要的知识点都记录，不管有没有掌握\n2、任务拆分评估时间不准\n更深入的了解项目代码和业务逻辑\n3、看书遇到问题的时候，先记录继续阅读，还是先解决问题在阅读？\n先记录继续阅读，看后面是否有解答\n4、原型链\n不建议研究__proto__这种知识点，可以看看es6中新的关于原型链的继承\n理解知识的时候，不要添加太多概念，避免混乱","source":"_posts/about-dom.md","raw":"---\ntitle: javascript DOM编程艺术阅读笔记\ndate: 2022-07-31 13:42:45\ntags:\n---\n\n#### JavaScript简史\n1、DOM\nDOM是一套对文档的内容进行抽象和概念化的方法。\n\n第0级DOM(DOM Level 0)\n试验性质的初级DOM，在还未形成统一标准的初期阶段，“第0级DOM”的常见用途是翻转图片和验证表单数据。\n\n第1级DMO(DOM Level 1)\nNetscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”(DOM Level 1) 。\n\n2、浏览器战争\n2.1 DHTML\nDHTML是“Dynamic HTML”(动态HTML)的简称。DHTML并不是一项新技术，而是描述HTML、CSS和.JavaScript技术组合的术语。背后含义:\n(1)利用HTML把网页标记为各种元素;\n(2)利用CSS设置元素样式和它们的显示位置;\n(3)利用JavaScript实时地操控页面和改变样式。\n\n#### JavaScript语法\n循环语句\n1、while循环\n```javascript\nwhile (condition){\n  statements;\n}\n```\ndo...while循环\n```javascript\ndo {\n  statements;\n} while (condition);\n```\n  2、for循环\n```javascript\nfor (initial condition; test condition; alter condition){\n  statements;\n}\n```\n\n函数\n1、变量的作用域\n全局变量(global variable)可以在脚本中的任何位置被引用。一旦你在某个脚本里声明了一个全局变量，就可以从这个脚本中的任何位置―一包括函数内部—―引用它。全局变量的作用域是整个脚本。\n局部变量(local variable）只存在于声明它的那个函数的内部，在那个函数的外部是无法引用它的。局部变量的作用域仅限于某个特定的函数。\n\n对象\n对象（object）是一种非常重要的数据类型，但此前我们还没有认真对待它。对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性（property)和方法(method) :\n-属性是隶属于某个特定对象的变量\n-方法是只有某个特定对象才能调用的函数\n对象就是由一些属性和方法组合在一起而构成的一个数据实体\n\n1、用户定义对象(user-defined object)\n由程序员自行创建的对象\n\n2、内建对象(native object)\nJavaScript提供了一系列预先定义好的对象，这些可以拿来就用的对象称为内建对象( native object) \nArray、Math、Date等\n\n3、宿主对象(host object)\n由浏览器提供的预定义对象被称为宿主对象(host object ) \n宿主对象包括document、Form、Image和Element等。我们可以通过这些对象获得关于网页上表单、图像和各种表单元素等信息\n\n#### DOM\n1、文档:DOM中的'D'\n如果没有document(文档），DOM也就无从谈起。当创建了一个网页并把它加载到Web浏览器中时，DOM就在幕后悄然而生。它把你编写的网页文档转换为一个文档对象\n\n2、对象:DOM中的'O'\n如上对象\n\n3、模型:DOM中的'M'\nDOM中的“M”代表着“Model”(模型)，但说它代表着“Map”(地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表着一列真正的火车、一张城市街道图代表着一个实际存在的城市那样，DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型)，可以通过JavaScript去读取这张地图\n\n4、节点\n(1)元素节点\n(2)文本节点\n(3)属性节点\n(4)CSS\n(5)获取元素\n-getElementById 返回一个对象\n-getElementsByTagName 返回一个对象数组，使用通配符（*）获取文档中总共有多少元素节点\n```javascript\nvar shopping = document.getElementById(\"purchases\") ;\nvar items = shopping.getElementsByTagName(\"*\") ;\n```\n-getElementsByClassName 返回一个对象数组\n使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可\n注意，即使在元素的class属性中，类名的顺序和参数中指定的不一样，也照样会匹配该元素。不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。\n```javascript\nvar shopping = document.getElementById(\"purchases\");\nvar sales = shopping.getElementsByClassName(\"sale\");\n```\n\n5、获取和设置属性\n(1)getAttribute 只能通过元素节点调用\n(2)setAttribute 只能通过元素节点调用，修改属性值\n细节:通过setAttribute对文档做出修改后，在通过浏览器的viewsource(查看源代码）选项去查看文档的源代码时看到的仍将是改变前的属性值，也就是说，setAttribute做出的修改不会反映在文档本身的源代码里。这种“表里不一”的现象源自DOM的工作模式:先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。这正是DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。\n\n#### 案例研究：JavaScript图片库\nDOM是一种适用于多种环境和多种程序设计语言的通用型API。如果想把DOM技巧运用在Web浏览器以外的应用环境里，严格遵守“第1级DOM”能够避免与兼容性有关的任何问题。\n1、childNodes属性 用来获取任何一个元素的所有子元素\n2、nodeType属性 共有12中可取值\n以下3种具有实用价值：\n-元素节点的nodeType属性值是1\n-属性节点的nodeType属性值是2\n-文本节点的nodeType属性值是3\n3、nodeValue属性 得到和设置节点的值\n4、firstChild和lastChild\n\n#### 最佳实践\n1、平稳退化\n平稳退化(graceful degradation)，虽然某些功能无法使用，但最基本的操作仍能顺利完成\n2、“javascript:”伪协议\n“真”协议用来在因特网上的计算机之间传输数据包，如HTTP协议(http://) 、FTP协议（ftp://)等，伪协议则是一种非标准化的协议\n“javascript:”伪协议让我们通过一个链接来调用JavaScript函数\n```javascript\n<a href=\"javascript:popUp('http://www.example.com/');\">Example</a>\n```\n3、CSS\n结构与样式分离\n渐进增强，用一些额外的信息层去包裹原始数据\n4、分离javascript\n5、向后兼容\n(1)对象检测：检测浏览器对JavaScript的支持程度\n(2)浏览器嗅探技术\n通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。\n首先，浏览器有时会“撒谎”。因为历史原因，有些浏览器会把自己报告为另外一种浏览器，还有一些浏览器允许用户任意修改这些信息\n其次，为了适用于多种不同的浏览器，浏览器嗅探脚本会变得越来越复杂。如果想让浏览器嗅探脚本能够跨平台工作，就必须测试所有可能出现的供应商和版本号组合。这是一个无穷尽的任务，测试的组合情况越多，代码就越复杂和冗长\n最后，许多浏览器嗅探脚本在进行这类测试时要求浏览器的版本号必须得到精确的匹配。因此，每当市场上出现新版本时，就不得不修改这些脚本\n6、性能考虑\n(1)尽量少访问DOM和尽量减少标记\n(2)合并和放置脚本\n多个脚本合并，减少请求次数\n把所有/<script/>标签都放到文档的末尾，/</body/>标记之前，就可以让页面变得更快\n(3)压缩脚本\n压缩工具：\n-Douglas Crockford的JSMin (http://www.crockford.com/javascript/jsmin.html)\n-雅虎的YUI Compressor (http://developer.yahoo.com/yui/compressor)\n-谷歌的Closure Compiler (http://closure-compiler.appspot.com/home)\n\n#### 动态创建标记\n1、document.write & innerHTML属性\n2、DOM方法\n(1)createElement\n(1)appendChild\n(1)createTextNode\n(1)insertBefore\n3、Ajax\n(1)XMLHttpRequest对象\n```javascript\nfunction getHTTPObject () {\n  if (typeof XMLHttpRequest == \"undefined\") xMLHttpRequest =function () {\n    try { return new Activexobject ( \"Msxm12.XMLHTTP.6.0\"); )catch (e) { }\n    try { return new ActivexObject (\"Msxm12.XMLHTTP.3.0\");)catch (e) { }\n    try { return new ActivexObject ( \"Msxm12.XMLHTTP\"); )catch (e) { }\n    return false;\n  }\n  return new XMLHttpRequest ( ) ;\n}\n```\n\nXHTML5\n本质上是使用严格的XML规则编写的HTML5。从技术角度说，Web浏览器应该将任何XHTML5文档都视为XML文档，而不是HTML文档。而在现实中，你还得在文档的头部发送正确的MIME类型，即application/xhtml+xml。有些浏览器不认识这个MIME类型，因而一般要在服务器端对浏览器进行探查后再发送。否则最坏的情况，页面很可能根本不会在浏览器中呈现。因此，绝大多数XHTML页面仍然是以HTML类型发送的。\n\n#### CSS-DOM\n1、三位一体的网页\n(1)结构层\n网页的结构层(structural layer)由HTML或XHTML之类的标记语言负责创建\n(2)表示层\n表示层(presentation layer)由CSS负责完成。CSS描述页面内容应该如何呈现\n(3)行为层\n行为层(behavior layer)负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM主宰的领域\n(4)分离\n-使用(X)HTML去搭建文档的结构\n-使用CSS去设置文档的呈现效果\n-使用DOM脚本去实现文档的行为\n2、style属性\n在外部样式表里声明的样式不会进入style对象，在文档的<head>部分里声明的样式也是如此\nstyle对象只包含在HTML代码里用style属性声明的样式\n3、何时该使用DOM脚本设置样式\n(1)根据元素在节点树里的位置来设置样式\n(2)根据某种条件反复设置某种样式\n(3)响应事件\n4、className属性\n\n#### HTML5\n1、canvas\n2、video和audio\n\n疑问点：\n1、遇到的知识点觉得掌握了，没有记录，后面又忘了\n重要的知识点都记录，不管有没有掌握\n2、任务拆分评估时间不准\n更深入的了解项目代码和业务逻辑\n3、看书遇到问题的时候，先记录继续阅读，还是先解决问题在阅读？\n先记录继续阅读，看后面是否有解答\n4、原型链\n不建议研究__proto__这种知识点，可以看看es6中新的关于原型链的继承\n理解知识的时候，不要添加太多概念，避免混乱","slug":"about-dom","published":1,"updated":"2022-08-29T14:11:06.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eubjl90003hgtkfwx6etbr","content":"<h4 id=\"JavaScript简史\"><a href=\"#JavaScript简史\" class=\"headerlink\" title=\"JavaScript简史\"></a>JavaScript简史</h4><p>1、DOM<br>DOM是一套对文档的内容进行抽象和概念化的方法。</p>\n<p>第0级DOM(DOM Level 0)<br>试验性质的初级DOM，在还未形成统一标准的初期阶段，“第0级DOM”的常见用途是翻转图片和验证表单数据。</p>\n<p>第1级DMO(DOM Level 1)<br>Netscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”(DOM Level 1) 。</p>\n<p>2、浏览器战争<br>2.1 DHTML<br>DHTML是“Dynamic HTML”(动态HTML)的简称。DHTML并不是一项新技术，而是描述HTML、CSS和.JavaScript技术组合的术语。背后含义:<br>(1)利用HTML把网页标记为各种元素;<br>(2)利用CSS设置元素样式和它们的显示位置;<br>(3)利用JavaScript实时地操控页面和改变样式。</p>\n<h4 id=\"JavaScript语法\"><a href=\"#JavaScript语法\" class=\"headerlink\" title=\"JavaScript语法\"></a>JavaScript语法</h4><p>循环语句<br>1、while循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (condition)&#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>do…while循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (condition);</span><br></pre></td></tr></table></figure>\n<p>  2、for循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (initial condition; test condition; alter condition)&#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数<br>1、变量的作用域<br>全局变量(global variable)可以在脚本中的任何位置被引用。一旦你在某个脚本里声明了一个全局变量，就可以从这个脚本中的任何位置―一包括函数内部—―引用它。全局变量的作用域是整个脚本。<br>局部变量(local variable）只存在于声明它的那个函数的内部，在那个函数的外部是无法引用它的。局部变量的作用域仅限于某个特定的函数。</p>\n<p>对象<br>对象（object）是一种非常重要的数据类型，但此前我们还没有认真对待它。对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性（property)和方法(method) :<br>-属性是隶属于某个特定对象的变量<br>-方法是只有某个特定对象才能调用的函数<br>对象就是由一些属性和方法组合在一起而构成的一个数据实体</p>\n<p>1、用户定义对象(user-defined object)<br>由程序员自行创建的对象</p>\n<p>2、内建对象(native object)<br>JavaScript提供了一系列预先定义好的对象，这些可以拿来就用的对象称为内建对象( native object)<br>Array、Math、Date等</p>\n<p>3、宿主对象(host object)<br>由浏览器提供的预定义对象被称为宿主对象(host object )<br>宿主对象包括document、Form、Image和Element等。我们可以通过这些对象获得关于网页上表单、图像和各种表单元素等信息</p>\n<h4 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h4><p>1、文档:DOM中的’D’<br>如果没有document(文档），DOM也就无从谈起。当创建了一个网页并把它加载到Web浏览器中时，DOM就在幕后悄然而生。它把你编写的网页文档转换为一个文档对象</p>\n<p>2、对象:DOM中的’O’<br>如上对象</p>\n<p>3、模型:DOM中的’M’<br>DOM中的“M”代表着“Model”(模型)，但说它代表着“Map”(地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表着一列真正的火车、一张城市街道图代表着一个实际存在的城市那样，DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型)，可以通过JavaScript去读取这张地图</p>\n<p>4、节点<br>(1)元素节点<br>(2)文本节点<br>(3)属性节点<br>(4)CSS<br>(5)获取元素<br>-getElementById 返回一个对象<br>-getElementsByTagName 返回一个对象数组，使用通配符（*）获取文档中总共有多少元素节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shopping = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;purchases&quot;</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> items = shopping.getElementsByTagName(<span class=\"string\">&quot;*&quot;</span>) ;</span><br></pre></td></tr></table></figure>\n<p>-getElementsByClassName 返回一个对象数组<br>使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可<br>注意，即使在元素的class属性中，类名的顺序和参数中指定的不一样，也照样会匹配该元素。不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shopping = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;purchases&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sales = shopping.getElementsByClassName(<span class=\"string\">&quot;sale&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>5、获取和设置属性<br>(1)getAttribute 只能通过元素节点调用<br>(2)setAttribute 只能通过元素节点调用，修改属性值<br>细节:通过setAttribute对文档做出修改后，在通过浏览器的viewsource(查看源代码）选项去查看文档的源代码时看到的仍将是改变前的属性值，也就是说，setAttribute做出的修改不会反映在文档本身的源代码里。这种“表里不一”的现象源自DOM的工作模式:先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。这正是DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。</p>\n<h4 id=\"案例研究：JavaScript图片库\"><a href=\"#案例研究：JavaScript图片库\" class=\"headerlink\" title=\"案例研究：JavaScript图片库\"></a>案例研究：JavaScript图片库</h4><p>DOM是一种适用于多种环境和多种程序设计语言的通用型API。如果想把DOM技巧运用在Web浏览器以外的应用环境里，严格遵守“第1级DOM”能够避免与兼容性有关的任何问题。<br>1、childNodes属性 用来获取任何一个元素的所有子元素<br>2、nodeType属性 共有12中可取值<br>以下3种具有实用价值：<br>-元素节点的nodeType属性值是1<br>-属性节点的nodeType属性值是2<br>-文本节点的nodeType属性值是3<br>3、nodeValue属性 得到和设置节点的值<br>4、firstChild和lastChild</p>\n<h4 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h4><p>1、平稳退化<br>平稳退化(graceful degradation)，虽然某些功能无法使用，但最基本的操作仍能顺利完成<br>2、“javascript:”伪协议<br>“真”协议用来在因特网上的计算机之间传输数据包，如HTTP协议(http://) 、FTP协议（ftp://)等，伪协议则是一种非标准化的协议<br>“javascript:”伪协议让我们通过一个链接来调用JavaScript函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">&quot;javascript:popUp(&#x27;http://www.example.com/&#x27;);&quot;</span>&gt;Example&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>3、CSS<br>结构与样式分离<br>渐进增强，用一些额外的信息层去包裹原始数据<br>4、分离javascript<br>5、向后兼容<br>(1)对象检测：检测浏览器对JavaScript的支持程度<br>(2)浏览器嗅探技术<br>通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。<br>首先，浏览器有时会“撒谎”。因为历史原因，有些浏览器会把自己报告为另外一种浏览器，还有一些浏览器允许用户任意修改这些信息<br>其次，为了适用于多种不同的浏览器，浏览器嗅探脚本会变得越来越复杂。如果想让浏览器嗅探脚本能够跨平台工作，就必须测试所有可能出现的供应商和版本号组合。这是一个无穷尽的任务，测试的组合情况越多，代码就越复杂和冗长<br>最后，许多浏览器嗅探脚本在进行这类测试时要求浏览器的版本号必须得到精确的匹配。因此，每当市场上出现新版本时，就不得不修改这些脚本<br>6、性能考虑<br>(1)尽量少访问DOM和尽量减少标记<br>(2)合并和放置脚本<br>多个脚本合并，减少请求次数<br>把所有/<script>标签都放到文档的末尾，/&lt;/body/&gt;标记之前，就可以让页面变得更快<br>(3)压缩脚本<br>压缩工具：<br>-Douglas Crockford的JSMin (<a href=\"http://www.crockford.com/javascript/jsmin.html\">http://www.crockford.com/javascript/jsmin.html</a>)<br>-雅虎的YUI Compressor (<a href=\"http://developer.yahoo.com/yui/compressor\">http://developer.yahoo.com/yui/compressor</a>)<br>-谷歌的Closure Compiler (<a href=\"http://closure-compiler.appspot.com/home\">http://closure-compiler.appspot.com/home</a>)</p>\n<h4 id=\"动态创建标记\"><a href=\"#动态创建标记\" class=\"headerlink\" title=\"动态创建标记\"></a>动态创建标记</h4><p>1、document.write &amp; innerHTML属性<br>2、DOM方法<br>(1)createElement<br>(1)appendChild<br>(1)createTextNode<br>(1)insertBefore<br>3、Ajax<br>(1)XMLHttpRequest对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHTTPObject</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> XMLHttpRequest == <span class=\"string\">&quot;undefined&quot;</span>) xMLHttpRequest =<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Activexobject ( <span class=\"string\">&quot;Msxm12.XMLHTTP.6.0&quot;</span>); )<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivexObject (<span class=\"string\">&quot;Msxm12.XMLHTTP.3.0&quot;</span>);)<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivexObject ( <span class=\"string\">&quot;Msxm12.XMLHTTP&quot;</span>); )<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XMLHttpRequest ( ) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>XHTML5<br>本质上是使用严格的XML规则编写的HTML5。从技术角度说，Web浏览器应该将任何XHTML5文档都视为XML文档，而不是HTML文档。而在现实中，你还得在文档的头部发送正确的MIME类型，即application/xhtml+xml。有些浏览器不认识这个MIME类型，因而一般要在服务器端对浏览器进行探查后再发送。否则最坏的情况，页面很可能根本不会在浏览器中呈现。因此，绝大多数XHTML页面仍然是以HTML类型发送的。</p>\n<h4 id=\"CSS-DOM\"><a href=\"#CSS-DOM\" class=\"headerlink\" title=\"CSS-DOM\"></a>CSS-DOM</h4><p>1、三位一体的网页<br>(1)结构层<br>网页的结构层(structural layer)由HTML或XHTML之类的标记语言负责创建<br>(2)表示层<br>表示层(presentation layer)由CSS负责完成。CSS描述页面内容应该如何呈现<br>(3)行为层<br>行为层(behavior layer)负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM主宰的领域<br>(4)分离<br>-使用(X)HTML去搭建文档的结构<br>-使用CSS去设置文档的呈现效果<br>-使用DOM脚本去实现文档的行为<br>2、style属性<br>在外部样式表里声明的样式不会进入style对象，在文档的<head>部分里声明的样式也是如此<br>style对象只包含在HTML代码里用style属性声明的样式<br>3、何时该使用DOM脚本设置样式<br>(1)根据元素在节点树里的位置来设置样式<br>(2)根据某种条件反复设置某种样式<br>(3)响应事件<br>4、className属性</p>\n<h4 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h4><p>1、canvas<br>2、video和audio</p>\n<p>疑问点：<br>1、遇到的知识点觉得掌握了，没有记录，后面又忘了<br>重要的知识点都记录，不管有没有掌握<br>2、任务拆分评估时间不准<br>更深入的了解项目代码和业务逻辑<br>3、看书遇到问题的时候，先记录继续阅读，还是先解决问题在阅读？<br>先记录继续阅读，看后面是否有解答<br>4、原型链<br>不建议研究__proto__这种知识点，可以看看es6中新的关于原型链的继承<br>理解知识的时候，不要添加太多概念，避免混乱</p>\n</script></p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"JavaScript简史\"><a href=\"#JavaScript简史\" class=\"headerlink\" title=\"JavaScript简史\"></a>JavaScript简史</h4><p>1、DOM<br>DOM是一套对文档的内容进行抽象和概念化的方法。</p>\n<p>第0级DOM(DOM Level 0)<br>试验性质的初级DOM，在还未形成统一标准的初期阶段，“第0级DOM”的常见用途是翻转图片和验证表单数据。</p>\n<p>第1级DMO(DOM Level 1)<br>Netscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”(DOM Level 1) 。</p>\n<p>2、浏览器战争<br>2.1 DHTML<br>DHTML是“Dynamic HTML”(动态HTML)的简称。DHTML并不是一项新技术，而是描述HTML、CSS和.JavaScript技术组合的术语。背后含义:<br>(1)利用HTML把网页标记为各种元素;<br>(2)利用CSS设置元素样式和它们的显示位置;<br>(3)利用JavaScript实时地操控页面和改变样式。</p>\n<h4 id=\"JavaScript语法\"><a href=\"#JavaScript语法\" class=\"headerlink\" title=\"JavaScript语法\"></a>JavaScript语法</h4><p>循环语句<br>1、while循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (condition)&#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>do…while循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (condition);</span><br></pre></td></tr></table></figure>\n<p>  2、for循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (initial condition; test condition; alter condition)&#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数<br>1、变量的作用域<br>全局变量(global variable)可以在脚本中的任何位置被引用。一旦你在某个脚本里声明了一个全局变量，就可以从这个脚本中的任何位置―一包括函数内部—―引用它。全局变量的作用域是整个脚本。<br>局部变量(local variable）只存在于声明它的那个函数的内部，在那个函数的外部是无法引用它的。局部变量的作用域仅限于某个特定的函数。</p>\n<p>对象<br>对象（object）是一种非常重要的数据类型，但此前我们还没有认真对待它。对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性（property)和方法(method) :<br>-属性是隶属于某个特定对象的变量<br>-方法是只有某个特定对象才能调用的函数<br>对象就是由一些属性和方法组合在一起而构成的一个数据实体</p>\n<p>1、用户定义对象(user-defined object)<br>由程序员自行创建的对象</p>\n<p>2、内建对象(native object)<br>JavaScript提供了一系列预先定义好的对象，这些可以拿来就用的对象称为内建对象( native object)<br>Array、Math、Date等</p>\n<p>3、宿主对象(host object)<br>由浏览器提供的预定义对象被称为宿主对象(host object )<br>宿主对象包括document、Form、Image和Element等。我们可以通过这些对象获得关于网页上表单、图像和各种表单元素等信息</p>\n<h4 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h4><p>1、文档:DOM中的’D’<br>如果没有document(文档），DOM也就无从谈起。当创建了一个网页并把它加载到Web浏览器中时，DOM就在幕后悄然而生。它把你编写的网页文档转换为一个文档对象</p>\n<p>2、对象:DOM中的’O’<br>如上对象</p>\n<p>3、模型:DOM中的’M’<br>DOM中的“M”代表着“Model”(模型)，但说它代表着“Map”(地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表着一列真正的火车、一张城市街道图代表着一个实际存在的城市那样，DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型)，可以通过JavaScript去读取这张地图</p>\n<p>4、节点<br>(1)元素节点<br>(2)文本节点<br>(3)属性节点<br>(4)CSS<br>(5)获取元素<br>-getElementById 返回一个对象<br>-getElementsByTagName 返回一个对象数组，使用通配符（*）获取文档中总共有多少元素节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shopping = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;purchases&quot;</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> items = shopping.getElementsByTagName(<span class=\"string\">&quot;*&quot;</span>) ;</span><br></pre></td></tr></table></figure>\n<p>-getElementsByClassName 返回一个对象数组<br>使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可<br>注意，即使在元素的class属性中，类名的顺序和参数中指定的不一样，也照样会匹配该元素。不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shopping = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;purchases&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sales = shopping.getElementsByClassName(<span class=\"string\">&quot;sale&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>5、获取和设置属性<br>(1)getAttribute 只能通过元素节点调用<br>(2)setAttribute 只能通过元素节点调用，修改属性值<br>细节:通过setAttribute对文档做出修改后，在通过浏览器的viewsource(查看源代码）选项去查看文档的源代码时看到的仍将是改变前的属性值，也就是说，setAttribute做出的修改不会反映在文档本身的源代码里。这种“表里不一”的现象源自DOM的工作模式:先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。这正是DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。</p>\n<h4 id=\"案例研究：JavaScript图片库\"><a href=\"#案例研究：JavaScript图片库\" class=\"headerlink\" title=\"案例研究：JavaScript图片库\"></a>案例研究：JavaScript图片库</h4><p>DOM是一种适用于多种环境和多种程序设计语言的通用型API。如果想把DOM技巧运用在Web浏览器以外的应用环境里，严格遵守“第1级DOM”能够避免与兼容性有关的任何问题。<br>1、childNodes属性 用来获取任何一个元素的所有子元素<br>2、nodeType属性 共有12中可取值<br>以下3种具有实用价值：<br>-元素节点的nodeType属性值是1<br>-属性节点的nodeType属性值是2<br>-文本节点的nodeType属性值是3<br>3、nodeValue属性 得到和设置节点的值<br>4、firstChild和lastChild</p>\n<h4 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h4><p>1、平稳退化<br>平稳退化(graceful degradation)，虽然某些功能无法使用，但最基本的操作仍能顺利完成<br>2、“javascript:”伪协议<br>“真”协议用来在因特网上的计算机之间传输数据包，如HTTP协议(http://) 、FTP协议（ftp://)等，伪协议则是一种非标准化的协议<br>“javascript:”伪协议让我们通过一个链接来调用JavaScript函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">&quot;javascript:popUp(&#x27;http://www.example.com/&#x27;);&quot;</span>&gt;Example&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>3、CSS<br>结构与样式分离<br>渐进增强，用一些额外的信息层去包裹原始数据<br>4、分离javascript<br>5、向后兼容<br>(1)对象检测：检测浏览器对JavaScript的支持程度<br>(2)浏览器嗅探技术<br>通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。<br>首先，浏览器有时会“撒谎”。因为历史原因，有些浏览器会把自己报告为另外一种浏览器，还有一些浏览器允许用户任意修改这些信息<br>其次，为了适用于多种不同的浏览器，浏览器嗅探脚本会变得越来越复杂。如果想让浏览器嗅探脚本能够跨平台工作，就必须测试所有可能出现的供应商和版本号组合。这是一个无穷尽的任务，测试的组合情况越多，代码就越复杂和冗长<br>最后，许多浏览器嗅探脚本在进行这类测试时要求浏览器的版本号必须得到精确的匹配。因此，每当市场上出现新版本时，就不得不修改这些脚本<br>6、性能考虑<br>(1)尽量少访问DOM和尽量减少标记<br>(2)合并和放置脚本<br>多个脚本合并，减少请求次数<br>把所有/<script>标签都放到文档的末尾，/&lt;/body/&gt;标记之前，就可以让页面变得更快<br>(3)压缩脚本<br>压缩工具：<br>-Douglas Crockford的JSMin (<a href=\"http://www.crockford.com/javascript/jsmin.html\">http://www.crockford.com/javascript/jsmin.html</a>)<br>-雅虎的YUI Compressor (<a href=\"http://developer.yahoo.com/yui/compressor\">http://developer.yahoo.com/yui/compressor</a>)<br>-谷歌的Closure Compiler (<a href=\"http://closure-compiler.appspot.com/home\">http://closure-compiler.appspot.com/home</a>)</p>\n<h4 id=\"动态创建标记\"><a href=\"#动态创建标记\" class=\"headerlink\" title=\"动态创建标记\"></a>动态创建标记</h4><p>1、document.write &amp; innerHTML属性<br>2、DOM方法<br>(1)createElement<br>(1)appendChild<br>(1)createTextNode<br>(1)insertBefore<br>3、Ajax<br>(1)XMLHttpRequest对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHTTPObject</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> XMLHttpRequest == <span class=\"string\">&quot;undefined&quot;</span>) xMLHttpRequest =<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Activexobject ( <span class=\"string\">&quot;Msxm12.XMLHTTP.6.0&quot;</span>); )<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivexObject (<span class=\"string\">&quot;Msxm12.XMLHTTP.3.0&quot;</span>);)<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivexObject ( <span class=\"string\">&quot;Msxm12.XMLHTTP&quot;</span>); )<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XMLHttpRequest ( ) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>XHTML5<br>本质上是使用严格的XML规则编写的HTML5。从技术角度说，Web浏览器应该将任何XHTML5文档都视为XML文档，而不是HTML文档。而在现实中，你还得在文档的头部发送正确的MIME类型，即application/xhtml+xml。有些浏览器不认识这个MIME类型，因而一般要在服务器端对浏览器进行探查后再发送。否则最坏的情况，页面很可能根本不会在浏览器中呈现。因此，绝大多数XHTML页面仍然是以HTML类型发送的。</p>\n<h4 id=\"CSS-DOM\"><a href=\"#CSS-DOM\" class=\"headerlink\" title=\"CSS-DOM\"></a>CSS-DOM</h4><p>1、三位一体的网页<br>(1)结构层<br>网页的结构层(structural layer)由HTML或XHTML之类的标记语言负责创建<br>(2)表示层<br>表示层(presentation layer)由CSS负责完成。CSS描述页面内容应该如何呈现<br>(3)行为层<br>行为层(behavior layer)负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM主宰的领域<br>(4)分离<br>-使用(X)HTML去搭建文档的结构<br>-使用CSS去设置文档的呈现效果<br>-使用DOM脚本去实现文档的行为<br>2、style属性<br>在外部样式表里声明的样式不会进入style对象，在文档的<head>部分里声明的样式也是如此<br>style对象只包含在HTML代码里用style属性声明的样式<br>3、何时该使用DOM脚本设置样式<br>(1)根据元素在节点树里的位置来设置样式<br>(2)根据某种条件反复设置某种样式<br>(3)响应事件<br>4、className属性</p>\n<h4 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h4><p>1、canvas<br>2、video和audio</p>\n<p>疑问点：<br>1、遇到的知识点觉得掌握了，没有记录，后面又忘了<br>重要的知识点都记录，不管有没有掌握<br>2、任务拆分评估时间不准<br>更深入的了解项目代码和业务逻辑<br>3、看书遇到问题的时候，先记录继续阅读，还是先解决问题在阅读？<br>先记录继续阅读，看后面是否有解答<br>4、原型链<br>不建议研究__proto__这种知识点，可以看看es6中新的关于原型链的继承<br>理解知识的时候，不要添加太多概念，避免混乱</p>\n</script></p>"},{"title":"前端概念相关-渐进增强与优雅降级","date":"2022-07-12T02:37:56.000Z","_content":"\n#### 渐进增强(Progressive Enhancement)(相当于向上兼容)\n一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验\n\n#### 优雅降级(Graceful Degradation)(相当于向下兼容)\n一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览\n\n向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少\n大多数软件都是向下兼容的\n\n#### 渐进增强与优雅降级的区别\n优雅降级和渐进增强都关注于同一网站在不同设备以及不同浏览器下的表现程度\n关键的区别则在于它们各自关注于何处，以及这种关注如何影响工作的流程\n\n优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n渐进增强观点则认为应关注于内容本身。\n```javascript\n.transition { /*渐进增强写法*/\n  -webkit-transition: all .5s;\n     -moz-transition: all .5s;\n       -o-transition: all .5s;\n          transition: all .5s;\n}\n.transition { /*优雅降级写法*/\n          transition: all .5s;\n       -o-transition: all .5s;\n     -moz-transition: all .5s;\n  -webkit-transition: all .5s;\n}\n```\n前缀CSS3（-webkit-* / -moz-* / -o-*）和正常CSS3在浏览器中的支持情况是这样的：\n\n1、很久以前：浏览器前缀CSS3和正常CSS3都不支持；\n2、不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；\n3、现在：浏览器既支持前缀CSS3，又支持正常CSS3；\n4、未来：浏览器不支持前缀CSS3，仅支持正常CSS3.\n\n渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。\n","source":"_posts/about-fe-theory.md","raw":"---\ntitle: 前端概念相关-渐进增强与优雅降级\ndate: 2022-07-12 10:37:56\ntags:\n---\n\n#### 渐进增强(Progressive Enhancement)(相当于向上兼容)\n一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验\n\n#### 优雅降级(Graceful Degradation)(相当于向下兼容)\n一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览\n\n向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少\n大多数软件都是向下兼容的\n\n#### 渐进增强与优雅降级的区别\n优雅降级和渐进增强都关注于同一网站在不同设备以及不同浏览器下的表现程度\n关键的区别则在于它们各自关注于何处，以及这种关注如何影响工作的流程\n\n优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n渐进增强观点则认为应关注于内容本身。\n```javascript\n.transition { /*渐进增强写法*/\n  -webkit-transition: all .5s;\n     -moz-transition: all .5s;\n       -o-transition: all .5s;\n          transition: all .5s;\n}\n.transition { /*优雅降级写法*/\n          transition: all .5s;\n       -o-transition: all .5s;\n     -moz-transition: all .5s;\n  -webkit-transition: all .5s;\n}\n```\n前缀CSS3（-webkit-* / -moz-* / -o-*）和正常CSS3在浏览器中的支持情况是这样的：\n\n1、很久以前：浏览器前缀CSS3和正常CSS3都不支持；\n2、不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；\n3、现在：浏览器既支持前缀CSS3，又支持正常CSS3；\n4、未来：浏览器不支持前缀CSS3，仅支持正常CSS3.\n\n渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。\n","slug":"about-fe-theory","published":1,"updated":"2022-07-18T05:47:25.279Z","_id":"cl7eubjlb0005hgtkfdj45yil","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"渐进增强-Progressive-Enhancement-相当于向上兼容\"><a href=\"#渐进增强-Progressive-Enhancement-相当于向上兼容\" class=\"headerlink\" title=\"渐进增强(Progressive Enhancement)(相当于向上兼容)\"></a>渐进增强(Progressive Enhancement)(相当于向上兼容)</h4><p>一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验</p>\n<h4 id=\"优雅降级-Graceful-Degradation-相当于向下兼容\"><a href=\"#优雅降级-Graceful-Degradation-相当于向下兼容\" class=\"headerlink\" title=\"优雅降级(Graceful Degradation)(相当于向下兼容)\"></a>优雅降级(Graceful Degradation)(相当于向下兼容)</h4><p>一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览</p>\n<p>向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少<br>大多数软件都是向下兼容的</p>\n<h4 id=\"渐进增强与优雅降级的区别\"><a href=\"#渐进增强与优雅降级的区别\" class=\"headerlink\" title=\"渐进增强与优雅降级的区别\"></a>渐进增强与优雅降级的区别</h4><p>优雅降级和渐进增强都关注于同一网站在不同设备以及不同浏览器下的表现程度<br>关键的区别则在于它们各自关注于何处，以及这种关注如何影响工作的流程</p>\n<p>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>\n<p>渐进增强观点则认为应关注于内容本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.transition &#123; <span class=\"comment\">/*渐进增强写法*/</span></span><br><span class=\"line\">  -webkit-transition: all .5s;</span><br><span class=\"line\">     -moz-transition: all .5s;</span><br><span class=\"line\">       -o-transition: all .5s;</span><br><span class=\"line\">          transition: all .5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.transition &#123; <span class=\"comment\">/*优雅降级写法*/</span></span><br><span class=\"line\">          <span class=\"attr\">transition</span>: all .5s;</span><br><span class=\"line\">       -o-transition: all .5s;</span><br><span class=\"line\">     -moz-transition: all .5s;</span><br><span class=\"line\">  -webkit-transition: all .5s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前缀CSS3（-webkit-* / -moz-* / -o-*）和正常CSS3在浏览器中的支持情况是这样的：</p>\n<p>1、很久以前：浏览器前缀CSS3和正常CSS3都不支持；<br>2、不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；<br>3、现在：浏览器既支持前缀CSS3，又支持正常CSS3；<br>4、未来：浏览器不支持前缀CSS3，仅支持正常CSS3.</p>\n<p>渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"渐进增强-Progressive-Enhancement-相当于向上兼容\"><a href=\"#渐进增强-Progressive-Enhancement-相当于向上兼容\" class=\"headerlink\" title=\"渐进增强(Progressive Enhancement)(相当于向上兼容)\"></a>渐进增强(Progressive Enhancement)(相当于向上兼容)</h4><p>一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验</p>\n<h4 id=\"优雅降级-Graceful-Degradation-相当于向下兼容\"><a href=\"#优雅降级-Graceful-Degradation-相当于向下兼容\" class=\"headerlink\" title=\"优雅降级(Graceful Degradation)(相当于向下兼容)\"></a>优雅降级(Graceful Degradation)(相当于向下兼容)</h4><p>一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览</p>\n<p>向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少<br>大多数软件都是向下兼容的</p>\n<h4 id=\"渐进增强与优雅降级的区别\"><a href=\"#渐进增强与优雅降级的区别\" class=\"headerlink\" title=\"渐进增强与优雅降级的区别\"></a>渐进增强与优雅降级的区别</h4><p>优雅降级和渐进增强都关注于同一网站在不同设备以及不同浏览器下的表现程度<br>关键的区别则在于它们各自关注于何处，以及这种关注如何影响工作的流程</p>\n<p>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>\n<p>渐进增强观点则认为应关注于内容本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.transition &#123; <span class=\"comment\">/*渐进增强写法*/</span></span><br><span class=\"line\">  -webkit-transition: all .5s;</span><br><span class=\"line\">     -moz-transition: all .5s;</span><br><span class=\"line\">       -o-transition: all .5s;</span><br><span class=\"line\">          transition: all .5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.transition &#123; <span class=\"comment\">/*优雅降级写法*/</span></span><br><span class=\"line\">          <span class=\"attr\">transition</span>: all .5s;</span><br><span class=\"line\">       -o-transition: all .5s;</span><br><span class=\"line\">     -moz-transition: all .5s;</span><br><span class=\"line\">  -webkit-transition: all .5s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前缀CSS3（-webkit-* / -moz-* / -o-*）和正常CSS3在浏览器中的支持情况是这样的：</p>\n<p>1、很久以前：浏览器前缀CSS3和正常CSS3都不支持；<br>2、不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；<br>3、现在：浏览器既支持前缀CSS3，又支持正常CSS3；<br>4、未来：浏览器不支持前缀CSS3，仅支持正常CSS3.</p>\n<p>渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。</p>\n"},{"title":"Map 结构","date":"2022-08-04T06:07:12.000Z","_content":"\n#### 什么是Map?\n由ES6提供的一种数据结构。它类似于对象，也是键值对的集合，但和对象不同的是，对象的键只能是字符串，map的键可以是各种类型的值（包括对象）。即，Object提供了 字符串-值 的对应，map提供了 值-值 的对应，是一种更完善的Hash结构实现。\n\n#### 怎么创建map？\n```javascript\nconst map = new Map();\n```\nmap可以使用一个对象作为键\n```javascript\nconst map = new Map();\nconst o = { p: 'string' };\n\nmap.set(o, 'text');\nmap.get(o); // text\n\nmap.has(o); // true\nmap.delete(o);\n```\nmap还可以接受一个数组作为参数，该数组成员是一个个表示键值对的数组\n```javascript\nconst map = new Map([['name', 'Tom'], ['age', 12]]);\nmap.size; // 2\nmap.has('name'); // true\nmap.get('age'); // 12\n```\n\n##### 注意点\n如果对同一个键多次赋值，后面的值将覆盖前面的值\n```javascript\nmap.set(1, 'qw').set(1, 'sdf');\nmap.get(1); // sdf\n```\n\n#### map的实例属性和方法\n1、size\n用法：map.size\n作用：获取map结构的大小\n返回：map结构的长度大小\n```javascript\nconst map = new Map();\nmap.size; // 0\nmap.set(1, 12);\nmap.size; // 1\n```\n\n2、set()\n用法：map.set(key, value)\n作用：向map中添加或修改map的数据\n返回：修改后的map\n```javascript\nconst map = new Map();\nmap.set(1, 12);\n```\n\n3、get()\n用法：map.get(key)\n作用：获取对应key的value值\n返回：map结构中key对应的值，不存在对应key时，返回undefined\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.get(1); // 12\nmap.get(2); // undefined\n```\n\n4、has()\n用法：map.has(key)\n作用：判断map中是否有对应的key\n返回：true/false，依据map中是否有对应的key，返回true或false\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.has(1); // true\nmap.has(2); // has\n```\n\n5、delete()\n用法：map.delete(key)\n作用：删除map中对应的key及value\n返回：true/false，删除成功返回true，删除失败返回false\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.delete(1); // true\nmap.delete(2); // false\n```\n\n6、clear()\n用法：map.clear()\n作用：清空map中的数据\n返回：undefined\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.clear(); // undefined\n```\n\n#### map的遍历方法\n1、keys()\n2、values()\n3、entries()\n4、forEach()\n\n参考：https://www.jianshu.com/p/93b5a5940de8","source":"_posts/about-map.md","raw":"---\ntitle: Map 结构\ndate: 2022-08-04 14:07:12\ntags:\n---\n\n#### 什么是Map?\n由ES6提供的一种数据结构。它类似于对象，也是键值对的集合，但和对象不同的是，对象的键只能是字符串，map的键可以是各种类型的值（包括对象）。即，Object提供了 字符串-值 的对应，map提供了 值-值 的对应，是一种更完善的Hash结构实现。\n\n#### 怎么创建map？\n```javascript\nconst map = new Map();\n```\nmap可以使用一个对象作为键\n```javascript\nconst map = new Map();\nconst o = { p: 'string' };\n\nmap.set(o, 'text');\nmap.get(o); // text\n\nmap.has(o); // true\nmap.delete(o);\n```\nmap还可以接受一个数组作为参数，该数组成员是一个个表示键值对的数组\n```javascript\nconst map = new Map([['name', 'Tom'], ['age', 12]]);\nmap.size; // 2\nmap.has('name'); // true\nmap.get('age'); // 12\n```\n\n##### 注意点\n如果对同一个键多次赋值，后面的值将覆盖前面的值\n```javascript\nmap.set(1, 'qw').set(1, 'sdf');\nmap.get(1); // sdf\n```\n\n#### map的实例属性和方法\n1、size\n用法：map.size\n作用：获取map结构的大小\n返回：map结构的长度大小\n```javascript\nconst map = new Map();\nmap.size; // 0\nmap.set(1, 12);\nmap.size; // 1\n```\n\n2、set()\n用法：map.set(key, value)\n作用：向map中添加或修改map的数据\n返回：修改后的map\n```javascript\nconst map = new Map();\nmap.set(1, 12);\n```\n\n3、get()\n用法：map.get(key)\n作用：获取对应key的value值\n返回：map结构中key对应的值，不存在对应key时，返回undefined\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.get(1); // 12\nmap.get(2); // undefined\n```\n\n4、has()\n用法：map.has(key)\n作用：判断map中是否有对应的key\n返回：true/false，依据map中是否有对应的key，返回true或false\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.has(1); // true\nmap.has(2); // has\n```\n\n5、delete()\n用法：map.delete(key)\n作用：删除map中对应的key及value\n返回：true/false，删除成功返回true，删除失败返回false\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.delete(1); // true\nmap.delete(2); // false\n```\n\n6、clear()\n用法：map.clear()\n作用：清空map中的数据\n返回：undefined\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.clear(); // undefined\n```\n\n#### map的遍历方法\n1、keys()\n2、values()\n3、entries()\n4、forEach()\n\n参考：https://www.jianshu.com/p/93b5a5940de8","slug":"about-map","published":1,"updated":"2022-08-04T07:31:23.549Z","_id":"cl7eubjld0007hgtk8gswfivy","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"什么是Map\"><a href=\"#什么是Map\" class=\"headerlink\" title=\"什么是Map?\"></a>什么是Map?</h4><p>由ES6提供的一种数据结构。它类似于对象，也是键值对的集合，但和对象不同的是，对象的键只能是字符串，map的键可以是各种类型的值（包括对象）。即，Object提供了 字符串-值 的对应，map提供了 值-值 的对应，是一种更完善的Hash结构实现。</p>\n<h4 id=\"怎么创建map？\"><a href=\"#怎么创建map？\" class=\"headerlink\" title=\"怎么创建map？\"></a>怎么创建map？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br></pre></td></tr></table></figure>\n<p>map可以使用一个对象作为键</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123; <span class=\"attr\">p</span>: <span class=\"string\">&#x27;string&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">map.set(o, <span class=\"string\">&#x27;text&#x27;</span>);</span><br><span class=\"line\">map.get(o); <span class=\"comment\">// text</span></span><br><span class=\"line\"></span><br><span class=\"line\">map.has(o); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(o);</span><br></pre></td></tr></table></figure>\n<p>map还可以接受一个数组作为参数，该数组成员是一个个表示键值对的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;Tom&#x27;</span>], [<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">12</span>]]);</span><br><span class=\"line\">map.size; <span class=\"comment\">// 2</span></span><br><span class=\"line\">map.has(<span class=\"string\">&#x27;name&#x27;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.get(<span class=\"string\">&#x27;age&#x27;</span>); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h5><p>如果对同一个键多次赋值，后面的值将覆盖前面的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"string\">&#x27;qw&#x27;</span>).set(<span class=\"number\">1</span>, <span class=\"string\">&#x27;sdf&#x27;</span>);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>); <span class=\"comment\">// sdf</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"map的实例属性和方法\"><a href=\"#map的实例属性和方法\" class=\"headerlink\" title=\"map的实例属性和方法\"></a>map的实例属性和方法</h4><p>1、size<br>用法：map.size<br>作用：获取map结构的大小<br>返回：map结构的长度大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.size; <span class=\"comment\">// 0</span></span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.size; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>2、set()<br>用法：map.set(key, value)<br>作用：向map中添加或修改map的数据<br>返回：修改后的map</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n\n<p>3、get()<br>用法：map.get(key)<br>作用：获取对应key的value值<br>返回：map结构中key对应的值，不存在对应key时，返回undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>); <span class=\"comment\">// 12</span></span><br><span class=\"line\">map.get(<span class=\"number\">2</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>4、has()<br>用法：map.has(key)<br>作用：判断map中是否有对应的key<br>返回：true/false，依据map中是否有对应的key，返回true或false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.has(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.has(<span class=\"number\">2</span>); <span class=\"comment\">// has</span></span><br></pre></td></tr></table></figure>\n\n<p>5、delete()<br>用法：map.delete(key)<br>作用：删除map中对应的key及value<br>返回：true/false，删除成功返回true，删除失败返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.delete(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(<span class=\"number\">2</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>6、clear()<br>用法：map.clear()<br>作用：清空map中的数据<br>返回：undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.clear(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"map的遍历方法\"><a href=\"#map的遍历方法\" class=\"headerlink\" title=\"map的遍历方法\"></a>map的遍历方法</h4><p>1、keys()<br>2、values()<br>3、entries()<br>4、forEach()</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/93b5a5940de8\">https://www.jianshu.com/p/93b5a5940de8</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是Map\"><a href=\"#什么是Map\" class=\"headerlink\" title=\"什么是Map?\"></a>什么是Map?</h4><p>由ES6提供的一种数据结构。它类似于对象，也是键值对的集合，但和对象不同的是，对象的键只能是字符串，map的键可以是各种类型的值（包括对象）。即，Object提供了 字符串-值 的对应，map提供了 值-值 的对应，是一种更完善的Hash结构实现。</p>\n<h4 id=\"怎么创建map？\"><a href=\"#怎么创建map？\" class=\"headerlink\" title=\"怎么创建map？\"></a>怎么创建map？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br></pre></td></tr></table></figure>\n<p>map可以使用一个对象作为键</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123; <span class=\"attr\">p</span>: <span class=\"string\">&#x27;string&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">map.set(o, <span class=\"string\">&#x27;text&#x27;</span>);</span><br><span class=\"line\">map.get(o); <span class=\"comment\">// text</span></span><br><span class=\"line\"></span><br><span class=\"line\">map.has(o); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(o);</span><br></pre></td></tr></table></figure>\n<p>map还可以接受一个数组作为参数，该数组成员是一个个表示键值对的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;Tom&#x27;</span>], [<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">12</span>]]);</span><br><span class=\"line\">map.size; <span class=\"comment\">// 2</span></span><br><span class=\"line\">map.has(<span class=\"string\">&#x27;name&#x27;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.get(<span class=\"string\">&#x27;age&#x27;</span>); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h5><p>如果对同一个键多次赋值，后面的值将覆盖前面的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"string\">&#x27;qw&#x27;</span>).set(<span class=\"number\">1</span>, <span class=\"string\">&#x27;sdf&#x27;</span>);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>); <span class=\"comment\">// sdf</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"map的实例属性和方法\"><a href=\"#map的实例属性和方法\" class=\"headerlink\" title=\"map的实例属性和方法\"></a>map的实例属性和方法</h4><p>1、size<br>用法：map.size<br>作用：获取map结构的大小<br>返回：map结构的长度大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.size; <span class=\"comment\">// 0</span></span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.size; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>2、set()<br>用法：map.set(key, value)<br>作用：向map中添加或修改map的数据<br>返回：修改后的map</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n\n<p>3、get()<br>用法：map.get(key)<br>作用：获取对应key的value值<br>返回：map结构中key对应的值，不存在对应key时，返回undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>); <span class=\"comment\">// 12</span></span><br><span class=\"line\">map.get(<span class=\"number\">2</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>4、has()<br>用法：map.has(key)<br>作用：判断map中是否有对应的key<br>返回：true/false，依据map中是否有对应的key，返回true或false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.has(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.has(<span class=\"number\">2</span>); <span class=\"comment\">// has</span></span><br></pre></td></tr></table></figure>\n\n<p>5、delete()<br>用法：map.delete(key)<br>作用：删除map中对应的key及value<br>返回：true/false，删除成功返回true，删除失败返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.delete(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(<span class=\"number\">2</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>6、clear()<br>用法：map.clear()<br>作用：清空map中的数据<br>返回：undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.clear(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"map的遍历方法\"><a href=\"#map的遍历方法\" class=\"headerlink\" title=\"map的遍历方法\"></a>map的遍历方法</h4><p>1、keys()<br>2、values()<br>3、entries()<br>4、forEach()</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/93b5a5940de8\">https://www.jianshu.com/p/93b5a5940de8</a></p>\n"},{"title":"基本数据类型-Symbol","date":"2022-08-19T05:37:24.000Z","_content":"\n#### 什么是Symbol?\n\n\n\n#### 有什么用处？\n\n#### Symbol的属性\n\n#### Symbol的方法\n","source":"_posts/about-symbol.md","raw":"---\ntitle: 基本数据类型-Symbol\ndate: 2022-08-19 13:37:24\ntags:\n---\n\n#### 什么是Symbol?\n\n\n\n#### 有什么用处？\n\n#### Symbol的属性\n\n#### Symbol的方法\n","slug":"about-symbol","published":1,"updated":"2022-08-19T05:42:42.437Z","_id":"cl7eubjle0009hgtk5yv1fd0f","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"什么是Symbol\"><a href=\"#什么是Symbol\" class=\"headerlink\" title=\"什么是Symbol?\"></a>什么是Symbol?</h4><h4 id=\"有什么用处？\"><a href=\"#有什么用处？\" class=\"headerlink\" title=\"有什么用处？\"></a>有什么用处？</h4><h4 id=\"Symbol的属性\"><a href=\"#Symbol的属性\" class=\"headerlink\" title=\"Symbol的属性\"></a>Symbol的属性</h4><h4 id=\"Symbol的方法\"><a href=\"#Symbol的方法\" class=\"headerlink\" title=\"Symbol的方法\"></a>Symbol的方法</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是Symbol\"><a href=\"#什么是Symbol\" class=\"headerlink\" title=\"什么是Symbol?\"></a>什么是Symbol?</h4><h4 id=\"有什么用处？\"><a href=\"#有什么用处？\" class=\"headerlink\" title=\"有什么用处？\"></a>有什么用处？</h4><h4 id=\"Symbol的属性\"><a href=\"#Symbol的属性\" class=\"headerlink\" title=\"Symbol的属性\"></a>Symbol的属性</h4><h4 id=\"Symbol的方法\"><a href=\"#Symbol的方法\" class=\"headerlink\" title=\"Symbol的方法\"></a>Symbol的方法</h4>"},{"title":"浏览器渲染","date":"2022-05-23T06:13:56.000Z","_content":"\n## 渲染流程\n(1)深度遍历解析HTML建立DOM树\n(2)解析CSS建立CSSOM树\n(3)依据DOM树和CSSOM树构造Render树\n(4)计算各元素尺寸、位置\n(5)绘制页面像素信息\n(6)浏览器将各层信息发送给GPU，GPU将各层合成，显示在屏幕上\n(7)(PS:上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完某一部分（整体大块的）内容就显示一部分内容，同时，可能还在通过网络下载其余内容。)\n## GUI渲染线程\n(1)解析HTML，CSS，构建DOM树和Render树，布局和绘制等\n(2)重排/重绘\n--1、重排又称重构、回流，当我们通过JavaScript或者CSS修改了元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段。重排需要更新完整的渲染流水线，所以开销也是最大的。每个页面至少需要一次reflow，就是在页面第一次加载的时候。\n--2、任何页面布局和几何属性的改变都会触发重排，比如：\n页面渲染初始化；(无法避免)\n添加或删除可见的DOM元素；\n元素位置的改变；\n改变元素尺寸（宽、高、内外边距、边框等）；\n浏览器窗口尺寸的变化（resize事件发生时）；\n填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；\n读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)\n--3、重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如通过 JavaScript 更改某些元素的背景颜色，没有改变元素的几何属性，那么布局阶段不会执行，而是直接进入绘制阶段。\n--4、重绘省去了布局和分层阶段，效率会高于重排。重排必定会引发重绘，但重绘不一定会引发重排。\n## JS引擎线程\n(1)解析Javascript脚本，单线程执行\n(2)与GUI互斥，GUI ON then JS Suspend.等待着任务队列中任务的到来，然后加以处理，JS执行的时间过长会导致页面渲染加载阻塞\n## 事件触发线程\n(1)归属于浏览器而不是JS引擎，用来控制事件循环\n(2)当JS引擎执行代码块如click事件时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件待处理队列的队尾，等待JS引擎的处理\n## 定时触发器线程\n(1)setInterval与setTimeout所在线程\n(2)浏览器定时计数器并不是由JS引擎计数的,因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确\n(3)计时完毕后，将事件添加到事件队列中，等待JS引擎空闲后执行\n## 异步http请求线程\n(1)在XMLHttpRequest在连接后是通过浏览器新开一个线程请求\n(2)将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。\n\n## 实现hover等鼠标操作\n![hover](/images/hover.png)\n\n## 使用performance分析页面性能\n![performance](/images/performance.png)\n\n## 使用network调试\n![network](/images/network.png)\n","source":"_posts/browser-render.md","raw":"---\ntitle: 浏览器渲染\ndate: 2022-05-23 14:13:56\ntags:\n---\n\n## 渲染流程\n(1)深度遍历解析HTML建立DOM树\n(2)解析CSS建立CSSOM树\n(3)依据DOM树和CSSOM树构造Render树\n(4)计算各元素尺寸、位置\n(5)绘制页面像素信息\n(6)浏览器将各层信息发送给GPU，GPU将各层合成，显示在屏幕上\n(7)(PS:上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完某一部分（整体大块的）内容就显示一部分内容，同时，可能还在通过网络下载其余内容。)\n## GUI渲染线程\n(1)解析HTML，CSS，构建DOM树和Render树，布局和绘制等\n(2)重排/重绘\n--1、重排又称重构、回流，当我们通过JavaScript或者CSS修改了元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段。重排需要更新完整的渲染流水线，所以开销也是最大的。每个页面至少需要一次reflow，就是在页面第一次加载的时候。\n--2、任何页面布局和几何属性的改变都会触发重排，比如：\n页面渲染初始化；(无法避免)\n添加或删除可见的DOM元素；\n元素位置的改变；\n改变元素尺寸（宽、高、内外边距、边框等）；\n浏览器窗口尺寸的变化（resize事件发生时）；\n填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；\n读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)\n--3、重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如通过 JavaScript 更改某些元素的背景颜色，没有改变元素的几何属性，那么布局阶段不会执行，而是直接进入绘制阶段。\n--4、重绘省去了布局和分层阶段，效率会高于重排。重排必定会引发重绘，但重绘不一定会引发重排。\n## JS引擎线程\n(1)解析Javascript脚本，单线程执行\n(2)与GUI互斥，GUI ON then JS Suspend.等待着任务队列中任务的到来，然后加以处理，JS执行的时间过长会导致页面渲染加载阻塞\n## 事件触发线程\n(1)归属于浏览器而不是JS引擎，用来控制事件循环\n(2)当JS引擎执行代码块如click事件时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件待处理队列的队尾，等待JS引擎的处理\n## 定时触发器线程\n(1)setInterval与setTimeout所在线程\n(2)浏览器定时计数器并不是由JS引擎计数的,因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确\n(3)计时完毕后，将事件添加到事件队列中，等待JS引擎空闲后执行\n## 异步http请求线程\n(1)在XMLHttpRequest在连接后是通过浏览器新开一个线程请求\n(2)将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。\n\n## 实现hover等鼠标操作\n![hover](/images/hover.png)\n\n## 使用performance分析页面性能\n![performance](/images/performance.png)\n\n## 使用network调试\n![network](/images/network.png)\n","slug":"browser-render","published":1,"updated":"2022-08-23T13:15:25.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eubjlf000ahgtk3sot7uye","content":"<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p>(1)深度遍历解析HTML建立DOM树<br>(2)解析CSS建立CSSOM树<br>(3)依据DOM树和CSSOM树构造Render树<br>(4)计算各元素尺寸、位置<br>(5)绘制页面像素信息<br>(6)浏览器将各层信息发送给GPU，GPU将各层合成，显示在屏幕上<br>(7)(PS:上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完某一部分（整体大块的）内容就显示一部分内容，同时，可能还在通过网络下载其余内容。)</p>\n<h2 id=\"GUI渲染线程\"><a href=\"#GUI渲染线程\" class=\"headerlink\" title=\"GUI渲染线程\"></a>GUI渲染线程</h2><p>(1)解析HTML，CSS，构建DOM树和Render树，布局和绘制等<br>(2)重排/重绘<br>–1、重排又称重构、回流，当我们通过JavaScript或者CSS修改了元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段。重排需要更新完整的渲染流水线，所以开销也是最大的。每个页面至少需要一次reflow，就是在页面第一次加载的时候。<br>–2、任何页面布局和几何属性的改变都会触发重排，比如：<br>页面渲染初始化；(无法避免)<br>添加或删除可见的DOM元素；<br>元素位置的改变；<br>改变元素尺寸（宽、高、内外边距、边框等）；<br>浏览器窗口尺寸的变化（resize事件发生时）；<br>填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；<br>读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)<br>–3、重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如通过 JavaScript 更改某些元素的背景颜色，没有改变元素的几何属性，那么布局阶段不会执行，而是直接进入绘制阶段。<br>–4、重绘省去了布局和分层阶段，效率会高于重排。重排必定会引发重绘，但重绘不一定会引发重排。</p>\n<h2 id=\"JS引擎线程\"><a href=\"#JS引擎线程\" class=\"headerlink\" title=\"JS引擎线程\"></a>JS引擎线程</h2><p>(1)解析Javascript脚本，单线程执行<br>(2)与GUI互斥，GUI ON then JS Suspend.等待着任务队列中任务的到来，然后加以处理，JS执行的时间过长会导致页面渲染加载阻塞</p>\n<h2 id=\"事件触发线程\"><a href=\"#事件触发线程\" class=\"headerlink\" title=\"事件触发线程\"></a>事件触发线程</h2><p>(1)归属于浏览器而不是JS引擎，用来控制事件循环<br>(2)当JS引擎执行代码块如click事件时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件待处理队列的队尾，等待JS引擎的处理</p>\n<h2 id=\"定时触发器线程\"><a href=\"#定时触发器线程\" class=\"headerlink\" title=\"定时触发器线程\"></a>定时触发器线程</h2><p>(1)setInterval与setTimeout所在线程<br>(2)浏览器定时计数器并不是由JS引擎计数的,因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确<br>(3)计时完毕后，将事件添加到事件队列中，等待JS引擎空闲后执行</p>\n<h2 id=\"异步http请求线程\"><a href=\"#异步http请求线程\" class=\"headerlink\" title=\"异步http请求线程\"></a>异步http请求线程</h2><p>(1)在XMLHttpRequest在连接后是通过浏览器新开一个线程请求<br>(2)将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。</p>\n<h2 id=\"实现hover等鼠标操作\"><a href=\"#实现hover等鼠标操作\" class=\"headerlink\" title=\"实现hover等鼠标操作\"></a>实现hover等鼠标操作</h2><p><img src=\"/images/hover.png\" alt=\"hover\"></p>\n<h2 id=\"使用performance分析页面性能\"><a href=\"#使用performance分析页面性能\" class=\"headerlink\" title=\"使用performance分析页面性能\"></a>使用performance分析页面性能</h2><p><img src=\"/images/performance.png\" alt=\"performance\"></p>\n<h2 id=\"使用network调试\"><a href=\"#使用network调试\" class=\"headerlink\" title=\"使用network调试\"></a>使用network调试</h2><p><img src=\"/images/network.png\" alt=\"network\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p>(1)深度遍历解析HTML建立DOM树<br>(2)解析CSS建立CSSOM树<br>(3)依据DOM树和CSSOM树构造Render树<br>(4)计算各元素尺寸、位置<br>(5)绘制页面像素信息<br>(6)浏览器将各层信息发送给GPU，GPU将各层合成，显示在屏幕上<br>(7)(PS:上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完某一部分（整体大块的）内容就显示一部分内容，同时，可能还在通过网络下载其余内容。)</p>\n<h2 id=\"GUI渲染线程\"><a href=\"#GUI渲染线程\" class=\"headerlink\" title=\"GUI渲染线程\"></a>GUI渲染线程</h2><p>(1)解析HTML，CSS，构建DOM树和Render树，布局和绘制等<br>(2)重排/重绘<br>–1、重排又称重构、回流，当我们通过JavaScript或者CSS修改了元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段。重排需要更新完整的渲染流水线，所以开销也是最大的。每个页面至少需要一次reflow，就是在页面第一次加载的时候。<br>–2、任何页面布局和几何属性的改变都会触发重排，比如：<br>页面渲染初始化；(无法避免)<br>添加或删除可见的DOM元素；<br>元素位置的改变；<br>改变元素尺寸（宽、高、内外边距、边框等）；<br>浏览器窗口尺寸的变化（resize事件发生时）；<br>填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；<br>读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)<br>–3、重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如通过 JavaScript 更改某些元素的背景颜色，没有改变元素的几何属性，那么布局阶段不会执行，而是直接进入绘制阶段。<br>–4、重绘省去了布局和分层阶段，效率会高于重排。重排必定会引发重绘，但重绘不一定会引发重排。</p>\n<h2 id=\"JS引擎线程\"><a href=\"#JS引擎线程\" class=\"headerlink\" title=\"JS引擎线程\"></a>JS引擎线程</h2><p>(1)解析Javascript脚本，单线程执行<br>(2)与GUI互斥，GUI ON then JS Suspend.等待着任务队列中任务的到来，然后加以处理，JS执行的时间过长会导致页面渲染加载阻塞</p>\n<h2 id=\"事件触发线程\"><a href=\"#事件触发线程\" class=\"headerlink\" title=\"事件触发线程\"></a>事件触发线程</h2><p>(1)归属于浏览器而不是JS引擎，用来控制事件循环<br>(2)当JS引擎执行代码块如click事件时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件待处理队列的队尾，等待JS引擎的处理</p>\n<h2 id=\"定时触发器线程\"><a href=\"#定时触发器线程\" class=\"headerlink\" title=\"定时触发器线程\"></a>定时触发器线程</h2><p>(1)setInterval与setTimeout所在线程<br>(2)浏览器定时计数器并不是由JS引擎计数的,因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确<br>(3)计时完毕后，将事件添加到事件队列中，等待JS引擎空闲后执行</p>\n<h2 id=\"异步http请求线程\"><a href=\"#异步http请求线程\" class=\"headerlink\" title=\"异步http请求线程\"></a>异步http请求线程</h2><p>(1)在XMLHttpRequest在连接后是通过浏览器新开一个线程请求<br>(2)将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。</p>\n<h2 id=\"实现hover等鼠标操作\"><a href=\"#实现hover等鼠标操作\" class=\"headerlink\" title=\"实现hover等鼠标操作\"></a>实现hover等鼠标操作</h2><p><img src=\"/images/hover.png\" alt=\"hover\"></p>\n<h2 id=\"使用performance分析页面性能\"><a href=\"#使用performance分析页面性能\" class=\"headerlink\" title=\"使用performance分析页面性能\"></a>使用performance分析页面性能</h2><p><img src=\"/images/performance.png\" alt=\"performance\"></p>\n<h2 id=\"使用network调试\"><a href=\"#使用network调试\" class=\"headerlink\" title=\"使用network调试\"></a>使用network调试</h2><p><img src=\"/images/network.png\" alt=\"network\"></p>\n"},{"title":"使用hexo相关","date":"2022-03-26T13:14:29.000Z","_content":"\n## 一些使用hexo搭建博客时遇到的问题\n\n1、一段时间为使用hexo，重新打开，生成新页面时，终端报错：'hexo' 不是内部或外部命令，也不是可运行的程序或批处理文件  或 bash: hexo: command not found\n解决办法：重新运行命令：npm install hexo-cli -g\n","source":"_posts/about-use-hexo.md","raw":"---\ntitle: 使用hexo相关\ndate: 2022-03-26 21:14:29\ntags:\n---\n\n## 一些使用hexo搭建博客时遇到的问题\n\n1、一段时间为使用hexo，重新打开，生成新页面时，终端报错：'hexo' 不是内部或外部命令，也不是可运行的程序或批处理文件  或 bash: hexo: command not found\n解决办法：重新运行命令：npm install hexo-cli -g\n","slug":"about-use-hexo","published":1,"updated":"2022-08-23T13:15:25.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eubjlg000bhgtk4y3rhssk","content":"<h2 id=\"一些使用hexo搭建博客时遇到的问题\"><a href=\"#一些使用hexo搭建博客时遇到的问题\" class=\"headerlink\" title=\"一些使用hexo搭建博客时遇到的问题\"></a>一些使用hexo搭建博客时遇到的问题</h2><p>1、一段时间为使用hexo，重新打开，生成新页面时，终端报错：’hexo’ 不是内部或外部命令，也不是可运行的程序或批处理文件  或 bash: hexo: command not found<br>解决办法：重新运行命令：npm install hexo-cli -g</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一些使用hexo搭建博客时遇到的问题\"><a href=\"#一些使用hexo搭建博客时遇到的问题\" class=\"headerlink\" title=\"一些使用hexo搭建博客时遇到的问题\"></a>一些使用hexo搭建博客时遇到的问题</h2><p>1、一段时间为使用hexo，重新打开，生成新页面时，终端报错：’hexo’ 不是内部或外部命令，也不是可运行的程序或批处理文件  或 bash: hexo: command not found<br>解决办法：重新运行命令：npm install hexo-cli -g</p>\n"},{"title":"js-新建固定长度数据","date":"2022-06-27T02:20:46.000Z","_content":"\n#### 新建固定长度数组\n\n###### 使用primitives填充数组\n```javascript\nconst newArray = Array(3).fill(3);\nconsole.log(newArray);  // [3, 3, 3]\n```\nArray(length).fill(initialValue) 是一种创建具有所需长度并使用原始值（数字、字符串、布尔值）初始化的数组的便捷方法\n\n###### 使用对象填充数组\n(1)使用Array().fill()创建数组\n```javascript\nconst newArray = Array(3).fill({ value: 0 });\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\nArray(length).fill({ value: 0 })创建一个 length 数组3，并为每个项目分配{ value: 0 }，要注意的是：分配相同的对象实例。\n这种方法创建了一个具有相同对象实例的数组。如果碰巧修改了数组中的任何一项，那么数组中的每一项都会受到影响:\n```javascript\nconst newArray = Array(3).fill({ value: 0 });\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2;\nconsole.log(newArray);  // [{value: 2}, {value: 2}, {value: 2}]\n```\n(2)使用Array.from()创建数组\nArray.from() 方法对一个数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n因此利用 Array.from() 方法可以轻松地创建和初始化具有不同对象实例的数组:\n```javascript\nconst newArray = Array.from(Array(3), () => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\n如果修改数组中的任何项目，则只有该项目会受到影响，其他项目不受影响：\n```javascript\nconst newArray = Array.from(Array(3), () => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2\nconsole.log(newArray);  // [{value: 0}, {value: 2}, {value: 0}]\n```\n(3)使用Array.map()结合Array.fill()创建数组\n注意：不要直接使用map新建数组，**array.map()跳过 empty 元素**\n```javascript\nconst newArray = Array(3).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [empty x 3]\n```\n解决方法很简单，将 empty 数组 fill null 即可：\n```javascript\nconst newArray = Array(3).fill(null).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\n注意：使用这种方法创建的数组，修改某一项时不影响其他项：\n```javascript\nconst newArray = Array(3).fill(null).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2;\nconsole.log(newArray);  // [{value: 0}, {value: 2}, {value: 0}]\n```\n","source":"_posts/create-fixed-length-array.md","raw":"---\ntitle: js-新建固定长度数据\ndate: 2022-06-27 10:20:46\ntags:\n---\n\n#### 新建固定长度数组\n\n###### 使用primitives填充数组\n```javascript\nconst newArray = Array(3).fill(3);\nconsole.log(newArray);  // [3, 3, 3]\n```\nArray(length).fill(initialValue) 是一种创建具有所需长度并使用原始值（数字、字符串、布尔值）初始化的数组的便捷方法\n\n###### 使用对象填充数组\n(1)使用Array().fill()创建数组\n```javascript\nconst newArray = Array(3).fill({ value: 0 });\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\nArray(length).fill({ value: 0 })创建一个 length 数组3，并为每个项目分配{ value: 0 }，要注意的是：分配相同的对象实例。\n这种方法创建了一个具有相同对象实例的数组。如果碰巧修改了数组中的任何一项，那么数组中的每一项都会受到影响:\n```javascript\nconst newArray = Array(3).fill({ value: 0 });\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2;\nconsole.log(newArray);  // [{value: 2}, {value: 2}, {value: 2}]\n```\n(2)使用Array.from()创建数组\nArray.from() 方法对一个数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n因此利用 Array.from() 方法可以轻松地创建和初始化具有不同对象实例的数组:\n```javascript\nconst newArray = Array.from(Array(3), () => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\n如果修改数组中的任何项目，则只有该项目会受到影响，其他项目不受影响：\n```javascript\nconst newArray = Array.from(Array(3), () => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2\nconsole.log(newArray);  // [{value: 0}, {value: 2}, {value: 0}]\n```\n(3)使用Array.map()结合Array.fill()创建数组\n注意：不要直接使用map新建数组，**array.map()跳过 empty 元素**\n```javascript\nconst newArray = Array(3).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [empty x 3]\n```\n解决方法很简单，将 empty 数组 fill null 即可：\n```javascript\nconst newArray = Array(3).fill(null).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\n注意：使用这种方法创建的数组，修改某一项时不影响其他项：\n```javascript\nconst newArray = Array(3).fill(null).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2;\nconsole.log(newArray);  // [{value: 0}, {value: 2}, {value: 0}]\n```\n","slug":"create-fixed-length-array","published":1,"updated":"2022-08-10T03:12:26.408Z","_id":"cl7eubjli000chgtkgigl42na","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"新建固定长度数组\"><a href=\"#新建固定长度数组\" class=\"headerlink\" title=\"新建固定长度数组\"></a>新建固定长度数组</h4><h6 id=\"使用primitives填充数组\"><a href=\"#使用primitives填充数组\" class=\"headerlink\" title=\"使用primitives填充数组\"></a>使用primitives填充数组</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [3, 3, 3]</span></span><br></pre></td></tr></table></figure>\n<p>Array(length).fill(initialValue) 是一种创建具有所需长度并使用原始值（数字、字符串、布尔值）初始化的数组的便捷方法</p>\n<h6 id=\"使用对象填充数组\"><a href=\"#使用对象填充数组\" class=\"headerlink\" title=\"使用对象填充数组\"></a>使用对象填充数组</h6><p>(1)使用Array().fill()创建数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(&#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>Array(length).fill({ value: 0 })创建一个 length 数组3，并为每个项目分配{ value: 0 }，要注意的是：分配相同的对象实例。<br>这种方法创建了一个具有相同对象实例的数组。如果碰巧修改了数组中的任何一项，那么数组中的每一项都会受到影响:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(&#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 2&#125;, &#123;value: 2&#125;, &#123;value: 2&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>(2)使用Array.from()创建数组<br>Array.from() 方法对一个数组或可迭代对象创建一个新的，浅拷贝的数组实例。<br>因此利用 Array.from() 方法可以轻松地创建和初始化具有不同对象实例的数组:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">3</span>), <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>如果修改数组中的任何项目，则只有该项目会受到影响，其他项目不受影响：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">3</span>), <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 2&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>(3)使用Array.map()结合Array.fill()创建数组<br>注意：不要直接使用map新建数组，<strong>array.map()跳过 empty 元素</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [empty x 3]</span></span><br></pre></td></tr></table></figure>\n<p>解决方法很简单，将 empty 数组 fill null 即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"literal\">null</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>注意：使用这种方法创建的数组，修改某一项时不影响其他项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"literal\">null</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 2&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"新建固定长度数组\"><a href=\"#新建固定长度数组\" class=\"headerlink\" title=\"新建固定长度数组\"></a>新建固定长度数组</h4><h6 id=\"使用primitives填充数组\"><a href=\"#使用primitives填充数组\" class=\"headerlink\" title=\"使用primitives填充数组\"></a>使用primitives填充数组</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [3, 3, 3]</span></span><br></pre></td></tr></table></figure>\n<p>Array(length).fill(initialValue) 是一种创建具有所需长度并使用原始值（数字、字符串、布尔值）初始化的数组的便捷方法</p>\n<h6 id=\"使用对象填充数组\"><a href=\"#使用对象填充数组\" class=\"headerlink\" title=\"使用对象填充数组\"></a>使用对象填充数组</h6><p>(1)使用Array().fill()创建数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(&#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>Array(length).fill({ value: 0 })创建一个 length 数组3，并为每个项目分配{ value: 0 }，要注意的是：分配相同的对象实例。<br>这种方法创建了一个具有相同对象实例的数组。如果碰巧修改了数组中的任何一项，那么数组中的每一项都会受到影响:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(&#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 2&#125;, &#123;value: 2&#125;, &#123;value: 2&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>(2)使用Array.from()创建数组<br>Array.from() 方法对一个数组或可迭代对象创建一个新的，浅拷贝的数组实例。<br>因此利用 Array.from() 方法可以轻松地创建和初始化具有不同对象实例的数组:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">3</span>), <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>如果修改数组中的任何项目，则只有该项目会受到影响，其他项目不受影响：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">3</span>), <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 2&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>(3)使用Array.map()结合Array.fill()创建数组<br>注意：不要直接使用map新建数组，<strong>array.map()跳过 empty 元素</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [empty x 3]</span></span><br></pre></td></tr></table></figure>\n<p>解决方法很简单，将 empty 数组 fill null 即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"literal\">null</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>注意：使用这种方法创建的数组，修改某一项时不影响其他项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"literal\">null</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 2&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"装箱拆箱操作","date":"2022-08-09T05:43:57.000Z","_content":"\n我们都知道属性和方法是对象上的，但是基本数据类型可以访问属性和方法，比如：'hello world'.length。这是由于浏览器在内部做了装箱和拆箱操作。\n\n#### 什么是装箱拆箱？\n装箱：把基本数据类型转化为对应的引用类型的操作\n拆箱：把引用类型转化为基本数据类型的操作\n\n基本数据类型：字符串(String)、数字(Number)、布尔(Boolean)、空(Null)、未定义(Undefined)、Symbol\n引用数据类型：对象(Object)、数组(Array)、函数(Function)\n四个基本的包装类型 String、Number、Boolean、Symbol\n\n什么是包装类型？\n在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，之所以具有对象特征的原因是字符串、数值、布尔类型数据是JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型\n\n#### 装箱\n装箱分为显式装箱和隐式装箱\n\n###### 显式装箱\n通过基本包装类型对象对基本类型进行显式装箱，即通过new的方式声明数据\n```JavaScript\nvar string = new String('test_string');\nvar number = new Number(1);\n```\n显式装箱可以对声明的对象进行属性和方法的添加，这是因为通过new创建的实例，在执行流离开当前作用域之前一直保留在内存中\n```JavaScript\nvar string = new String('test_string');\nstring.name = 'for test';\nstring.sayHi = function(){\n    console.log('this is test string');\n}\nconsole.log(string.name); // for test\nstring.sayHi(); // this is test string\n```\n\n###### 隐式装箱\n隐式装箱是引擎自动执行的\n基本类型不能添加属性和方法，添加会报错。但是常常在使用的时候，可以直接调用方法，比如：'test_string'.substring()、'test_string'.indexOf()等，这是由于浏览器在内部做了隐式装箱。\n\n下面以一个例子进行说明：\n```JavaScript\n// 第一步\nvar string = 'test_string';\n// 第二步\nvar result = string.substring(4);\nconsole.log(result); // _string\n```\n在上面这段代码里面实际的执行步骤是：\n1、先创建一个String类型的一个实例\n2、在实例中调用方法\n3、销毁这个实例\n```JavaScript\nvar string = 'test_string';\n// 1\nvar newString = new String(string);\n// 2\nvar result = newString.substring(4);\n// 3\nnewString = null;\n```\n基于以上的隐式装箱操作，我们可以在基本类型上使用方法\n隐式装箱当读取一个基本类型值时，后台会创建一个该基本类型所对应的基本包装类型对象。在这个基本类型的对象上调用方法，其实就是在这个基本类型对象上调用方法。这个基本包装类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立即被销毁。这也是在基本类型上添加属性和方法会不识别或报错的原因了\n\n\n显式装箱可以添加属性和方法，隐式装箱不能添加属性和方法\n\n引用类型与基本包装类型的主要区别就是对象的生存期，使用new创建的引用类型实例当执行流离开当前作用域之前，都一直保存在内存中，而自动创建的基本包装类型的对象，则只存在于一行代码执行的瞬间，然后就被销毁。这就意味着我们不能给基本包装类型添加属性和方法。\n#### 拆箱\n拆箱是和装箱相反的操作，即把引用类型转换成基本的数据类型。通常通过引用类型的valueOf()和toString()方法来实现，toString()返回字符串，valueOf()返回对象本身。\n需要注意的是，toString() 和 valueOf() 返回的值有一定差别\n```JavaScript\nvar numberObj = new Number(64);\nvar stringObj = new String('64');\nconsole.log(typeof numberObj); // object\nconsole.log(typeof stringObj); // object\n// 拆箱\nconsole.log(numberObj.valueOf()); // 64\nconsole.log(typeof numberObj.valueOf()); // number 基本的数字类型\nconsole.log(numberObj.toString()); // '64'\nconsole.log(typeof numberObj.toString()); // string 基本的字符类型\n\nconsole.log(stringObj.valueOf()); // '64'\nconsole.log(typeof stringObj.valueOf()); // string 基本的数据类型\nconsole.log(stringObj.toString()); // '64'\nconsole.log(typeof stringObj.toString()); // string 基本的数据类型\n```\n在进行拆箱操作的时候，toString()和valueOf()先执行哪个？在回答这个问题之前，我们先暂停一下，看一下包装类型中的symbol。\n\n这里简单介绍一下Symbol，感兴趣的可以自己去学习。\n\n###### Symbol\nSymbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突\n创建Symbol\n```JavaScript\nlet sym1 = Symbol();\nlet sym2 = Symbol('sym');\n```\n注意：\n1、每次调用Symbol都会创建新的symbol\n2、不可以用new 创建Symbol（围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。）\n3、symbol的参数可以不传，这个参数是用于描述symbol，可以用于调试但不是用于访问symbol本身\n4、创建Symbol包装器对象，可以使用Object()函数\n```JavaScript\n// 1\nSymbol('sym') === Symbol('sym'); // false\n// 2\nlet sym = new Symbol(); // TypeError: Symbol is not a constructor\n// 4\nlet sym2 = Symbol('sym');\ntypeof sym2; // 'symbol'\nlet sym2Obj = Object(sym2);\ntypeof sym2Obj; // 'object'\n```\n在[symbol的文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)中，有一个属性[Symbol.toPrimitive](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive)。文档中关于它的介绍是：\n\nSymbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。该函数被调用时，会被传递一个字符串参数 hint ，表示要转换到的原始值的预期类型。 hint 参数的取值是 \"number\"、\"string\" 和 \"default\" 中的任意一个。\n\n我们看一下这个属性是怎么干扰一个对象转换为原始值的\n```JavaScript\n// 一个没有提供 Symbol.toPrimitive 属性的对象，参与运算时的输出结果\nvar obj1 = {};\nconsole.log(+obj1);     // NaN\nconsole.log(`${obj1}`); // \"[object Object]\"\nconsole.log(obj1 + \"\"); // \"[object Object]\"\n\n// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果\nvar obj2 = {\n  [Symbol.toPrimitive](hint) {\n    if (hint == \"number\") {\n      return 10;\n    }\n    if (hint == \"string\") {\n      return \"hello\";\n    }\n    return true;\n  }\n};\nconsole.log(+obj2);     // 10      -- hint 参数值是 \"number\"\nconsole.log(`${obj2}`); // \"hello\" -- hint 参数值是 \"string\"\nconsole.log(obj2 + \"\"); // \"true\"  -- hint 参数值是 \"default\"\n```\n注意：\nhint 取值为：\n'number':该场合需要转成数值，\n'string':该场合需要转成字符串，\n'default':该场合可以转成数值，也可以转成字符串。\n\n#### 对象转换成原始值的方法及执行顺序\n以下优先级从上到下依次降低\n1、先判断对象中是否有/[Symbol.toPrimitive/]/(hint/)方法，如果有的话，优先执行该方法\n2、如果预期被转化成字符串类型时，则优先执行toString()方法\n3、如果预期被转化成默认类型或数字类型时，则优先执行valueOf()方法\n注意：若没有valueOf()方法，但是定义了toString()方法，则会执行toString()方法\n```JavaScript\nvar obj = {\n  [Symbol.toPrimitive](hint) {\n    console.log(hint);\n    return 'symbol';\n  },\n  toString() {\n    return 'string';\n  },\n  valueOf() {\n    return 'valueOf';\n  }\n};\nconsole.log(String(obj)); // string symbol\nconsole.log(Number(obj)); // number NaN\n\nvar obj1 = {\n  toString() {\n    return 'string';\n  },\n  valueOf() {\n    return 'valueOf';\n  }\n};\nconsole.log(String(obj1)); // string\nconsole.log(Number(obj1)); // NaN\n\nvar obj2 = {\n  toString() {\n    return '1';\n  },\n};\nconsole.log(String(obj2)); // '1'\nconsole.log(Number(obj2)); // 1\n\nvar obj3 = {\n  valueOf() {\n    return '2';\n  }\n};\nconsole.log(Number(obj3)); // 2\nconsole.log(String(obj3)); // [object Object]\n```","source":"_posts/devan-operation.md","raw":"---\ntitle: 装箱拆箱操作\ndate: 2022-08-09 13:43:57\ntags:\n---\n\n我们都知道属性和方法是对象上的，但是基本数据类型可以访问属性和方法，比如：'hello world'.length。这是由于浏览器在内部做了装箱和拆箱操作。\n\n#### 什么是装箱拆箱？\n装箱：把基本数据类型转化为对应的引用类型的操作\n拆箱：把引用类型转化为基本数据类型的操作\n\n基本数据类型：字符串(String)、数字(Number)、布尔(Boolean)、空(Null)、未定义(Undefined)、Symbol\n引用数据类型：对象(Object)、数组(Array)、函数(Function)\n四个基本的包装类型 String、Number、Boolean、Symbol\n\n什么是包装类型？\n在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，之所以具有对象特征的原因是字符串、数值、布尔类型数据是JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型\n\n#### 装箱\n装箱分为显式装箱和隐式装箱\n\n###### 显式装箱\n通过基本包装类型对象对基本类型进行显式装箱，即通过new的方式声明数据\n```JavaScript\nvar string = new String('test_string');\nvar number = new Number(1);\n```\n显式装箱可以对声明的对象进行属性和方法的添加，这是因为通过new创建的实例，在执行流离开当前作用域之前一直保留在内存中\n```JavaScript\nvar string = new String('test_string');\nstring.name = 'for test';\nstring.sayHi = function(){\n    console.log('this is test string');\n}\nconsole.log(string.name); // for test\nstring.sayHi(); // this is test string\n```\n\n###### 隐式装箱\n隐式装箱是引擎自动执行的\n基本类型不能添加属性和方法，添加会报错。但是常常在使用的时候，可以直接调用方法，比如：'test_string'.substring()、'test_string'.indexOf()等，这是由于浏览器在内部做了隐式装箱。\n\n下面以一个例子进行说明：\n```JavaScript\n// 第一步\nvar string = 'test_string';\n// 第二步\nvar result = string.substring(4);\nconsole.log(result); // _string\n```\n在上面这段代码里面实际的执行步骤是：\n1、先创建一个String类型的一个实例\n2、在实例中调用方法\n3、销毁这个实例\n```JavaScript\nvar string = 'test_string';\n// 1\nvar newString = new String(string);\n// 2\nvar result = newString.substring(4);\n// 3\nnewString = null;\n```\n基于以上的隐式装箱操作，我们可以在基本类型上使用方法\n隐式装箱当读取一个基本类型值时，后台会创建一个该基本类型所对应的基本包装类型对象。在这个基本类型的对象上调用方法，其实就是在这个基本类型对象上调用方法。这个基本包装类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立即被销毁。这也是在基本类型上添加属性和方法会不识别或报错的原因了\n\n\n显式装箱可以添加属性和方法，隐式装箱不能添加属性和方法\n\n引用类型与基本包装类型的主要区别就是对象的生存期，使用new创建的引用类型实例当执行流离开当前作用域之前，都一直保存在内存中，而自动创建的基本包装类型的对象，则只存在于一行代码执行的瞬间，然后就被销毁。这就意味着我们不能给基本包装类型添加属性和方法。\n#### 拆箱\n拆箱是和装箱相反的操作，即把引用类型转换成基本的数据类型。通常通过引用类型的valueOf()和toString()方法来实现，toString()返回字符串，valueOf()返回对象本身。\n需要注意的是，toString() 和 valueOf() 返回的值有一定差别\n```JavaScript\nvar numberObj = new Number(64);\nvar stringObj = new String('64');\nconsole.log(typeof numberObj); // object\nconsole.log(typeof stringObj); // object\n// 拆箱\nconsole.log(numberObj.valueOf()); // 64\nconsole.log(typeof numberObj.valueOf()); // number 基本的数字类型\nconsole.log(numberObj.toString()); // '64'\nconsole.log(typeof numberObj.toString()); // string 基本的字符类型\n\nconsole.log(stringObj.valueOf()); // '64'\nconsole.log(typeof stringObj.valueOf()); // string 基本的数据类型\nconsole.log(stringObj.toString()); // '64'\nconsole.log(typeof stringObj.toString()); // string 基本的数据类型\n```\n在进行拆箱操作的时候，toString()和valueOf()先执行哪个？在回答这个问题之前，我们先暂停一下，看一下包装类型中的symbol。\n\n这里简单介绍一下Symbol，感兴趣的可以自己去学习。\n\n###### Symbol\nSymbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突\n创建Symbol\n```JavaScript\nlet sym1 = Symbol();\nlet sym2 = Symbol('sym');\n```\n注意：\n1、每次调用Symbol都会创建新的symbol\n2、不可以用new 创建Symbol（围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。）\n3、symbol的参数可以不传，这个参数是用于描述symbol，可以用于调试但不是用于访问symbol本身\n4、创建Symbol包装器对象，可以使用Object()函数\n```JavaScript\n// 1\nSymbol('sym') === Symbol('sym'); // false\n// 2\nlet sym = new Symbol(); // TypeError: Symbol is not a constructor\n// 4\nlet sym2 = Symbol('sym');\ntypeof sym2; // 'symbol'\nlet sym2Obj = Object(sym2);\ntypeof sym2Obj; // 'object'\n```\n在[symbol的文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)中，有一个属性[Symbol.toPrimitive](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive)。文档中关于它的介绍是：\n\nSymbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。该函数被调用时，会被传递一个字符串参数 hint ，表示要转换到的原始值的预期类型。 hint 参数的取值是 \"number\"、\"string\" 和 \"default\" 中的任意一个。\n\n我们看一下这个属性是怎么干扰一个对象转换为原始值的\n```JavaScript\n// 一个没有提供 Symbol.toPrimitive 属性的对象，参与运算时的输出结果\nvar obj1 = {};\nconsole.log(+obj1);     // NaN\nconsole.log(`${obj1}`); // \"[object Object]\"\nconsole.log(obj1 + \"\"); // \"[object Object]\"\n\n// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果\nvar obj2 = {\n  [Symbol.toPrimitive](hint) {\n    if (hint == \"number\") {\n      return 10;\n    }\n    if (hint == \"string\") {\n      return \"hello\";\n    }\n    return true;\n  }\n};\nconsole.log(+obj2);     // 10      -- hint 参数值是 \"number\"\nconsole.log(`${obj2}`); // \"hello\" -- hint 参数值是 \"string\"\nconsole.log(obj2 + \"\"); // \"true\"  -- hint 参数值是 \"default\"\n```\n注意：\nhint 取值为：\n'number':该场合需要转成数值，\n'string':该场合需要转成字符串，\n'default':该场合可以转成数值，也可以转成字符串。\n\n#### 对象转换成原始值的方法及执行顺序\n以下优先级从上到下依次降低\n1、先判断对象中是否有/[Symbol.toPrimitive/]/(hint/)方法，如果有的话，优先执行该方法\n2、如果预期被转化成字符串类型时，则优先执行toString()方法\n3、如果预期被转化成默认类型或数字类型时，则优先执行valueOf()方法\n注意：若没有valueOf()方法，但是定义了toString()方法，则会执行toString()方法\n```JavaScript\nvar obj = {\n  [Symbol.toPrimitive](hint) {\n    console.log(hint);\n    return 'symbol';\n  },\n  toString() {\n    return 'string';\n  },\n  valueOf() {\n    return 'valueOf';\n  }\n};\nconsole.log(String(obj)); // string symbol\nconsole.log(Number(obj)); // number NaN\n\nvar obj1 = {\n  toString() {\n    return 'string';\n  },\n  valueOf() {\n    return 'valueOf';\n  }\n};\nconsole.log(String(obj1)); // string\nconsole.log(Number(obj1)); // NaN\n\nvar obj2 = {\n  toString() {\n    return '1';\n  },\n};\nconsole.log(String(obj2)); // '1'\nconsole.log(Number(obj2)); // 1\n\nvar obj3 = {\n  valueOf() {\n    return '2';\n  }\n};\nconsole.log(Number(obj3)); // 2\nconsole.log(String(obj3)); // [object Object]\n```","slug":"devan-operation","published":1,"updated":"2022-08-18T07:29:53.069Z","_id":"cl7eubjlj000dhgtkefolhc8i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们都知道属性和方法是对象上的，但是基本数据类型可以访问属性和方法，比如：’hello world’.length。这是由于浏览器在内部做了装箱和拆箱操作。</p>\n<h4 id=\"什么是装箱拆箱？\"><a href=\"#什么是装箱拆箱？\" class=\"headerlink\" title=\"什么是装箱拆箱？\"></a>什么是装箱拆箱？</h4><p>装箱：把基本数据类型转化为对应的引用类型的操作<br>拆箱：把引用类型转化为基本数据类型的操作</p>\n<p>基本数据类型：字符串(String)、数字(Number)、布尔(Boolean)、空(Null)、未定义(Undefined)、Symbol<br>引用数据类型：对象(Object)、数组(Array)、函数(Function)<br>四个基本的包装类型 String、Number、Boolean、Symbol</p>\n<p>什么是包装类型？<br>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，之所以具有对象特征的原因是字符串、数值、布尔类型数据是JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型</p>\n<h4 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h4><p>装箱分为显式装箱和隐式装箱</p>\n<h6 id=\"显式装箱\"><a href=\"#显式装箱\" class=\"headerlink\" title=\"显式装箱\"></a>显式装箱</h6><p>通过基本包装类型对象对基本类型进行显式装箱，即通过new的方式声明数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;test_string&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>显式装箱可以对声明的对象进行属性和方法的添加，这是因为通过new创建的实例，在执行流离开当前作用域之前一直保留在内存中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;test_string&#x27;</span>);</span><br><span class=\"line\">string.name = <span class=\"string\">&#x27;for test&#x27;</span>;</span><br><span class=\"line\">string.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;this is test string&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(string.name); <span class=\"comment\">// for test</span></span><br><span class=\"line\">string.sayHi(); <span class=\"comment\">// this is test string</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"隐式装箱\"><a href=\"#隐式装箱\" class=\"headerlink\" title=\"隐式装箱\"></a>隐式装箱</h6><p>隐式装箱是引擎自动执行的<br>基本类型不能添加属性和方法，添加会报错。但是常常在使用的时候，可以直接调用方法，比如：’test_string’.substring()、’test_string’.indexOf()等，这是由于浏览器在内部做了隐式装箱。</p>\n<p>下面以一个例子进行说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;test_string&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第二步</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = string.substring(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// _string</span></span><br></pre></td></tr></table></figure>\n<p>在上面这段代码里面实际的执行步骤是：<br>1、先创建一个String类型的一个实例<br>2、在实例中调用方法<br>3、销毁这个实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;test_string&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(string);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = newString.substring(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\">newString = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>基于以上的隐式装箱操作，我们可以在基本类型上使用方法<br>隐式装箱当读取一个基本类型值时，后台会创建一个该基本类型所对应的基本包装类型对象。在这个基本类型的对象上调用方法，其实就是在这个基本类型对象上调用方法。这个基本包装类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立即被销毁。这也是在基本类型上添加属性和方法会不识别或报错的原因了</p>\n<p>显式装箱可以添加属性和方法，隐式装箱不能添加属性和方法</p>\n<p>引用类型与基本包装类型的主要区别就是对象的生存期，使用new创建的引用类型实例当执行流离开当前作用域之前，都一直保存在内存中，而自动创建的基本包装类型的对象，则只存在于一行代码执行的瞬间，然后就被销毁。这就意味着我们不能给基本包装类型添加属性和方法。</p>\n<h4 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h4><p>拆箱是和装箱相反的操作，即把引用类型转换成基本的数据类型。通常通过引用类型的valueOf()和toString()方法来实现，toString()返回字符串，valueOf()返回对象本身。<br>需要注意的是，toString() 和 valueOf() 返回的值有一定差别</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numberObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">64</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringObj = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;64&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj); <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj); <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"comment\">// 拆箱</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numberObj.valueOf()); <span class=\"comment\">// 64</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj.valueOf()); <span class=\"comment\">// number 基本的数字类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numberObj.toString()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj.toString()); <span class=\"comment\">// string 基本的字符类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObj.valueOf()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj.valueOf()); <span class=\"comment\">// string 基本的数据类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObj.toString()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj.toString()); <span class=\"comment\">// string 基本的数据类型</span></span><br></pre></td></tr></table></figure>\n<p>在进行拆箱操作的时候，toString()和valueOf()先执行哪个？在回答这个问题之前，我们先暂停一下，看一下包装类型中的symbol。</p>\n<p>这里简单介绍一下Symbol，感兴趣的可以自己去学习。</p>\n<h6 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h6><p>Symbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突<br>创建Symbol</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sym1 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>注意：<br>1、每次调用Symbol都会创建新的symbol<br>2、不可以用new 创建Symbol（围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。）<br>3、symbol的参数可以不传，这个参数是用于描述symbol，可以用于调试但不是用于访问symbol本身<br>4、创建Symbol包装器对象，可以使用Object()函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>) === <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym = <span class=\"keyword\">new</span> <span class=\"built_in\">Symbol</span>(); <span class=\"comment\">// TypeError: Symbol is not a constructor</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> sym2; <span class=\"comment\">// &#x27;symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2Obj = <span class=\"built_in\">Object</span>(sym2);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> sym2Obj; <span class=\"comment\">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol的文档</a>中，有一个属性<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\">Symbol.toPrimitive</a>。文档中关于它的介绍是：</p>\n<p>Symbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。该函数被调用时，会被传递一个字符串参数 hint ，表示要转换到的原始值的预期类型。 hint 参数的取值是 “number”、”string” 和 “default” 中的任意一个。</p>\n<p>我们看一下这个属性是怎么干扰一个对象转换为原始值的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个没有提供 Symbol.toPrimitive 属性的对象，参与运算时的输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+obj1);     <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;obj1&#125;</span>`</span>); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1 + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hint == <span class=\"string\">&quot;number&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hint == <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+obj2);     <span class=\"comment\">// 10      -- hint 参数值是 &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;obj2&#125;</span>`</span>); <span class=\"comment\">// &quot;hello&quot; -- hint 参数值是 &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2 + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// &quot;true&quot;  -- hint 参数值是 &quot;default&quot;</span></span><br></pre></td></tr></table></figure>\n<p>注意：<br>hint 取值为：<br>‘number’:该场合需要转成数值，<br>‘string’:该场合需要转成字符串，<br>‘default’:该场合可以转成数值，也可以转成字符串。</p>\n<h4 id=\"对象转换成原始值的方法及执行顺序\"><a href=\"#对象转换成原始值的方法及执行顺序\" class=\"headerlink\" title=\"对象转换成原始值的方法及执行顺序\"></a>对象转换成原始值的方法及执行顺序</h4><p>以下优先级从上到下依次降低<br>1、先判断对象中是否有/[Symbol.toPrimitive/]/(hint/)方法，如果有的话，优先执行该方法<br>2、如果预期被转化成字符串类型时，则优先执行toString()方法<br>3、如果预期被转化成默认类型或数字类型时，则优先执行valueOf()方法<br>注意：若没有valueOf()方法，但是定义了toString()方法，则会执行toString()方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(hint);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;symbol&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;valueOf&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj)); <span class=\"comment\">// string symbol</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj)); <span class=\"comment\">// number NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;valueOf&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj1)); <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj1)); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj2)); <span class=\"comment\">// &#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj2)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj3)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj3)); <span class=\"comment\">// [object Object]</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>我们都知道属性和方法是对象上的，但是基本数据类型可以访问属性和方法，比如：’hello world’.length。这是由于浏览器在内部做了装箱和拆箱操作。</p>\n<h4 id=\"什么是装箱拆箱？\"><a href=\"#什么是装箱拆箱？\" class=\"headerlink\" title=\"什么是装箱拆箱？\"></a>什么是装箱拆箱？</h4><p>装箱：把基本数据类型转化为对应的引用类型的操作<br>拆箱：把引用类型转化为基本数据类型的操作</p>\n<p>基本数据类型：字符串(String)、数字(Number)、布尔(Boolean)、空(Null)、未定义(Undefined)、Symbol<br>引用数据类型：对象(Object)、数组(Array)、函数(Function)<br>四个基本的包装类型 String、Number、Boolean、Symbol</p>\n<p>什么是包装类型？<br>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，之所以具有对象特征的原因是字符串、数值、布尔类型数据是JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型</p>\n<h4 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h4><p>装箱分为显式装箱和隐式装箱</p>\n<h6 id=\"显式装箱\"><a href=\"#显式装箱\" class=\"headerlink\" title=\"显式装箱\"></a>显式装箱</h6><p>通过基本包装类型对象对基本类型进行显式装箱，即通过new的方式声明数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;test_string&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>显式装箱可以对声明的对象进行属性和方法的添加，这是因为通过new创建的实例，在执行流离开当前作用域之前一直保留在内存中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;test_string&#x27;</span>);</span><br><span class=\"line\">string.name = <span class=\"string\">&#x27;for test&#x27;</span>;</span><br><span class=\"line\">string.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;this is test string&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(string.name); <span class=\"comment\">// for test</span></span><br><span class=\"line\">string.sayHi(); <span class=\"comment\">// this is test string</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"隐式装箱\"><a href=\"#隐式装箱\" class=\"headerlink\" title=\"隐式装箱\"></a>隐式装箱</h6><p>隐式装箱是引擎自动执行的<br>基本类型不能添加属性和方法，添加会报错。但是常常在使用的时候，可以直接调用方法，比如：’test_string’.substring()、’test_string’.indexOf()等，这是由于浏览器在内部做了隐式装箱。</p>\n<p>下面以一个例子进行说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;test_string&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第二步</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = string.substring(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// _string</span></span><br></pre></td></tr></table></figure>\n<p>在上面这段代码里面实际的执行步骤是：<br>1、先创建一个String类型的一个实例<br>2、在实例中调用方法<br>3、销毁这个实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;test_string&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(string);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = newString.substring(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\">newString = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>基于以上的隐式装箱操作，我们可以在基本类型上使用方法<br>隐式装箱当读取一个基本类型值时，后台会创建一个该基本类型所对应的基本包装类型对象。在这个基本类型的对象上调用方法，其实就是在这个基本类型对象上调用方法。这个基本包装类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立即被销毁。这也是在基本类型上添加属性和方法会不识别或报错的原因了</p>\n<p>显式装箱可以添加属性和方法，隐式装箱不能添加属性和方法</p>\n<p>引用类型与基本包装类型的主要区别就是对象的生存期，使用new创建的引用类型实例当执行流离开当前作用域之前，都一直保存在内存中，而自动创建的基本包装类型的对象，则只存在于一行代码执行的瞬间，然后就被销毁。这就意味着我们不能给基本包装类型添加属性和方法。</p>\n<h4 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h4><p>拆箱是和装箱相反的操作，即把引用类型转换成基本的数据类型。通常通过引用类型的valueOf()和toString()方法来实现，toString()返回字符串，valueOf()返回对象本身。<br>需要注意的是，toString() 和 valueOf() 返回的值有一定差别</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numberObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">64</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringObj = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;64&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj); <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj); <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"comment\">// 拆箱</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numberObj.valueOf()); <span class=\"comment\">// 64</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj.valueOf()); <span class=\"comment\">// number 基本的数字类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numberObj.toString()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj.toString()); <span class=\"comment\">// string 基本的字符类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObj.valueOf()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj.valueOf()); <span class=\"comment\">// string 基本的数据类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObj.toString()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj.toString()); <span class=\"comment\">// string 基本的数据类型</span></span><br></pre></td></tr></table></figure>\n<p>在进行拆箱操作的时候，toString()和valueOf()先执行哪个？在回答这个问题之前，我们先暂停一下，看一下包装类型中的symbol。</p>\n<p>这里简单介绍一下Symbol，感兴趣的可以自己去学习。</p>\n<h6 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h6><p>Symbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突<br>创建Symbol</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sym1 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>注意：<br>1、每次调用Symbol都会创建新的symbol<br>2、不可以用new 创建Symbol（围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。）<br>3、symbol的参数可以不传，这个参数是用于描述symbol，可以用于调试但不是用于访问symbol本身<br>4、创建Symbol包装器对象，可以使用Object()函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>) === <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym = <span class=\"keyword\">new</span> <span class=\"built_in\">Symbol</span>(); <span class=\"comment\">// TypeError: Symbol is not a constructor</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> sym2; <span class=\"comment\">// &#x27;symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2Obj = <span class=\"built_in\">Object</span>(sym2);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> sym2Obj; <span class=\"comment\">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol的文档</a>中，有一个属性<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\">Symbol.toPrimitive</a>。文档中关于它的介绍是：</p>\n<p>Symbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。该函数被调用时，会被传递一个字符串参数 hint ，表示要转换到的原始值的预期类型。 hint 参数的取值是 “number”、”string” 和 “default” 中的任意一个。</p>\n<p>我们看一下这个属性是怎么干扰一个对象转换为原始值的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个没有提供 Symbol.toPrimitive 属性的对象，参与运算时的输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+obj1);     <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;obj1&#125;</span>`</span>); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1 + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hint == <span class=\"string\">&quot;number&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hint == <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+obj2);     <span class=\"comment\">// 10      -- hint 参数值是 &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;obj2&#125;</span>`</span>); <span class=\"comment\">// &quot;hello&quot; -- hint 参数值是 &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2 + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// &quot;true&quot;  -- hint 参数值是 &quot;default&quot;</span></span><br></pre></td></tr></table></figure>\n<p>注意：<br>hint 取值为：<br>‘number’:该场合需要转成数值，<br>‘string’:该场合需要转成字符串，<br>‘default’:该场合可以转成数值，也可以转成字符串。</p>\n<h4 id=\"对象转换成原始值的方法及执行顺序\"><a href=\"#对象转换成原始值的方法及执行顺序\" class=\"headerlink\" title=\"对象转换成原始值的方法及执行顺序\"></a>对象转换成原始值的方法及执行顺序</h4><p>以下优先级从上到下依次降低<br>1、先判断对象中是否有/[Symbol.toPrimitive/]/(hint/)方法，如果有的话，优先执行该方法<br>2、如果预期被转化成字符串类型时，则优先执行toString()方法<br>3、如果预期被转化成默认类型或数字类型时，则优先执行valueOf()方法<br>注意：若没有valueOf()方法，但是定义了toString()方法，则会执行toString()方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(hint);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;symbol&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;valueOf&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj)); <span class=\"comment\">// string symbol</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj)); <span class=\"comment\">// number NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;valueOf&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj1)); <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj1)); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj2)); <span class=\"comment\">// &#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj2)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj3)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj3)); <span class=\"comment\">// [object Object]</span></span><br></pre></td></tr></table></figure>"},{"title":"开发一个vscode插件的流程","date":"2022-08-05T02:33:23.000Z","_content":"\n#### vscode中文手册\nhttps://www.bookstack.cn/read/CN-VScode-Docs/README.md\n\n#### vscode插件脚手架\n安装脚手架和代码生成器\n```javascript\nnpm install -g yo generator-code\n```\n生成vscode脚手架项目\n```javascript\nyo code\n```","source":"_posts/create-vscode-plugin.md","raw":"---\ntitle: 开发一个vscode插件的流程\ndate: 2022-08-05 10:33:23\ntags:\n---\n\n#### vscode中文手册\nhttps://www.bookstack.cn/read/CN-VScode-Docs/README.md\n\n#### vscode插件脚手架\n安装脚手架和代码生成器\n```javascript\nnpm install -g yo generator-code\n```\n生成vscode脚手架项目\n```javascript\nyo code\n```","slug":"create-vscode-plugin","published":1,"updated":"2022-08-05T06:08:56.829Z","_id":"cl7eubjlk000ehgtk33g19z61","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"vscode中文手册\"><a href=\"#vscode中文手册\" class=\"headerlink\" title=\"vscode中文手册\"></a>vscode中文手册</h4><p><a href=\"https://www.bookstack.cn/read/CN-VScode-Docs/README.md\">https://www.bookstack.cn/read/CN-VScode-Docs/README.md</a></p>\n<h4 id=\"vscode插件脚手架\"><a href=\"#vscode插件脚手架\" class=\"headerlink\" title=\"vscode插件脚手架\"></a>vscode插件脚手架</h4><p>安装脚手架和代码生成器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yo generator-code</span><br></pre></td></tr></table></figure>\n<p>生成vscode脚手架项目</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo code</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"vscode中文手册\"><a href=\"#vscode中文手册\" class=\"headerlink\" title=\"vscode中文手册\"></a>vscode中文手册</h4><p><a href=\"https://www.bookstack.cn/read/CN-VScode-Docs/README.md\">https://www.bookstack.cn/read/CN-VScode-Docs/README.md</a></p>\n<h4 id=\"vscode插件脚手架\"><a href=\"#vscode插件脚手架\" class=\"headerlink\" title=\"vscode插件脚手架\"></a>vscode插件脚手架</h4><p>安装脚手架和代码生成器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yo generator-code</span><br></pre></td></tr></table></figure>\n<p>生成vscode脚手架项目</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo code</span><br></pre></td></tr></table></figure>"},{"title":"各类文档地址","date":"2022-07-05T08:17:32.000Z","_content":"\n#### code spell checker配置项说明\n[文档地址](https://streetsidesoftware.com/vscode-spell-checker/docs/configuration/#code-spell-checker)\n\n#### 查看chrome各个版本功能变更\n[chrome status](https://chromestatus.com/features)\n\n#### 查看== 、=== 、if()在不同情况下的执行结果\n[地址](https://dorey.github.io/JavaScript-Equality-Table/)\n\n#### css层叠样式表\n[官方文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade)\n\n#### Recoil\n[官方文档](https://recoiljs.org/)\n\n#### React\n[官方文档](https://reactjs.org/)\n\n#### vue\n[官方文档](https://vuejs.org/)\n\n#### VueUse--vue使用的hooks库\n[官方文档](https://vueuse.org/)\n\n#### HTML\n[官方文档](https://html.spec.whatwg.org/)","source":"_posts/document-location.md","raw":"---\ntitle: 各类文档地址\ndate: 2022-07-05 16:17:32\ntags:\n---\n\n#### code spell checker配置项说明\n[文档地址](https://streetsidesoftware.com/vscode-spell-checker/docs/configuration/#code-spell-checker)\n\n#### 查看chrome各个版本功能变更\n[chrome status](https://chromestatus.com/features)\n\n#### 查看== 、=== 、if()在不同情况下的执行结果\n[地址](https://dorey.github.io/JavaScript-Equality-Table/)\n\n#### css层叠样式表\n[官方文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade)\n\n#### Recoil\n[官方文档](https://recoiljs.org/)\n\n#### React\n[官方文档](https://reactjs.org/)\n\n#### vue\n[官方文档](https://vuejs.org/)\n\n#### VueUse--vue使用的hooks库\n[官方文档](https://vueuse.org/)\n\n#### HTML\n[官方文档](https://html.spec.whatwg.org/)","slug":"document-location","published":1,"updated":"2022-08-16T03:06:06.205Z","_id":"cl7eubjlm000fhgtk2zu2bzv4","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"code-spell-checker配置项说明\"><a href=\"#code-spell-checker配置项说明\" class=\"headerlink\" title=\"code spell checker配置项说明\"></a>code spell checker配置项说明</h4><p><a href=\"https://streetsidesoftware.com/vscode-spell-checker/docs/configuration/#code-spell-checker\">文档地址</a></p>\n<h4 id=\"查看chrome各个版本功能变更\"><a href=\"#查看chrome各个版本功能变更\" class=\"headerlink\" title=\"查看chrome各个版本功能变更\"></a>查看chrome各个版本功能变更</h4><p><a href=\"https://chromestatus.com/features\">chrome status</a></p>\n<h4 id=\"查看-、-、if-在不同情况下的执行结果\"><a href=\"#查看-、-、if-在不同情况下的执行结果\" class=\"headerlink\" title=\"查看== 、=== 、if()在不同情况下的执行结果\"></a>查看== 、=== 、if()在不同情况下的执行结果</h4><p><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">地址</a></p>\n<h4 id=\"css层叠样式表\"><a href=\"#css层叠样式表\" class=\"headerlink\" title=\"css层叠样式表\"></a>css层叠样式表</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade\">官方文档</a></p>\n<h4 id=\"Recoil\"><a href=\"#Recoil\" class=\"headerlink\" title=\"Recoil\"></a>Recoil</h4><p><a href=\"https://recoiljs.org/\">官方文档</a></p>\n<h4 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h4><p><a href=\"https://reactjs.org/\">官方文档</a></p>\n<h4 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h4><p><a href=\"https://vuejs.org/\">官方文档</a></p>\n<h4 id=\"VueUse–vue使用的hooks库\"><a href=\"#VueUse–vue使用的hooks库\" class=\"headerlink\" title=\"VueUse–vue使用的hooks库\"></a>VueUse–vue使用的hooks库</h4><p><a href=\"https://vueuse.org/\">官方文档</a></p>\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p><a href=\"https://html.spec.whatwg.org/\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"code-spell-checker配置项说明\"><a href=\"#code-spell-checker配置项说明\" class=\"headerlink\" title=\"code spell checker配置项说明\"></a>code spell checker配置项说明</h4><p><a href=\"https://streetsidesoftware.com/vscode-spell-checker/docs/configuration/#code-spell-checker\">文档地址</a></p>\n<h4 id=\"查看chrome各个版本功能变更\"><a href=\"#查看chrome各个版本功能变更\" class=\"headerlink\" title=\"查看chrome各个版本功能变更\"></a>查看chrome各个版本功能变更</h4><p><a href=\"https://chromestatus.com/features\">chrome status</a></p>\n<h4 id=\"查看-、-、if-在不同情况下的执行结果\"><a href=\"#查看-、-、if-在不同情况下的执行结果\" class=\"headerlink\" title=\"查看== 、=== 、if()在不同情况下的执行结果\"></a>查看== 、=== 、if()在不同情况下的执行结果</h4><p><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">地址</a></p>\n<h4 id=\"css层叠样式表\"><a href=\"#css层叠样式表\" class=\"headerlink\" title=\"css层叠样式表\"></a>css层叠样式表</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade\">官方文档</a></p>\n<h4 id=\"Recoil\"><a href=\"#Recoil\" class=\"headerlink\" title=\"Recoil\"></a>Recoil</h4><p><a href=\"https://recoiljs.org/\">官方文档</a></p>\n<h4 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h4><p><a href=\"https://reactjs.org/\">官方文档</a></p>\n<h4 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h4><p><a href=\"https://vuejs.org/\">官方文档</a></p>\n<h4 id=\"VueUse–vue使用的hooks库\"><a href=\"#VueUse–vue使用的hooks库\" class=\"headerlink\" title=\"VueUse–vue使用的hooks库\"></a>VueUse–vue使用的hooks库</h4><p><a href=\"https://vueuse.org/\">官方文档</a></p>\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p><a href=\"https://html.spec.whatwg.org/\">官方文档</a></p>\n"},{"title":"伪数组","date":"2022-08-04T02:57:14.000Z","_content":"\n#### 概念\nArrayLike，也叫作类数组。是一种按照索引存储数据且具有length属性的对象。\n\n#### 特征\n1、具有length属性\n2、按照索引方式存储数据\n3、不具有数组的方法，如push、pop等\n![document获取的伪数组](document.png)\n\n#### 有哪些常见的伪数组\n1、function的arguments对象\n2、document.getElementsByTagName、document.getElementsByClassName等document方法获取的NodeList对象\n3、上传文件是选择的file对象\n4、自定义的某些对象\n\n#### 判断一个数组是不是伪数组的方法\n1、Array.isArray\n```javascript\n// fakeArray表示伪数组\n// array 表示正常数组\nArray.isArray(fakeArray); // false\nArray.isArray(array); // true\n```\n2、instanceof\n```javascript\n// fakeArray表示伪数组\n// array 表示正常数组\nfakeArray instanceof Array; // false\narray instanceof Array; // true\n```\n\n#### 将数组转为真正数组的方法\n1、使用Array.prototype.slice.call()\n![Array.prototype.slice.call转换](prototype_call.png)\n2、使用[].slice.call()\n![slice.call转换](slice_call.png)\n3、使用Array.from()\n![array.from转换](array_from.png)\n","source":"_posts/fake-array.md","raw":"---\ntitle: 伪数组\ndate: 2022-08-04 10:57:14\ntags:\n---\n\n#### 概念\nArrayLike，也叫作类数组。是一种按照索引存储数据且具有length属性的对象。\n\n#### 特征\n1、具有length属性\n2、按照索引方式存储数据\n3、不具有数组的方法，如push、pop等\n![document获取的伪数组](document.png)\n\n#### 有哪些常见的伪数组\n1、function的arguments对象\n2、document.getElementsByTagName、document.getElementsByClassName等document方法获取的NodeList对象\n3、上传文件是选择的file对象\n4、自定义的某些对象\n\n#### 判断一个数组是不是伪数组的方法\n1、Array.isArray\n```javascript\n// fakeArray表示伪数组\n// array 表示正常数组\nArray.isArray(fakeArray); // false\nArray.isArray(array); // true\n```\n2、instanceof\n```javascript\n// fakeArray表示伪数组\n// array 表示正常数组\nfakeArray instanceof Array; // false\narray instanceof Array; // true\n```\n\n#### 将数组转为真正数组的方法\n1、使用Array.prototype.slice.call()\n![Array.prototype.slice.call转换](prototype_call.png)\n2、使用[].slice.call()\n![slice.call转换](slice_call.png)\n3、使用Array.from()\n![array.from转换](array_from.png)\n","slug":"fake-array","published":1,"updated":"2022-08-04T07:17:36.091Z","_id":"cl7eubjln000ghgtkemej7q7p","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>ArrayLike，也叫作类数组。是一种按照索引存储数据且具有length属性的对象。</p>\n<h4 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h4><p>1、具有length属性<br>2、按照索引方式存储数据<br>3、不具有数组的方法，如push、pop等<br><img src=\"/2022/08/04/fake-array/document.png\" alt=\"document获取的伪数组\"></p>\n<h4 id=\"有哪些常见的伪数组\"><a href=\"#有哪些常见的伪数组\" class=\"headerlink\" title=\"有哪些常见的伪数组\"></a>有哪些常见的伪数组</h4><p>1、function的arguments对象<br>2、document.getElementsByTagName、document.getElementsByClassName等document方法获取的NodeList对象<br>3、上传文件是选择的file对象<br>4、自定义的某些对象</p>\n<h4 id=\"判断一个数组是不是伪数组的方法\"><a href=\"#判断一个数组是不是伪数组的方法\" class=\"headerlink\" title=\"判断一个数组是不是伪数组的方法\"></a>判断一个数组是不是伪数组的方法</h4><p>1、Array.isArray</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fakeArray表示伪数组</span></span><br><span class=\"line\"><span class=\"comment\">// array 表示正常数组</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(fakeArray); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(array); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>2、instanceof</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fakeArray表示伪数组</span></span><br><span class=\"line\"><span class=\"comment\">// array 表示正常数组</span></span><br><span class=\"line\">fakeArray <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将数组转为真正数组的方法\"><a href=\"#将数组转为真正数组的方法\" class=\"headerlink\" title=\"将数组转为真正数组的方法\"></a>将数组转为真正数组的方法</h4><p>1、使用Array.prototype.slice.call()<br><img src=\"/2022/08/04/fake-array/prototype_call.png\" alt=\"Array.prototype.slice.call转换\"><br>2、使用[].slice.call()<br><img src=\"/2022/08/04/fake-array/slice_call.png\" alt=\"slice.call转换\"><br>3、使用Array.from()<br><img src=\"/2022/08/04/fake-array/array_from.png\" alt=\"array.from转换\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>ArrayLike，也叫作类数组。是一种按照索引存储数据且具有length属性的对象。</p>\n<h4 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h4><p>1、具有length属性<br>2、按照索引方式存储数据<br>3、不具有数组的方法，如push、pop等<br><img src=\"/2022/08/04/fake-array/document.png\" alt=\"document获取的伪数组\"></p>\n<h4 id=\"有哪些常见的伪数组\"><a href=\"#有哪些常见的伪数组\" class=\"headerlink\" title=\"有哪些常见的伪数组\"></a>有哪些常见的伪数组</h4><p>1、function的arguments对象<br>2、document.getElementsByTagName、document.getElementsByClassName等document方法获取的NodeList对象<br>3、上传文件是选择的file对象<br>4、自定义的某些对象</p>\n<h4 id=\"判断一个数组是不是伪数组的方法\"><a href=\"#判断一个数组是不是伪数组的方法\" class=\"headerlink\" title=\"判断一个数组是不是伪数组的方法\"></a>判断一个数组是不是伪数组的方法</h4><p>1、Array.isArray</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fakeArray表示伪数组</span></span><br><span class=\"line\"><span class=\"comment\">// array 表示正常数组</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(fakeArray); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(array); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>2、instanceof</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fakeArray表示伪数组</span></span><br><span class=\"line\"><span class=\"comment\">// array 表示正常数组</span></span><br><span class=\"line\">fakeArray <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将数组转为真正数组的方法\"><a href=\"#将数组转为真正数组的方法\" class=\"headerlink\" title=\"将数组转为真正数组的方法\"></a>将数组转为真正数组的方法</h4><p>1、使用Array.prototype.slice.call()<br><img src=\"/2022/08/04/fake-array/prototype_call.png\" alt=\"Array.prototype.slice.call转换\"><br>2、使用[].slice.call()<br><img src=\"/2022/08/04/fake-array/slice_call.png\" alt=\"slice.call转换\"><br>3、使用Array.from()<br><img src=\"/2022/08/04/fake-array/array_from.png\" alt=\"array.from转换\"></p>\n"},{"title":"github生成令牌(Personal_access_tokens)操作步骤","date":"2022-06-30T03:23:56.000Z","_content":"\n#### github生成令牌\n(1)登录[GitHub网站](https://github.com/)\n(2)找到setting页面 -> Developer setting\n(3)选择 Personal access tokens ，点击 Generate new token 按钮\n(4)需要填写token的权限范围\n(5)**<font color=\"Red\">注意：生成的token只在生成后可以看一次，一定要记得保存！！！</font>**","source":"_posts/github生成令牌-Personal-access-tokens-操作步骤.md","raw":"---\ntitle: github生成令牌(Personal_access_tokens)操作步骤\ndate: 2022-06-30 11:23:56\ntags:\n---\n\n#### github生成令牌\n(1)登录[GitHub网站](https://github.com/)\n(2)找到setting页面 -> Developer setting\n(3)选择 Personal access tokens ，点击 Generate new token 按钮\n(4)需要填写token的权限范围\n(5)**<font color=\"Red\">注意：生成的token只在生成后可以看一次，一定要记得保存！！！</font>**","slug":"github生成令牌-Personal-access-tokens-操作步骤","published":1,"updated":"2022-06-30T05:18:19.719Z","_id":"cl7eubjlo000hhgtkg63y1kkd","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"github生成令牌\"><a href=\"#github生成令牌\" class=\"headerlink\" title=\"github生成令牌\"></a>github生成令牌</h4><p>(1)登录<a href=\"https://github.com/\">GitHub网站</a><br>(2)找到setting页面 -&gt; Developer setting<br>(3)选择 Personal access tokens ，点击 Generate new token 按钮<br>(4)需要填写token的权限范围<br>(5)<strong><font color=\"Red\">注意：生成的token只在生成后可以看一次，一定要记得保存！！！</font></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"github生成令牌\"><a href=\"#github生成令牌\" class=\"headerlink\" title=\"github生成令牌\"></a>github生成令牌</h4><p>(1)登录<a href=\"https://github.com/\">GitHub网站</a><br>(2)找到setting页面 -&gt; Developer setting<br>(3)选择 Personal access tokens ，点击 Generate new token 按钮<br>(4)需要填写token的权限范围<br>(5)<strong><font color=\"Red\">注意：生成的token只在生成后可以看一次，一定要记得保存！！！</font></strong></p>\n"},{"title":"github推送代码弹窗应该怎么输入？","date":"2022-06-30T02:45:15.000Z","_content":"\n#### github推送代码弹窗应该怎么输入?\n\n当本地修改代码后，需要推送到github仓库时，由于本地未记录用户名与密码，导致push时，先后出现GitHub登录弹窗，以及一个小弹窗，\n鉴于在输入实际操作中，两次输入username和password不知道应该怎么输入，做个记录，避免遗忘。\n\n(1)本地修改代码，提交。本文仅从git push开始记录，之前的命令和操作如果不知道怎么办，请自行百度或Google。\n```javascript\ngit push\n```\n---- 注意：有时推送代码时，会出现超时等情况，可能是网络问题，可多试几次或稍后再试\n```javascript\n$ git push\nfatal: unable to access 'https://github.com/sunjinkang/test_vue3_sql.git/': Failed to connect to github.com port 443: Timed out\n\n// --------\n$ git push\nfatal: unable to access 'https://github.com/sunjinkang/test_vue3_sql.git/': OpenSSL SSL_read: Connection was aborted, errno 10053\n```\n(2)第一个GitHub登录弹窗\n![github_login]()\n该弹窗中 **username为github的登录邮箱，password为GitHub的登录密码**\n---- 注意：本次输入完成后，虽然输入的均为正确信息，但是由于GitHub不在支持用户名密码推送，改为使用令牌，导致输入后悔提示登录失败\n```javascript\nLogon failed, use ctrl+c to cancel basic credential prompt.\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\n```\n(3)第二个登录弹窗\n![login_insert]\n该弹窗会出现两次，第一次输入username，第二次输入password，**username为GitHub的登录邮箱，<font color=\"Red\">password为GitHub网站的连接令牌(Personal access tokens)(如何生成token可以查看文章[github生成令牌](/2022/06/30/github生成令牌-Personal-access-tokens-操作步骤/))</font>**\n---- 注意：如果password输入错误，会导致无法提交\n```javascript\n$ git push\nLogon failed, use ctrl+c to cancel basic credential prompt.\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: Authentication failed for 'https://github.com/xxxxxxx.git/'\n```\n\n当username和password输入完成后，就可以正常push代码啦","source":"_posts/github推送代码弹窗应该怎么输入？.md","raw":"---\ntitle: github推送代码弹窗应该怎么输入？\ndate: 2022-06-30 10:45:15\ntags:\n---\n\n#### github推送代码弹窗应该怎么输入?\n\n当本地修改代码后，需要推送到github仓库时，由于本地未记录用户名与密码，导致push时，先后出现GitHub登录弹窗，以及一个小弹窗，\n鉴于在输入实际操作中，两次输入username和password不知道应该怎么输入，做个记录，避免遗忘。\n\n(1)本地修改代码，提交。本文仅从git push开始记录，之前的命令和操作如果不知道怎么办，请自行百度或Google。\n```javascript\ngit push\n```\n---- 注意：有时推送代码时，会出现超时等情况，可能是网络问题，可多试几次或稍后再试\n```javascript\n$ git push\nfatal: unable to access 'https://github.com/sunjinkang/test_vue3_sql.git/': Failed to connect to github.com port 443: Timed out\n\n// --------\n$ git push\nfatal: unable to access 'https://github.com/sunjinkang/test_vue3_sql.git/': OpenSSL SSL_read: Connection was aborted, errno 10053\n```\n(2)第一个GitHub登录弹窗\n![github_login]()\n该弹窗中 **username为github的登录邮箱，password为GitHub的登录密码**\n---- 注意：本次输入完成后，虽然输入的均为正确信息，但是由于GitHub不在支持用户名密码推送，改为使用令牌，导致输入后悔提示登录失败\n```javascript\nLogon failed, use ctrl+c to cancel basic credential prompt.\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\n```\n(3)第二个登录弹窗\n![login_insert]\n该弹窗会出现两次，第一次输入username，第二次输入password，**username为GitHub的登录邮箱，<font color=\"Red\">password为GitHub网站的连接令牌(Personal access tokens)(如何生成token可以查看文章[github生成令牌](/2022/06/30/github生成令牌-Personal-access-tokens-操作步骤/))</font>**\n---- 注意：如果password输入错误，会导致无法提交\n```javascript\n$ git push\nLogon failed, use ctrl+c to cancel basic credential prompt.\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: Authentication failed for 'https://github.com/xxxxxxx.git/'\n```\n\n当username和password输入完成后，就可以正常push代码啦","slug":"github推送代码弹窗应该怎么输入？","published":1,"updated":"2022-06-30T05:22:12.389Z","_id":"cl7eubjlp000ihgtkcavnb1yc","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"github推送代码弹窗应该怎么输入\"><a href=\"#github推送代码弹窗应该怎么输入\" class=\"headerlink\" title=\"github推送代码弹窗应该怎么输入?\"></a>github推送代码弹窗应该怎么输入?</h4><p>当本地修改代码后，需要推送到github仓库时，由于本地未记录用户名与密码，导致push时，先后出现GitHub登录弹窗，以及一个小弹窗，<br>鉴于在输入实际操作中，两次输入username和password不知道应该怎么输入，做个记录，避免遗忘。</p>\n<p>(1)本地修改代码，提交。本文仅从git push开始记录，之前的命令和操作如果不知道怎么办，请自行百度或Google。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>—- 注意：有时推送代码时，会出现超时等情况，可能是网络问题，可多试几次或稍后再试</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br><span class=\"line\"><span class=\"attr\">fatal</span>: unable to access <span class=\"string\">&#x27;https://github.com/sunjinkang/test_vue3_sql.git/&#x27;</span>: Failed to connect to github.com port <span class=\"number\">443</span>: Timed out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --------</span></span><br><span class=\"line\">$ git push</span><br><span class=\"line\"><span class=\"attr\">fatal</span>: unable to access <span class=\"string\">&#x27;https://github.com/sunjinkang/test_vue3_sql.git/&#x27;</span>: OpenSSL SSL_read: Connection was aborted, errno <span class=\"number\">10053</span></span><br></pre></td></tr></table></figure>\n<p>(2)第一个GitHub登录弹窗<br><img src alt=\"github_login\"><br>该弹窗中 <strong>username为github的登录邮箱，password为GitHub的登录密码</strong><br>—- 注意：本次输入完成后，虽然输入的均为正确信息，但是由于GitHub不在支持用户名密码推送，改为使用令牌，导致输入后悔提示登录失败</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Support <span class=\"keyword\">for</span> password authentication was removed on August <span class=\"number\">13</span>, <span class=\"number\">2021.</span> Please use a personal access token instead.</span><br></pre></td></tr></table></figure>\n<p>(3)第二个登录弹窗<br>![login_insert]<br>该弹窗会出现两次，第一次输入username，第二次输入password，<strong>username为GitHub的登录邮箱，<font color=\"Red\">password为GitHub网站的连接令牌(Personal access tokens)(如何生成token可以查看文章<a href=\"/2022/06/30/github%E7%94%9F%E6%88%90%E4%BB%A4%E7%89%8C-Personal-access-tokens-%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4/\">github生成令牌</a>)</font></strong><br>—- 注意：如果password输入错误，会导致无法提交</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br><span class=\"line\">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Support <span class=\"keyword\">for</span> password authentication was removed on August <span class=\"number\">13</span>, <span class=\"number\">2021.</span> Please use a personal access token instead.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Please see https:<span class=\"comment\">//github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span></span><br><span class=\"line\">fatal: Authentication failed <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com/xxxxxxx.git/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当username和password输入完成后，就可以正常push代码啦</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"github推送代码弹窗应该怎么输入\"><a href=\"#github推送代码弹窗应该怎么输入\" class=\"headerlink\" title=\"github推送代码弹窗应该怎么输入?\"></a>github推送代码弹窗应该怎么输入?</h4><p>当本地修改代码后，需要推送到github仓库时，由于本地未记录用户名与密码，导致push时，先后出现GitHub登录弹窗，以及一个小弹窗，<br>鉴于在输入实际操作中，两次输入username和password不知道应该怎么输入，做个记录，避免遗忘。</p>\n<p>(1)本地修改代码，提交。本文仅从git push开始记录，之前的命令和操作如果不知道怎么办，请自行百度或Google。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>—- 注意：有时推送代码时，会出现超时等情况，可能是网络问题，可多试几次或稍后再试</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br><span class=\"line\"><span class=\"attr\">fatal</span>: unable to access <span class=\"string\">&#x27;https://github.com/sunjinkang/test_vue3_sql.git/&#x27;</span>: Failed to connect to github.com port <span class=\"number\">443</span>: Timed out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --------</span></span><br><span class=\"line\">$ git push</span><br><span class=\"line\"><span class=\"attr\">fatal</span>: unable to access <span class=\"string\">&#x27;https://github.com/sunjinkang/test_vue3_sql.git/&#x27;</span>: OpenSSL SSL_read: Connection was aborted, errno <span class=\"number\">10053</span></span><br></pre></td></tr></table></figure>\n<p>(2)第一个GitHub登录弹窗<br><img src alt=\"github_login\"><br>该弹窗中 <strong>username为github的登录邮箱，password为GitHub的登录密码</strong><br>—- 注意：本次输入完成后，虽然输入的均为正确信息，但是由于GitHub不在支持用户名密码推送，改为使用令牌，导致输入后悔提示登录失败</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Support <span class=\"keyword\">for</span> password authentication was removed on August <span class=\"number\">13</span>, <span class=\"number\">2021.</span> Please use a personal access token instead.</span><br></pre></td></tr></table></figure>\n<p>(3)第二个登录弹窗<br>![login_insert]<br>该弹窗会出现两次，第一次输入username，第二次输入password，<strong>username为GitHub的登录邮箱，<font color=\"Red\">password为GitHub网站的连接令牌(Personal access tokens)(如何生成token可以查看文章<a href=\"/2022/06/30/github%E7%94%9F%E6%88%90%E4%BB%A4%E7%89%8C-Personal-access-tokens-%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4/\">github生成令牌</a>)</font></strong><br>—- 注意：如果password输入错误，会导致无法提交</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br><span class=\"line\">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Support <span class=\"keyword\">for</span> password authentication was removed on August <span class=\"number\">13</span>, <span class=\"number\">2021.</span> Please use a personal access token instead.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Please see https:<span class=\"comment\">//github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span></span><br><span class=\"line\">fatal: Authentication failed <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com/xxxxxxx.git/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当username和password输入完成后，就可以正常push代码啦</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### deploy产生如下错误的解决方法\n(1)使用hexo部署报错Error: Spawn failed\n解决办法：删除.deploy_git文件夹 -> 修改_config.yml文件中deploy的repository地址，修改为SSH方式 -> 按顺序执行命令hexo clean、hexo generate、hexo deploy\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### deploy产生如下错误的解决方法\n(1)使用hexo部署报错Error: Spawn failed\n解决办法：删除.deploy_git文件夹 -> 修改_config.yml文件中deploy的repository地址，修改为SSH方式 -> 按顺序执行命令hexo clean、hexo generate、hexo deploy\n","slug":"hello-world","published":1,"date":"2022-01-08T00:57:36.399Z","updated":"2022-06-22T15:45:33.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eubjlq000jhgtk3b07abt6","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"deploy产生如下错误的解决方法\"><a href=\"#deploy产生如下错误的解决方法\" class=\"headerlink\" title=\"deploy产生如下错误的解决方法\"></a>deploy产生如下错误的解决方法</h3><p>(1)使用hexo部署报错Error: Spawn failed<br>解决办法：删除.deploy_git文件夹 -&gt; 修改_config.yml文件中deploy的repository地址，修改为SSH方式 -&gt; 按顺序执行命令hexo clean、hexo generate、hexo deploy</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"deploy产生如下错误的解决方法\"><a href=\"#deploy产生如下错误的解决方法\" class=\"headerlink\" title=\"deploy产生如下错误的解决方法\"></a>deploy产生如下错误的解决方法</h3><p>(1)使用hexo部署报错Error: Spawn failed<br>解决办法：删除.deploy_git文件夹 -&gt; 修改_config.yml文件中deploy的repository地址，修改为SSH方式 -&gt; 按顺序执行命令hexo clean、hexo generate、hexo deploy</p>\n"},{"title":"js-类型转换","date":"2022-07-19T07:59:15.000Z","_content":"\n在开始之前，先说一下为什么会说这个，之前在看一篇文章的时候，提到 == 和 === 的区别。\n== ：比较两个数据是否相等，允许进行类型转化\n比如：1==true、'1'==true，结果都是true\n===：严格比较两个数据是否是否相等，包括比较类型是否相同，类型不匹配返回false\n比如：1===true、'1'===true，结果为false\n\n#### 数学运算符中的类型转换\n\n1、减、乘、除运算\n**非Number类型的使用减、乘、除(-、*、/)运算符时，会先将非Number类型转换为Number类型**\n```javascript\n1 - true // 0, true先转换乘1，然后执行 1 - 1\n1 - false // 1, true先转换乘0，然后执行 1 - 0\n1 - null // 1, true先转换乘0，然后执行 1 - 0\n1 - undefined // NaN, undefined转换为数字为 NaN\n2 * ['5'] // 10, ['5']先变成'5'（这一步涉及拆箱操作）,然后变成数字5\n```\n{% btn /2022/08/09/devan-operation/, 拆箱操作, %}\n\n2、加运算\n**js中的加法运算，还可以用来拼接字符串**\n* 加号一侧为String类型，则加法运算被识别为拼接字符串操作，并会优先将另一侧转换为字符串类型\n* 加号一侧为Number类型，另一侧为原始类型，则将原始类型转换为Number类型\n* 加号一侧为Number类型，另一侧为引用类型，将引用类型和Number类型转换成字符串后进行拼接\n**以上三点，优先级从高到低**\n\n```javascript\n123 + '123' // '123123' (规则1)\n123 + null //  123 (规则2)\n123 + true //  124 (规则2)\n123 + {}   //  '123[object Object]' (规则3)\n```\n\n#### 逻辑运算中的类型转换\n1、单个变量\n先将变量转换为Boolean值\n**只有null、undefined、''、NaN、0、false的boolean值是false，其他情况都是true，比如：{}、[]**\n\n2、使用 == 比较中的5条规则\n**建议使用 ===**\n* 规则1：NaN和其他任何类型比较永远返回false(包括和他自己)\n```javascript\nNaN == NaN // false\n```\n* 规则2：boolean和其他任何类型比较，Boolean首先被转换成Number类型\n```javascript\ntrue == 1 // true\ntrue == '2' // false,先将true转换为1，而不是把'2'变成true\ntrue == ['1'] // true, 先将true转换为1，['1']拆箱成'1',在参考规则3\ntrue == ['2'] // false, 同上\nundefined == false // false, 首先false变成0，然后参考规则4\nnull == false // false, 同上\n```\n* String和Number比较，先将String转换为Number类型\n```javascript\n123 == '123' // true, '123'会变成123\n'' == 0 // true，''会变成 0\n```\n* null == undefined 比较结果是true，除此之外，null、undefined和其他任何结果的比较值都为false\n```javascript\nnull == undefined  // true\nnull == '' // false\nnull == 0 // false\nnull == false // false\nundefined == '' // false\nundefined == 0 // false\nundefined == false // false\n```\n* 原始类型和引用类型做比较时，引用类型会依照ToPrimitive规则转换为原始类型\n**ToPrimitive规则是引用类型向原始类型转变的规则，它遵循先 valueOf后 toString的模式期望得到一个原始类型，如果无法得到一个原始类型，就会抛出TypeError**\n```javascript\n'[object Object]' == {} // true, 对象和字符串比较，对象通过toString 得到一个基本类型值\n'1,2,3' == [1,2,3] // true, [1,2,3]通过toString得到一个基本类型\n```\n\n#### 类型转换表\n![类型转换对照表](convert-table.png)\n\n#### 类型转换对照网站\nhttps://dorey.github.io/JavaScript-Equality-Table/\n\n{% btn /,, home %}","source":"_posts/js-transform.md","raw":"---\ntitle: js-类型转换\ndate: 2022-07-19 15:59:15\ntags:\n---\n\n在开始之前，先说一下为什么会说这个，之前在看一篇文章的时候，提到 == 和 === 的区别。\n== ：比较两个数据是否相等，允许进行类型转化\n比如：1==true、'1'==true，结果都是true\n===：严格比较两个数据是否是否相等，包括比较类型是否相同，类型不匹配返回false\n比如：1===true、'1'===true，结果为false\n\n#### 数学运算符中的类型转换\n\n1、减、乘、除运算\n**非Number类型的使用减、乘、除(-、*、/)运算符时，会先将非Number类型转换为Number类型**\n```javascript\n1 - true // 0, true先转换乘1，然后执行 1 - 1\n1 - false // 1, true先转换乘0，然后执行 1 - 0\n1 - null // 1, true先转换乘0，然后执行 1 - 0\n1 - undefined // NaN, undefined转换为数字为 NaN\n2 * ['5'] // 10, ['5']先变成'5'（这一步涉及拆箱操作）,然后变成数字5\n```\n{% btn /2022/08/09/devan-operation/, 拆箱操作, %}\n\n2、加运算\n**js中的加法运算，还可以用来拼接字符串**\n* 加号一侧为String类型，则加法运算被识别为拼接字符串操作，并会优先将另一侧转换为字符串类型\n* 加号一侧为Number类型，另一侧为原始类型，则将原始类型转换为Number类型\n* 加号一侧为Number类型，另一侧为引用类型，将引用类型和Number类型转换成字符串后进行拼接\n**以上三点，优先级从高到低**\n\n```javascript\n123 + '123' // '123123' (规则1)\n123 + null //  123 (规则2)\n123 + true //  124 (规则2)\n123 + {}   //  '123[object Object]' (规则3)\n```\n\n#### 逻辑运算中的类型转换\n1、单个变量\n先将变量转换为Boolean值\n**只有null、undefined、''、NaN、0、false的boolean值是false，其他情况都是true，比如：{}、[]**\n\n2、使用 == 比较中的5条规则\n**建议使用 ===**\n* 规则1：NaN和其他任何类型比较永远返回false(包括和他自己)\n```javascript\nNaN == NaN // false\n```\n* 规则2：boolean和其他任何类型比较，Boolean首先被转换成Number类型\n```javascript\ntrue == 1 // true\ntrue == '2' // false,先将true转换为1，而不是把'2'变成true\ntrue == ['1'] // true, 先将true转换为1，['1']拆箱成'1',在参考规则3\ntrue == ['2'] // false, 同上\nundefined == false // false, 首先false变成0，然后参考规则4\nnull == false // false, 同上\n```\n* String和Number比较，先将String转换为Number类型\n```javascript\n123 == '123' // true, '123'会变成123\n'' == 0 // true，''会变成 0\n```\n* null == undefined 比较结果是true，除此之外，null、undefined和其他任何结果的比较值都为false\n```javascript\nnull == undefined  // true\nnull == '' // false\nnull == 0 // false\nnull == false // false\nundefined == '' // false\nundefined == 0 // false\nundefined == false // false\n```\n* 原始类型和引用类型做比较时，引用类型会依照ToPrimitive规则转换为原始类型\n**ToPrimitive规则是引用类型向原始类型转变的规则，它遵循先 valueOf后 toString的模式期望得到一个原始类型，如果无法得到一个原始类型，就会抛出TypeError**\n```javascript\n'[object Object]' == {} // true, 对象和字符串比较，对象通过toString 得到一个基本类型值\n'1,2,3' == [1,2,3] // true, [1,2,3]通过toString得到一个基本类型\n```\n\n#### 类型转换表\n![类型转换对照表](convert-table.png)\n\n#### 类型转换对照网站\nhttps://dorey.github.io/JavaScript-Equality-Table/\n\n{% btn /,, home %}","slug":"js-transform","published":1,"updated":"2022-08-10T03:11:17.050Z","_id":"cl7eubjlq000khgtk3z8tdenh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在开始之前，先说一下为什么会说这个，之前在看一篇文章的时候，提到 == 和 === 的区别。<br>== ：比较两个数据是否相等，允许进行类型转化<br>比如：1==true、’1’==true，结果都是true<br>===：严格比较两个数据是否是否相等，包括比较类型是否相同，类型不匹配返回false<br>比如：1===true、’1’===true，结果为false</p>\n<h4 id=\"数学运算符中的类型转换\"><a href=\"#数学运算符中的类型转换\" class=\"headerlink\" title=\"数学运算符中的类型转换\"></a>数学运算符中的类型转换</h4><p>1、减、乘、除运算<br><strong>非Number类型的使用减、乘、除(-、*、/)运算符时，会先将非Number类型转换为Number类型</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">true</span> <span class=\"comment\">// 0, true先转换乘1，然后执行 1 - 1</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">false</span> <span class=\"comment\">// 1, true先转换乘0，然后执行 1 - 0</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">null</span> <span class=\"comment\">// 1, true先转换乘0，然后执行 1 - 0</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">undefined</span> <span class=\"comment\">// NaN, undefined转换为数字为 NaN</span></span><br><span class=\"line\"><span class=\"number\">2</span> * [<span class=\"string\">&#x27;5&#x27;</span>] <span class=\"comment\">// 10, [&#x27;5&#x27;]先变成&#x27;5&#x27;（这一步涉及拆箱操作）,然后变成数字5</span></span><br></pre></td></tr></table></figure>\n<a class=\"btn\" href=\"/2022/08/09/devan-operation/\">拆箱操作</a>\n\n<p>2、加运算<br><strong>js中的加法运算，还可以用来拼接字符串</strong></p>\n<ul>\n<li>加号一侧为String类型，则加法运算被识别为拼接字符串操作，并会优先将另一侧转换为字符串类型</li>\n<li>加号一侧为Number类型，另一侧为原始类型，则将原始类型转换为Number类型</li>\n<li>加号一侧为Number类型，另一侧为引用类型，将引用类型和Number类型转换成字符串后进行拼接</li>\n<li><em>以上三点，优先级从高到低</em>*</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span> + <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// &#x27;123123&#x27; (规则1)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + <span class=\"literal\">null</span> <span class=\"comment\">//  123 (规则2)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + <span class=\"literal\">true</span> <span class=\"comment\">//  124 (规则2)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + &#123;&#125;   <span class=\"comment\">//  &#x27;123[object Object]&#x27; (规则3)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算中的类型转换\"><a href=\"#逻辑运算中的类型转换\" class=\"headerlink\" title=\"逻辑运算中的类型转换\"></a>逻辑运算中的类型转换</h4><p>1、单个变量<br>先将变量转换为Boolean值<br><strong>只有null、undefined、’’、NaN、0、false的boolean值是false，其他情况都是true，比如：{}、[]</strong></p>\n<p>2、使用 == 比较中的5条规则<br><strong>建议使用 ===</strong></p>\n<ul>\n<li>规则1：NaN和其他任何类型比较永远返回false(包括和他自己)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li>规则2：boolean和其他任何类型比较，Boolean首先被转换成Number类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"string\">&#x27;2&#x27;</span> <span class=\"comment\">// false,先将true转换为1，而不是把&#x27;2&#x27;变成true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == [<span class=\"string\">&#x27;1&#x27;</span>] <span class=\"comment\">// true, 先将true转换为1，[&#x27;1&#x27;]拆箱成&#x27;1&#x27;,在参考规则3</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == [<span class=\"string\">&#x27;2&#x27;</span>] <span class=\"comment\">// false, 同上</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false, 首先false变成0，然后参考规则4</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false, 同上</span></span><br></pre></td></tr></table></figure></li>\n<li>String和Number比较，先将String转换为Number类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span> == <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// true, &#x27;123&#x27;会变成123</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"number\">0</span> <span class=\"comment\">// true，&#x27;&#x27;会变成 0</span></span><br></pre></td></tr></table></figure></li>\n<li>null == undefined 比较结果是true，除此之外，null、undefined和其他任何结果的比较值都为false<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li>原始类型和引用类型做比较时，引用类型会依照ToPrimitive规则转换为原始类型</li>\n<li><em>ToPrimitive规则是引用类型向原始类型转变的规则，它遵循先 valueOf后 toString的模式期望得到一个原始类型，如果无法得到一个原始类型，就会抛出TypeError</em>*<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;[object Object]&#x27;</span> == &#123;&#125; <span class=\"comment\">// true, 对象和字符串比较，对象通过toString 得到一个基本类型值</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1,2,3&#x27;</span> == [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">// true, [1,2,3]通过toString得到一个基本类型</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"类型转换表\"><a href=\"#类型转换表\" class=\"headerlink\" title=\"类型转换表\"></a>类型转换表</h4><p><img src=\"/2022/07/19/js-transform/convert-table.png\" alt=\"类型转换对照表\"></p>\n<h4 id=\"类型转换对照网站\"><a href=\"#类型转换对照网站\" class=\"headerlink\" title=\"类型转换对照网站\"></a>类型转换对照网站</h4><p><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">https://dorey.github.io/JavaScript-Equality-Table/</a></p>\n<a class=\"btn\" href=\"/\"><i class=\"fa fa-home\"></i></a>","site":{"data":{}},"excerpt":"","more":"<p>在开始之前，先说一下为什么会说这个，之前在看一篇文章的时候，提到 == 和 === 的区别。<br>== ：比较两个数据是否相等，允许进行类型转化<br>比如：1==true、’1’==true，结果都是true<br>===：严格比较两个数据是否是否相等，包括比较类型是否相同，类型不匹配返回false<br>比如：1===true、’1’===true，结果为false</p>\n<h4 id=\"数学运算符中的类型转换\"><a href=\"#数学运算符中的类型转换\" class=\"headerlink\" title=\"数学运算符中的类型转换\"></a>数学运算符中的类型转换</h4><p>1、减、乘、除运算<br><strong>非Number类型的使用减、乘、除(-、*、/)运算符时，会先将非Number类型转换为Number类型</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">true</span> <span class=\"comment\">// 0, true先转换乘1，然后执行 1 - 1</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">false</span> <span class=\"comment\">// 1, true先转换乘0，然后执行 1 - 0</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">null</span> <span class=\"comment\">// 1, true先转换乘0，然后执行 1 - 0</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">undefined</span> <span class=\"comment\">// NaN, undefined转换为数字为 NaN</span></span><br><span class=\"line\"><span class=\"number\">2</span> * [<span class=\"string\">&#x27;5&#x27;</span>] <span class=\"comment\">// 10, [&#x27;5&#x27;]先变成&#x27;5&#x27;（这一步涉及拆箱操作）,然后变成数字5</span></span><br></pre></td></tr></table></figure>\n<a class=\"btn\" href=\"/2022/08/09/devan-operation/\">拆箱操作</a>\n\n<p>2、加运算<br><strong>js中的加法运算，还可以用来拼接字符串</strong></p>\n<ul>\n<li>加号一侧为String类型，则加法运算被识别为拼接字符串操作，并会优先将另一侧转换为字符串类型</li>\n<li>加号一侧为Number类型，另一侧为原始类型，则将原始类型转换为Number类型</li>\n<li>加号一侧为Number类型，另一侧为引用类型，将引用类型和Number类型转换成字符串后进行拼接</li>\n<li><em>以上三点，优先级从高到低</em>*</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span> + <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// &#x27;123123&#x27; (规则1)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + <span class=\"literal\">null</span> <span class=\"comment\">//  123 (规则2)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + <span class=\"literal\">true</span> <span class=\"comment\">//  124 (规则2)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + &#123;&#125;   <span class=\"comment\">//  &#x27;123[object Object]&#x27; (规则3)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算中的类型转换\"><a href=\"#逻辑运算中的类型转换\" class=\"headerlink\" title=\"逻辑运算中的类型转换\"></a>逻辑运算中的类型转换</h4><p>1、单个变量<br>先将变量转换为Boolean值<br><strong>只有null、undefined、’’、NaN、0、false的boolean值是false，其他情况都是true，比如：{}、[]</strong></p>\n<p>2、使用 == 比较中的5条规则<br><strong>建议使用 ===</strong></p>\n<ul>\n<li>规则1：NaN和其他任何类型比较永远返回false(包括和他自己)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li>规则2：boolean和其他任何类型比较，Boolean首先被转换成Number类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"string\">&#x27;2&#x27;</span> <span class=\"comment\">// false,先将true转换为1，而不是把&#x27;2&#x27;变成true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == [<span class=\"string\">&#x27;1&#x27;</span>] <span class=\"comment\">// true, 先将true转换为1，[&#x27;1&#x27;]拆箱成&#x27;1&#x27;,在参考规则3</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == [<span class=\"string\">&#x27;2&#x27;</span>] <span class=\"comment\">// false, 同上</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false, 首先false变成0，然后参考规则4</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false, 同上</span></span><br></pre></td></tr></table></figure></li>\n<li>String和Number比较，先将String转换为Number类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span> == <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// true, &#x27;123&#x27;会变成123</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"number\">0</span> <span class=\"comment\">// true，&#x27;&#x27;会变成 0</span></span><br></pre></td></tr></table></figure></li>\n<li>null == undefined 比较结果是true，除此之外，null、undefined和其他任何结果的比较值都为false<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li>原始类型和引用类型做比较时，引用类型会依照ToPrimitive规则转换为原始类型</li>\n<li><em>ToPrimitive规则是引用类型向原始类型转变的规则，它遵循先 valueOf后 toString的模式期望得到一个原始类型，如果无法得到一个原始类型，就会抛出TypeError</em>*<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;[object Object]&#x27;</span> == &#123;&#125; <span class=\"comment\">// true, 对象和字符串比较，对象通过toString 得到一个基本类型值</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1,2,3&#x27;</span> == [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">// true, [1,2,3]通过toString得到一个基本类型</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"类型转换表\"><a href=\"#类型转换表\" class=\"headerlink\" title=\"类型转换表\"></a>类型转换表</h4><p><img src=\"/2022/07/19/js-transform/convert-table.png\" alt=\"类型转换对照表\"></p>\n<h4 id=\"类型转换对照网站\"><a href=\"#类型转换对照网站\" class=\"headerlink\" title=\"类型转换对照网站\"></a>类型转换对照网站</h4><p><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">https://dorey.github.io/JavaScript-Equality-Table/</a></p>\n<a class=\"btn\" href=\"/\"><i class=\"fa fa-home\"></i></a>"},{"title":"meta标签的使用","date":"2022-06-28T14:16:30.000Z","_content":"\n#### meta标签的使用\n\n###### <meta>文档级元数据元素\nmeta标签一般放在HTML页面的head里面，[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta)定义：\n>HTML <meta> 元素表示那些不能由其它 HTML 元相关（meta-related）元素（(\\<base\\>,\\<link\\>,\\<script\\>,\\<style\\> 或 \\<title\\>）之一表示的任何元数据信息。\n\n###### meta定义的元数据类型\n(1)name属性：meta元素提供文档级别元数据，应用于整个页面\n-- name和content一起使用，name表示元数据名称，content表示元数据的值\n---- name=\"author\"，表示网页作者的名字，例如某个组织或机构\n```\n<mate name=\"author\" content=\"xxx@mail.com\">\n```\n\n---- name=\"description\"，是一段简短而精确的，对页面内容的描述\n```javascript\n//淘宝网页的meta\n<meta name=\"description\" content=\"淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！\">\n```\n\n---- name=\"keywords\"，与页面内容相关的关键词，使用逗号分隔，需要注意某些搜索引擎会用这些关键词对文档进行分类\n```javascript\n//淘宝网页的meta\n<meta name=\"keyword\" content=\"淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺\">\n```\n\n---- name=\"viewport\"，为viewport（视口）的初始大小提供指示，目前仅用于移动设备\n```javascript\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\nwidth：用来设置viewport的宽度为设备宽度，常用值：device-width、？？？？\ninitial-scale：为设备宽度与viewport大小之间的缩放比例\nmaximum-scale：？？？？\nminimum-scale：？？？？\nuser-scalable：？？？？\nminimal-ui：？？？？\n\n---- name=\"robots\"，表示爬虫对此页面的处理行为，或者说，应当遵守的规则，是用来做搜索引擎抓取的\ncontent类型：\nall：搜索引擎将索引此网页，并继续通过此网页的链接索引文件将被检索\nnone：搜索引擎将忽略此网页\nindex：搜索引擎索引此网页\nfollow：搜索引擎继续通过此网页的链接索引搜索其它的网页\n\n---- name=\"renderer\"，用来指定双核浏览器的渲染方式，比如360浏览器，我们可以通过这个设置来指定360浏览器的渲染方式\n```javascript\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\ncontent类型：\n？？？？\n\n---- name=\"spm-id\"，？？？？\n```javascript\n// 淘宝\n<meta name=\"spm-id\" content=\"a21bo\">\n```\n---- name=\"aplus-xplug\"，？？？？\n```javascript\n// 淘宝网\n<meta name=\"aplus-xplug\" content=\"NONE\">\n```\n\n\n(2)http-equiv属性：meta元素是编译指令，提供的信息与类似命名的http头部相同\n-- http-equiv和content一起使用，http-equiv表示元数据名称，content表示元数据的值\n-- http-equiv所有允许的值都是特定http头部的名称\n---- http-equiv=\"X-UA-Compatible\"\n```javascript\n// 淘宝网\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=10,chrome=1\">//IE浏览器适配\n```\nIE=10告诉浏览器，以当前浏览器支持的最新版本来渲染。\nchrome=1告诉浏览器，如果当前IE浏览器安装了Google Chrome Frame插件，就以chrome内核来渲染页面。\n两者都存在的情况：如果有chrome插件，就以chrome内核渲染，如果没有，就以当前浏览器支持的最高版本渲染。\n另外，这个属性支持的范围是IE8-IE11\n如果在http头部中也设置了这个属性，并且和meta中设置的有冲突，开发者偏好（meta元素）优先于Web服务器设置（HTTP头）。\n\n---- http-equiv=\"content-type\"，用来声明文档类型和字符集\n```javascript\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n```\n\n---- http-equiv=\"x-dns-prefetch-control\"\n一般来说，HTML页面中的a标签会自动启用DNS提前解析来提升网站性能，但是在使用https协议的网站中失效了，我们可以如下设置打开对a标签的提前解析：\n```javascript\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n```\n\n---- cache-control、Pragma、Expires，和缓存相关的设置，但是遗憾的是这些往往不生效，我们一般都通过http headers来设置缓存策略  ？？？？\n\n(3)charset属性：meta元素是一个字符集声明，告诉文档使用哪种字符编码\n(4)itemprop属性：meta元素提供用户定义的元数据","source":"_posts/meta标签的使用.md","raw":"---\ntitle: meta标签的使用\ndate: 2022-06-28 22:16:30\ntags:\n---\n\n#### meta标签的使用\n\n###### <meta>文档级元数据元素\nmeta标签一般放在HTML页面的head里面，[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta)定义：\n>HTML <meta> 元素表示那些不能由其它 HTML 元相关（meta-related）元素（(\\<base\\>,\\<link\\>,\\<script\\>,\\<style\\> 或 \\<title\\>）之一表示的任何元数据信息。\n\n###### meta定义的元数据类型\n(1)name属性：meta元素提供文档级别元数据，应用于整个页面\n-- name和content一起使用，name表示元数据名称，content表示元数据的值\n---- name=\"author\"，表示网页作者的名字，例如某个组织或机构\n```\n<mate name=\"author\" content=\"xxx@mail.com\">\n```\n\n---- name=\"description\"，是一段简短而精确的，对页面内容的描述\n```javascript\n//淘宝网页的meta\n<meta name=\"description\" content=\"淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！\">\n```\n\n---- name=\"keywords\"，与页面内容相关的关键词，使用逗号分隔，需要注意某些搜索引擎会用这些关键词对文档进行分类\n```javascript\n//淘宝网页的meta\n<meta name=\"keyword\" content=\"淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺\">\n```\n\n---- name=\"viewport\"，为viewport（视口）的初始大小提供指示，目前仅用于移动设备\n```javascript\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\nwidth：用来设置viewport的宽度为设备宽度，常用值：device-width、？？？？\ninitial-scale：为设备宽度与viewport大小之间的缩放比例\nmaximum-scale：？？？？\nminimum-scale：？？？？\nuser-scalable：？？？？\nminimal-ui：？？？？\n\n---- name=\"robots\"，表示爬虫对此页面的处理行为，或者说，应当遵守的规则，是用来做搜索引擎抓取的\ncontent类型：\nall：搜索引擎将索引此网页，并继续通过此网页的链接索引文件将被检索\nnone：搜索引擎将忽略此网页\nindex：搜索引擎索引此网页\nfollow：搜索引擎继续通过此网页的链接索引搜索其它的网页\n\n---- name=\"renderer\"，用来指定双核浏览器的渲染方式，比如360浏览器，我们可以通过这个设置来指定360浏览器的渲染方式\n```javascript\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\ncontent类型：\n？？？？\n\n---- name=\"spm-id\"，？？？？\n```javascript\n// 淘宝\n<meta name=\"spm-id\" content=\"a21bo\">\n```\n---- name=\"aplus-xplug\"，？？？？\n```javascript\n// 淘宝网\n<meta name=\"aplus-xplug\" content=\"NONE\">\n```\n\n\n(2)http-equiv属性：meta元素是编译指令，提供的信息与类似命名的http头部相同\n-- http-equiv和content一起使用，http-equiv表示元数据名称，content表示元数据的值\n-- http-equiv所有允许的值都是特定http头部的名称\n---- http-equiv=\"X-UA-Compatible\"\n```javascript\n// 淘宝网\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=10,chrome=1\">//IE浏览器适配\n```\nIE=10告诉浏览器，以当前浏览器支持的最新版本来渲染。\nchrome=1告诉浏览器，如果当前IE浏览器安装了Google Chrome Frame插件，就以chrome内核来渲染页面。\n两者都存在的情况：如果有chrome插件，就以chrome内核渲染，如果没有，就以当前浏览器支持的最高版本渲染。\n另外，这个属性支持的范围是IE8-IE11\n如果在http头部中也设置了这个属性，并且和meta中设置的有冲突，开发者偏好（meta元素）优先于Web服务器设置（HTTP头）。\n\n---- http-equiv=\"content-type\"，用来声明文档类型和字符集\n```javascript\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n```\n\n---- http-equiv=\"x-dns-prefetch-control\"\n一般来说，HTML页面中的a标签会自动启用DNS提前解析来提升网站性能，但是在使用https协议的网站中失效了，我们可以如下设置打开对a标签的提前解析：\n```javascript\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n```\n\n---- cache-control、Pragma、Expires，和缓存相关的设置，但是遗憾的是这些往往不生效，我们一般都通过http headers来设置缓存策略  ？？？？\n\n(3)charset属性：meta元素是一个字符集声明，告诉文档使用哪种字符编码\n(4)itemprop属性：meta元素提供用户定义的元数据","slug":"meta标签的使用","published":1,"updated":"2022-08-23T13:15:25.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eubjlt000lhgtk41lxgcrd","content":"<h4 id=\"meta标签的使用\"><a href=\"#meta标签的使用\" class=\"headerlink\" title=\"meta标签的使用\"></a>meta标签的使用</h4><h6 id=\"文档级元数据元素\"><a href=\"#文档级元数据元素\" class=\"headerlink\" title=\"文档级元数据元素\"></a><meta>文档级元数据元素</h6><p>meta标签一般放在HTML页面的head里面，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta\">MDN</a>定义：</p>\n<blockquote>\n<p>HTML <meta> 元素表示那些不能由其它 HTML 元相关（meta-related）元素（(&lt;base&gt;,&lt;link&gt;,&lt;script&gt;,&lt;style&gt; 或 &lt;title&gt;）之一表示的任何元数据信息。</p>\n</blockquote>\n<h6 id=\"meta定义的元数据类型\"><a href=\"#meta定义的元数据类型\" class=\"headerlink\" title=\"meta定义的元数据类型\"></a>meta定义的元数据类型</h6><p>(1)name属性：meta元素提供文档级别元数据，应用于整个页面<br>– name和content一起使用，name表示元数据名称，content表示元数据的值<br>—- name=”author”，表示网页作者的名字，例如某个组织或机构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mate name=&quot;author&quot; content=&quot;xxx@mail.com&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”description”，是一段简短而精确的，对页面内容的描述</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//淘宝网页的meta</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;description&quot;</span> content=<span class=\"string\">&quot;淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”keywords”，与页面内容相关的关键词，使用逗号分隔，需要注意某些搜索引擎会用这些关键词对文档进行分类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//淘宝网页的meta</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;keyword&quot;</span> content=<span class=\"string\">&quot;淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”viewport”，为viewport（视口）的初始大小提供指示，目前仅用于移动设备</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>width：用来设置viewport的宽度为设备宽度，常用值：device-width、？？？？<br>initial-scale：为设备宽度与viewport大小之间的缩放比例<br>maximum-scale：？？？？<br>minimum-scale：？？？？<br>user-scalable：？？？？<br>minimal-ui：？？？？</p>\n<p>—- name=”robots”，表示爬虫对此页面的处理行为，或者说，应当遵守的规则，是用来做搜索引擎抓取的<br>content类型：<br>all：搜索引擎将索引此网页，并继续通过此网页的链接索引文件将被检索<br>none：搜索引擎将忽略此网页<br>index：搜索引擎索引此网页<br>follow：搜索引擎继续通过此网页的链接索引搜索其它的网页</p>\n<p>—- name=”renderer”，用来指定双核浏览器的渲染方式，比如360浏览器，我们可以通过这个设置来指定360浏览器的渲染方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;renderer&quot;</span> content=<span class=\"string\">&quot;webkit&quot;</span>&gt; <span class=\"comment\">//默认webkit内核</span></span><br><span class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quot;&gt; //默认IE兼容模式</span><br><span class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;ie-stand&quot;&gt; //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<p>content类型：<br>？？？？</p>\n<p>—- name=”spm-id”，？？？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;spm-id&quot;</span> content=<span class=\"string\">&quot;a21bo&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>—- name=”aplus-xplug”，？？？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝网</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;aplus-xplug&quot;</span> content=<span class=\"string\">&quot;NONE&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>(2)http-equiv属性：meta元素是编译指令，提供的信息与类似命名的http头部相同<br>– http-equiv和content一起使用，http-equiv表示元数据名称，content表示元数据的值<br>– http-equiv所有允许的值都是特定http头部的名称<br>—- http-equiv=”X-UA-Compatible”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝网</span></span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=10,chrome=1&quot;</span>&gt;<span class=\"comment\">//IE浏览器适配</span></span><br></pre></td></tr></table></figure>\n<p>IE=10告诉浏览器，以当前浏览器支持的最新版本来渲染。<br>chrome=1告诉浏览器，如果当前IE浏览器安装了Google Chrome Frame插件，就以chrome内核来渲染页面。<br>两者都存在的情况：如果有chrome插件，就以chrome内核渲染，如果没有，就以当前浏览器支持的最高版本渲染。<br>另外，这个属性支持的范围是IE8-IE11<br>如果在http头部中也设置了这个属性，并且和meta中设置的有冲突，开发者偏好（meta元素）优先于Web服务器设置（HTTP头）。</p>\n<p>—- http-equiv=”content-type”，用来声明文档类型和字符集</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;content-type&quot;</span> content=<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- http-equiv=”x-dns-prefetch-control”<br>一般来说，HTML页面中的a标签会自动启用DNS提前解析来提升网站性能，但是在使用https协议的网站中失效了，我们可以如下设置打开对a标签的提前解析：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;x-dns-prefetch-control&quot;</span> content=<span class=\"string\">&quot;on&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- cache-control、Pragma、Expires，和缓存相关的设置，但是遗憾的是这些往往不生效，我们一般都通过http headers来设置缓存策略  ？？？？</p>\n<p>(3)charset属性：meta元素是一个字符集声明，告诉文档使用哪种字符编码<br>(4)itemprop属性：meta元素提供用户定义的元数据</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"meta标签的使用\"><a href=\"#meta标签的使用\" class=\"headerlink\" title=\"meta标签的使用\"></a>meta标签的使用</h4><h6 id=\"文档级元数据元素\"><a href=\"#文档级元数据元素\" class=\"headerlink\" title=\"文档级元数据元素\"></a><meta>文档级元数据元素</h6><p>meta标签一般放在HTML页面的head里面，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta\">MDN</a>定义：</p>\n<blockquote>\n<p>HTML <meta> 元素表示那些不能由其它 HTML 元相关（meta-related）元素（(&lt;base&gt;,&lt;link&gt;,&lt;script&gt;,&lt;style&gt; 或 &lt;title&gt;）之一表示的任何元数据信息。</p>\n</blockquote>\n<h6 id=\"meta定义的元数据类型\"><a href=\"#meta定义的元数据类型\" class=\"headerlink\" title=\"meta定义的元数据类型\"></a>meta定义的元数据类型</h6><p>(1)name属性：meta元素提供文档级别元数据，应用于整个页面<br>– name和content一起使用，name表示元数据名称，content表示元数据的值<br>—- name=”author”，表示网页作者的名字，例如某个组织或机构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mate name=&quot;author&quot; content=&quot;xxx@mail.com&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”description”，是一段简短而精确的，对页面内容的描述</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//淘宝网页的meta</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;description&quot;</span> content=<span class=\"string\">&quot;淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”keywords”，与页面内容相关的关键词，使用逗号分隔，需要注意某些搜索引擎会用这些关键词对文档进行分类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//淘宝网页的meta</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;keyword&quot;</span> content=<span class=\"string\">&quot;淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”viewport”，为viewport（视口）的初始大小提供指示，目前仅用于移动设备</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>width：用来设置viewport的宽度为设备宽度，常用值：device-width、？？？？<br>initial-scale：为设备宽度与viewport大小之间的缩放比例<br>maximum-scale：？？？？<br>minimum-scale：？？？？<br>user-scalable：？？？？<br>minimal-ui：？？？？</p>\n<p>—- name=”robots”，表示爬虫对此页面的处理行为，或者说，应当遵守的规则，是用来做搜索引擎抓取的<br>content类型：<br>all：搜索引擎将索引此网页，并继续通过此网页的链接索引文件将被检索<br>none：搜索引擎将忽略此网页<br>index：搜索引擎索引此网页<br>follow：搜索引擎继续通过此网页的链接索引搜索其它的网页</p>\n<p>—- name=”renderer”，用来指定双核浏览器的渲染方式，比如360浏览器，我们可以通过这个设置来指定360浏览器的渲染方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;renderer&quot;</span> content=<span class=\"string\">&quot;webkit&quot;</span>&gt; <span class=\"comment\">//默认webkit内核</span></span><br><span class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quot;&gt; //默认IE兼容模式</span><br><span class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;ie-stand&quot;&gt; //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<p>content类型：<br>？？？？</p>\n<p>—- name=”spm-id”，？？？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;spm-id&quot;</span> content=<span class=\"string\">&quot;a21bo&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>—- name=”aplus-xplug”，？？？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝网</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;aplus-xplug&quot;</span> content=<span class=\"string\">&quot;NONE&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>(2)http-equiv属性：meta元素是编译指令，提供的信息与类似命名的http头部相同<br>– http-equiv和content一起使用，http-equiv表示元数据名称，content表示元数据的值<br>– http-equiv所有允许的值都是特定http头部的名称<br>—- http-equiv=”X-UA-Compatible”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝网</span></span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=10,chrome=1&quot;</span>&gt;<span class=\"comment\">//IE浏览器适配</span></span><br></pre></td></tr></table></figure>\n<p>IE=10告诉浏览器，以当前浏览器支持的最新版本来渲染。<br>chrome=1告诉浏览器，如果当前IE浏览器安装了Google Chrome Frame插件，就以chrome内核来渲染页面。<br>两者都存在的情况：如果有chrome插件，就以chrome内核渲染，如果没有，就以当前浏览器支持的最高版本渲染。<br>另外，这个属性支持的范围是IE8-IE11<br>如果在http头部中也设置了这个属性，并且和meta中设置的有冲突，开发者偏好（meta元素）优先于Web服务器设置（HTTP头）。</p>\n<p>—- http-equiv=”content-type”，用来声明文档类型和字符集</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;content-type&quot;</span> content=<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- http-equiv=”x-dns-prefetch-control”<br>一般来说，HTML页面中的a标签会自动启用DNS提前解析来提升网站性能，但是在使用https协议的网站中失效了，我们可以如下设置打开对a标签的提前解析：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;x-dns-prefetch-control&quot;</span> content=<span class=\"string\">&quot;on&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- cache-control、Pragma、Expires，和缓存相关的设置，但是遗憾的是这些往往不生效，我们一般都通过http headers来设置缓存策略  ？？？？</p>\n<p>(3)charset属性：meta元素是一个字符集声明，告诉文档使用哪种字符编码<br>(4)itemprop属性：meta元素提供用户定义的元数据</p>\n"},{"title":"js-基本类型与引用类型","date":"2022-07-19T08:23:28.000Z","_content":"","source":"_posts/origin-type-and-reference-type.md","raw":"---\ntitle: js-基本类型与引用类型\ndate: 2022-07-19 16:23:28\ntags:\n---\n","slug":"origin-type-and-reference-type","published":1,"updated":"2022-08-10T03:14:27.201Z","_id":"cl7eubjlu000mhgtkcqr1g98x","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"react & vue渲染问题","date":"2022-06-23T05:21:12.000Z","_content":"\n#### 疑问点\n(1)react中的快照的具体作用是什么？vue3中是否有类似的操作？\n类似渲染的子节点？？？\n(2)react中将调试打印的信息放在块级作用域中？为什么不直接放在代码里面？\n没什么特别意义，团队规范规定\n(3)vue3中在patch的时候，为什么在有了patchElement（感觉能满足大部分情况了）的情况下，分了其他几种类型？\n性能、更新\n(4)react中react和react-dom的关系？vue3中vue.cjs.js和vue.global.js\nreact-dom =》 渲染浏览器\nvue可以搭配react-dom\n(5)vue3中是否有类似react的hooks那样返回的内容含有页面代码？\n可以，使用createElement\n(6)hooks和函数的区别是什么？没区别\n(7)vue3中element-plus组件函数的类型从哪里获取？\n(8)如何将看到的东西和实际应用联系起来？\n(9)怎么抓住重点？\n","source":"_posts/question-about-render.md","raw":"---\ntitle: react & vue渲染问题\ndate: 2022-06-23 13:21:12\ntags:\n---\n\n#### 疑问点\n(1)react中的快照的具体作用是什么？vue3中是否有类似的操作？\n类似渲染的子节点？？？\n(2)react中将调试打印的信息放在块级作用域中？为什么不直接放在代码里面？\n没什么特别意义，团队规范规定\n(3)vue3中在patch的时候，为什么在有了patchElement（感觉能满足大部分情况了）的情况下，分了其他几种类型？\n性能、更新\n(4)react中react和react-dom的关系？vue3中vue.cjs.js和vue.global.js\nreact-dom =》 渲染浏览器\nvue可以搭配react-dom\n(5)vue3中是否有类似react的hooks那样返回的内容含有页面代码？\n可以，使用createElement\n(6)hooks和函数的区别是什么？没区别\n(7)vue3中element-plus组件函数的类型从哪里获取？\n(8)如何将看到的东西和实际应用联系起来？\n(9)怎么抓住重点？\n","slug":"question-about-render","published":1,"updated":"2022-08-10T03:14:53.040Z","_id":"cl7eubjlu000nhgtkcjnuajte","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"疑问点\"><a href=\"#疑问点\" class=\"headerlink\" title=\"疑问点\"></a>疑问点</h4><p>(1)react中的快照的具体作用是什么？vue3中是否有类似的操作？<br>类似渲染的子节点？？？<br>(2)react中将调试打印的信息放在块级作用域中？为什么不直接放在代码里面？<br>没什么特别意义，团队规范规定<br>(3)vue3中在patch的时候，为什么在有了patchElement（感觉能满足大部分情况了）的情况下，分了其他几种类型？<br>性能、更新<br>(4)react中react和react-dom的关系？vue3中vue.cjs.js和vue.global.js<br>react-dom =》 渲染浏览器<br>vue可以搭配react-dom<br>(5)vue3中是否有类似react的hooks那样返回的内容含有页面代码？<br>可以，使用createElement<br>(6)hooks和函数的区别是什么？没区别<br>(7)vue3中element-plus组件函数的类型从哪里获取？<br>(8)如何将看到的东西和实际应用联系起来？<br>(9)怎么抓住重点？</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"疑问点\"><a href=\"#疑问点\" class=\"headerlink\" title=\"疑问点\"></a>疑问点</h4><p>(1)react中的快照的具体作用是什么？vue3中是否有类似的操作？<br>类似渲染的子节点？？？<br>(2)react中将调试打印的信息放在块级作用域中？为什么不直接放在代码里面？<br>没什么特别意义，团队规范规定<br>(3)vue3中在patch的时候，为什么在有了patchElement（感觉能满足大部分情况了）的情况下，分了其他几种类型？<br>性能、更新<br>(4)react中react和react-dom的关系？vue3中vue.cjs.js和vue.global.js<br>react-dom =》 渲染浏览器<br>vue可以搭配react-dom<br>(5)vue3中是否有类似react的hooks那样返回的内容含有页面代码？<br>可以，使用createElement<br>(6)hooks和函数的区别是什么？没区别<br>(7)vue3中element-plus组件函数的类型从哪里获取？<br>(8)如何将看到的东西和实际应用联系起来？<br>(9)怎么抓住重点？</p>\n"},{"title":"react渲染","date":"2022-06-22T14:12:37.000Z","_content":"\n## 主要步骤\n#### React.createElement语法糖\n(1)React.createElement(type, [props], [...children]);\n(2)type：元素类型\n(3)props：属性值\n(4)children：子元素\n#### 虚拟DOM\n(1)本质为JS对象，使用键值对存储信息，嵌套表示层级关系\n(2)$$typeof：标识符，使用Symbol数据结构确保唯一性\n\n#### 协调算法\n#### filter图示\n![filter_tree](fiber_tree.png)\n\n## Element转化为Dom\n(1)所有从React.createElement中收到的值组装成一个React的虚拟Dom，最终调用ReactDom.render方法去实现转化\n(2)ReactDOM.render(element, container[, callback])\n(3)ReactDOM.render三个参数，其中第一个参数便是生成的虚拟Dom，第二个参数则是一个真实Dom，此Dom相当于是一个容器，React元素将被渲染到这个容器里面去，第三个参数则是一个callback function\n\n## 源码相关\n1、setState触发更新、父组件重新渲染时触发更新\n![update_class](update_class.png)\n(1)static getDerivedStateFromProps()\n(2)shouldComponentUpdate(nextProps,nextState)\n(3)render()\n(4)getSnapshotBeforeUpdate(prevProps,prevState)\n(5)componentDidUpdate(prevProps,prevState,snapshot)\n其中，getSnapshotBeforeUpdate(prevProps,prevState)必须返回null或任意快照值(Snapshot Value，undefined除外)。返回的快照值将作为componentDidUpdate的第三个形参\n2、forceUpdate触发更新\n![force_update](force_update.png)\n(1)static getDerivedStateFromProps()\n(2)render()\n(3)getSnapshotBeforeUpdate()\n(4)componentDidUpdate()","source":"_posts/react-render.md","raw":"---\ntitle: react渲染\ndate: 2022-06-22 22:12:37\ntags:\n---\n\n## 主要步骤\n#### React.createElement语法糖\n(1)React.createElement(type, [props], [...children]);\n(2)type：元素类型\n(3)props：属性值\n(4)children：子元素\n#### 虚拟DOM\n(1)本质为JS对象，使用键值对存储信息，嵌套表示层级关系\n(2)$$typeof：标识符，使用Symbol数据结构确保唯一性\n\n#### 协调算法\n#### filter图示\n![filter_tree](fiber_tree.png)\n\n## Element转化为Dom\n(1)所有从React.createElement中收到的值组装成一个React的虚拟Dom，最终调用ReactDom.render方法去实现转化\n(2)ReactDOM.render(element, container[, callback])\n(3)ReactDOM.render三个参数，其中第一个参数便是生成的虚拟Dom，第二个参数则是一个真实Dom，此Dom相当于是一个容器，React元素将被渲染到这个容器里面去，第三个参数则是一个callback function\n\n## 源码相关\n1、setState触发更新、父组件重新渲染时触发更新\n![update_class](update_class.png)\n(1)static getDerivedStateFromProps()\n(2)shouldComponentUpdate(nextProps,nextState)\n(3)render()\n(4)getSnapshotBeforeUpdate(prevProps,prevState)\n(5)componentDidUpdate(prevProps,prevState,snapshot)\n其中，getSnapshotBeforeUpdate(prevProps,prevState)必须返回null或任意快照值(Snapshot Value，undefined除外)。返回的快照值将作为componentDidUpdate的第三个形参\n2、forceUpdate触发更新\n![force_update](force_update.png)\n(1)static getDerivedStateFromProps()\n(2)render()\n(3)getSnapshotBeforeUpdate()\n(4)componentDidUpdate()","slug":"react-render","published":1,"updated":"2022-08-23T13:15:25.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eubjlv000ohgtk0squ9vdq","content":"<h2 id=\"主要步骤\"><a href=\"#主要步骤\" class=\"headerlink\" title=\"主要步骤\"></a>主要步骤</h2><h4 id=\"React-createElement语法糖\"><a href=\"#React-createElement语法糖\" class=\"headerlink\" title=\"React.createElement语法糖\"></a>React.createElement语法糖</h4><p>(1)React.createElement(type, [props], […children]);<br>(2)type：元素类型<br>(3)props：属性值<br>(4)children：子元素</p>\n<h4 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h4><p>(1)本质为JS对象，使用键值对存储信息，嵌套表示层级关系<br>(2)$$typeof：标识符，使用Symbol数据结构确保唯一性</p>\n<h4 id=\"协调算法\"><a href=\"#协调算法\" class=\"headerlink\" title=\"协调算法\"></a>协调算法</h4><h4 id=\"filter图示\"><a href=\"#filter图示\" class=\"headerlink\" title=\"filter图示\"></a>filter图示</h4><p><img src=\"/2022/06/22/react-render/fiber_tree.png\" alt=\"filter_tree\"></p>\n<h2 id=\"Element转化为Dom\"><a href=\"#Element转化为Dom\" class=\"headerlink\" title=\"Element转化为Dom\"></a>Element转化为Dom</h2><p>(1)所有从React.createElement中收到的值组装成一个React的虚拟Dom，最终调用ReactDom.render方法去实现转化<br>(2)ReactDOM.render(element, container[, callback])<br>(3)ReactDOM.render三个参数，其中第一个参数便是生成的虚拟Dom，第二个参数则是一个真实Dom，此Dom相当于是一个容器，React元素将被渲染到这个容器里面去，第三个参数则是一个callback function</p>\n<h2 id=\"源码相关\"><a href=\"#源码相关\" class=\"headerlink\" title=\"源码相关\"></a>源码相关</h2><p>1、setState触发更新、父组件重新渲染时触发更新<br><img src=\"/2022/06/22/react-render/update_class.png\" alt=\"update_class\"><br>(1)static getDerivedStateFromProps()<br>(2)shouldComponentUpdate(nextProps,nextState)<br>(3)render()<br>(4)getSnapshotBeforeUpdate(prevProps,prevState)<br>(5)componentDidUpdate(prevProps,prevState,snapshot)<br>其中，getSnapshotBeforeUpdate(prevProps,prevState)必须返回null或任意快照值(Snapshot Value，undefined除外)。返回的快照值将作为componentDidUpdate的第三个形参<br>2、forceUpdate触发更新<br><img src=\"/2022/06/22/react-render/force_update.png\" alt=\"force_update\"><br>(1)static getDerivedStateFromProps()<br>(2)render()<br>(3)getSnapshotBeforeUpdate()<br>(4)componentDidUpdate()</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"主要步骤\"><a href=\"#主要步骤\" class=\"headerlink\" title=\"主要步骤\"></a>主要步骤</h2><h4 id=\"React-createElement语法糖\"><a href=\"#React-createElement语法糖\" class=\"headerlink\" title=\"React.createElement语法糖\"></a>React.createElement语法糖</h4><p>(1)React.createElement(type, [props], […children]);<br>(2)type：元素类型<br>(3)props：属性值<br>(4)children：子元素</p>\n<h4 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h4><p>(1)本质为JS对象，使用键值对存储信息，嵌套表示层级关系<br>(2)$$typeof：标识符，使用Symbol数据结构确保唯一性</p>\n<h4 id=\"协调算法\"><a href=\"#协调算法\" class=\"headerlink\" title=\"协调算法\"></a>协调算法</h4><h4 id=\"filter图示\"><a href=\"#filter图示\" class=\"headerlink\" title=\"filter图示\"></a>filter图示</h4><p><img src=\"/2022/06/22/react-render/fiber_tree.png\" alt=\"filter_tree\"></p>\n<h2 id=\"Element转化为Dom\"><a href=\"#Element转化为Dom\" class=\"headerlink\" title=\"Element转化为Dom\"></a>Element转化为Dom</h2><p>(1)所有从React.createElement中收到的值组装成一个React的虚拟Dom，最终调用ReactDom.render方法去实现转化<br>(2)ReactDOM.render(element, container[, callback])<br>(3)ReactDOM.render三个参数，其中第一个参数便是生成的虚拟Dom，第二个参数则是一个真实Dom，此Dom相当于是一个容器，React元素将被渲染到这个容器里面去，第三个参数则是一个callback function</p>\n<h2 id=\"源码相关\"><a href=\"#源码相关\" class=\"headerlink\" title=\"源码相关\"></a>源码相关</h2><p>1、setState触发更新、父组件重新渲染时触发更新<br><img src=\"/2022/06/22/react-render/update_class.png\" alt=\"update_class\"><br>(1)static getDerivedStateFromProps()<br>(2)shouldComponentUpdate(nextProps,nextState)<br>(3)render()<br>(4)getSnapshotBeforeUpdate(prevProps,prevState)<br>(5)componentDidUpdate(prevProps,prevState,snapshot)<br>其中，getSnapshotBeforeUpdate(prevProps,prevState)必须返回null或任意快照值(Snapshot Value，undefined除外)。返回的快照值将作为componentDidUpdate的第三个形参<br>2、forceUpdate触发更新<br><img src=\"/2022/06/22/react-render/force_update.png\" alt=\"force_update\"><br>(1)static getDerivedStateFromProps()<br>(2)render()<br>(3)getSnapshotBeforeUpdate()<br>(4)componentDidUpdate()</p>\n"},{"title":"MarkDown语法及示例","date":"2022-06-27T02:43:07.000Z","_content":"\n#### MarkDown语法及示例\n\n###### 代码块\n\\```javascript\nconst name = 'eric';\n....\n\\``` \n###### 加粗字体\n\\*\\*文字\\*\\*\n","source":"_posts/text-type-about-markdown.md","raw":"---\ntitle: MarkDown语法及示例\ndate: 2022-06-27 10:43:07\ntags:\n---\n\n#### MarkDown语法及示例\n\n###### 代码块\n\\```javascript\nconst name = 'eric';\n....\n\\``` \n###### 加粗字体\n\\*\\*文字\\*\\*\n","slug":"text-type-about-markdown","published":1,"updated":"2022-08-10T03:15:53.231Z","_id":"cl7eubjlv000phgtk1j2mgghi","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"MarkDown语法及示例\"><a href=\"#MarkDown语法及示例\" class=\"headerlink\" title=\"MarkDown语法及示例\"></a>MarkDown语法及示例</h4><h6 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h6><p>```javascript<br>const name = ‘eric’;<br>….<br>``` </p>\n<h6 id=\"加粗字体\"><a href=\"#加粗字体\" class=\"headerlink\" title=\"加粗字体\"></a>加粗字体</h6><p>**文字**</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"MarkDown语法及示例\"><a href=\"#MarkDown语法及示例\" class=\"headerlink\" title=\"MarkDown语法及示例\"></a>MarkDown语法及示例</h4><h6 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h6><p>```javascript<br>const name = ‘eric’;<br>….<br>``` </p>\n<h6 id=\"加粗字体\"><a href=\"#加粗字体\" class=\"headerlink\" title=\"加粗字体\"></a>加粗字体</h6><p>**文字**</p>\n"},{"title":"var、const、let区别","date":"2022-03-26T13:04:12.000Z","_content":"\n#### 1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\n```javascript\nvar a = 100;\nconsole.log(a,window.a);    // 100 100\nlet b = 10;\nconsole.log(b,window.b);    // 10 undefined\nconst c = 1;\nconsole.log(c,window.c);    // 1 undefined\n```\nlet声明的变量或const声明的常量会挂载到Script下，var会挂载到Global下（window类似于Global的代理）。可查看文章[let和const声明的变量到底去哪里了？](https://zhuanlan.zhihu.com/p/114128108)\n\n#### 2、","source":"_posts/var-const-let.md","raw":"---\ntitle: var、const、let区别\ndate: 2022-03-26 21:04:12\ntags:\n---\n\n#### 1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\n```javascript\nvar a = 100;\nconsole.log(a,window.a);    // 100 100\nlet b = 10;\nconsole.log(b,window.b);    // 10 undefined\nconst c = 1;\nconsole.log(c,window.c);    // 1 undefined\n```\nlet声明的变量或const声明的常量会挂载到Script下，var会挂载到Global下（window类似于Global的代理）。可查看文章[let和const声明的变量到底去哪里了？](https://zhuanlan.zhihu.com/p/114128108)\n\n#### 2、","slug":"var-const-let","published":1,"updated":"2022-08-23T13:15:25.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eubjlw000qhgtkd0y2ayuy","content":"<h4 id=\"1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\"><a href=\"#1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\" class=\"headerlink\" title=\"1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\"></a>1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,<span class=\"built_in\">window</span>.a);    <span class=\"comment\">// 100 100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b,<span class=\"built_in\">window</span>.b);    <span class=\"comment\">// 10 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c,<span class=\"built_in\">window</span>.c);    <span class=\"comment\">// 1 undefined</span></span><br></pre></td></tr></table></figure>\n<p>let声明的变量或const声明的常量会挂载到Script下，var会挂载到Global下（window类似于Global的代理）。可查看文章<a href=\"https://zhuanlan.zhihu.com/p/114128108\">let和const声明的变量到底去哪里了？</a></p>\n<h4 id=\"2、\"><a href=\"#2、\" class=\"headerlink\" title=\"2、\"></a>2、</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\"><a href=\"#1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\" class=\"headerlink\" title=\"1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\"></a>1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,<span class=\"built_in\">window</span>.a);    <span class=\"comment\">// 100 100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b,<span class=\"built_in\">window</span>.b);    <span class=\"comment\">// 10 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c,<span class=\"built_in\">window</span>.c);    <span class=\"comment\">// 1 undefined</span></span><br></pre></td></tr></table></figure>\n<p>let声明的变量或const声明的常量会挂载到Script下，var会挂载到Global下（window类似于Global的代理）。可查看文章<a href=\"https://zhuanlan.zhihu.com/p/114128108\">let和const声明的变量到底去哪里了？</a></p>\n<h4 id=\"2、\"><a href=\"#2、\" class=\"headerlink\" title=\"2、\"></a>2、</h4>"},{"title":"vue3渲染","date":"2022-06-22T14:12:51.000Z","_content":"\n## 渲染流程\n![vue3_render](vue3_render.png)\n(1)创建一个vue实例 -> 初始化实例（包括需要相关事件与生命周期函数等）\n(2)调用beforeCreate\n(3)初始化注入，包括data、method等添加到实例对象\n(4)实例创建完成，调用created\n(5)有el挂载，使用template替换；无挂载，使用mount自动挂载\n(6)有template，进行编译，使其成为render函数\n(7)（1）有template，使用模板构建抽象语法树；（2）通过数据获取元素的outerHTML属性值即元素结构的字符串形式构建HTML模板\n(8)调用beforeMount（vue实例挂载在虚拟DOM上）\n(9)生成HTML元素节点，替换页面原有的挂载节点（页面渲染）\n(10)调用mounted\n-- （1）数据变更，即将重新渲染\n-- （2）调用beforeUpdate\n-- （3）进行虚拟DOM和真实DOM对比，进行patch\n-- （4）渲染完成，调用updated\n(11)实例销毁之前调用beforeUnmount\n(12)实例销毁，vm.$destroy\n(13)销毁后调用unmounted\n\n## render函数\n![render](render.png)\n(1)首先会判断Vnode是否存在，如果不存在，则调用unmount函数，进行组件的卸载\n(2)否则调用patch函数，对组件进行patch（PS: patch是一个递归的过程）\n(3)patch 结束后，会调用flushPostFlushCbs函数冲刷任务池\n(4)最后更新容器上的Vnode\n注：patch函数的主要职责就是去判断Vnode的节点类型（打上patchFlag标志），然后调用对应类型的Vnode处理方式，进行更细致的patch（最后进行render渲染）\n\n## patch函数\n![render_node1](render_node1.png)\n![render_node2](render_node2.png)\n![render_function](render_function.png)\n注：patch依据不同节点类型，执行不同的处理函数，包括：Text、Comment、Static、Fragment等\n(1)n1 与 n2 是待比较的两个节点，n1 为旧节点，n2 为新节点\n(2)container 是新节点的容器\n(3)anchor 是一个锚点，用来标识当我们对新旧节点做增删或移动等操作时，以哪个节点为参照物\n(4)optimized 参数是是否开启优化模式的标识\n\n## 卸载组件\n如果调用render函数时没有传Vnode，则会调用unmount函数对组件进行卸载 ，卸载过程中：\n(1)如果存在ref，会首先重置ref\n(2)如果组件是经过Keep-Alive缓存的组件，会通过deactivate对组件进行卸载\n(3)如果是组件类型Vnode，会通过unmountComponent函数对组件进行卸载\n","source":"_posts/vue3-render.md","raw":"---\ntitle: vue3渲染\ndate: 2022-06-22 22:12:51\ntags:\n---\n\n## 渲染流程\n![vue3_render](vue3_render.png)\n(1)创建一个vue实例 -> 初始化实例（包括需要相关事件与生命周期函数等）\n(2)调用beforeCreate\n(3)初始化注入，包括data、method等添加到实例对象\n(4)实例创建完成，调用created\n(5)有el挂载，使用template替换；无挂载，使用mount自动挂载\n(6)有template，进行编译，使其成为render函数\n(7)（1）有template，使用模板构建抽象语法树；（2）通过数据获取元素的outerHTML属性值即元素结构的字符串形式构建HTML模板\n(8)调用beforeMount（vue实例挂载在虚拟DOM上）\n(9)生成HTML元素节点，替换页面原有的挂载节点（页面渲染）\n(10)调用mounted\n-- （1）数据变更，即将重新渲染\n-- （2）调用beforeUpdate\n-- （3）进行虚拟DOM和真实DOM对比，进行patch\n-- （4）渲染完成，调用updated\n(11)实例销毁之前调用beforeUnmount\n(12)实例销毁，vm.$destroy\n(13)销毁后调用unmounted\n\n## render函数\n![render](render.png)\n(1)首先会判断Vnode是否存在，如果不存在，则调用unmount函数，进行组件的卸载\n(2)否则调用patch函数，对组件进行patch（PS: patch是一个递归的过程）\n(3)patch 结束后，会调用flushPostFlushCbs函数冲刷任务池\n(4)最后更新容器上的Vnode\n注：patch函数的主要职责就是去判断Vnode的节点类型（打上patchFlag标志），然后调用对应类型的Vnode处理方式，进行更细致的patch（最后进行render渲染）\n\n## patch函数\n![render_node1](render_node1.png)\n![render_node2](render_node2.png)\n![render_function](render_function.png)\n注：patch依据不同节点类型，执行不同的处理函数，包括：Text、Comment、Static、Fragment等\n(1)n1 与 n2 是待比较的两个节点，n1 为旧节点，n2 为新节点\n(2)container 是新节点的容器\n(3)anchor 是一个锚点，用来标识当我们对新旧节点做增删或移动等操作时，以哪个节点为参照物\n(4)optimized 参数是是否开启优化模式的标识\n\n## 卸载组件\n如果调用render函数时没有传Vnode，则会调用unmount函数对组件进行卸载 ，卸载过程中：\n(1)如果存在ref，会首先重置ref\n(2)如果组件是经过Keep-Alive缓存的组件，会通过deactivate对组件进行卸载\n(3)如果是组件类型Vnode，会通过unmountComponent函数对组件进行卸载\n","slug":"vue3-render","published":1,"updated":"2022-08-23T13:15:25.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eubjlw000rhgtkfaetbi66","content":"<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p><img src=\"/2022/06/22/vue3-render/vue3_render.png\" alt=\"vue3_render\"><br>(1)创建一个vue实例 -&gt; 初始化实例（包括需要相关事件与生命周期函数等）<br>(2)调用beforeCreate<br>(3)初始化注入，包括data、method等添加到实例对象<br>(4)实例创建完成，调用created<br>(5)有el挂载，使用template替换；无挂载，使用mount自动挂载<br>(6)有template，进行编译，使其成为render函数<br>(7)（1）有template，使用模板构建抽象语法树；（2）通过数据获取元素的outerHTML属性值即元素结构的字符串形式构建HTML模板<br>(8)调用beforeMount（vue实例挂载在虚拟DOM上）<br>(9)生成HTML元素节点，替换页面原有的挂载节点（页面渲染）<br>(10)调用mounted<br>– （1）数据变更，即将重新渲染<br>– （2）调用beforeUpdate<br>– （3）进行虚拟DOM和真实DOM对比，进行patch<br>– （4）渲染完成，调用updated<br>(11)实例销毁之前调用beforeUnmount<br>(12)实例销毁，vm.$destroy<br>(13)销毁后调用unmounted</p>\n<h2 id=\"render函数\"><a href=\"#render函数\" class=\"headerlink\" title=\"render函数\"></a>render函数</h2><p><img src=\"/2022/06/22/vue3-render/render.png\" alt=\"render\"><br>(1)首先会判断Vnode是否存在，如果不存在，则调用unmount函数，进行组件的卸载<br>(2)否则调用patch函数，对组件进行patch（PS: patch是一个递归的过程）<br>(3)patch 结束后，会调用flushPostFlushCbs函数冲刷任务池<br>(4)最后更新容器上的Vnode<br>注：patch函数的主要职责就是去判断Vnode的节点类型（打上patchFlag标志），然后调用对应类型的Vnode处理方式，进行更细致的patch（最后进行render渲染）</p>\n<h2 id=\"patch函数\"><a href=\"#patch函数\" class=\"headerlink\" title=\"patch函数\"></a>patch函数</h2><p><img src=\"/2022/06/22/vue3-render/render_node1.png\" alt=\"render_node1\"><br><img src=\"/2022/06/22/vue3-render/render_node2.png\" alt=\"render_node2\"><br><img src=\"/2022/06/22/vue3-render/render_function.png\" alt=\"render_function\"><br>注：patch依据不同节点类型，执行不同的处理函数，包括：Text、Comment、Static、Fragment等<br>(1)n1 与 n2 是待比较的两个节点，n1 为旧节点，n2 为新节点<br>(2)container 是新节点的容器<br>(3)anchor 是一个锚点，用来标识当我们对新旧节点做增删或移动等操作时，以哪个节点为参照物<br>(4)optimized 参数是是否开启优化模式的标识</p>\n<h2 id=\"卸载组件\"><a href=\"#卸载组件\" class=\"headerlink\" title=\"卸载组件\"></a>卸载组件</h2><p>如果调用render函数时没有传Vnode，则会调用unmount函数对组件进行卸载 ，卸载过程中：<br>(1)如果存在ref，会首先重置ref<br>(2)如果组件是经过Keep-Alive缓存的组件，会通过deactivate对组件进行卸载<br>(3)如果是组件类型Vnode，会通过unmountComponent函数对组件进行卸载</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p><img src=\"/2022/06/22/vue3-render/vue3_render.png\" alt=\"vue3_render\"><br>(1)创建一个vue实例 -&gt; 初始化实例（包括需要相关事件与生命周期函数等）<br>(2)调用beforeCreate<br>(3)初始化注入，包括data、method等添加到实例对象<br>(4)实例创建完成，调用created<br>(5)有el挂载，使用template替换；无挂载，使用mount自动挂载<br>(6)有template，进行编译，使其成为render函数<br>(7)（1）有template，使用模板构建抽象语法树；（2）通过数据获取元素的outerHTML属性值即元素结构的字符串形式构建HTML模板<br>(8)调用beforeMount（vue实例挂载在虚拟DOM上）<br>(9)生成HTML元素节点，替换页面原有的挂载节点（页面渲染）<br>(10)调用mounted<br>– （1）数据变更，即将重新渲染<br>– （2）调用beforeUpdate<br>– （3）进行虚拟DOM和真实DOM对比，进行patch<br>– （4）渲染完成，调用updated<br>(11)实例销毁之前调用beforeUnmount<br>(12)实例销毁，vm.$destroy<br>(13)销毁后调用unmounted</p>\n<h2 id=\"render函数\"><a href=\"#render函数\" class=\"headerlink\" title=\"render函数\"></a>render函数</h2><p><img src=\"/2022/06/22/vue3-render/render.png\" alt=\"render\"><br>(1)首先会判断Vnode是否存在，如果不存在，则调用unmount函数，进行组件的卸载<br>(2)否则调用patch函数，对组件进行patch（PS: patch是一个递归的过程）<br>(3)patch 结束后，会调用flushPostFlushCbs函数冲刷任务池<br>(4)最后更新容器上的Vnode<br>注：patch函数的主要职责就是去判断Vnode的节点类型（打上patchFlag标志），然后调用对应类型的Vnode处理方式，进行更细致的patch（最后进行render渲染）</p>\n<h2 id=\"patch函数\"><a href=\"#patch函数\" class=\"headerlink\" title=\"patch函数\"></a>patch函数</h2><p><img src=\"/2022/06/22/vue3-render/render_node1.png\" alt=\"render_node1\"><br><img src=\"/2022/06/22/vue3-render/render_node2.png\" alt=\"render_node2\"><br><img src=\"/2022/06/22/vue3-render/render_function.png\" alt=\"render_function\"><br>注：patch依据不同节点类型，执行不同的处理函数，包括：Text、Comment、Static、Fragment等<br>(1)n1 与 n2 是待比较的两个节点，n1 为旧节点，n2 为新节点<br>(2)container 是新节点的容器<br>(3)anchor 是一个锚点，用来标识当我们对新旧节点做增删或移动等操作时，以哪个节点为参照物<br>(4)optimized 参数是是否开启优化模式的标识</p>\n<h2 id=\"卸载组件\"><a href=\"#卸载组件\" class=\"headerlink\" title=\"卸载组件\"></a>卸载组件</h2><p>如果调用render函数时没有传Vnode，则会调用unmount函数对组件进行卸载 ，卸载过程中：<br>(1)如果存在ref，会首先重置ref<br>(2)如果组件是经过Keep-Alive缓存的组件，会通过deactivate对组件进行卸载<br>(3)如果是组件类型Vnode，会通过unmountComponent函数对组件进行卸载</p>\n"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <script>\n      console.log(`1 - true: ${1 - true}`);\n      console.log(`1 - false: ${1 - false}`);\n      console.log(`1 - null: ${1 - null}`);\n      console.log(`1 - undefined: ${1 - undefined}`);\n      console.log(`2 * ['5']: ${2 * ['5']}`);\n\n      console.log(`123 + '123': ${123 + '123'}`);\n      console.log(`123 + null: ${123 + null}`);\n      console.log(`123 + true: ${123 + true}`);\n      console.log(`123 + {}: ${123 + {}}`);\n\n      console.log(`NaN == NaN: ${NaN == NaN}`);\n\n      console.log(`true == 1: ${true == 1}`);\n      console.log(`true == '2': ${true == '2'}`);\n      console.log(`true == ['1']: ${true == ['1']}`);\n      console.log(`true == ['2']: ${true == ['2']}`);\n      console.log(`undefined == false: ${undefined == false}`);\n      console.log(`null == false: ${null == false}`);\n\n      console.log(`123 == '123': ${123 == '123'}`);\n      console.log(`'' == 0: ${'' == 0}`);\n\n      console.log(`null == undefined: ${null == undefined}`); // true\n      console.log(`null == '': ${null == ''}`); // false\n      console.log(`null == 0: ${null == 0}`); // false\n      console.log(`null == false: ${null == false}`); // false\n      console.log(`undefined == '': ${undefined == ''}`); // false\n      console.log(`undefined == 0: ${undefined == 0}`); // false\n      console.log(`undefined == false: ${undefined == false}`); // false\n\n      console.log(`'[object Object]' == {}: ${'[object Object]' == {}}`); // true\n      console.log(`'1,2,3' == [1, 2, 3]: ${'1,2,3' == [1, 2, 3]}`); // true\n\n      console.log(`'10' > '2': ${'10' > '2'}`); // false\n    </script>\n  </body>\n</html>\n","source":"_posts/js-transform/js-transform.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <script>\n      console.log(`1 - true: ${1 - true}`);\n      console.log(`1 - false: ${1 - false}`);\n      console.log(`1 - null: ${1 - null}`);\n      console.log(`1 - undefined: ${1 - undefined}`);\n      console.log(`2 * ['5']: ${2 * ['5']}`);\n\n      console.log(`123 + '123': ${123 + '123'}`);\n      console.log(`123 + null: ${123 + null}`);\n      console.log(`123 + true: ${123 + true}`);\n      console.log(`123 + {}: ${123 + {}}`);\n\n      console.log(`NaN == NaN: ${NaN == NaN}`);\n\n      console.log(`true == 1: ${true == 1}`);\n      console.log(`true == '2': ${true == '2'}`);\n      console.log(`true == ['1']: ${true == ['1']}`);\n      console.log(`true == ['2']: ${true == ['2']}`);\n      console.log(`undefined == false: ${undefined == false}`);\n      console.log(`null == false: ${null == false}`);\n\n      console.log(`123 == '123': ${123 == '123'}`);\n      console.log(`'' == 0: ${'' == 0}`);\n\n      console.log(`null == undefined: ${null == undefined}`); // true\n      console.log(`null == '': ${null == ''}`); // false\n      console.log(`null == 0: ${null == 0}`); // false\n      console.log(`null == false: ${null == false}`); // false\n      console.log(`undefined == '': ${undefined == ''}`); // false\n      console.log(`undefined == 0: ${undefined == 0}`); // false\n      console.log(`undefined == false: ${undefined == false}`); // false\n\n      console.log(`'[object Object]' == {}: ${'[object Object]' == {}}`); // true\n      console.log(`'1,2,3' == [1, 2, 3]: ${'1,2,3' == [1, 2, 3]}`); // true\n\n      console.log(`'10' > '2': ${'10' > '2'}`); // false\n    </script>\n  </body>\n</html>\n","slug":"js-transform/js-transform","published":1,"date":"2022-08-23T13:15:25.919Z","updated":"2022-08-23T13:15:25.919Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eubjlx000shgtk0ipd5gjr","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n  </head>\n  <body>\n    <script>\n      console.log(`1 - true: ${1 - true}`);\n      console.log(`1 - false: ${1 - false}`);\n      console.log(`1 - null: ${1 - null}`);\n      console.log(`1 - undefined: ${1 - undefined}`);\n      console.log(`2 * ['5']: ${2 * ['5']}`);\n\n      console.log(`123 + '123': ${123 + '123'}`);\n      console.log(`123 + null: ${123 + null}`);\n      console.log(`123 + true: ${123 + true}`);\n      console.log(`123 + {}: ${123 + {}}`);\n\n      console.log(`NaN == NaN: ${NaN == NaN}`);\n\n      console.log(`true == 1: ${true == 1}`);\n      console.log(`true == '2': ${true == '2'}`);\n      console.log(`true == ['1']: ${true == ['1']}`);\n      console.log(`true == ['2']: ${true == ['2']}`);\n      console.log(`undefined == false: ${undefined == false}`);\n      console.log(`null == false: ${null == false}`);\n\n      console.log(`123 == '123': ${123 == '123'}`);\n      console.log(`'' == 0: ${'' == 0}`);\n\n      console.log(`null == undefined: ${null == undefined}`); // true\n      console.log(`null == '': ${null == ''}`); // false\n      console.log(`null == 0: ${null == 0}`); // false\n      console.log(`null == false: ${null == false}`); // false\n      console.log(`undefined == '': ${undefined == ''}`); // false\n      console.log(`undefined == 0: ${undefined == 0}`); // false\n      console.log(`undefined == false: ${undefined == false}`); // false\n\n      console.log(`'[object Object]' == {}: ${'[object Object]' == {}}`); // true\n      console.log(`'1,2,3' == [1, 2, 3]: ${'1,2,3' == [1, 2, 3]}`); // true\n\n      console.log(`'10' > '2': ${'10' > '2'}`); // false\n    </script>\n  </body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n  </head>\n  <body>\n    <script>\n      console.log(`1 - true: ${1 - true}`);\n      console.log(`1 - false: ${1 - false}`);\n      console.log(`1 - null: ${1 - null}`);\n      console.log(`1 - undefined: ${1 - undefined}`);\n      console.log(`2 * ['5']: ${2 * ['5']}`);\n\n      console.log(`123 + '123': ${123 + '123'}`);\n      console.log(`123 + null: ${123 + null}`);\n      console.log(`123 + true: ${123 + true}`);\n      console.log(`123 + {}: ${123 + {}}`);\n\n      console.log(`NaN == NaN: ${NaN == NaN}`);\n\n      console.log(`true == 1: ${true == 1}`);\n      console.log(`true == '2': ${true == '2'}`);\n      console.log(`true == ['1']: ${true == ['1']}`);\n      console.log(`true == ['2']: ${true == ['2']}`);\n      console.log(`undefined == false: ${undefined == false}`);\n      console.log(`null == false: ${null == false}`);\n\n      console.log(`123 == '123': ${123 == '123'}`);\n      console.log(`'' == 0: ${'' == 0}`);\n\n      console.log(`null == undefined: ${null == undefined}`); // true\n      console.log(`null == '': ${null == ''}`); // false\n      console.log(`null == 0: ${null == 0}`); // false\n      console.log(`null == false: ${null == false}`); // false\n      console.log(`undefined == '': ${undefined == ''}`); // false\n      console.log(`undefined == 0: ${undefined == 0}`); // false\n      console.log(`undefined == false: ${undefined == false}`); // false\n\n      console.log(`'[object Object]' == {}: ${'[object Object]' == {}}`); // true\n      console.log(`'1,2,3' == [1, 2, 3]: ${'1,2,3' == [1, 2, 3]}`); // true\n\n      console.log(`'10' > '2': ${'10' > '2'}`); // false\n    </script>\n  </body>\n</html>\n"},{"title":"es6对象增强","date":"2022-09-02T02:42:05.000Z","_content":"\n#### 对象字面量语法扩展\n\n(1)属性赋值简写：给一个属性赋变量值时，如果变量和属性的名称相同，可以省略冒号、变量名，直接写属性名即可，js 引擎执行代码时，会自动查找与属性名相同的变量进行属性赋值。\n\n```javascript\nvar name = 'test';\nvar obj = {\n  name,\n};\nconsole.log(obj); // {name: 'test'}\n```\n\n(2)简化属性方法定义：给一个属性赋匿名函数方法时，可以使用更简洁的方法\n\n```javascript\n// ES5\nconst es5Obj = {\n  testFunction: function () {\n    console.log('es5');\n  },\n};\nconsole.log(es5Obj.testFunction()); // es5\n\n// es6\nconst es6Obj = {\n  testFunction() {\n    console.log('es6');\n  },\n};\nconsole.log(es6Obj.testFunction()); // es6\n\n// **注意：只有赋值的是匿名函数，才可以使用简介语法**\nconst es6Obj1 = {\n  testFunction: function Hello() {\n    console.log('hello');\n  },\n};\nconsole.log(es6Obj1.testFunction()); // hello\n```\n\n**常见给函数取名字的情况：(1)递归，自己调用自己；(2)debugger 的时候，方便问题定位**\n\n(3)计算属性名：属性可以动态生成，需要把动态属性用[]包括起来\n\n```javascript\nconst es6Obj = {\n  ['first' + 'second']: 'hanmeimei',\n};\nconsole.log(es6Obj['first' + 'second']); // hanmeimei\n\nconst first = 'first';\nconst es6Obj1 = {\n  [first + 'second']: 'hanmeimei',\n};\nconsole.log(es6Obj[first + 'second']); // hanmeimei\n```\n\n(4)重复属性名的处理：es5 中，给对象赋值，如果存在相同的属性名，会报错；es6 中，不会报错，相同属性名的最后一个，会覆盖之前的属性\n\n```javascript\nconst es6Obj = {\n  name: 'first',\n  name: 'second',\n};\nconsole.log(es6Obj); // {name: 'second'}\n```\n\n#### 新方法\n\n(1)Object.is()\n作用：判断两个数是否相等，与===基本一致，不过有两点不同：+0 不等于-0；NaN 等于 NaN\n\n```javascript\nconsole.log(+0 == -0); // true\nconsole.log(Object.is(+0, -0)); // false\nconsole.log(Object.is(NaN, NaN)); // true\n```\n\n(2)Object.assign()\n作用：将所有可枚举属性从一个或多个源对象复制到目标对象，并返回目标对象\n\n```javascript\n// Object.assign(target, ...sources);  target为目标对象  sources为源对象\nconst target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\nconst returnedTarget = Object.assign(target, source);\nconsole.log(target); // Object { a: 1, b: 4, c: 5 }\nconsole.log(returnedTarget); // Object { a: 1, b: 4, c: 5 }\n```\n\n(3)Object.setPrototypeOf()\n作用：设置对象的原型对象，有两个参数，一个是对象，一个是对象要链接到的原型对象\n```javascript\n// Object.setPrototypeOf(object, prototypeObject);\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {};\n// obj 链接到person\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // hello\n// obj 链接到dog\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woof\n```\n当在对象上有某个方法时，会直接调用对象上的方法，不会去原型链上找\n```javascript\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {\n greeting() {\n    return 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // obj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // obj\n```\n在obj 对象中定义的方法，可能使用到原型对象上的同名方法， 只要调用原型对象上面的方法再进行一下组装就可以达到要求了。ES6 提供了super 关键词，它就指向原型对象\n```javascript\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {\n greeting() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // helloobj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woofobj\n```\n对象方法的定义只能使用简洁的语法形式，否则报错:Uncaught SyntaxError: 'super' keyword unexpected here\n**为什么？？**\n```javascript\nlet person = {\n  greeting: function() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting: function() {\n    return 'woof';\n  },\n};\nlet obj = {\n // 以下写法报错：Uncaught SyntaxError: 'super' keyword unexpected here\n greeting: function() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting());\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting());\n\nlet person = {\n  greeting: function() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting: function() {\n    return 'woof';\n  },\n};\nlet obj = {\n // 以下方法可以正常运行\n greeting() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // helloobj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woofobj\n```\n**在ES6 中，如果一个对象中定义了方法，这个方法自动获取到一个内置的属性[[HomeObject]], 来指向这个对象。super 呢，就是通过Object.getPrototypeOf([[HomeObject]]) 来获取到原型对象。obj.greeting() greeting() 方法中的[[HomeObject]] 就指向了obj.  那里面的super 就是Object.getPrototypeOf(obj), 那就是person 或dog 了，super.greeting() 就相当于person.greeting()了， 更为准确的说是 person.greeting.call(this).  因为如果person中的greenting有this, 我们还要给它指定this 指向， 不能让里面的this 指向别的对象， 只能让this 指向 obj 了。**","source":"_posts/es6-object-strong.md","raw":"---\ntitle: es6对象增强\ndate: 2022-09-02 10:42:05\ntags:\n---\n\n#### 对象字面量语法扩展\n\n(1)属性赋值简写：给一个属性赋变量值时，如果变量和属性的名称相同，可以省略冒号、变量名，直接写属性名即可，js 引擎执行代码时，会自动查找与属性名相同的变量进行属性赋值。\n\n```javascript\nvar name = 'test';\nvar obj = {\n  name,\n};\nconsole.log(obj); // {name: 'test'}\n```\n\n(2)简化属性方法定义：给一个属性赋匿名函数方法时，可以使用更简洁的方法\n\n```javascript\n// ES5\nconst es5Obj = {\n  testFunction: function () {\n    console.log('es5');\n  },\n};\nconsole.log(es5Obj.testFunction()); // es5\n\n// es6\nconst es6Obj = {\n  testFunction() {\n    console.log('es6');\n  },\n};\nconsole.log(es6Obj.testFunction()); // es6\n\n// **注意：只有赋值的是匿名函数，才可以使用简介语法**\nconst es6Obj1 = {\n  testFunction: function Hello() {\n    console.log('hello');\n  },\n};\nconsole.log(es6Obj1.testFunction()); // hello\n```\n\n**常见给函数取名字的情况：(1)递归，自己调用自己；(2)debugger 的时候，方便问题定位**\n\n(3)计算属性名：属性可以动态生成，需要把动态属性用[]包括起来\n\n```javascript\nconst es6Obj = {\n  ['first' + 'second']: 'hanmeimei',\n};\nconsole.log(es6Obj['first' + 'second']); // hanmeimei\n\nconst first = 'first';\nconst es6Obj1 = {\n  [first + 'second']: 'hanmeimei',\n};\nconsole.log(es6Obj[first + 'second']); // hanmeimei\n```\n\n(4)重复属性名的处理：es5 中，给对象赋值，如果存在相同的属性名，会报错；es6 中，不会报错，相同属性名的最后一个，会覆盖之前的属性\n\n```javascript\nconst es6Obj = {\n  name: 'first',\n  name: 'second',\n};\nconsole.log(es6Obj); // {name: 'second'}\n```\n\n#### 新方法\n\n(1)Object.is()\n作用：判断两个数是否相等，与===基本一致，不过有两点不同：+0 不等于-0；NaN 等于 NaN\n\n```javascript\nconsole.log(+0 == -0); // true\nconsole.log(Object.is(+0, -0)); // false\nconsole.log(Object.is(NaN, NaN)); // true\n```\n\n(2)Object.assign()\n作用：将所有可枚举属性从一个或多个源对象复制到目标对象，并返回目标对象\n\n```javascript\n// Object.assign(target, ...sources);  target为目标对象  sources为源对象\nconst target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\nconst returnedTarget = Object.assign(target, source);\nconsole.log(target); // Object { a: 1, b: 4, c: 5 }\nconsole.log(returnedTarget); // Object { a: 1, b: 4, c: 5 }\n```\n\n(3)Object.setPrototypeOf()\n作用：设置对象的原型对象，有两个参数，一个是对象，一个是对象要链接到的原型对象\n```javascript\n// Object.setPrototypeOf(object, prototypeObject);\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {};\n// obj 链接到person\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // hello\n// obj 链接到dog\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woof\n```\n当在对象上有某个方法时，会直接调用对象上的方法，不会去原型链上找\n```javascript\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {\n greeting() {\n    return 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // obj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // obj\n```\n在obj 对象中定义的方法，可能使用到原型对象上的同名方法， 只要调用原型对象上面的方法再进行一下组装就可以达到要求了。ES6 提供了super 关键词，它就指向原型对象\n```javascript\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {\n greeting() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // helloobj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woofobj\n```\n对象方法的定义只能使用简洁的语法形式，否则报错:Uncaught SyntaxError: 'super' keyword unexpected here\n**为什么？？**\n```javascript\nlet person = {\n  greeting: function() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting: function() {\n    return 'woof';\n  },\n};\nlet obj = {\n // 以下写法报错：Uncaught SyntaxError: 'super' keyword unexpected here\n greeting: function() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting());\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting());\n\nlet person = {\n  greeting: function() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting: function() {\n    return 'woof';\n  },\n};\nlet obj = {\n // 以下方法可以正常运行\n greeting() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // helloobj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woofobj\n```\n**在ES6 中，如果一个对象中定义了方法，这个方法自动获取到一个内置的属性[[HomeObject]], 来指向这个对象。super 呢，就是通过Object.getPrototypeOf([[HomeObject]]) 来获取到原型对象。obj.greeting() greeting() 方法中的[[HomeObject]] 就指向了obj.  那里面的super 就是Object.getPrototypeOf(obj), 那就是person 或dog 了，super.greeting() 就相当于person.greeting()了， 更为准确的说是 person.greeting.call(this).  因为如果person中的greenting有this, 我们还要给它指定this 指向， 不能让里面的this 指向别的对象， 只能让this 指向 obj 了。**","slug":"es6-object-strong","published":1,"updated":"2022-09-02T05:49:32.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7k23wt60003vgtt0vpth13y","content":"<h4 id=\"对象字面量语法扩展\"><a href=\"#对象字面量语法扩展\" class=\"headerlink\" title=\"对象字面量语法扩展\"></a>对象字面量语法扩展</h4><p>(1)属性赋值简写：给一个属性赋变量值时，如果变量和属性的名称相同，可以省略冒号、变量名，直接写属性名即可，js 引擎执行代码时，会自动查找与属性名相同的变量进行属性赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;test&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;name: &#x27;test&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)简化属性方法定义：给一个属性赋匿名函数方法时，可以使用更简洁的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es5Obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">testFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;es5&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es5Obj.testFunction()); <span class=\"comment\">// es5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">testFunction</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;es6&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj.testFunction()); <span class=\"comment\">// es6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// **注意：只有赋值的是匿名函数，才可以使用简介语法**</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">testFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj1.testFunction()); <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常见给函数取名字的情况：(1)递归，自己调用自己；(2)debugger 的时候，方便问题定位</strong></p>\n<p>(3)计算属性名：属性可以动态生成，需要把动态属性用[]包括起来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  [<span class=\"string\">&#x27;first&#x27;</span> + <span class=\"string\">&#x27;second&#x27;</span>]: <span class=\"string\">&#x27;hanmeimei&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj[<span class=\"string\">&#x27;first&#x27;</span> + <span class=\"string\">&#x27;second&#x27;</span>]); <span class=\"comment\">// hanmeimei</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> first = <span class=\"string\">&#x27;first&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj1 = &#123;</span><br><span class=\"line\">  [first + <span class=\"string\">&#x27;second&#x27;</span>]: <span class=\"string\">&#x27;hanmeimei&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj[first + <span class=\"string\">&#x27;second&#x27;</span>]); <span class=\"comment\">// hanmeimei</span></span><br></pre></td></tr></table></figure>\n\n<p>(4)重复属性名的处理：es5 中，给对象赋值，如果存在相同的属性名，会报错；es6 中，不会报错，相同属性名的最后一个，会覆盖之前的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;second&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj); <span class=\"comment\">// &#123;name: &#x27;second&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新方法\"><a href=\"#新方法\" class=\"headerlink\" title=\"新方法\"></a>新方法</h4><p>(1)Object.is()<br>作用：判断两个数是否相等，与===基本一致，不过有两点不同：+0 不等于-0；NaN 等于 NaN</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"number\">0</span> == -<span class=\"number\">0</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, -<span class=\"number\">0</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)Object.assign()<br>作用：将所有可枚举属性从一个或多个源对象复制到目标对象，并返回目标对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.assign(target, ...sources);  target为目标对象  sources为源对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = &#123; <span class=\"attr\">b</span>: <span class=\"number\">4</span>, <span class=\"attr\">c</span>: <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> returnedTarget = <span class=\"built_in\">Object</span>.assign(target, source);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target); <span class=\"comment\">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(returnedTarget); <span class=\"comment\">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(3)Object.setPrototypeOf()<br>作用：设置对象的原型对象，有两个参数，一个是对象，一个是对象要链接到的原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.setPrototypeOf(object, prototypeObject);</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// obj 链接到person</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// obj 链接到dog</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woof</span></span><br></pre></td></tr></table></figure>\n<p>当在对象上有某个方法时，会直接调用对象上的方法，不会去原型链上找</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// obj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// obj</span></span><br></pre></td></tr></table></figure>\n<p>在obj 对象中定义的方法，可能使用到原型对象上的同名方法， 只要调用原型对象上面的方法再进行一下组装就可以达到要求了。ES6 提供了super 关键词，它就指向原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// helloobj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woofobj</span></span><br></pre></td></tr></table></figure>\n<p>对象方法的定义只能使用简洁的语法形式，否则报错:Uncaught SyntaxError: ‘super’ keyword unexpected here<br><strong>为什么？？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 以下写法报错：Uncaught SyntaxError: &#x27;super&#x27; keyword unexpected here</span></span><br><span class=\"line\"> <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting());</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 以下方法可以正常运行</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// helloobj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woofobj</span></span><br></pre></td></tr></table></figure>\n<p><strong>在ES6 中，如果一个对象中定义了方法，这个方法自动获取到一个内置的属性[[HomeObject]], 来指向这个对象。super 呢，就是通过Object.getPrototypeOf([[HomeObject]]) 来获取到原型对象。obj.greeting() greeting() 方法中的[[HomeObject]] 就指向了obj.  那里面的super 就是Object.getPrototypeOf(obj), 那就是person 或dog 了，super.greeting() 就相当于person.greeting()了， 更为准确的说是 person.greeting.call(this).  因为如果person中的greenting有this, 我们还要给它指定this 指向， 不能让里面的this 指向别的对象， 只能让this 指向 obj 了。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"对象字面量语法扩展\"><a href=\"#对象字面量语法扩展\" class=\"headerlink\" title=\"对象字面量语法扩展\"></a>对象字面量语法扩展</h4><p>(1)属性赋值简写：给一个属性赋变量值时，如果变量和属性的名称相同，可以省略冒号、变量名，直接写属性名即可，js 引擎执行代码时，会自动查找与属性名相同的变量进行属性赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;test&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;name: &#x27;test&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)简化属性方法定义：给一个属性赋匿名函数方法时，可以使用更简洁的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es5Obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">testFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;es5&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es5Obj.testFunction()); <span class=\"comment\">// es5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">testFunction</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;es6&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj.testFunction()); <span class=\"comment\">// es6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// **注意：只有赋值的是匿名函数，才可以使用简介语法**</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">testFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj1.testFunction()); <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常见给函数取名字的情况：(1)递归，自己调用自己；(2)debugger 的时候，方便问题定位</strong></p>\n<p>(3)计算属性名：属性可以动态生成，需要把动态属性用[]包括起来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  [<span class=\"string\">&#x27;first&#x27;</span> + <span class=\"string\">&#x27;second&#x27;</span>]: <span class=\"string\">&#x27;hanmeimei&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj[<span class=\"string\">&#x27;first&#x27;</span> + <span class=\"string\">&#x27;second&#x27;</span>]); <span class=\"comment\">// hanmeimei</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> first = <span class=\"string\">&#x27;first&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj1 = &#123;</span><br><span class=\"line\">  [first + <span class=\"string\">&#x27;second&#x27;</span>]: <span class=\"string\">&#x27;hanmeimei&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj[first + <span class=\"string\">&#x27;second&#x27;</span>]); <span class=\"comment\">// hanmeimei</span></span><br></pre></td></tr></table></figure>\n\n<p>(4)重复属性名的处理：es5 中，给对象赋值，如果存在相同的属性名，会报错；es6 中，不会报错，相同属性名的最后一个，会覆盖之前的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;second&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj); <span class=\"comment\">// &#123;name: &#x27;second&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新方法\"><a href=\"#新方法\" class=\"headerlink\" title=\"新方法\"></a>新方法</h4><p>(1)Object.is()<br>作用：判断两个数是否相等，与===基本一致，不过有两点不同：+0 不等于-0；NaN 等于 NaN</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"number\">0</span> == -<span class=\"number\">0</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, -<span class=\"number\">0</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)Object.assign()<br>作用：将所有可枚举属性从一个或多个源对象复制到目标对象，并返回目标对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.assign(target, ...sources);  target为目标对象  sources为源对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = &#123; <span class=\"attr\">b</span>: <span class=\"number\">4</span>, <span class=\"attr\">c</span>: <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> returnedTarget = <span class=\"built_in\">Object</span>.assign(target, source);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target); <span class=\"comment\">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(returnedTarget); <span class=\"comment\">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(3)Object.setPrototypeOf()<br>作用：设置对象的原型对象，有两个参数，一个是对象，一个是对象要链接到的原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.setPrototypeOf(object, prototypeObject);</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// obj 链接到person</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// obj 链接到dog</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woof</span></span><br></pre></td></tr></table></figure>\n<p>当在对象上有某个方法时，会直接调用对象上的方法，不会去原型链上找</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// obj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// obj</span></span><br></pre></td></tr></table></figure>\n<p>在obj 对象中定义的方法，可能使用到原型对象上的同名方法， 只要调用原型对象上面的方法再进行一下组装就可以达到要求了。ES6 提供了super 关键词，它就指向原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// helloobj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woofobj</span></span><br></pre></td></tr></table></figure>\n<p>对象方法的定义只能使用简洁的语法形式，否则报错:Uncaught SyntaxError: ‘super’ keyword unexpected here<br><strong>为什么？？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 以下写法报错：Uncaught SyntaxError: &#x27;super&#x27; keyword unexpected here</span></span><br><span class=\"line\"> <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting());</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 以下方法可以正常运行</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// helloobj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woofobj</span></span><br></pre></td></tr></table></figure>\n<p><strong>在ES6 中，如果一个对象中定义了方法，这个方法自动获取到一个内置的属性[[HomeObject]], 来指向这个对象。super 呢，就是通过Object.getPrototypeOf([[HomeObject]]) 来获取到原型对象。obj.greeting() greeting() 方法中的[[HomeObject]] 就指向了obj.  那里面的super 就是Object.getPrototypeOf(obj), 那就是person 或dog 了，super.greeting() 就相当于person.greeting()了， 更为准确的说是 person.greeting.call(this).  因为如果person中的greenting有this, 我们还要给它指定this 指向， 不能让里面的this 指向别的对象， 只能让this 指向 obj 了。</strong></p>\n"}],"PostAsset":[{"_id":"source/_posts/about-design-model/class-inherit.png","slug":"class-inherit.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/combination-inherit.png","slug":"combination-inherit.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/constructor-inherit.png","slug":"constructor-inherit.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/how-to-inherit.png","slug":"how-to-inherit.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/parasitic-combination-inherit.png","slug":"parasitic-combination-inherit.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/parasitic-inherit-change.png","slug":"parasitic-inherit-change.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/parasitic-inherit.png","slug":"parasitic-inherit.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/prototype-inherit.png","slug":"prototype-inherit.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/prototype.png","slug":"prototype.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/public-and-private.png","slug":"public-and-private.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/safe-model.png","slug":"safe-model.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/static-and-public.png","slug":"static-and-public.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/about-design-model/test-prototype-inherit.png","slug":"test-prototype-inherit.png","post":"cl7eubjl10001hgtk95gl9b11","modified":0,"renderable":0},{"_id":"source/_posts/fake-array/array_from.png","slug":"array_from.png","post":"cl7eubjln000ghgtkemej7q7p","modified":0,"renderable":0},{"_id":"source/_posts/fake-array/document.png","slug":"document.png","post":"cl7eubjln000ghgtkemej7q7p","modified":0,"renderable":0},{"_id":"source/_posts/fake-array/prototype_call.png","slug":"prototype_call.png","post":"cl7eubjln000ghgtkemej7q7p","modified":0,"renderable":0},{"_id":"source/_posts/fake-array/slice_call.png","slug":"slice_call.png","post":"cl7eubjln000ghgtkemej7q7p","modified":0,"renderable":0},{"_id":"source/_posts/js-transform/convert-table.png","slug":"convert-table.png","post":"cl7eubjlq000khgtk3z8tdenh","modified":0,"renderable":0},{"_id":"source/_posts/js-transform/js-transform.html","post":"cl7eubjlq000khgtk3z8tdenh","slug":"js-transform.html","modified":1,"renderable":1},{"_id":"source/_posts/react-render/fiber_tree.png","slug":"fiber_tree.png","post":"cl7eubjlv000ohgtk0squ9vdq","modified":0,"renderable":0},{"_id":"source/_posts/react-render/force_update.png","slug":"force_update.png","post":"cl7eubjlv000ohgtk0squ9vdq","modified":0,"renderable":0},{"_id":"source/_posts/react-render/update_class.png","slug":"update_class.png","post":"cl7eubjlv000ohgtk0squ9vdq","modified":0,"renderable":0},{"_id":"source/_posts/vue3-render/render.png","slug":"render.png","post":"cl7eubjlw000rhgtkfaetbi66","modified":0,"renderable":0},{"_id":"source/_posts/vue3-render/render_function.png","slug":"render_function.png","post":"cl7eubjlw000rhgtkfaetbi66","modified":0,"renderable":0},{"_id":"source/_posts/vue3-render/render_node1.png","slug":"render_node1.png","post":"cl7eubjlw000rhgtkfaetbi66","modified":0,"renderable":0},{"_id":"source/_posts/vue3-render/render_node2.png","slug":"render_node2.png","post":"cl7eubjlw000rhgtkfaetbi66","modified":0,"renderable":0},{"_id":"source/_posts/vue3-render/vue3_render.png","slug":"vue3_render.png","post":"cl7eubjlw000rhgtkfaetbi66","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}