{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.jpeg","path":"images/logo.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/index.md","hash":"7153061642bdd2aaedcda731278a5934ff88759b","modified":1659336092641},{"_id":"source/_posts/about-design-model.md","hash":"9eb2c5bd6124d1a582158156ccc553a079934b46","modified":1663838158613},{"_id":"source/_posts/about-design-model1.md","hash":"8f76ec64f22977e4d5a6486f4e4090779a91f5c5","modified":1663838190022},{"_id":"source/_posts/about-design-model3.md","hash":"5f3244ba3d46a81d344ad7a0436b1ed877ed6121","modified":1663838226427},{"_id":"source/_posts/apply-array-to-params.md","hash":"b40d46967b3c0a0fb021242af77fef1c20a60842","modified":1663751308460},{"_id":"source/_posts/about-design-model4.md","hash":"e1a01ae49bbb203352fff795278328bbea045b1f","modified":1663838262583},{"_id":"source/_posts/about-design-model2.md","hash":"6adc57fe87e1a23af4cb2ccf359caaa5e9d52a23","modified":1663838204404},{"_id":"source/_posts/about-design-model5.md","hash":"73a55b02cd611229769ade07ae582e864e684bd9","modified":1663838278253},{"_id":"source/_posts/about-symbol.md","hash":"99d71ea1b58e50276b11a2debd131027221678e0","modified":1660887762437},{"_id":"source/_posts/about-dom.md","hash":"8b9d82b293d05a8607338ba7805995668a2a75bc","modified":1661856873610},{"_id":"source/_posts/about-fe-theory.md","hash":"5a090673e16c377c4d2d578998cb29d6fb88aa5a","modified":1658123245279},{"_id":"source/_posts/about-use-hexo.md","hash":"bba5bc4aff5263c99eed59daf779fe7a3fbd2b93","modified":1660101113291},{"_id":"source/_posts/about-map.md","hash":"f39821c6d8c12680cecf25f6abddd8430f3ed0eb","modified":1659598283549},{"_id":"source/_posts/data-structure1.md","hash":"57659081034e1f03f87c05b483fa33599fef57c5","modified":1663903749911},{"_id":"source/_posts/create-vscode-plugin.md","hash":"653b6b918bb11faa8cc85909e37b971d5d07bf0e","modified":1659679736829},{"_id":"source/_posts/create-fixed-length-array.md","hash":"bb6b775930a2282b80b9b78f0239c17461fec807","modified":1660101146408},{"_id":"source/_posts/devan-operation.md","hash":"6bbc2c6364decd9a99cb4f72c1626a757fa4a871","modified":1660807793069},{"_id":"source/_posts/github生成令牌-Personal-access-tokens-操作步骤.md","hash":"36bc1839b5bbc1938ce1e8b84ada86cb81b5683b","modified":1656566299719},{"_id":"source/_posts/browser-render.md","hash":"8107a2769a4c38a9f05241326b48506743725658","modified":1660101124104},{"_id":"source/_posts/document-location.md","hash":"2edfccf29ce6fa6ce3eb7ff5c961df6d8446ddd3","modified":1660619166205},{"_id":"source/_posts/es6-object-strong.md","hash":"6ae821db818da9d8730d16f9569103b5e560f350","modified":1662097772109},{"_id":"source/_posts/hello-world.md","hash":"270b836ccfe6be2557efe7cff4f7508dcbe21bba","modified":1655949513679},{"_id":"source/_posts/js-transform.md","hash":"e696a1a70a8634cac69b43cd2892f45e82838a37","modified":1660101077050},{"_id":"source/_posts/get-and-set-prototypeof.md","hash":"035d9fccc65f0c58943ade176ca7d6ec49026c7f","modified":1662360142960},{"_id":"source/_posts/origin-type-and-reference-type.md","hash":"10b010393111f0a8cf7c4644b8acd4bfc87cf2ef","modified":1660101267201},{"_id":"source/_posts/fake-array.md","hash":"1c2ab5ff218428b5e1de4a589f681afd808e21ec","modified":1659597456091},{"_id":"source/_posts/meta标签的使用.md","hash":"bb4ea509d4e70d028ab897066775a3c5daa92e4c","modified":1658389708630},{"_id":"source/_posts/question-about-render.md","hash":"362aefe2d4a9469e1320feb49412433993979820","modified":1660101293040},{"_id":"source/_posts/react-render.md","hash":"3d1ecf1f8ba758118a9958874f508559db7f5a93","modified":1660101306301},{"_id":"source/_posts/text-type-about-markdown.md","hash":"1941d05026a48958afe6e9ac0b0c8a8dda6abb93","modified":1660101353231},{"_id":"source/_posts/github推送代码弹窗应该怎么输入？.md","hash":"4b012a4cc4f906f27b1073639d349af384637565","modified":1656566532389},{"_id":"source/_posts/some-convenient-code.md","hash":"77144e1fdf0f043b670668068dfce18ff5c73b18","modified":1662356523830},{"_id":"source/_posts/var-const-let.md","hash":"41e5f191349193383557269ea8ec33cf0d9ce21c","modified":1660101369107},{"_id":"source/commonweal/index.md","hash":"ad7fb815e56ba127e811a3567a619a7ab7edf654","modified":1660024567905},{"_id":"source/vue/index.md","hash":"a57df7e0596d7db725d855a700185c74dcfed5c4","modified":1643106514167},{"_id":"source/_posts/vue3-render.md","hash":"0e7f667b40d879002559a3e6be9ea488e11a467b","modified":1660101380555},{"_id":"source/vue/change.md","hash":"0657a56e1da4d07caae9b44aae3d845ade2e7325","modified":1643105454040},{"_id":"source/vue/dependency.md","hash":"b96d71c3fd9006df71d6a7e7a25602472b1caa0d","modified":1643105980849},{"_id":"source/_posts/about-design-model1/abstract-car.png","hash":"63b2384c0b130f2d40907996aeb528d2131ab01f","modified":1662443039673},{"_id":"source/_posts/about-design-model1/static-param.png","hash":"ec22668e0901214c3d2efadcdae0ae34f801c2ac","modified":1662448007534},{"_id":"source/_posts/about-design-model1/safe-model-class.png","hash":"90a874baec5df9156cf7b65d7c7754d28c82337e","modified":1662442491219},{"_id":"source/_posts/about-design-model3/command-model-3.png","hash":"f8973520dfc9d241d4e418d016dbde7cf647482f","modified":1663577292848},{"_id":"source/_posts/about-design-model3/explain-model-2.png","hash":"13dd495c6f42e9820c60034d2e87bc917486129e","modified":1663580905852},{"_id":"source/_posts/about-design-model3/observer-regist.png","hash":"160d15173ed43415298e65c9b3d9a63159aacb91","modified":1662604465638},{"_id":"source/_posts/about-design-model2/bridge3.png","hash":"8358d5a031c07b8a0dbe61df13f0642bf03b7c5d","modified":1662458499287},{"_id":"source/_posts/about-design-model2/bridge2.png","hash":"0d4e3980c0c177ef97e690e69919f954f2292ddb","modified":1662458485135},{"_id":"source/_posts/about-design-model2/bridge1.png","hash":"70973d153e1e628ebf1152bce98b1a68b7530784","modified":1662458463138},{"_id":"source/_posts/about-design-model4/entrust-model-2.png","hash":"71764eebae7d27ba83deff08b4d925307914e3d0","modified":1663651049352},{"_id":"source/_posts/about-design-model4/lazy-model-1.png","hash":"5237b5b92b4b542f593af63d48afb088237eb2ed","modified":1663654190148},{"_id":"source/_posts/about-design-model4/localstorage-model-1.png","hash":"d78dd470675aa3f2a42ad1ce9617ef7d89e2168a","modified":1663651957734},{"_id":"source/_posts/about-design-model4/participate-model-1.png","hash":"44ef46104d7428d99d7b80b7ca8e2f9059d02340","modified":1663655013113},{"_id":"source/_posts/about-design-model4/participate-model-2.png","hash":"04cb3a2efcc6a9a9b3cc52a11c14b75ebfa332d6","modified":1663655036348},{"_id":"source/_posts/about-design-model4/template-model-6.png","hash":"f34ff79b1d619c45ccb21c2158a4680a6617942f","modified":1663653640090},{"_id":"source/_posts/about-design-model4/waiter-model-3.png","hash":"b59dca3e470f10063815167bca6227f8341dbc8e","modified":1663657400528},{"_id":"source/_posts/about-design-model4/waiter-model-8.png","hash":"9be78a26ae2db46d9ec8d4bb36902be64991e2f9","modified":1663658341497},{"_id":"source/_posts/about-design-model5/async-module-model-7.png","hash":"8473d1889cf3ba7e45e0b71a8dd861cc233f05c2","modified":1663661966862},{"_id":"source/_posts/about-design-model5/async-module-model-9.png","hash":"3959c02225b63e07adce93a968ed0bb0e2e6c365","modified":1663662019419},{"_id":"source/_posts/about-design-model5/async-module-model-2.png","hash":"8898b83e3301783ee9bfb43b2488f4171e86a2bc","modified":1663661641923},{"_id":"source/_posts/about-design-model5/async-module-model-8.png","hash":"3a03fb902c96d787e256412ebc5a604a26aabd93","modified":1663662004136},{"_id":"source/_posts/about-design-model5/module-model-5.png","hash":"c866de378508cfdbfd9307dd72b719577d2a3cff","modified":1663659938940},{"_id":"source/_posts/about-design-model5/mvc-model-1.png","hash":"9fe4ed86ba3315ba722de0660cc6ec5770666487","modified":1663663438592},{"_id":"source/_posts/about-design-model5/mvc-model-4.png","hash":"03b64f2faf10dbcc8c3a32fb96b29e0b135f2f49","modified":1663663969725},{"_id":"source/_posts/about-design-model5/mvp-model-1.png","hash":"ff42b48b0eb5f6ac14adc79c348d093c14f164de","modified":1663664391940},{"_id":"source/_posts/about-design-model5/mvp-model-7.png","hash":"85c76e7e1a84df4345885b58a4495b8472da6c7c","modified":1663664792064},{"_id":"source/_posts/about-design-model5/mvvm-model-2.png","hash":"3cb6051a5054c50231162690a8494170b90397f4","modified":1663665412492},{"_id":"source/_posts/about-design-model5/widget-model-1.png","hash":"4f89287a4f8aa1122864cbc4c77f89d592a68c45","modified":1663662384573},{"_id":"source/_posts/js-transform/js-transform.html","hash":"f4f8d85e5386d9b251c24aea038d4c57c88ede50","modified":1660210173722},{"_id":"source/_posts/fake-array/prototype_call.png","hash":"166ae1ed6f21a1c4ee961508d06adae89f22c6d6","modified":1659583249658},{"_id":"source/_posts/fake-array/array_from.png","hash":"50733fd866277f6aa27e12e432f2511fa886855f","modified":1659583606408},{"_id":"source/_posts/fake-array/document.png","hash":"c0e73c5d922eaf7f899856685f5fbd8245517fe8","modified":1659583001215},{"_id":"source/_posts/fake-array/slice_call.png","hash":"a97bd9fef96df18bbe6097521df710bd9615090a","modified":1659583430484},{"_id":"source/_posts/vue3-render/render.png","hash":"0b20ebf2700ccd675e40f6330e07dce8341807a0","modified":1658223255522},{"_id":"source/_posts/about-design-model1/abstract-factory2.png","hash":"a1a8a6b4b0c2aa47bbc543add6b6a675670b41ce","modified":1662443556932},{"_id":"source/_posts/about-design-model1/lazy-single-instance.png","hash":"4bbd91090a4364cc48ec5cf388ae29f1f3626b8a","modified":1662448167315},{"_id":"source/_posts/about-design-model1/person.png","hash":"12e19fccdb8ee0dea2ec9e55c4f55125a536b76e","modified":1662444952362},{"_id":"source/_posts/about-design-model1/name.png","hash":"d46e84150e7fdea9eb17d8ad0624e7eb79654ace","modified":1662444908093},{"_id":"source/_posts/about-design-model1/human.png","hash":"f78b9964ce7223cc99122c99667673d9242df348","modified":1662444891472},{"_id":"source/_posts/about-design-model1/prototype-inherit2.png","hash":"cd61b59785ea6144fabce855bd363ff7906468a9","modified":1662446461834},{"_id":"source/_posts/about-design-model/how-to-inherit.png","hash":"2610b10429de1454b684733ede30778da89da750","modified":1661856873590},{"_id":"source/_posts/about-design-model/prototype.png","hash":"fe3518ce58c5945b8f5db473d69be75f67a98b0a","modified":1661490846012},{"_id":"source/_posts/about-design-model/parasitic-inherit.png","hash":"dcde79d7db360d5f56bf441be778908d3056f693","modified":1661856873597},{"_id":"source/_posts/about-design-model/public-and-private.png","hash":"275fce752eaeadf6eee22e10bf14451ed9eb675c","modified":1661490846014},{"_id":"source/_posts/about-design-model/prototype-inherit.png","hash":"a5f0085a3caf9e0519fe3cb26129dd144cfc7594","modified":1661856873599},{"_id":"source/_posts/about-design-model/simple-factory2.png","hash":"e8d75951fa119c24b2c188eb639f16a32bf70928","modified":1662355408197},{"_id":"source/_posts/about-design-model/static-and-public.png","hash":"aef2330dce27ebc420b7654abdf1859266ec48a4","modified":1661856873605},{"_id":"source/_posts/about-design-model3/add-message.png","hash":"03712141c27e51d24f4361c6c48a609b366f5692","modified":1662605334378},{"_id":"source/_posts/about-design-model3/marry-state1.png","hash":"2f5c004568231ff2a14ab499c91aabd48c302f28","modified":1662606880721},{"_id":"source/_posts/about-design-model3/observer-remove.png","hash":"e0e97122604f5eaa716042ffd19d7e6fc4d9535f","modified":1662604648684},{"_id":"source/_posts/about-design-model3/observer-fire.png","hash":"0204e744bdcb2480cae91e03d4e79c26913cf85a","modified":1662604570583},{"_id":"source/_posts/about-design-model3/regist-change-num.png","hash":"3aa9791db11e1985c21e29959201f022a0f98a88","modified":1662605277899},{"_id":"source/_posts/about-design-model3/observer.png","hash":"05738a02cd73736025351c0e9e3fc0d0de27158f","modified":1662604356379},{"_id":"source/_posts/about-design-model2/decorator.png","hash":"a0fdfe4dc2b74b52a33fd13ed7e1b3c1fba8480e","modified":1662457093764},{"_id":"source/_posts/about-design-model2/out-look.png","hash":"d9f11180b44ccded8da8ecba5593bdd6ebd58eb4","modified":1662450856453},{"_id":"source/_posts/about-design-model4/chain-model-1.png","hash":"ac13400dfce89f26fe4bcadca5c2a1f4994083ca","modified":1663643204079},{"_id":"source/_posts/about-design-model2/station-culculate.png","hash":"26cda447bac04b0260f0ec11ca1dcb836f93855a","modified":1662454433567},{"_id":"source/_posts/about-design-model4/chain-model-2.png","hash":"8a59f234053c9a85a94f74273fafed9051ec578d","modified":1663643706105},{"_id":"source/_posts/about-design-model4/chain-model-4.png","hash":"33fa9dc7cb773d0e519dcb4a4a5869aa78234950","modified":1663644189761},{"_id":"source/_posts/about-design-model4/lazy-model-5.png","hash":"ce1428d6b73612a3290d3cbd0efa607829fdb233","modified":1663654372118},{"_id":"source/_posts/about-design-model4/lazy-model-3.png","hash":"7cf3eba1156eb71177fee16c281edfd2f7d3d0e0","modified":1663654271863},{"_id":"source/_posts/about-design-model4/entrust-model-1.png","hash":"900a7cc246a17adae923b5e0b87d5b8b8d255674","modified":1663650878995},{"_id":"source/_posts/about-design-model4/lazy-model-2.png","hash":"29a6f621b06f9283d3caff7d3c63f7c711095978","modified":1663654206105},{"_id":"source/_posts/about-design-model4/lazy-model-6.png","hash":"bb1487d2e1e38d3c2ea4cb6dcc310f0025664444","modified":1663654392861},{"_id":"source/_posts/about-design-model4/participate-model-3.png","hash":"257320d7e940dcef49305ea8d1642621bfbf3ff1","modified":1663655711666},{"_id":"source/_posts/about-design-model4/participate-model-4.png","hash":"5f13e728cfa8cf2eabd3925f1a0798bc905d267b","modified":1663655973145},{"_id":"source/_posts/about-design-model4/template-model-1.png","hash":"41e2537938230a77a4072987778016031fe92291","modified":1663653270177},{"_id":"source/_posts/about-design-model4/participate-model-5.png","hash":"9694840f32c90094e37228de41fc2cfdf4f66388","modified":1663656014526},{"_id":"source/_posts/about-design-model4/template-model-3.png","hash":"3a24763c6d9e280dd6c26d966da99ceb0d658ec5","modified":1663653576402},{"_id":"source/_posts/about-design-model4/template-model-4.png","hash":"b301423b25f6447a52369e96a6f0d1c3b93da6c5","modified":1663653602447},{"_id":"source/_posts/about-design-model4/waiter-model-6.png","hash":"007198e00695be520e246815152687e250bf4941","modified":1663658288382},{"_id":"source/_posts/about-design-model4/waiter-model-4.png","hash":"ad67d02d972353793d59f1ca5f1191fb9a220e52","modified":1663658084841},{"_id":"source/_posts/about-design-model4/waiter-model-7.png","hash":"0eefaa7468c3726aecd02980b1c10574a1d06c40","modified":1663658323937},{"_id":"source/_posts/about-design-model4/waiter-model-5.png","hash":"30412937d3a27e5d8bf1db0d87fce38a8d59839e","modified":1663658170337},{"_id":"source/_posts/about-design-model5/async-module-model-5.png","hash":"436f66ba99f8bd7400ad91b3d857d255f6f3034c","modified":1663661873825},{"_id":"source/_posts/about-design-model5/async-module-model-4.png","hash":"731b4ee9c777c9d9bd6664bf674e1abf1f48af65","modified":1663661830015},{"_id":"source/_posts/about-design-model5/module-model-3.png","hash":"aa42c569b2a73fae726d6518fda8a48a325c5a3f","modified":1663659772912},{"_id":"source/_posts/about-design-model5/module-model-2.png","hash":"a22fb6b41b50875766d5382664361095fca59051","modified":1663659739443},{"_id":"source/_posts/about-design-model5/mvc-model-3.png","hash":"28fd4de773e1352941b4b0773858520ec4e21039","modified":1663663871483},{"_id":"source/_posts/about-design-model5/mvp-model-4.png","hash":"59ab08a2d276eb142c4789000d2c484aaaeb4890","modified":1663664644640},{"_id":"source/_posts/about-design-model5/mvvm-model-3.png","hash":"b4f73f397dcb296b03350b04390a8f2cdc0906d4","modified":1663665441365},{"_id":"source/_posts/about-design-model5/mvvm-model-7.png","hash":"4d8187320d10b1bb36a49169575baf54fe7e7a71","modified":1663665616436},{"_id":"source/_posts/about-design-model5/widget-model-4.png","hash":"7c2ca9c608b6829fa768590455a8785c9ff13781","modified":1663662590740},{"_id":"source/_posts/about-design-model5/widget-model-5.png","hash":"5ff7151981d6c83fa8a45556de7e17f4e527c093","modified":1663662677871},{"_id":"source/_posts/react-render/force_update.png","hash":"f0333239066cd2e4a8cdf12bff8fcdfcc01a7616","modified":1658223255498},{"_id":"source/_posts/react-render/update_class.png","hash":"5854028928496a0b6c4ad02452cd07c12650f8e8","modified":1658223255534},{"_id":"source/_posts/vue3-render/render_node2.png","hash":"bd8cbab05ce653b80a1cc89e609b7ae9c309b7fe","modified":1658223255530},{"_id":"source/_posts/vue3-render/render_node1.png","hash":"4a4266c87a315afeb55de174b11784431f3c40b9","modified":1658223255527},{"_id":"source/_posts/about-design-model1/abstract-factory3.png","hash":"565cc1a91ec9f7f4113759d8ee84d9e7e5765dec","modified":1662443974163},{"_id":"source/_posts/about-design-model1/abstract-factory1.png","hash":"27096d5d5c2a949d2b5a0b8b4483cd0955007a30","modified":1662443533233},{"_id":"source/_posts/about-design-model1/prototype-inherit1.png","hash":"3d8d602b70b2a85f84ccb77667bfdf58688ef1e6","modified":1662446439629},{"_id":"source/_posts/about-design-model/class-inherit.png","hash":"7316cf53af5ae3d11eb708f911ddc2b9fbf35027","modified":1661856873580},{"_id":"source/_posts/about-design-model1/safe-factory-model.png","hash":"1d4838406d573590c135cb651e98e970dd03d761","modified":1662442704945},{"_id":"source/_posts/about-design-model/create-pop.png","hash":"43feb1eed0b060643140cfa80c073e12729b47af","modified":1662355408187},{"_id":"source/_posts/about-design-model/multiple-inherit.png","hash":"3370f1d5c3f1c73449ddc04e438559b4a0925ad0","modified":1662355408189},{"_id":"source/_posts/about-design-model/parasitic-combination-inherit.png","hash":"5b7c9be2d070fe04cd77d8923eaa4e1585ad9e02","modified":1661856873592},{"_id":"source/_posts/about-design-model/parasitic-inherit-change.png","hash":"0b683e58266a2816c17a932a910be6ce1bdbbf1e","modified":1661856873595},{"_id":"source/_posts/about-design-model3/command-model-2.png","hash":"394963fe76e75b6ff152d0bc64eb440812f181e4","modified":1663577276883},{"_id":"source/_posts/about-design-model3/create-component.png","hash":"313f9c4b04afdb3c0bbb24d02394ff7ed7f7afa9","modified":1662616644243},{"_id":"source/_posts/about-design-model3/deal-data.png","hash":"229c21fa8cd0891d9cf137520e2756088d805b32","modified":1662616593064},{"_id":"source/_posts/about-design-model3/marry-state.png","hash":"9d3b9fd7f74062d32194ddee1084db94ab8f2f5e","modified":1662606865403},{"_id":"source/_posts/about-design-model3/send-data.png","hash":"f2dd937ad9d5dbd6373c78b766b0ca7d18689bb8","modified":1662616481110},{"_id":"source/_posts/about-design-model3/vote-status.png","hash":"ce2f7e1b2250efafac59e7e0a6c69a8f2f57e1fb","modified":1662606197496},{"_id":"source/_posts/about-design-model4/chain-model-5.png","hash":"6c1d9aaa8a2f5c8a33e827428f33df74156af591","modified":1663644269641},{"_id":"source/_posts/about-design-model4/chain-model-6.png","hash":"0a2af8c6826567da8695e8010d13bf7101a75d0a","modified":1663644305196},{"_id":"source/_posts/about-design-model4/lazy-model-4.png","hash":"d2cec3917cabaf4da67a6ac877730c32d27d6b82","modified":1663654340065},{"_id":"source/_posts/about-design-model4/localstorage-model-4.png","hash":"c7d8b6cd9bc0093ceaaa9a731d6b721dabf0c2e2","modified":1663652031905},{"_id":"source/_posts/about-design-model4/localstorage-model-2.png","hash":"b130a85fa7ca8cc738c636091e35ce86095e4da4","modified":1663651981780},{"_id":"source/_posts/about-design-model4/template-model-2.png","hash":"f0f1cf1e6328ed7dd2da13e3ef19f0ba3090d50b","modified":1663653559773},{"_id":"source/_posts/about-design-model4/template-model-5.png","hash":"a615f27465cba32bd7ef16f4aa2d229123c6cd04","modified":1663653621150},{"_id":"source/_posts/about-design-model4/throttle-model-2.png","hash":"4d06f2204e6a312ad534b08e4aa3a0cc199b0fe4","modified":1663652874513},{"_id":"source/_posts/about-design-model4/waiter-model-1.png","hash":"4ecd76529d5af3bab1200944f956550c438d7e4c","modified":1663657090941},{"_id":"source/_posts/about-design-model4/throttle-model-3.png","hash":"9ba30093c88bda5cdf0b74397078c98615ab14e8","modified":1663652906337},{"_id":"source/_posts/about-design-model4/waiter-model-2.png","hash":"115d73933b2c9e3b333f0173a9c67b40b82b360e","modified":1663657379627},{"_id":"source/_posts/about-design-model5/appendix-1.png","hash":"63d1fb2d7060dc8e20879b271cfc0fae5ba53ce5","modified":1663665944379},{"_id":"source/_posts/about-design-model5/appendix-10.png","hash":"47f4c469384a2ae6ee68920c9c9d056323bc6964","modified":1663666108395},{"_id":"source/_posts/about-design-model5/async-module-model-3.png","hash":"955761aa1d41f38f58070239091ec7ef56eab433","modified":1663661813279},{"_id":"source/_posts/about-design-model5/async-module-model-6.png","hash":"c0234e34b71f60317c8532f9b4332297ddbfc3b2","modified":1663661929958},{"_id":"source/_posts/about-design-model5/mvp-model-2.png","hash":"a05c2d67784dc8a0c9dadb55ff4cb313ff0a4581","modified":1663664414889},{"_id":"source/_posts/about-design-model5/mvp-model-5.png","hash":"b38b48df97224ac10c391b5231c27b5ff9439d15","modified":1663664712013},{"_id":"source/_posts/about-design-model5/mvvm-model-1.png","hash":"dec3d9b3d1b759d8ab97b596942a57870ea5e899","modified":1663665306275},{"_id":"source/_posts/about-design-model5/mvp-model-6.png","hash":"b678a14aa7203ed211d9b03cc517629296d39ccb","modified":1663664732256},{"_id":"source/_posts/about-design-model5/mvvm-model-5.png","hash":"f5b38278a65c50724df598782714d46b16198ddb","modified":1663665520771},{"_id":"source/_posts/about-design-model5/mvvm-model-8.png","hash":"ae0f8837c7bf0b7cebcf1b643602ef1b7c91d9b0","modified":1663665710456},{"_id":"source/_posts/about-design-model5/widget-model-2.png","hash":"d5b2a749b270b467d4e5ca0442f079ad0d68c0ad","modified":1663662526925},{"_id":"source/_posts/about-design-model5/widget-model-3.png","hash":"8caaa1350394bb4924a26779474bd8ffdedfd1a3","modified":1663662560598},{"_id":"source/_posts/about-design-model5/widget-model-6.png","hash":"17625b96826cacb789210181082942b9d92c9685","modified":1663662713550},{"_id":"source/_posts/js-transform/convert-table.png","hash":"fdffd1b86ddacb402a9a3a423cffd91fcc229fce","modified":1658223643116},{"_id":"source/_posts/react-render/fiber_tree.png","hash":"947d11b845e1abb74cbb2d4e135767a377692041","modified":1658223255494},{"_id":"source/_posts/vue3-render/render_function.png","hash":"ab09e61382c872069a70212525d4333d6ba8cd19","modified":1658223255525},{"_id":"source/_posts/about-design-model1/work.png","hash":"85878cbf259712eba4a4d960bef9fc8f72361f7d","modified":1662444928587},{"_id":"source/_posts/about-design-model/multiple-status.png","hash":"99f1acc2445ec0c692d48660ddbd71b510f1284b","modified":1662355408192},{"_id":"source/_posts/about-design-model/simple-factory1.png","hash":"7a9ab5660cbd92e1e0f851985402404fb0f49814","modified":1662355408196},{"_id":"source/_posts/about-design-model3/basic-model.png","hash":"d11299e00239d8eee68fa84742cf934d7b2b7455","modified":1662544252055},{"_id":"source/_posts/about-design-model/safe-model.png","hash":"8ddf098b287fc1582ef3c57f6641b8cdfe529ee0","modified":1661856873602},{"_id":"source/_posts/about-design-model/test-prototype-inherit.png","hash":"ffe8e406495b76ed7e8fa5fa95247335f0842bd8","modified":1661856873608},{"_id":"source/_posts/about-design-model3/command-model-1.png","hash":"e8f27f13a8b8964e1f98cf90c9d11336745ce4cd","modified":1663577254334},{"_id":"source/_posts/about-design-model3/cache-model.png","hash":"849dac393027d49c7932b80aeacdeb6dc665ad8d","modified":1663579414660},{"_id":"source/_posts/about-design-model3/explain-model-1.png","hash":"b41f3ee9472b65e45fd3699586fe343b90801e1c","modified":1663580887647},{"_id":"source/_posts/about-design-model3/explain-model-3.png","hash":"7090631280b778e1a081cf14ee1aef4eaddf2724","modified":1663580922971},{"_id":"source/_posts/about-design-model3/inherit-as-basic-model.png","hash":"04bcb6c49805f61c210a276673688925342a97a2","modified":1662544568359},{"_id":"source/_posts/about-design-model3/inherit-model.png","hash":"c458570cfbf5cb544f160dbf7f5ea2688eb54cfe","modified":1662544386649},{"_id":"source/_posts/about-design-model3/mediator-model.png","hash":"037a378a4fd6a9b68621c714239390a175768283","modified":1663578864540},{"_id":"source/_posts/about-design-model3/price-strategy.png","hash":"8c9b4bc9e46d85dbd5ff1db682f35d7727ac2d24","modified":1662615179307},{"_id":"source/_posts/about-design-model3/regist-message.png","hash":"94993ad78c5391eb4cc60f851d1bf5de794d680a","modified":1662605173515},{"_id":"source/_posts/about-design-model3/visitor-model.png","hash":"b47054fdf9198975a39ebfc6b4ea46cb988dc080","modified":1663578342393},{"_id":"source/_posts/about-design-model4/chain-model-3.png","hash":"de232baf72880e1c2bfca1e52ca3dece90b30922","modified":1663643787303},{"_id":"source/_posts/about-design-model4/localstorage-model-3.png","hash":"0dd09a8620412a0a10e0749a2eae5b990e14131f","modified":1663652010756},{"_id":"source/_posts/about-design-model4/localstorage-model-5.png","hash":"f60b1b8098b39c8d16bef6ce21e93f80eed6a06d","modified":1663652051324},{"_id":"source/_posts/about-design-model4/localstorage-model-6.png","hash":"af1bc9d6bd7aa6c6582b3b498aaace38b3beb7d0","modified":1663652073728},{"_id":"source/_posts/about-design-model4/participate-model-6.png","hash":"a27676bb25d07081323b4801ff167a2f9c830583","modified":1663656339712},{"_id":"source/_posts/about-design-model4/throttle-model-1.png","hash":"efe9c32037c01c30eef7c906b1477675a4b22296","modified":1663652476137},{"_id":"source/_posts/about-design-model5/appendix-2.png","hash":"c793bb154006138580dfe636e8e96f48af31c136","modified":1663665961797},{"_id":"source/_posts/about-design-model5/appendix-5.png","hash":"7d00695f69933f1493a5b215459372aa8922aa90","modified":1663666020584},{"_id":"source/_posts/about-design-model5/appendix-3.png","hash":"972a431f1b9f113e9c28acd09c21965abf3ae776","modified":1663665981472},{"_id":"source/_posts/about-design-model5/appendix-4.png","hash":"0caa8c2b2efef085bf73708c696b163b27cf4acd","modified":1663666001722},{"_id":"source/_posts/about-design-model5/appendix-8.png","hash":"acc5e67aafb4ec4d3a10ca9507832f965d05bb86","modified":1663666074927},{"_id":"source/_posts/about-design-model5/appendix-9.png","hash":"5128c7e89b6784e2e75e7f74154a3a2a36859a4a","modified":1663666091964},{"_id":"source/_posts/about-design-model5/appendix-6.png","hash":"ebaf47a4d6e618ed357e3ef105bf1a78aac86dcd","modified":1663666041654},{"_id":"source/_posts/about-design-model5/appendix-7.png","hash":"c12235fa4218a1f12d5f04de3c292d9d8a1cc606","modified":1663666058765},{"_id":"source/_posts/about-design-model5/module-model-4.png","hash":"0591ff679bd8b40d96b399c2df5db22e5d6857f1","modified":1663659920967},{"_id":"source/_posts/about-design-model5/mvc-model-2.png","hash":"2ad2eeb884aac27d63ceb815d119f4bdab3b28bf","modified":1663663790767},{"_id":"source/_posts/about-design-model5/mvvm-model-4.png","hash":"362b306d44bd195ca4adee181dabcbbb524da1ac","modified":1663665502377},{"_id":"source/_posts/about-design-model5/mvvm-model-6.png","hash":"7d62d18ec951b6be1b53157c9380618cb8f65cc2","modified":1663665578927},{"_id":"source/_posts/about-design-model1/prototype-model.png","hash":"7e1b5e0841203ae571b20c1c21fc40fb6589f946","modified":1662445978153},{"_id":"source/_posts/about-design-model/combination-inherit.png","hash":"51a2c5f4775a37e5f2a21ab257749912178476c3","modified":1661856873584},{"_id":"source/_posts/about-design-model3/iterator-model.png","hash":"b372e782497790afdac5ef90a53eb4ecd88bc18f","modified":1663580424387},{"_id":"source/_posts/about-design-model5/async-module-model-1.png","hash":"f465cd97d9c16ecea67b0d0f8ee7d3bb6ebb545c","modified":1663661413721},{"_id":"source/_posts/about-design-model5/module-model-1.png","hash":"940ec1732a0d822780c486ccb9ffc6cc29119a6f","modified":1663659235916},{"_id":"source/_posts/about-design-model5/mvp-model-3.png","hash":"f3ebcf32efc3e9b536605c9df96654c81cfc9b82","modified":1663664626784},{"_id":"source/_posts/about-design-model/constructor-inherit.png","hash":"e1eb49fe9cd4796f60678113b6f865f2e1576464","modified":1661856873588},{"_id":"source/_posts/vue3-render/vue3_render.png","hash":"c27773553432184cba670aac70e69865c21a4727","modified":1658223255541},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1654110695000},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1654110695000},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1654110695000},{"_id":"themes/next/_vendors.yml","hash":"8c2886a6af624f04fc6a376daf48c0698ea71bf7","modified":1654110695000},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1654110695000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1654110695000},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1654110695000},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1654110695000},{"_id":"themes/next/package.json","hash":"b32be32269dd2e241790a766a60357bfe13f2d45","modified":1654110695000},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1654110695000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1654110695000},{"_id":"themes/next/README.md","hash":"56638e4978154a2f2a3f03ba84047b77b4a499cc","modified":1654110695000},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1654110695000},{"_id":"themes/next/_config.yml","hash":"b75f1cb8165a894de430ff61ec0a11b437662f31","modified":1660035061195},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1654110695000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1654110695000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1654110695000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1654110695000},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1654110695000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1654110695000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1654110695000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1654110695000},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1654110695000},{"_id":"themes/next/.github/release-drafter.yml","hash":"423275ec021104b263cd88776936a8c8d6872b66","modified":1654110695000},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1654110695000},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1654110695000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1654110695000},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1654110695000},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1654110695000},{"_id":"themes/next/languages/bn.yml","hash":"fccbf2855392186e11daa8590121073594037b7b","modified":1654110695000},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1654110695000},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1654110695000},{"_id":"themes/next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1654110695000},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1654110695000},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1654110695000},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1654110695000},{"_id":"themes/next/languages/ko.yml","hash":"819c19eb9d142e5411f77cf3821d90f740ee114a","modified":1654110695000},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1654110695000},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1654110695000},{"_id":"themes/next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1654110695000},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1654110695000},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1654110695000},{"_id":"themes/next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1654110695000},{"_id":"themes/next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1654110695000},{"_id":"themes/next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1654110695000},{"_id":"themes/next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1654110695000},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1654110695000},{"_id":"themes/next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1654110695000},{"_id":"themes/next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1654110695000},{"_id":"themes/next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1654110695000},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1654110695000},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1654110695000},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1654110695000},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1654110695000},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1654110695000},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1654110695000},{"_id":"themes/next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1654110695000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1654110695000},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1654110695000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"434cc0674290958b1e9bbc46c3486f073c0722db","modified":1654110695000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"e9d51e93f239a2d4b69722c69db3463b4baf0f4c","modified":1654110695000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1654110695000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1654110695000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"b6c111344bc0f3500ca69d7590791ff85ef1090d","modified":1654110695000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1654110695000},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1654110695000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"80a20c3a7522249f051a48239db41d1317e9b552","modified":1654110695000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"e48d1ced9a673d3f0911a700d3e68c0f4ca79263","modified":1654110695000},{"_id":"themes/next/docs/ru/README.md","hash":"6c82bfd2ec8248c248da701f091b548a7a133580","modified":1654110695000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1654110695000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1654110695000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1654110695000},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1654110695000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"ccf27b9249524b9fec1c15497b4353c8d1748c6c","modified":1654110695000},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1654110695000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1654110695000},{"_id":"themes/next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1654110695000},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1654110695000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1654110695000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1654110695000},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1654110695000},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1654110695000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1654110695000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1654110695000},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1654110695000},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1654110695000},{"_id":"themes/next/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":1654110695000},{"_id":"themes/next/scripts/filters/minify.js","hash":"f160e39943e39d7276da86adb47c3f08e5f22c7a","modified":1654110695000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1654110695000},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1654110695000},{"_id":"themes/next/scripts/filters/post.js","hash":"30e03a1d4828259f82d46e64cbfe2955b6cff9a9","modified":1654110695000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1654110695000},{"_id":"themes/next/layout/_macro/post.njk","hash":"434b3e76a040a816169e1929657e4176e7b8164c","modified":1654110695000},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1654110695000},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1654110695000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1654110695000},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1654110695000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1654110695000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1654110695000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1654110695000},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1654110695000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1654110695000},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1654110695000},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1654110695000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1654110695000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1654110695000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1654110695000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1654110695000},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1654110695000},{"_id":"themes/next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1654110695000},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1654110695000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1654110695000},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1654110695000},{"_id":"themes/next/source/css/noscript.styl","hash":"263eddabfae40e54c0591e7baa8403ade8cdd56d","modified":1654110695000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1654110695000},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1654110695000},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1654110695000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1654110695000},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1654110695000},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1654110695000},{"_id":"themes/next/source/images/logo.jpeg","hash":"cf0f17140f5d4eefe4607db39c354c73eb9b6500","modified":1660025565133},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1654110695000},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1654110695000},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1654110695000},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1654110695000},{"_id":"themes/next/source/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1654110695000},{"_id":"themes/next/source/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1654110695000},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1654110695000},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1654110695000},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1654110695000},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1654110695000},{"_id":"themes/next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1654110695000},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1654110695000},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1654110695000},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1654110695000},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1654110695000},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1654110695000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1654110695000},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1654110695000},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1654110695000},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1654110695000},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1654110695000},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1654110695000},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1654110695000},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1654110695000},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1654110695000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1654110695000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1654110695000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1654110695000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1654110695000},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1654110695000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1654110695000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1654110695000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1654110695000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1654110695000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1654110695000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1654110695000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1654110695000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1654110695000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1654110695000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1654110695000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1654110695000},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1654110695000},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1654110695000},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1654110695000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1654110695000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1654110695000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1654110695000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1654110695000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1654110695000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1654110695000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1654110695000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1654110695000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1654110695000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1654110695000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1654110695000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1654110695000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1654110695000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1654110695000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1654110695000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1654110695000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1654110695000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1654110695000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1654110695000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1654110695000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1654110695000},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1654110695000},{"_id":"themes/next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1654110695000},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1654110695000},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1654110695000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1654110695000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1654110695000},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1654110695000},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1654110695000},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1654110695000},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1654110695000},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1654110695000},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1654110695000},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1654110695000},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1654110695000},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1654110695000},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1654110695000},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1654110695000},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1654110695000},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1654110695000},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1654110695000},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1654110695000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"ff642130354a0b3be0d708c43044ed4d710b5e83","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1654110695000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1654110695000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1654110695000},{"_id":"themes/next/source/images/avatar.jpg","hash":"6c8990146a8952732d3fa65f7933f4644c62f475","modified":1660025159934},{"_id":"public/atom.xml","hash":"b9cb3d10194f8d308726fd557790a30b5855a632","modified":1663909896221},{"_id":"public/index.html","hash":"c47f76ec63c42cbcdc183418377593e60157cc0f","modified":1663909896221},{"_id":"public/commonweal/index.html","hash":"92e7b87ec1f467ae80c3b6da842faa196c166b27","modified":1663909896221},{"_id":"public/vue/dependency.html","hash":"0b933168abd682fb13ba2052b80fbce0d0a7ddee","modified":1663909896221},{"_id":"public/vue/index.html","hash":"165358bef70c33ec3e58a3db74ad5bd7a9c205cb","modified":1663909896221},{"_id":"public/2022/09/21/apply-array-to-params/index.html","hash":"e4704d2564274f88ce1d323c38d22d7447009176","modified":1663909896221},{"_id":"public/2022/08/19/about-symbol/index.html","hash":"afa34dce929d0c551261f90fa1c7d0ad33e0eb9a","modified":1663909896221},{"_id":"public/2022/08/11/js-transform/js-transform/index.html","hash":"cd44f55daac400f31ef13db7594d0b6cfb80dbe6","modified":1663909896221},{"_id":"public/2022/08/05/create-vscode-plugin/index.html","hash":"a259e67e8c2ef0a8573a01b39157e90fc6583a22","modified":1663909896221},{"_id":"public/2022/08/04/fake-array/index.html","hash":"003cd691b72fa276ae45ddf6e67b30eec39069aa","modified":1663909896221},{"_id":"public/2022/07/19/origin-type-and-reference-type/index.html","hash":"9b531bc87afd5f70f94795ea49002b83a7041d70","modified":1663909896221},{"_id":"public/2022/07/05/document-location/index.html","hash":"8cff192e68235257c611d2b6e0cb571bae0897f2","modified":1663909896221},{"_id":"public/2022/06/30/github生成令牌-Personal-access-tokens-操作步骤/index.html","hash":"bbae51f445251583473fc8102486a12716751cb6","modified":1663909896221},{"_id":"public/2022/06/27/text-type-about-markdown/index.html","hash":"fe72db8bef326e65f6e1575a68720617a8f97034","modified":1663909896221},{"_id":"public/2022/06/23/question-about-render/index.html","hash":"80a13083f331503243fe38216f506c0d7cc32a21","modified":1663909896221},{"_id":"public/2022/06/22/vue3-render/index.html","hash":"e2588a62f5b2ab531ee911793de41f86c66eb0dc","modified":1663909896221},{"_id":"public/2022/06/22/react-render/index.html","hash":"04333d9941cc3b806faf321011df2dd8e3248136","modified":1663909896221},{"_id":"public/2022/03/26/about-use-hexo/index.html","hash":"d11ea1aa7756b5a8232fa8072893bd471be9ec00","modified":1663909896221},{"_id":"public/2022/03/26/var-const-let/index.html","hash":"8af69b5c6b9d8d5d2d221ba054cc87bd79643994","modified":1663909896221},{"_id":"public/2022/01/05/hello-world/index.html","hash":"dd8f63395028beea46b2614ea5c8bdd9cb9bdbc9","modified":1663909896221},{"_id":"public/archives/2022/01/index.html","hash":"c6f027084e9824acebb81f905bf3106858c4582f","modified":1663909896221},{"_id":"public/archives/2022/03/index.html","hash":"fb779d3955c8ccc916a49bcc99936a9721ac5ec8","modified":1663909896221},{"_id":"public/archives/2022/05/index.html","hash":"30b4569045127364e2eb505901477515ac141071","modified":1663909896221},{"_id":"public/archives/2022/06/index.html","hash":"21608788559ccdbcde4f973fdc48e57779052e35","modified":1663909896221},{"_id":"public/archives/2022/08/index.html","hash":"5dfaabbeb42def26d2decb0a2fb2a28305203840","modified":1663909896221},{"_id":"public/archives/2022/07/index.html","hash":"90ddd46993c116164539a3caaf937c3a19f7021b","modified":1663909896221},{"_id":"public/archives/2022/09/index.html","hash":"bb895f94eb851790dae12276c22f32c1686e337b","modified":1663909896221},{"_id":"public/vue/change.html","hash":"b383571e08c2f2459c71cf635b6cb56902de45aa","modified":1663909896221},{"_id":"public/2022/09/20/data-structure1/index.html","hash":"3e77c4b6c1b4103bc5824935ee982ebd483f025c","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/index.html","hash":"e5990d39a522080dbc88bc5954b56419ae445f27","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/index.html","hash":"9a8b3fa83942319bae2a3c43e08400c45ee88081","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/index.html","hash":"cb0467504aaa3925987d7c240d3e61b61043203a","modified":1663909896221},{"_id":"public/2022/09/06/about-design-model2/index.html","hash":"0a0832a398cb4bca4f85e9ec5ba87e34f194598f","modified":1663909896221},{"_id":"public/2022/09/05/get-and-set-prototypeof/index.html","hash":"aaa8a6a919e3b73f739ebb9b7f68e5ce8fa5bb05","modified":1663909896221},{"_id":"public/2022/09/05/some-convenient-code/index.html","hash":"0011941508b8deeb09d016b7d96687767f67e547","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/index.html","hash":"80102774ed24d75fea46379b8faf43cc55d99b3d","modified":1663909896221},{"_id":"public/2022/09/02/es6-object-strong/index.html","hash":"f247a87f4e5f5c2f0ac855bf3a0013e903bd3a72","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/index.html","hash":"19ec04586184a01579e352362e2815b30757e90c","modified":1663909896221},{"_id":"public/2022/08/09/devan-operation/index.html","hash":"9f1bfabccc71e9e566622a5a89ae3089422b3f50","modified":1663909896221},{"_id":"public/2022/08/04/about-map/index.html","hash":"e3004775090546e1cd6367afea90ae7b9aa598ea","modified":1663909896221},{"_id":"public/2022/07/31/about-dom/index.html","hash":"24553ec56caca7d3017cc56da14561bc30083943","modified":1663909896221},{"_id":"public/2022/07/19/js-transform/index.html","hash":"99f6168a6c0126c235e7592a5e7e8e1f66a041ff","modified":1663909896221},{"_id":"public/2022/07/12/about-fe-theory/index.html","hash":"b4bf05a7feab86a7fbc51311c87604eca67ce18a","modified":1663909896221},{"_id":"public/2022/06/30/github推送代码弹窗应该怎么输入？/index.html","hash":"c87de56dc7cf14f2c63f4dffeb4094049b6de1e9","modified":1663909896221},{"_id":"public/2022/06/28/meta标签的使用/index.html","hash":"10edcf49d8c9d67db489f66983fca93b1acaf366","modified":1663909896221},{"_id":"public/2022/06/27/create-fixed-length-array/index.html","hash":"55a77d9b799637797547775ebda9fe9f16e89b4e","modified":1663909896221},{"_id":"public/2022/05/23/browser-render/index.html","hash":"8c19a120cad2eeac0966fd74460fd0fe4bc57d33","modified":1663909896221},{"_id":"public/archives/index.html","hash":"308241bcb14cd309fb6124e02a7976f3d3f60882","modified":1663909896221},{"_id":"public/archives/page/2/index.html","hash":"cf3e27ca149de1cd6eae7439469c066221924091","modified":1663909896221},{"_id":"public/archives/2022/index.html","hash":"e242f8bd0ee67518e31db7f653ba0580409f3957","modified":1663909896221},{"_id":"public/archives/2022/page/2/index.html","hash":"f0dcef3f4a090b0c2bb25508d6bed70b8a7e377d","modified":1663909896221},{"_id":"public/default-index/index.html","hash":"e985b836db9f58895c8ef2e73aef7858520a50f0","modified":1663909896221},{"_id":"public/default-index/page/2/index.html","hash":"ea8b6a6c094f2269eeff316c89d218e6ad028085","modified":1663909896221},{"_id":"public/default-index/page/3/index.html","hash":"1cfacdaa2d94c87a3c645d04c08ee58ec194aafe","modified":1663909896221},{"_id":"public/default-index/page/4/index.html","hash":"c23174a850575f9d2de308923f1d8d9f4725bbb3","modified":1663909896221},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1663909896221},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1663909896221},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1663909896221},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1663909896221},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1663909896221},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1663909896221},{"_id":"public/images/logo.jpeg","hash":"cf0f17140f5d4eefe4607db39c354c73eb9b6500","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/abstract-car.png","hash":"63b2384c0b130f2d40907996aeb528d2131ab01f","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/static-param.png","hash":"ec22668e0901214c3d2efadcdae0ae34f801c2ac","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/safe-model-class.png","hash":"90a874baec5df9156cf7b65d7c7754d28c82337e","modified":1663909896221},{"_id":"public/2022/09/06/about-design-model2/bridge3.png","hash":"8358d5a031c07b8a0dbe61df13f0642bf03b7c5d","modified":1663909896221},{"_id":"public/2022/09/06/about-design-model2/bridge2.png","hash":"0d4e3980c0c177ef97e690e69919f954f2292ddb","modified":1663909896221},{"_id":"public/2022/09/06/about-design-model2/bridge1.png","hash":"70973d153e1e628ebf1152bce98b1a68b7530784","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/entrust-model-2.png","hash":"71764eebae7d27ba83deff08b4d925307914e3d0","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/lazy-model-1.png","hash":"5237b5b92b4b542f593af63d48afb088237eb2ed","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/localstorage-model-1.png","hash":"d78dd470675aa3f2a42ad1ce9617ef7d89e2168a","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/participate-model-1.png","hash":"44ef46104d7428d99d7b80b7ca8e2f9059d02340","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/participate-model-2.png","hash":"04cb3a2efcc6a9a9b3cc52a11c14b75ebfa332d6","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/template-model-6.png","hash":"f34ff79b1d619c45ccb21c2158a4680a6617942f","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/waiter-model-3.png","hash":"b59dca3e470f10063815167bca6227f8341dbc8e","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/waiter-model-8.png","hash":"9be78a26ae2db46d9ec8d4bb36902be64991e2f9","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/command-model-3.png","hash":"f8973520dfc9d241d4e418d016dbde7cf647482f","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/explain-model-2.png","hash":"13dd495c6f42e9820c60034d2e87bc917486129e","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/observer-regist.png","hash":"160d15173ed43415298e65c9b3d9a63159aacb91","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/async-module-model-2.png","hash":"8898b83e3301783ee9bfb43b2488f4171e86a2bc","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/async-module-model-8.png","hash":"3a03fb902c96d787e256412ebc5a604a26aabd93","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/async-module-model-7.png","hash":"8473d1889cf3ba7e45e0b71a8dd861cc233f05c2","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/async-module-model-9.png","hash":"3959c02225b63e07adce93a968ed0bb0e2e6c365","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/module-model-5.png","hash":"c866de378508cfdbfd9307dd72b719577d2a3cff","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvc-model-1.png","hash":"9fe4ed86ba3315ba722de0660cc6ec5770666487","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvc-model-4.png","hash":"03b64f2faf10dbcc8c3a32fb96b29e0b135f2f49","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvp-model-1.png","hash":"ff42b48b0eb5f6ac14adc79c348d093c14f164de","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvp-model-7.png","hash":"85c76e7e1a84df4345885b58a4495b8472da6c7c","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvvm-model-2.png","hash":"3cb6051a5054c50231162690a8494170b90397f4","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/widget-model-1.png","hash":"4f89287a4f8aa1122864cbc4c77f89d592a68c45","modified":1663909896221},{"_id":"public/2022/08/04/fake-array/array_from.png","hash":"50733fd866277f6aa27e12e432f2511fa886855f","modified":1663909896221},{"_id":"public/2022/08/04/fake-array/document.png","hash":"c0e73c5d922eaf7f899856685f5fbd8245517fe8","modified":1663909896221},{"_id":"public/2022/08/04/fake-array/prototype_call.png","hash":"166ae1ed6f21a1c4ee961508d06adae89f22c6d6","modified":1663909896221},{"_id":"public/2022/08/04/fake-array/slice_call.png","hash":"a97bd9fef96df18bbe6097521df710bd9615090a","modified":1663909896221},{"_id":"public/2022/06/22/vue3-render/render.png","hash":"0b20ebf2700ccd675e40f6330e07dce8341807a0","modified":1663909896221},{"_id":"public/images/avatar.jpg","hash":"6c8990146a8952732d3fa65f7933f4644c62f475","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/abstract-factory2.png","hash":"a1a8a6b4b0c2aa47bbc543add6b6a675670b41ce","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/human.png","hash":"f78b9964ce7223cc99122c99667673d9242df348","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/lazy-single-instance.png","hash":"4bbd91090a4364cc48ec5cf388ae29f1f3626b8a","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/person.png","hash":"12e19fccdb8ee0dea2ec9e55c4f55125a536b76e","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/name.png","hash":"d46e84150e7fdea9eb17d8ad0624e7eb79654ace","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/prototype-inherit2.png","hash":"cd61b59785ea6144fabce855bd363ff7906468a9","modified":1663909896221},{"_id":"public/2022/09/06/about-design-model2/decorator.png","hash":"a0fdfe4dc2b74b52a33fd13ed7e1b3c1fba8480e","modified":1663909896221},{"_id":"public/2022/09/06/about-design-model2/out-look.png","hash":"d9f11180b44ccded8da8ecba5593bdd6ebd58eb4","modified":1663909896221},{"_id":"public/2022/09/06/about-design-model2/station-culculate.png","hash":"26cda447bac04b0260f0ec11ca1dcb836f93855a","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/chain-model-1.png","hash":"ac13400dfce89f26fe4bcadca5c2a1f4994083ca","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/chain-model-2.png","hash":"8a59f234053c9a85a94f74273fafed9051ec578d","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/chain-model-4.png","hash":"33fa9dc7cb773d0e519dcb4a4a5869aa78234950","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/entrust-model-1.png","hash":"900a7cc246a17adae923b5e0b87d5b8b8d255674","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/lazy-model-3.png","hash":"7cf3eba1156eb71177fee16c281edfd2f7d3d0e0","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/lazy-model-6.png","hash":"bb1487d2e1e38d3c2ea4cb6dcc310f0025664444","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/lazy-model-2.png","hash":"29a6f621b06f9283d3caff7d3c63f7c711095978","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/lazy-model-5.png","hash":"ce1428d6b73612a3290d3cbd0efa607829fdb233","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/participate-model-4.png","hash":"5f13e728cfa8cf2eabd3925f1a0798bc905d267b","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/participate-model-3.png","hash":"257320d7e940dcef49305ea8d1642621bfbf3ff1","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/participate-model-5.png","hash":"9694840f32c90094e37228de41fc2cfdf4f66388","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/template-model-1.png","hash":"41e2537938230a77a4072987778016031fe92291","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/template-model-3.png","hash":"3a24763c6d9e280dd6c26d966da99ceb0d658ec5","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/template-model-4.png","hash":"b301423b25f6447a52369e96a6f0d1c3b93da6c5","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/waiter-model-4.png","hash":"ad67d02d972353793d59f1ca5f1191fb9a220e52","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/waiter-model-5.png","hash":"30412937d3a27e5d8bf1db0d87fce38a8d59839e","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/waiter-model-6.png","hash":"007198e00695be520e246815152687e250bf4941","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/waiter-model-7.png","hash":"0eefaa7468c3726aecd02980b1c10574a1d06c40","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/how-to-inherit.png","hash":"2610b10429de1454b684733ede30778da89da750","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/prototype.png","hash":"fe3518ce58c5945b8f5db473d69be75f67a98b0a","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/parasitic-inherit.png","hash":"dcde79d7db360d5f56bf441be778908d3056f693","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/public-and-private.png","hash":"275fce752eaeadf6eee22e10bf14451ed9eb675c","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/prototype-inherit.png","hash":"a5f0085a3caf9e0519fe3cb26129dd144cfc7594","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/simple-factory2.png","hash":"e8d75951fa119c24b2c188eb639f16a32bf70928","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/static-and-public.png","hash":"aef2330dce27ebc420b7654abdf1859266ec48a4","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/add-message.png","hash":"03712141c27e51d24f4361c6c48a609b366f5692","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/marry-state1.png","hash":"2f5c004568231ff2a14ab499c91aabd48c302f28","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/observer-fire.png","hash":"0204e744bdcb2480cae91e03d4e79c26913cf85a","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/observer-remove.png","hash":"e0e97122604f5eaa716042ffd19d7e6fc4d9535f","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/observer.png","hash":"05738a02cd73736025351c0e9e3fc0d0de27158f","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/regist-change-num.png","hash":"3aa9791db11e1985c21e29959201f022a0f98a88","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/async-module-model-4.png","hash":"731b4ee9c777c9d9bd6664bf674e1abf1f48af65","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/async-module-model-5.png","hash":"436f66ba99f8bd7400ad91b3d857d255f6f3034c","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/module-model-2.png","hash":"a22fb6b41b50875766d5382664361095fca59051","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/module-model-3.png","hash":"aa42c569b2a73fae726d6518fda8a48a325c5a3f","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvc-model-3.png","hash":"28fd4de773e1352941b4b0773858520ec4e21039","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvp-model-4.png","hash":"59ab08a2d276eb142c4789000d2c484aaaeb4890","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvvm-model-3.png","hash":"b4f73f397dcb296b03350b04390a8f2cdc0906d4","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvvm-model-7.png","hash":"4d8187320d10b1bb36a49169575baf54fe7e7a71","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/widget-model-4.png","hash":"7c2ca9c608b6829fa768590455a8785c9ff13781","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/widget-model-5.png","hash":"5ff7151981d6c83fa8a45556de7e17f4e527c093","modified":1663909896221},{"_id":"public/2022/06/22/react-render/force_update.png","hash":"f0333239066cd2e4a8cdf12bff8fcdfcc01a7616","modified":1663909896221},{"_id":"public/2022/06/22/react-render/update_class.png","hash":"5854028928496a0b6c4ad02452cd07c12650f8e8","modified":1663909896221},{"_id":"public/2022/06/22/vue3-render/render_node1.png","hash":"4a4266c87a315afeb55de174b11784431f3c40b9","modified":1663909896221},{"_id":"public/2022/06/22/vue3-render/render_node2.png","hash":"bd8cbab05ce653b80a1cc89e609b7ae9c309b7fe","modified":1663909896221},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1663909896221},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1663909896221},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1663909896221},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1663909896221},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1663909896221},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1663909896221},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1663909896221},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1663909896221},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1663909896221},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1663909896221},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1663909896221},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1663909896221},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1663909896221},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1663909896221},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1663909896221},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1663909896221},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1663909896221},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1663909896221},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1663909896221},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1663909896221},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1663909896221},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1663909896221},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1663909896221},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1663909896221},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1663909896221},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1663909896221},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1663909896221},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1663909896221},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1663909896221},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1663909896221},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1663909896221},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1663909896221},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1663909896221},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1663909896221},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1663909896221},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1663909896221},{"_id":"public/2022/07/19/js-transform/js-transform.html","hash":"18caf0ae505ad384d3fa4c402aaf049e263f6fc0","modified":1663909896221},{"_id":"public/css/main.css","hash":"691e6c349d2c53e152277bb709c31758dc8ada9d","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/abstract-factory1.png","hash":"27096d5d5c2a949d2b5a0b8b4483cd0955007a30","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/abstract-factory3.png","hash":"565cc1a91ec9f7f4113759d8ee84d9e7e5765dec","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/prototype-inherit1.png","hash":"3d8d602b70b2a85f84ccb77667bfdf58688ef1e6","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/safe-factory-model.png","hash":"1d4838406d573590c135cb651e98e970dd03d761","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/chain-model-5.png","hash":"6c1d9aaa8a2f5c8a33e827428f33df74156af591","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/chain-model-6.png","hash":"0a2af8c6826567da8695e8010d13bf7101a75d0a","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/lazy-model-4.png","hash":"d2cec3917cabaf4da67a6ac877730c32d27d6b82","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/localstorage-model-2.png","hash":"b130a85fa7ca8cc738c636091e35ce86095e4da4","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/localstorage-model-4.png","hash":"c7d8b6cd9bc0093ceaaa9a731d6b721dabf0c2e2","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/template-model-2.png","hash":"f0f1cf1e6328ed7dd2da13e3ef19f0ba3090d50b","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/template-model-5.png","hash":"a615f27465cba32bd7ef16f4aa2d229123c6cd04","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/throttle-model-2.png","hash":"4d06f2204e6a312ad534b08e4aa3a0cc199b0fe4","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/throttle-model-3.png","hash":"9ba30093c88bda5cdf0b74397078c98615ab14e8","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/waiter-model-1.png","hash":"4ecd76529d5af3bab1200944f956550c438d7e4c","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/waiter-model-2.png","hash":"115d73933b2c9e3b333f0173a9c67b40b82b360e","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/class-inherit.png","hash":"7316cf53af5ae3d11eb708f911ddc2b9fbf35027","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/create-pop.png","hash":"43feb1eed0b060643140cfa80c073e12729b47af","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/multiple-inherit.png","hash":"3370f1d5c3f1c73449ddc04e438559b4a0925ad0","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/parasitic-combination-inherit.png","hash":"5b7c9be2d070fe04cd77d8923eaa4e1585ad9e02","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/parasitic-inherit-change.png","hash":"0b683e58266a2816c17a932a910be6ce1bdbbf1e","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/command-model-2.png","hash":"394963fe76e75b6ff152d0bc64eb440812f181e4","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/create-component.png","hash":"313f9c4b04afdb3c0bbb24d02394ff7ed7f7afa9","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/deal-data.png","hash":"229c21fa8cd0891d9cf137520e2756088d805b32","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/marry-state.png","hash":"9d3b9fd7f74062d32194ddee1084db94ab8f2f5e","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/send-data.png","hash":"f2dd937ad9d5dbd6373c78b766b0ca7d18689bb8","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/vote-status.png","hash":"ce2f7e1b2250efafac59e7e0a6c69a8f2f57e1fb","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/appendix-1.png","hash":"63d1fb2d7060dc8e20879b271cfc0fae5ba53ce5","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/appendix-10.png","hash":"47f4c469384a2ae6ee68920c9c9d056323bc6964","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/async-module-model-3.png","hash":"955761aa1d41f38f58070239091ec7ef56eab433","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/async-module-model-6.png","hash":"c0234e34b71f60317c8532f9b4332297ddbfc3b2","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvp-model-2.png","hash":"a05c2d67784dc8a0c9dadb55ff4cb313ff0a4581","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvp-model-5.png","hash":"b38b48df97224ac10c391b5231c27b5ff9439d15","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvp-model-6.png","hash":"b678a14aa7203ed211d9b03cc517629296d39ccb","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvvm-model-1.png","hash":"dec3d9b3d1b759d8ab97b596942a57870ea5e899","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvvm-model-5.png","hash":"f5b38278a65c50724df598782714d46b16198ddb","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvvm-model-8.png","hash":"ae0f8837c7bf0b7cebcf1b643602ef1b7c91d9b0","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/widget-model-3.png","hash":"8caaa1350394bb4924a26779474bd8ffdedfd1a3","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/widget-model-2.png","hash":"d5b2a749b270b467d4e5ca0442f079ad0d68c0ad","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/widget-model-6.png","hash":"17625b96826cacb789210181082942b9d92c9685","modified":1663909896221},{"_id":"public/2022/07/19/js-transform/convert-table.png","hash":"fdffd1b86ddacb402a9a3a423cffd91fcc229fce","modified":1663909896221},{"_id":"public/2022/06/22/react-render/fiber_tree.png","hash":"947d11b845e1abb74cbb2d4e135767a377692041","modified":1663909896221},{"_id":"public/2022/06/22/vue3-render/render_function.png","hash":"ab09e61382c872069a70212525d4333d6ba8cd19","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/work.png","hash":"85878cbf259712eba4a4d960bef9fc8f72361f7d","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/chain-model-3.png","hash":"de232baf72880e1c2bfca1e52ca3dece90b30922","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/localstorage-model-3.png","hash":"0dd09a8620412a0a10e0749a2eae5b990e14131f","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/localstorage-model-5.png","hash":"f60b1b8098b39c8d16bef6ce21e93f80eed6a06d","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/localstorage-model-6.png","hash":"af1bc9d6bd7aa6c6582b3b498aaace38b3beb7d0","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/participate-model-6.png","hash":"a27676bb25d07081323b4801ff167a2f9c830583","modified":1663909896221},{"_id":"public/2022/09/19/about-design-model4/throttle-model-1.png","hash":"efe9c32037c01c30eef7c906b1477675a4b22296","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/multiple-status.png","hash":"99f1acc2445ec0c692d48660ddbd71b510f1284b","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/simple-factory1.png","hash":"7a9ab5660cbd92e1e0f851985402404fb0f49814","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/safe-model.png","hash":"8ddf098b287fc1582ef3c57f6641b8cdfe529ee0","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/test-prototype-inherit.png","hash":"ffe8e406495b76ed7e8fa5fa95247335f0842bd8","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/basic-model.png","hash":"d11299e00239d8eee68fa84742cf934d7b2b7455","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/cache-model.png","hash":"849dac393027d49c7932b80aeacdeb6dc665ad8d","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/command-model-1.png","hash":"e8f27f13a8b8964e1f98cf90c9d11336745ce4cd","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/explain-model-1.png","hash":"b41f3ee9472b65e45fd3699586fe343b90801e1c","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/inherit-model.png","hash":"c458570cfbf5cb544f160dbf7f5ea2688eb54cfe","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/explain-model-3.png","hash":"7090631280b778e1a081cf14ee1aef4eaddf2724","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/inherit-as-basic-model.png","hash":"04bcb6c49805f61c210a276673688925342a97a2","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/mediator-model.png","hash":"037a378a4fd6a9b68621c714239390a175768283","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/price-strategy.png","hash":"8c9b4bc9e46d85dbd5ff1db682f35d7727ac2d24","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/regist-message.png","hash":"94993ad78c5391eb4cc60f851d1bf5de794d680a","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/visitor-model.png","hash":"b47054fdf9198975a39ebfc6b4ea46cb988dc080","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/appendix-2.png","hash":"c793bb154006138580dfe636e8e96f48af31c136","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/appendix-4.png","hash":"0caa8c2b2efef085bf73708c696b163b27cf4acd","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/appendix-5.png","hash":"7d00695f69933f1493a5b215459372aa8922aa90","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/appendix-6.png","hash":"ebaf47a4d6e618ed357e3ef105bf1a78aac86dcd","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/appendix-7.png","hash":"c12235fa4218a1f12d5f04de3c292d9d8a1cc606","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/appendix-3.png","hash":"972a431f1b9f113e9c28acd09c21965abf3ae776","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/appendix-8.png","hash":"acc5e67aafb4ec4d3a10ca9507832f965d05bb86","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/appendix-9.png","hash":"5128c7e89b6784e2e75e7f74154a3a2a36859a4a","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/module-model-4.png","hash":"0591ff679bd8b40d96b399c2df5db22e5d6857f1","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvc-model-2.png","hash":"2ad2eeb884aac27d63ceb815d119f4bdab3b28bf","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvvm-model-4.png","hash":"362b306d44bd195ca4adee181dabcbbb524da1ac","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvvm-model-6.png","hash":"7d62d18ec951b6be1b53157c9380618cb8f65cc2","modified":1663909896221},{"_id":"public/2022/09/04/about-design-model1/prototype-model.png","hash":"7e1b5e0841203ae571b20c1c21fc40fb6589f946","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/combination-inherit.png","hash":"51a2c5f4775a37e5f2a21ab257749912178476c3","modified":1663909896221},{"_id":"public/2022/09/07/about-design-model3/iterator-model.png","hash":"b372e782497790afdac5ef90a53eb4ecd88bc18f","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/async-module-model-1.png","hash":"f465cd97d9c16ecea67b0d0f8ee7d3bb6ebb545c","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/module-model-1.png","hash":"940ec1732a0d822780c486ccb9ffc6cc29119a6f","modified":1663909896221},{"_id":"public/2022/09/20/about-design-model5/mvp-model-3.png","hash":"f3ebcf32efc3e9b536605c9df96654c81cfc9b82","modified":1663909896221},{"_id":"public/2022/08/20/about-design-model/constructor-inherit.png","hash":"e1eb49fe9cd4796f60678113b6f865f2e1576464","modified":1663909896221},{"_id":"public/2022/06/22/vue3-render/vue3_render.png","hash":"c27773553432184cba670aac70e69865c21a4727","modified":1663909896221}],"Category":[],"Data":[],"Page":[{"_content":"#### This is Sun Jinkang＇s page.\n","source":"index.md","raw":"#### This is Sun Jinkang＇s page.\n","date":"2022-08-01T06:41:32.641Z","updated":"2022-08-01T06:41:32.641Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"cl8e0zpbz0000jkttehtc7jbu","content":"<h4 id=\"This-is-Sun-Jinkang＇s-page\"><a href=\"#This-is-Sun-Jinkang＇s-page\" class=\"headerlink\" title=\"This is Sun Jinkang＇s page.\"></a>This is Sun Jinkang＇s page.</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"This-is-Sun-Jinkang＇s-page\"><a href=\"#This-is-Sun-Jinkang＇s-page\" class=\"headerlink\" title=\"This is Sun Jinkang＇s page.\"></a>This is Sun Jinkang＇s page.</h4>"},{"title":"2.x迁移到3.x变更点","date":"2022-01-25T06:17:57.000Z","_content":"### 生命周期变更\n| 选项式 API | Hook inside setup |\n| :------: | :------: |\n| beforeCreate | Not needed* |\n| created | Not needed* |\n| beforeMount | onBeforeMount |\n| mounted | onMounted |\n| beforeUpdate | onBeforeUpdate |\n| updated | onUpdated |\n| beforeUnmount | onBeforeUnmount |\n| unmounted | onUnmounted |\n| errorCaptured | onErrorCaptured |\n| renderTracked | onRenderTracked |\n| renderTriggered | onRenderTriggered |\n| activated | onActivated |\n| deactivated | onDeactivated |\n\n### vue3允许组件有多个根节点\n\n### 移除过滤器\n过滤器已移除，且不再支持，建议用计算属性或方法代替过滤器，而不是使用过滤器\n\n### template应用挂载变更\n在 Vue 2.x 中，当挂载一个具有 template 的应用时，被渲染的内容会替换我们要挂载的目标元素。\n在 Vue 3.x 中，被渲染的应用会作为子元素插入，从而替换目标元素的 innerHTML\n\n### 过渡的 class 名更改\n过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from\n\n### <transition> 组件的相关 prop 名称变化\nleave-class 已经被重命名为 leave-from-class (在渲染函数或 JSX 中可以写为：leaveFromClass)\nenter-class 已经被重命名为 enter-from-class (在渲染函数或 JSX 中可以写为：enterFromClass)\n\n### Transition Group 根元素\n<transition-group> 不再默认渲染根元素，但仍然可以用 tag attribute 创建根元素，希望保留原效果的，设置 tag='span' 即可\n\n### 移除v-on.native修饰符\nv-on 的 .native 修饰符已被移除。同时，新增的 emits 选项允许子组件定义真正会被触发的事件。因此，对于子组件中未被定义为组件触发的所有事件监听器，Vue 现在将把它们作为原生事件监听器添加到子组件的根元素中 (除非在子组件的选项中设置了 inheritAttrs: false)。\n\n### v-if 与 v-for 的优先级变更\n| vue2 | vue3 |\n| :--- | :--- |\n| 在一个元素上同时使用 v-if 和 v-for 时，v-for 会优先作用 | v-if 总是优先于 v-for 生效 |\n\n### v-bind 合并行为\n| vue2 | vue3 |\n| :--- | :--- |\n| 如果一个元素同时定义了 v-bind=\"object\" 和一个相同的独立 attribute，那么这个独立 attribute 总是会覆盖 object 中的绑定（即不分先后） | 如果一个元素同时定义了 v-bind=\"object\" 和一个相同的独立 attribute，那么绑定的声明顺序将决定它们如何被合并（即后覆盖前） |\n\n### VNode 生命周期事件\n| vue2 | vue3 |\n| :--- | :--- |\n| 事件来监听组件生命周期,以 hook: 前缀开头，并跟随相应的生命周期钩子的名字 | 以 vnode- 前缀开头，事件也可用于 HTML 元素 |\n\n举例：vnode- 前缀：@vnode-updated=\"onUpdated\"；或者在驼峰命名法的情况下附带前缀 vnode：@vnodeUpdated=\"onUpdated\"；\n生命周期钩子 beforeDestroy 和 destroyed 已经分别被重命名为 beforeUnmount 和 unmounted，所以相应的事件名也需要更新。\n\n[从vue2迁移官方文档(注意vue3改为默认安装版本后官方文档地址可能发生迁移，该跳转地址可能存在问题)](https://v3.cn.vuejs.org/guide/migration/introduction.html)\n","source":"vue/change.md","raw":"---\ntitle: 2.x迁移到3.x变更点\ndate: 2022-01-25 14:17:57\n---\n### 生命周期变更\n| 选项式 API | Hook inside setup |\n| :------: | :------: |\n| beforeCreate | Not needed* |\n| created | Not needed* |\n| beforeMount | onBeforeMount |\n| mounted | onMounted |\n| beforeUpdate | onBeforeUpdate |\n| updated | onUpdated |\n| beforeUnmount | onBeforeUnmount |\n| unmounted | onUnmounted |\n| errorCaptured | onErrorCaptured |\n| renderTracked | onRenderTracked |\n| renderTriggered | onRenderTriggered |\n| activated | onActivated |\n| deactivated | onDeactivated |\n\n### vue3允许组件有多个根节点\n\n### 移除过滤器\n过滤器已移除，且不再支持，建议用计算属性或方法代替过滤器，而不是使用过滤器\n\n### template应用挂载变更\n在 Vue 2.x 中，当挂载一个具有 template 的应用时，被渲染的内容会替换我们要挂载的目标元素。\n在 Vue 3.x 中，被渲染的应用会作为子元素插入，从而替换目标元素的 innerHTML\n\n### 过渡的 class 名更改\n过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from\n\n### <transition> 组件的相关 prop 名称变化\nleave-class 已经被重命名为 leave-from-class (在渲染函数或 JSX 中可以写为：leaveFromClass)\nenter-class 已经被重命名为 enter-from-class (在渲染函数或 JSX 中可以写为：enterFromClass)\n\n### Transition Group 根元素\n<transition-group> 不再默认渲染根元素，但仍然可以用 tag attribute 创建根元素，希望保留原效果的，设置 tag='span' 即可\n\n### 移除v-on.native修饰符\nv-on 的 .native 修饰符已被移除。同时，新增的 emits 选项允许子组件定义真正会被触发的事件。因此，对于子组件中未被定义为组件触发的所有事件监听器，Vue 现在将把它们作为原生事件监听器添加到子组件的根元素中 (除非在子组件的选项中设置了 inheritAttrs: false)。\n\n### v-if 与 v-for 的优先级变更\n| vue2 | vue3 |\n| :--- | :--- |\n| 在一个元素上同时使用 v-if 和 v-for 时，v-for 会优先作用 | v-if 总是优先于 v-for 生效 |\n\n### v-bind 合并行为\n| vue2 | vue3 |\n| :--- | :--- |\n| 如果一个元素同时定义了 v-bind=\"object\" 和一个相同的独立 attribute，那么这个独立 attribute 总是会覆盖 object 中的绑定（即不分先后） | 如果一个元素同时定义了 v-bind=\"object\" 和一个相同的独立 attribute，那么绑定的声明顺序将决定它们如何被合并（即后覆盖前） |\n\n### VNode 生命周期事件\n| vue2 | vue3 |\n| :--- | :--- |\n| 事件来监听组件生命周期,以 hook: 前缀开头，并跟随相应的生命周期钩子的名字 | 以 vnode- 前缀开头，事件也可用于 HTML 元素 |\n\n举例：vnode- 前缀：@vnode-updated=\"onUpdated\"；或者在驼峰命名法的情况下附带前缀 vnode：@vnodeUpdated=\"onUpdated\"；\n生命周期钩子 beforeDestroy 和 destroyed 已经分别被重命名为 beforeUnmount 和 unmounted，所以相应的事件名也需要更新。\n\n[从vue2迁移官方文档(注意vue3改为默认安装版本后官方文档地址可能发生迁移，该跳转地址可能存在问题)](https://v3.cn.vuejs.org/guide/migration/introduction.html)\n","updated":"2022-01-25T10:10:54.040Z","path":"vue/change.html","comments":1,"layout":"page","_id":"cl8e0zpc50002jkttfv317img","content":"<h3 id=\"生命周期变更\"><a href=\"#生命周期变更\" class=\"headerlink\" title=\"生命周期变更\"></a>生命周期变更</h3><table>\n<thead>\n<tr>\n<th align=\"center\">选项式 API</th>\n<th align=\"center\">Hook inside setup</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">beforeCreate</td>\n<td align=\"center\">Not needed*</td>\n</tr>\n<tr>\n<td align=\"center\">created</td>\n<td align=\"center\">Not needed*</td>\n</tr>\n<tr>\n<td align=\"center\">beforeMount</td>\n<td align=\"center\">onBeforeMount</td>\n</tr>\n<tr>\n<td align=\"center\">mounted</td>\n<td align=\"center\">onMounted</td>\n</tr>\n<tr>\n<td align=\"center\">beforeUpdate</td>\n<td align=\"center\">onBeforeUpdate</td>\n</tr>\n<tr>\n<td align=\"center\">updated</td>\n<td align=\"center\">onUpdated</td>\n</tr>\n<tr>\n<td align=\"center\">beforeUnmount</td>\n<td align=\"center\">onBeforeUnmount</td>\n</tr>\n<tr>\n<td align=\"center\">unmounted</td>\n<td align=\"center\">onUnmounted</td>\n</tr>\n<tr>\n<td align=\"center\">errorCaptured</td>\n<td align=\"center\">onErrorCaptured</td>\n</tr>\n<tr>\n<td align=\"center\">renderTracked</td>\n<td align=\"center\">onRenderTracked</td>\n</tr>\n<tr>\n<td align=\"center\">renderTriggered</td>\n<td align=\"center\">onRenderTriggered</td>\n</tr>\n<tr>\n<td align=\"center\">activated</td>\n<td align=\"center\">onActivated</td>\n</tr>\n<tr>\n<td align=\"center\">deactivated</td>\n<td align=\"center\">onDeactivated</td>\n</tr>\n</tbody></table>\n<h3 id=\"vue3允许组件有多个根节点\"><a href=\"#vue3允许组件有多个根节点\" class=\"headerlink\" title=\"vue3允许组件有多个根节点\"></a>vue3允许组件有多个根节点</h3><h3 id=\"移除过滤器\"><a href=\"#移除过滤器\" class=\"headerlink\" title=\"移除过滤器\"></a>移除过滤器</h3><p>过滤器已移除，且不再支持，建议用计算属性或方法代替过滤器，而不是使用过滤器</p>\n<h3 id=\"template应用挂载变更\"><a href=\"#template应用挂载变更\" class=\"headerlink\" title=\"template应用挂载变更\"></a>template应用挂载变更</h3><p>在 Vue 2.x 中，当挂载一个具有 template 的应用时，被渲染的内容会替换我们要挂载的目标元素。<br>在 Vue 3.x 中，被渲染的应用会作为子元素插入，从而替换目标元素的 innerHTML</p>\n<h3 id=\"过渡的-class-名更改\"><a href=\"#过渡的-class-名更改\" class=\"headerlink\" title=\"过渡的 class 名更改\"></a>过渡的 class 名更改</h3><p>过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from</p>\n<h3 id=\"组件的相关-prop-名称变化\"><a href=\"#组件的相关-prop-名称变化\" class=\"headerlink\" title=\" 组件的相关 prop 名称变化\"></a><transition> 组件的相关 prop 名称变化</transition></h3><p>leave-class 已经被重命名为 leave-from-class (在渲染函数或 JSX 中可以写为：leaveFromClass)<br>enter-class 已经被重命名为 enter-from-class (在渲染函数或 JSX 中可以写为：enterFromClass)</p>\n<h3 id=\"Transition-Group-根元素\"><a href=\"#Transition-Group-根元素\" class=\"headerlink\" title=\"Transition Group 根元素\"></a>Transition Group 根元素</h3><p><transition-group> 不再默认渲染根元素，但仍然可以用 tag attribute 创建根元素，希望保留原效果的，设置 tag=’span’ 即可</transition-group></p>\n<h3 id=\"移除v-on-native修饰符\"><a href=\"#移除v-on-native修饰符\" class=\"headerlink\" title=\"移除v-on.native修饰符\"></a>移除v-on.native修饰符</h3><p>v-on 的 .native 修饰符已被移除。同时，新增的 emits 选项允许子组件定义真正会被触发的事件。因此，对于子组件中未被定义为组件触发的所有事件监听器，Vue 现在将把它们作为原生事件监听器添加到子组件的根元素中 (除非在子组件的选项中设置了 inheritAttrs: false)。</p>\n<h3 id=\"v-if-与-v-for-的优先级变更\"><a href=\"#v-if-与-v-for-的优先级变更\" class=\"headerlink\" title=\"v-if 与 v-for 的优先级变更\"></a>v-if 与 v-for 的优先级变更</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">在一个元素上同时使用 v-if 和 v-for 时，v-for 会优先作用</td>\n<td align=\"left\">v-if 总是优先于 v-for 生效</td>\n</tr>\n</tbody></table>\n<h3 id=\"v-bind-合并行为\"><a href=\"#v-bind-合并行为\" class=\"headerlink\" title=\"v-bind 合并行为\"></a>v-bind 合并行为</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">如果一个元素同时定义了 v-bind=”object” 和一个相同的独立 attribute，那么这个独立 attribute 总是会覆盖 object 中的绑定（即不分先后）</td>\n<td align=\"left\">如果一个元素同时定义了 v-bind=”object” 和一个相同的独立 attribute，那么绑定的声明顺序将决定它们如何被合并（即后覆盖前）</td>\n</tr>\n</tbody></table>\n<h3 id=\"VNode-生命周期事件\"><a href=\"#VNode-生命周期事件\" class=\"headerlink\" title=\"VNode 生命周期事件\"></a>VNode 生命周期事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">事件来监听组件生命周期,以 hook: 前缀开头，并跟随相应的生命周期钩子的名字</td>\n<td align=\"left\">以 vnode- 前缀开头，事件也可用于 HTML 元素</td>\n</tr>\n</tbody></table>\n<p>举例：vnode- 前缀：@vnode-updated=”onUpdated”；或者在驼峰命名法的情况下附带前缀 vnode：@vnodeUpdated=”onUpdated”；<br>生命周期钩子 beforeDestroy 和 destroyed 已经分别被重命名为 beforeUnmount 和 unmounted，所以相应的事件名也需要更新。</p>\n<p><a href=\"https://v3.cn.vuejs.org/guide/migration/introduction.html\">从vue2迁移官方文档(注意vue3改为默认安装版本后官方文档地址可能发生迁移，该跳转地址可能存在问题)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"生命周期变更\"><a href=\"#生命周期变更\" class=\"headerlink\" title=\"生命周期变更\"></a>生命周期变更</h3><table>\n<thead>\n<tr>\n<th align=\"center\">选项式 API</th>\n<th align=\"center\">Hook inside setup</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">beforeCreate</td>\n<td align=\"center\">Not needed*</td>\n</tr>\n<tr>\n<td align=\"center\">created</td>\n<td align=\"center\">Not needed*</td>\n</tr>\n<tr>\n<td align=\"center\">beforeMount</td>\n<td align=\"center\">onBeforeMount</td>\n</tr>\n<tr>\n<td align=\"center\">mounted</td>\n<td align=\"center\">onMounted</td>\n</tr>\n<tr>\n<td align=\"center\">beforeUpdate</td>\n<td align=\"center\">onBeforeUpdate</td>\n</tr>\n<tr>\n<td align=\"center\">updated</td>\n<td align=\"center\">onUpdated</td>\n</tr>\n<tr>\n<td align=\"center\">beforeUnmount</td>\n<td align=\"center\">onBeforeUnmount</td>\n</tr>\n<tr>\n<td align=\"center\">unmounted</td>\n<td align=\"center\">onUnmounted</td>\n</tr>\n<tr>\n<td align=\"center\">errorCaptured</td>\n<td align=\"center\">onErrorCaptured</td>\n</tr>\n<tr>\n<td align=\"center\">renderTracked</td>\n<td align=\"center\">onRenderTracked</td>\n</tr>\n<tr>\n<td align=\"center\">renderTriggered</td>\n<td align=\"center\">onRenderTriggered</td>\n</tr>\n<tr>\n<td align=\"center\">activated</td>\n<td align=\"center\">onActivated</td>\n</tr>\n<tr>\n<td align=\"center\">deactivated</td>\n<td align=\"center\">onDeactivated</td>\n</tr>\n</tbody></table>\n<h3 id=\"vue3允许组件有多个根节点\"><a href=\"#vue3允许组件有多个根节点\" class=\"headerlink\" title=\"vue3允许组件有多个根节点\"></a>vue3允许组件有多个根节点</h3><h3 id=\"移除过滤器\"><a href=\"#移除过滤器\" class=\"headerlink\" title=\"移除过滤器\"></a>移除过滤器</h3><p>过滤器已移除，且不再支持，建议用计算属性或方法代替过滤器，而不是使用过滤器</p>\n<h3 id=\"template应用挂载变更\"><a href=\"#template应用挂载变更\" class=\"headerlink\" title=\"template应用挂载变更\"></a>template应用挂载变更</h3><p>在 Vue 2.x 中，当挂载一个具有 template 的应用时，被渲染的内容会替换我们要挂载的目标元素。<br>在 Vue 3.x 中，被渲染的应用会作为子元素插入，从而替换目标元素的 innerHTML</p>\n<h3 id=\"过渡的-class-名更改\"><a href=\"#过渡的-class-名更改\" class=\"headerlink\" title=\"过渡的 class 名更改\"></a>过渡的 class 名更改</h3><p>过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from</p>\n<h3 id=\"组件的相关-prop-名称变化\"><a href=\"#组件的相关-prop-名称变化\" class=\"headerlink\" title=\" 组件的相关 prop 名称变化\"></a><transition> 组件的相关 prop 名称变化</transition></h3><p>leave-class 已经被重命名为 leave-from-class (在渲染函数或 JSX 中可以写为：leaveFromClass)<br>enter-class 已经被重命名为 enter-from-class (在渲染函数或 JSX 中可以写为：enterFromClass)</p>\n<h3 id=\"Transition-Group-根元素\"><a href=\"#Transition-Group-根元素\" class=\"headerlink\" title=\"Transition Group 根元素\"></a>Transition Group 根元素</h3><p><transition-group> 不再默认渲染根元素，但仍然可以用 tag attribute 创建根元素，希望保留原效果的，设置 tag=’span’ 即可</transition-group></p>\n<h3 id=\"移除v-on-native修饰符\"><a href=\"#移除v-on-native修饰符\" class=\"headerlink\" title=\"移除v-on.native修饰符\"></a>移除v-on.native修饰符</h3><p>v-on 的 .native 修饰符已被移除。同时，新增的 emits 选项允许子组件定义真正会被触发的事件。因此，对于子组件中未被定义为组件触发的所有事件监听器，Vue 现在将把它们作为原生事件监听器添加到子组件的根元素中 (除非在子组件的选项中设置了 inheritAttrs: false)。</p>\n<h3 id=\"v-if-与-v-for-的优先级变更\"><a href=\"#v-if-与-v-for-的优先级变更\" class=\"headerlink\" title=\"v-if 与 v-for 的优先级变更\"></a>v-if 与 v-for 的优先级变更</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">在一个元素上同时使用 v-if 和 v-for 时，v-for 会优先作用</td>\n<td align=\"left\">v-if 总是优先于 v-for 生效</td>\n</tr>\n</tbody></table>\n<h3 id=\"v-bind-合并行为\"><a href=\"#v-bind-合并行为\" class=\"headerlink\" title=\"v-bind 合并行为\"></a>v-bind 合并行为</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">如果一个元素同时定义了 v-bind=”object” 和一个相同的独立 attribute，那么这个独立 attribute 总是会覆盖 object 中的绑定（即不分先后）</td>\n<td align=\"left\">如果一个元素同时定义了 v-bind=”object” 和一个相同的独立 attribute，那么绑定的声明顺序将决定它们如何被合并（即后覆盖前）</td>\n</tr>\n</tbody></table>\n<h3 id=\"VNode-生命周期事件\"><a href=\"#VNode-生命周期事件\" class=\"headerlink\" title=\"VNode 生命周期事件\"></a>VNode 生命周期事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"left\">vue3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">事件来监听组件生命周期,以 hook: 前缀开头，并跟随相应的生命周期钩子的名字</td>\n<td align=\"left\">以 vnode- 前缀开头，事件也可用于 HTML 元素</td>\n</tr>\n</tbody></table>\n<p>举例：vnode- 前缀：@vnode-updated=”onUpdated”；或者在驼峰命名法的情况下附带前缀 vnode：@vnodeUpdated=”onUpdated”；<br>生命周期钩子 beforeDestroy 和 destroyed 已经分别被重命名为 beforeUnmount 和 unmounted，所以相应的事件名也需要更新。</p>\n<p><a href=\"https://v3.cn.vuejs.org/guide/migration/introduction.html\">从vue2迁移官方文档(注意vue3改为默认安装版本后官方文档地址可能发生迁移，该跳转地址可能存在问题)</a></p>\n"},{"title":"commonweal","date":"2022-08-09T05:51:41.000Z","_content":"\n### 找不到对应页面，请确认是否存在页面！！！","source":"commonweal/index.md","raw":"---\ntitle: commonweal\ndate: 2022-08-09 13:51:41\n---\n\n### 找不到对应页面，请确认是否存在页面！！！","updated":"2022-08-09T05:56:07.905Z","path":"commonweal/index.html","comments":1,"layout":"page","_id":"cl8e0zpc80004jktt6rlugvb2","content":"<h3 id=\"找不到对应页面，请确认是否存在页面！！！\"><a href=\"#找不到对应页面，请确认是否存在页面！！！\" class=\"headerlink\" title=\"找不到对应页面，请确认是否存在页面！！！\"></a>找不到对应页面，请确认是否存在页面！！！</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"找不到对应页面，请确认是否存在页面！！！\"><a href=\"#找不到对应页面，请确认是否存在页面！！！\" class=\"headerlink\" title=\"找不到对应页面，请确认是否存在页面！！！\"></a>找不到对应页面，请确认是否存在页面！！！</h3>"},{"title":"3.x生态环境","date":"2022-01-25T09:02:52.000Z","_content":"#### [Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！](https://gist.github.com/yyx990803/bf9a625eeff8b471bf0701afb8e3fe75)\n[基于 Vite 的极速构建工具链](https://vitejs.dev/)\n\n`<script setup>` 带来的开发体验更丝滑的组合式 API 语法\n\n[Volar 提供的单文件组件 TypeScript IDE 支持](https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar)\n\n[vue-tsc 提供的针对单文件组件的命令行类型检查和生成](https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc)\n\n[Pinia 提供的更简洁的状态管理](https://pinia.vuejs.org/) / [Vuex4](https://next.vuex.vuejs.org/)\n\n[新的开发者工具扩展，同时支持 Vue 2/Vue 3，并且提供一个插件系统来允许社区库自行扩展开发者工具面板](https://devtools.vuejs.org/plugin/plugins-guide.html)\n\n[vuejs/core](https://github.com/vuejs/core)\n\n[Vue Router 4.0](https://next.router.vuejs.org/)\n[代码地址](https://github.com/vuejs/router)\n\n[vuejs/docs](https://github.com/vuejs/docs)\n\n[vuejs/test-utils](https://github.com/vuejs/test-utils)\n\n[vuejs/babel-plugin-jsx](https://github.com/vuejs/babel-plugin-jsx)\n\n[Element Plus(稳定版本预计于2022/02/07发布)](https://element-plus.gitee.io/zh-CN/)\n\n[Ant Design Vue(从v2开始支持vue3，v3目前为beta版本)](https://next.antdv.com/)\n\n其他Vue UI框架：[Vuetify](https://vuetifyjs.com/zh-Hans/)、[Quasar](https://quasar.dev/)\n\n[全新的文档(目前只能预览)](https://staging.vuejs.org/)（[中文翻译中](https://staging-cn.vuejs.org/)）","source":"vue/dependency.md","raw":"---\ntitle: 3.x生态环境\ndate: 2022-01-25 17:02:52\n---\n#### [Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！](https://gist.github.com/yyx990803/bf9a625eeff8b471bf0701afb8e3fe75)\n[基于 Vite 的极速构建工具链](https://vitejs.dev/)\n\n`<script setup>` 带来的开发体验更丝滑的组合式 API 语法\n\n[Volar 提供的单文件组件 TypeScript IDE 支持](https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar)\n\n[vue-tsc 提供的针对单文件组件的命令行类型检查和生成](https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc)\n\n[Pinia 提供的更简洁的状态管理](https://pinia.vuejs.org/) / [Vuex4](https://next.vuex.vuejs.org/)\n\n[新的开发者工具扩展，同时支持 Vue 2/Vue 3，并且提供一个插件系统来允许社区库自行扩展开发者工具面板](https://devtools.vuejs.org/plugin/plugins-guide.html)\n\n[vuejs/core](https://github.com/vuejs/core)\n\n[Vue Router 4.0](https://next.router.vuejs.org/)\n[代码地址](https://github.com/vuejs/router)\n\n[vuejs/docs](https://github.com/vuejs/docs)\n\n[vuejs/test-utils](https://github.com/vuejs/test-utils)\n\n[vuejs/babel-plugin-jsx](https://github.com/vuejs/babel-plugin-jsx)\n\n[Element Plus(稳定版本预计于2022/02/07发布)](https://element-plus.gitee.io/zh-CN/)\n\n[Ant Design Vue(从v2开始支持vue3，v3目前为beta版本)](https://next.antdv.com/)\n\n其他Vue UI框架：[Vuetify](https://vuetifyjs.com/zh-Hans/)、[Quasar](https://quasar.dev/)\n\n[全新的文档(目前只能预览)](https://staging.vuejs.org/)（[中文翻译中](https://staging-cn.vuejs.org/)）","updated":"2022-01-25T10:19:40.849Z","path":"vue/dependency.html","comments":1,"layout":"page","_id":"cl8e0zpc90006jktt8y48aovi","content":"<h4 id=\"Vue-3-将在-2022-年-2-月-7-日成为新的默认版本！\"><a href=\"#Vue-3-将在-2022-年-2-月-7-日成为新的默认版本！\" class=\"headerlink\" title=\"Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！\"></a><a href=\"https://gist.github.com/yyx990803/bf9a625eeff8b471bf0701afb8e3fe75\">Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！</a></h4><p><a href=\"https://vitejs.dev/\">基于 Vite 的极速构建工具链</a></p>\n<p><code>&lt;script setup&gt;</code> 带来的开发体验更丝滑的组合式 API 语法</p>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar\">Volar 提供的单文件组件 TypeScript IDE 支持</a></p>\n<p><a href=\"https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc\">vue-tsc 提供的针对单文件组件的命令行类型检查和生成</a></p>\n<p><a href=\"https://pinia.vuejs.org/\">Pinia 提供的更简洁的状态管理</a> / <a href=\"https://next.vuex.vuejs.org/\">Vuex4</a></p>\n<p><a href=\"https://devtools.vuejs.org/plugin/plugins-guide.html\">新的开发者工具扩展，同时支持 Vue 2/Vue 3，并且提供一个插件系统来允许社区库自行扩展开发者工具面板</a></p>\n<p><a href=\"https://github.com/vuejs/core\">vuejs/core</a></p>\n<p><a href=\"https://next.router.vuejs.org/\">Vue Router 4.0</a><br><a href=\"https://github.com/vuejs/router\">代码地址</a></p>\n<p><a href=\"https://github.com/vuejs/docs\">vuejs/docs</a></p>\n<p><a href=\"https://github.com/vuejs/test-utils\">vuejs/test-utils</a></p>\n<p><a href=\"https://github.com/vuejs/babel-plugin-jsx\">vuejs/babel-plugin-jsx</a></p>\n<p><a href=\"https://element-plus.gitee.io/zh-CN/\">Element Plus(稳定版本预计于2022/02/07发布)</a></p>\n<p><a href=\"https://next.antdv.com/\">Ant Design Vue(从v2开始支持vue3，v3目前为beta版本)</a></p>\n<p>其他Vue UI框架：<a href=\"https://vuetifyjs.com/zh-Hans/\">Vuetify</a>、<a href=\"https://quasar.dev/\">Quasar</a></p>\n<p><a href=\"https://staging.vuejs.org/\">全新的文档(目前只能预览)</a>（<a href=\"https://staging-cn.vuejs.org/\">中文翻译中</a>）</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Vue-3-将在-2022-年-2-月-7-日成为新的默认版本！\"><a href=\"#Vue-3-将在-2022-年-2-月-7-日成为新的默认版本！\" class=\"headerlink\" title=\"Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！\"></a><a href=\"https://gist.github.com/yyx990803/bf9a625eeff8b471bf0701afb8e3fe75\">Vue 3 将在 2022 年 2 月 7 日成为新的默认版本！</a></h4><p><a href=\"https://vitejs.dev/\">基于 Vite 的极速构建工具链</a></p>\n<p><code>&lt;script setup&gt;</code> 带来的开发体验更丝滑的组合式 API 语法</p>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar\">Volar 提供的单文件组件 TypeScript IDE 支持</a></p>\n<p><a href=\"https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc\">vue-tsc 提供的针对单文件组件的命令行类型检查和生成</a></p>\n<p><a href=\"https://pinia.vuejs.org/\">Pinia 提供的更简洁的状态管理</a> / <a href=\"https://next.vuex.vuejs.org/\">Vuex4</a></p>\n<p><a href=\"https://devtools.vuejs.org/plugin/plugins-guide.html\">新的开发者工具扩展，同时支持 Vue 2/Vue 3，并且提供一个插件系统来允许社区库自行扩展开发者工具面板</a></p>\n<p><a href=\"https://github.com/vuejs/core\">vuejs/core</a></p>\n<p><a href=\"https://next.router.vuejs.org/\">Vue Router 4.0</a><br><a href=\"https://github.com/vuejs/router\">代码地址</a></p>\n<p><a href=\"https://github.com/vuejs/docs\">vuejs/docs</a></p>\n<p><a href=\"https://github.com/vuejs/test-utils\">vuejs/test-utils</a></p>\n<p><a href=\"https://github.com/vuejs/babel-plugin-jsx\">vuejs/babel-plugin-jsx</a></p>\n<p><a href=\"https://element-plus.gitee.io/zh-CN/\">Element Plus(稳定版本预计于2022/02/07发布)</a></p>\n<p><a href=\"https://next.antdv.com/\">Ant Design Vue(从v2开始支持vue3，v3目前为beta版本)</a></p>\n<p>其他Vue UI框架：<a href=\"https://vuetifyjs.com/zh-Hans/\">Vuetify</a>、<a href=\"https://quasar.dev/\">Quasar</a></p>\n<p><a href=\"https://staging.vuejs.org/\">全新的文档(目前只能预览)</a>（<a href=\"https://staging-cn.vuejs.org/\">中文翻译中</a>）</p>\n"},{"title":"vue","date":"2022-01-07T09:11:56.000Z","_content":"## VUE 2\n\n### 本部分用于记录vue2相关的文章地址\n暂无\n\n## VUE 3\n\n### 本部分用于记录vue3相关的文章地址\n[2.x迁移到3.x变更点](/vue/change.html)\n[vue3.x生态环境](/vue/dependency.html)","source":"vue/index.md","raw":"---\ntitle: vue\ndate: 2022-01-07 17:11:56\n---\n## VUE 2\n\n### 本部分用于记录vue2相关的文章地址\n暂无\n\n## VUE 3\n\n### 本部分用于记录vue3相关的文章地址\n[2.x迁移到3.x变更点](/vue/change.html)\n[vue3.x生态环境](/vue/dependency.html)","updated":"2022-01-25T10:28:34.167Z","path":"vue/index.html","comments":1,"layout":"page","_id":"cl8e0zpca0008jktt1ucthf5r","content":"<h2 id=\"VUE-2\"><a href=\"#VUE-2\" class=\"headerlink\" title=\"VUE 2\"></a>VUE 2</h2><h3 id=\"本部分用于记录vue2相关的文章地址\"><a href=\"#本部分用于记录vue2相关的文章地址\" class=\"headerlink\" title=\"本部分用于记录vue2相关的文章地址\"></a>本部分用于记录vue2相关的文章地址</h3><p>暂无</p>\n<h2 id=\"VUE-3\"><a href=\"#VUE-3\" class=\"headerlink\" title=\"VUE 3\"></a>VUE 3</h2><h3 id=\"本部分用于记录vue3相关的文章地址\"><a href=\"#本部分用于记录vue3相关的文章地址\" class=\"headerlink\" title=\"本部分用于记录vue3相关的文章地址\"></a>本部分用于记录vue3相关的文章地址</h3><p><a href=\"/vue/change.html\">2.x迁移到3.x变更点</a><br><a href=\"/vue/dependency.html\">vue3.x生态环境</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"VUE-2\"><a href=\"#VUE-2\" class=\"headerlink\" title=\"VUE 2\"></a>VUE 2</h2><h3 id=\"本部分用于记录vue2相关的文章地址\"><a href=\"#本部分用于记录vue2相关的文章地址\" class=\"headerlink\" title=\"本部分用于记录vue2相关的文章地址\"></a>本部分用于记录vue2相关的文章地址</h3><p>暂无</p>\n<h2 id=\"VUE-3\"><a href=\"#VUE-3\" class=\"headerlink\" title=\"VUE 3\"></a>VUE 3</h2><h3 id=\"本部分用于记录vue3相关的文章地址\"><a href=\"#本部分用于记录vue3相关的文章地址\" class=\"headerlink\" title=\"本部分用于记录vue3相关的文章地址\"></a>本部分用于记录vue3相关的文章地址</h3><p><a href=\"/vue/change.html\">2.x迁移到3.x变更点</a><br><a href=\"/vue/dependency.html\">vue3.x生态环境</a></p>\n"}],"Post":[{"title":"JavaScript设计模式读书笔记(2)","date":"2022-09-04T13:29:09.000Z","_content":"\n#### 创建型设计模式\n创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度\n\n###### 简单工厂模式\n(1)简单工厂模式(Simple Factory):又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例。主要用来创建同一类对象。\n![simple-factory1](simple-factory1.png)\n![simple-factory2](simple-factory2.png)\n\n(2)一个对象有时也可代替许多类\n![create-pop](create-pop.png)\n\n第一种是通过类实例化对象创建的，第二种是通过创建一个新对象然后包装增强其属性和功能来实现的。他们之间的差异性也造成前面通过类创建的对象,如果这些类继承同一父类，那么他们的父类原型上的方法是可以共用的。而后面寄生方式创建的对象都是一个新的个体，所以他们的方法就不能共用了\n\n###### 工厂方法模式\n安全模式类：可以屏蔽使用这对类的错误使用造成的错误\n![safe-model-class](safe-model-class.png)\n![safe-factory-model](safe-factory-model.png)\n\n###### 抽象工厂模式\n抽象工厂模式(Abstract Factory):通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例\n\n(1)抽象类\n抽象类是一种声明但不能使用的类\n![abstract-car](abstract-car.png)\n创建的这个car类其实什么都不能做，创建时没有任何属性，然而原型prototype上的方法也不能使用，否则会报错。但在继承上却是很有用的，因为定义了一种类,并定义了该类所必备的方法，如果在子类中没有重写这些方法，那么当调用时能找到这些方法便会报错。这一特点是很有必要的，因为在一些大型应用中，总会有一些子类去继承另一些父类，这些父类经常会定义一些必要的方法，却没有具体的实现，如 car类中的 getPrice()和getSpeed()方法，那么一旦用子类创建了一个对象，该对象总是应该具备一些必要的方法，但如果这些必要的方法从父类中继承过来而没有具体去重写实现,那么实例化对象便会调用父类\n中的这些方法，如果父类能有一个友好提示，那么对于忘记重写子类的这些错误遗漏的避免是很有帮助的。这也是抽象类的一个作用，即定义一个产品簇，并声明一些必备的方法，如果子类中没有去重写就会抛出错误。\n\n(2)抽象工厂模式：一般用它来作为父类创建一些子类\n![abstract-factory1](abstract-factory1.png)\n![abstract-factory2](abstract-factory2.png)\n抽象工厂其实是一个实现子类继承父类的方法，在这个方法中需要通过传递子类以及要继承父类(抽象类)的名称，并且在抽象工厂方法中又增加了一次对抽象类存在性的一次判断，如果存在，则将子类继承父类的方法。然后子类通过寄生式继承。继承父类过程中有一个地方需要注意，就是在对过渡类的原型继承时，不是继承父类的原型，而是通过new关键字复制的父类的一个实例，这么做是因为过渡类不应仅仅继承父类的原型方法，还要继承父类的对象属性，所以要通过new关键字将父类的构造函数执行一遍来复制构造函数中的属性和方法。对抽象工厂添加抽象类也很特殊,因为抽象工厂是个方法不需要实例化对象，故只需要一份，因此直接为抽象工厂添加类的属性即可，于是就可以通过点语法在抽象工厂上添加需要的三个汽车簇抽象类Car、Bus、Truck\n![abstract-factory3](abstract-factory3.png)\n\n###### 建造者模式\n建造者模式(Builder):将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示\n\n工厂模式主要是为了创建对象实例或者类簇(抽象工厂)，关心的是最终产出(创建)的是什么。不关心你创建的整个过程，仅仅需要知道你最终创建的结果。所以通过工厂模式我们得到的都是对象实例或者类簇。\n建造者模式在创建对象时要更为复杂一些，虽然其目的也是为了创建对象，但是它更多关心的是创建这个对象的整个过程，甚至于创建对象的每一个细节\n![human](human.png)\n![name](name.png)\n![work](work.png)\n![person](person.png)\n\n工厂模式创建出来的是一个对象，它追求的是创建的结果\n建造者模式不仅仅可得到创建的结果，也参与了创建的具体过程，对于创建的具体实现的细节也参与了干涉，这种模式创建的对象是一个复合对象\n\n**注意：这种方式对于整体对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低并且变动不大，最好还是创建整体对象**\n\n###### 原型模式\n原型模式(Prototype):用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法\n\n原型模式就是将可复用的、可共享的、耗时大的从基类中提出来然后放在其原型中，然后子类通过组合继承或者寄生组合式继承而将方法和属性继承下来，对于子类中那些需要重写的方法进行重写,这样子类创建的对象既具有子类的属性和方法也共享了基类的原型方法\n![prototype-model](prototype-model.png)\n原型模式有一个特点就是在任何时候都可以对基类或者子类进行方法的拓展，而且所有被实例化的对象或者类都能获取这些方法\n\n(1)原型继承\n原型模式更多的是用在对对象的创建上。比如创建一个实例对象的构造函数比较复杂，或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，但可以通过对这些对象属性或者方法进行复制来实现创建，这是原型模式的最初思想。如果涉及多个对象，也可以通过原型模式来实现对新对象的创建。那么首先要有一个原型模式的对象复制方法\n![prototype-inherit1](prototype-inherit1.png)\n![prototype-inherit2](prototype-inherit2.png)\n\n**原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现**\n\n###### 单例模式\n单例模式(Singleton):又被称为单体模式，是只允许实例化一次的对象类。有时我们也用一个对象来规划一个命名空间，井井有条地管理对象上的属性与方法\n\n(1)命名空间\n命名空间就是人们所说的namespace，有人也叫它名称空间。\n它解决这么一类问题:为了让代码更易懂，人们常常用单词或者拼音定义变量或者方法，但由于人们可用的单词或者汉字拼音是有限的，所以不同的人定义的变量使用的单词名称很有可能重复，此时就需要用命名空间来约束每个人定义的变量来解决这类问题\n\n(2)静态变量\n![static-param](static-param.png)\n\n(3)惰性单例\n![lazy-single-instance](lazy-single-instance.png)","source":"_posts/about-design-model1.md","raw":"---\ntitle: JavaScript设计模式读书笔记(2)\ndate: 2022-09-04 21:29:09\ntags:\n---\n\n#### 创建型设计模式\n创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度\n\n###### 简单工厂模式\n(1)简单工厂模式(Simple Factory):又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例。主要用来创建同一类对象。\n![simple-factory1](simple-factory1.png)\n![simple-factory2](simple-factory2.png)\n\n(2)一个对象有时也可代替许多类\n![create-pop](create-pop.png)\n\n第一种是通过类实例化对象创建的，第二种是通过创建一个新对象然后包装增强其属性和功能来实现的。他们之间的差异性也造成前面通过类创建的对象,如果这些类继承同一父类，那么他们的父类原型上的方法是可以共用的。而后面寄生方式创建的对象都是一个新的个体，所以他们的方法就不能共用了\n\n###### 工厂方法模式\n安全模式类：可以屏蔽使用这对类的错误使用造成的错误\n![safe-model-class](safe-model-class.png)\n![safe-factory-model](safe-factory-model.png)\n\n###### 抽象工厂模式\n抽象工厂模式(Abstract Factory):通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例\n\n(1)抽象类\n抽象类是一种声明但不能使用的类\n![abstract-car](abstract-car.png)\n创建的这个car类其实什么都不能做，创建时没有任何属性，然而原型prototype上的方法也不能使用，否则会报错。但在继承上却是很有用的，因为定义了一种类,并定义了该类所必备的方法，如果在子类中没有重写这些方法，那么当调用时能找到这些方法便会报错。这一特点是很有必要的，因为在一些大型应用中，总会有一些子类去继承另一些父类，这些父类经常会定义一些必要的方法，却没有具体的实现，如 car类中的 getPrice()和getSpeed()方法，那么一旦用子类创建了一个对象，该对象总是应该具备一些必要的方法，但如果这些必要的方法从父类中继承过来而没有具体去重写实现,那么实例化对象便会调用父类\n中的这些方法，如果父类能有一个友好提示，那么对于忘记重写子类的这些错误遗漏的避免是很有帮助的。这也是抽象类的一个作用，即定义一个产品簇，并声明一些必备的方法，如果子类中没有去重写就会抛出错误。\n\n(2)抽象工厂模式：一般用它来作为父类创建一些子类\n![abstract-factory1](abstract-factory1.png)\n![abstract-factory2](abstract-factory2.png)\n抽象工厂其实是一个实现子类继承父类的方法，在这个方法中需要通过传递子类以及要继承父类(抽象类)的名称，并且在抽象工厂方法中又增加了一次对抽象类存在性的一次判断，如果存在，则将子类继承父类的方法。然后子类通过寄生式继承。继承父类过程中有一个地方需要注意，就是在对过渡类的原型继承时，不是继承父类的原型，而是通过new关键字复制的父类的一个实例，这么做是因为过渡类不应仅仅继承父类的原型方法，还要继承父类的对象属性，所以要通过new关键字将父类的构造函数执行一遍来复制构造函数中的属性和方法。对抽象工厂添加抽象类也很特殊,因为抽象工厂是个方法不需要实例化对象，故只需要一份，因此直接为抽象工厂添加类的属性即可，于是就可以通过点语法在抽象工厂上添加需要的三个汽车簇抽象类Car、Bus、Truck\n![abstract-factory3](abstract-factory3.png)\n\n###### 建造者模式\n建造者模式(Builder):将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示\n\n工厂模式主要是为了创建对象实例或者类簇(抽象工厂)，关心的是最终产出(创建)的是什么。不关心你创建的整个过程，仅仅需要知道你最终创建的结果。所以通过工厂模式我们得到的都是对象实例或者类簇。\n建造者模式在创建对象时要更为复杂一些，虽然其目的也是为了创建对象，但是它更多关心的是创建这个对象的整个过程，甚至于创建对象的每一个细节\n![human](human.png)\n![name](name.png)\n![work](work.png)\n![person](person.png)\n\n工厂模式创建出来的是一个对象，它追求的是创建的结果\n建造者模式不仅仅可得到创建的结果，也参与了创建的具体过程，对于创建的具体实现的细节也参与了干涉，这种模式创建的对象是一个复合对象\n\n**注意：这种方式对于整体对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低并且变动不大，最好还是创建整体对象**\n\n###### 原型模式\n原型模式(Prototype):用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法\n\n原型模式就是将可复用的、可共享的、耗时大的从基类中提出来然后放在其原型中，然后子类通过组合继承或者寄生组合式继承而将方法和属性继承下来，对于子类中那些需要重写的方法进行重写,这样子类创建的对象既具有子类的属性和方法也共享了基类的原型方法\n![prototype-model](prototype-model.png)\n原型模式有一个特点就是在任何时候都可以对基类或者子类进行方法的拓展，而且所有被实例化的对象或者类都能获取这些方法\n\n(1)原型继承\n原型模式更多的是用在对对象的创建上。比如创建一个实例对象的构造函数比较复杂，或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，但可以通过对这些对象属性或者方法进行复制来实现创建，这是原型模式的最初思想。如果涉及多个对象，也可以通过原型模式来实现对新对象的创建。那么首先要有一个原型模式的对象复制方法\n![prototype-inherit1](prototype-inherit1.png)\n![prototype-inherit2](prototype-inherit2.png)\n\n**原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现**\n\n###### 单例模式\n单例模式(Singleton):又被称为单体模式，是只允许实例化一次的对象类。有时我们也用一个对象来规划一个命名空间，井井有条地管理对象上的属性与方法\n\n(1)命名空间\n命名空间就是人们所说的namespace，有人也叫它名称空间。\n它解决这么一类问题:为了让代码更易懂，人们常常用单词或者拼音定义变量或者方法，但由于人们可用的单词或者汉字拼音是有限的，所以不同的人定义的变量使用的单词名称很有可能重复，此时就需要用命名空间来约束每个人定义的变量来解决这类问题\n\n(2)静态变量\n![static-param](static-param.png)\n\n(3)惰性单例\n![lazy-single-instance](lazy-single-instance.png)","slug":"about-design-model1","published":1,"updated":"2022-09-22T09:16:30.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpc20001jkttdl2m2q3c","content":"<h4 id=\"创建型设计模式\"><a href=\"#创建型设计模式\" class=\"headerlink\" title=\"创建型设计模式\"></a>创建型设计模式</h4><p>创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度</p>\n<h6 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h6><p>(1)简单工厂模式(Simple Factory):又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例。主要用来创建同一类对象。<br><img src=\"/2022/09/04/about-design-model1/simple-factory1.png\" alt=\"simple-factory1\"><br><img src=\"/2022/09/04/about-design-model1/simple-factory2.png\" alt=\"simple-factory2\"></p>\n<p>(2)一个对象有时也可代替许多类<br><img src=\"/2022/09/04/about-design-model1/create-pop.png\" alt=\"create-pop\"></p>\n<p>第一种是通过类实例化对象创建的，第二种是通过创建一个新对象然后包装增强其属性和功能来实现的。他们之间的差异性也造成前面通过类创建的对象,如果这些类继承同一父类，那么他们的父类原型上的方法是可以共用的。而后面寄生方式创建的对象都是一个新的个体，所以他们的方法就不能共用了</p>\n<h6 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h6><p>安全模式类：可以屏蔽使用这对类的错误使用造成的错误<br><img src=\"/2022/09/04/about-design-model1/safe-model-class.png\" alt=\"safe-model-class\"><br><img src=\"/2022/09/04/about-design-model1/safe-factory-model.png\" alt=\"safe-factory-model\"></p>\n<h6 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h6><p>抽象工厂模式(Abstract Factory):通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例</p>\n<p>(1)抽象类<br>抽象类是一种声明但不能使用的类<br><img src=\"/2022/09/04/about-design-model1/abstract-car.png\" alt=\"abstract-car\"><br>创建的这个car类其实什么都不能做，创建时没有任何属性，然而原型prototype上的方法也不能使用，否则会报错。但在继承上却是很有用的，因为定义了一种类,并定义了该类所必备的方法，如果在子类中没有重写这些方法，那么当调用时能找到这些方法便会报错。这一特点是很有必要的，因为在一些大型应用中，总会有一些子类去继承另一些父类，这些父类经常会定义一些必要的方法，却没有具体的实现，如 car类中的 getPrice()和getSpeed()方法，那么一旦用子类创建了一个对象，该对象总是应该具备一些必要的方法，但如果这些必要的方法从父类中继承过来而没有具体去重写实现,那么实例化对象便会调用父类<br>中的这些方法，如果父类能有一个友好提示，那么对于忘记重写子类的这些错误遗漏的避免是很有帮助的。这也是抽象类的一个作用，即定义一个产品簇，并声明一些必备的方法，如果子类中没有去重写就会抛出错误。</p>\n<p>(2)抽象工厂模式：一般用它来作为父类创建一些子类<br><img src=\"/2022/09/04/about-design-model1/abstract-factory1.png\" alt=\"abstract-factory1\"><br><img src=\"/2022/09/04/about-design-model1/abstract-factory2.png\" alt=\"abstract-factory2\"><br>抽象工厂其实是一个实现子类继承父类的方法，在这个方法中需要通过传递子类以及要继承父类(抽象类)的名称，并且在抽象工厂方法中又增加了一次对抽象类存在性的一次判断，如果存在，则将子类继承父类的方法。然后子类通过寄生式继承。继承父类过程中有一个地方需要注意，就是在对过渡类的原型继承时，不是继承父类的原型，而是通过new关键字复制的父类的一个实例，这么做是因为过渡类不应仅仅继承父类的原型方法，还要继承父类的对象属性，所以要通过new关键字将父类的构造函数执行一遍来复制构造函数中的属性和方法。对抽象工厂添加抽象类也很特殊,因为抽象工厂是个方法不需要实例化对象，故只需要一份，因此直接为抽象工厂添加类的属性即可，于是就可以通过点语法在抽象工厂上添加需要的三个汽车簇抽象类Car、Bus、Truck<br><img src=\"/2022/09/04/about-design-model1/abstract-factory3.png\" alt=\"abstract-factory3\"></p>\n<h6 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h6><p>建造者模式(Builder):将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示</p>\n<p>工厂模式主要是为了创建对象实例或者类簇(抽象工厂)，关心的是最终产出(创建)的是什么。不关心你创建的整个过程，仅仅需要知道你最终创建的结果。所以通过工厂模式我们得到的都是对象实例或者类簇。<br>建造者模式在创建对象时要更为复杂一些，虽然其目的也是为了创建对象，但是它更多关心的是创建这个对象的整个过程，甚至于创建对象的每一个细节<br><img src=\"/2022/09/04/about-design-model1/human.png\" alt=\"human\"><br><img src=\"/2022/09/04/about-design-model1/name.png\" alt=\"name\"><br><img src=\"/2022/09/04/about-design-model1/work.png\" alt=\"work\"><br><img src=\"/2022/09/04/about-design-model1/person.png\" alt=\"person\"></p>\n<p>工厂模式创建出来的是一个对象，它追求的是创建的结果<br>建造者模式不仅仅可得到创建的结果，也参与了创建的具体过程，对于创建的具体实现的细节也参与了干涉，这种模式创建的对象是一个复合对象</p>\n<p><strong>注意：这种方式对于整体对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低并且变动不大，最好还是创建整体对象</strong></p>\n<h6 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h6><p>原型模式(Prototype):用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法</p>\n<p>原型模式就是将可复用的、可共享的、耗时大的从基类中提出来然后放在其原型中，然后子类通过组合继承或者寄生组合式继承而将方法和属性继承下来，对于子类中那些需要重写的方法进行重写,这样子类创建的对象既具有子类的属性和方法也共享了基类的原型方法<br><img src=\"/2022/09/04/about-design-model1/prototype-model.png\" alt=\"prototype-model\"><br>原型模式有一个特点就是在任何时候都可以对基类或者子类进行方法的拓展，而且所有被实例化的对象或者类都能获取这些方法</p>\n<p>(1)原型继承<br>原型模式更多的是用在对对象的创建上。比如创建一个实例对象的构造函数比较复杂，或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，但可以通过对这些对象属性或者方法进行复制来实现创建，这是原型模式的最初思想。如果涉及多个对象，也可以通过原型模式来实现对新对象的创建。那么首先要有一个原型模式的对象复制方法<br><img src=\"/2022/09/04/about-design-model1/prototype-inherit1.png\" alt=\"prototype-inherit1\"><br><img src=\"/2022/09/04/about-design-model1/prototype-inherit2.png\" alt=\"prototype-inherit2\"></p>\n<p><strong>原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现</strong></p>\n<h6 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h6><p>单例模式(Singleton):又被称为单体模式，是只允许实例化一次的对象类。有时我们也用一个对象来规划一个命名空间，井井有条地管理对象上的属性与方法</p>\n<p>(1)命名空间<br>命名空间就是人们所说的namespace，有人也叫它名称空间。<br>它解决这么一类问题:为了让代码更易懂，人们常常用单词或者拼音定义变量或者方法，但由于人们可用的单词或者汉字拼音是有限的，所以不同的人定义的变量使用的单词名称很有可能重复，此时就需要用命名空间来约束每个人定义的变量来解决这类问题</p>\n<p>(2)静态变量<br><img src=\"/2022/09/04/about-design-model1/static-param.png\" alt=\"static-param\"></p>\n<p>(3)惰性单例<br><img src=\"/2022/09/04/about-design-model1/lazy-single-instance.png\" alt=\"lazy-single-instance\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"创建型设计模式\"><a href=\"#创建型设计模式\" class=\"headerlink\" title=\"创建型设计模式\"></a>创建型设计模式</h4><p>创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度</p>\n<h6 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h6><p>(1)简单工厂模式(Simple Factory):又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例。主要用来创建同一类对象。<br><img src=\"/2022/09/04/about-design-model1/simple-factory1.png\" alt=\"simple-factory1\"><br><img src=\"/2022/09/04/about-design-model1/simple-factory2.png\" alt=\"simple-factory2\"></p>\n<p>(2)一个对象有时也可代替许多类<br><img src=\"/2022/09/04/about-design-model1/create-pop.png\" alt=\"create-pop\"></p>\n<p>第一种是通过类实例化对象创建的，第二种是通过创建一个新对象然后包装增强其属性和功能来实现的。他们之间的差异性也造成前面通过类创建的对象,如果这些类继承同一父类，那么他们的父类原型上的方法是可以共用的。而后面寄生方式创建的对象都是一个新的个体，所以他们的方法就不能共用了</p>\n<h6 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h6><p>安全模式类：可以屏蔽使用这对类的错误使用造成的错误<br><img src=\"/2022/09/04/about-design-model1/safe-model-class.png\" alt=\"safe-model-class\"><br><img src=\"/2022/09/04/about-design-model1/safe-factory-model.png\" alt=\"safe-factory-model\"></p>\n<h6 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h6><p>抽象工厂模式(Abstract Factory):通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例</p>\n<p>(1)抽象类<br>抽象类是一种声明但不能使用的类<br><img src=\"/2022/09/04/about-design-model1/abstract-car.png\" alt=\"abstract-car\"><br>创建的这个car类其实什么都不能做，创建时没有任何属性，然而原型prototype上的方法也不能使用，否则会报错。但在继承上却是很有用的，因为定义了一种类,并定义了该类所必备的方法，如果在子类中没有重写这些方法，那么当调用时能找到这些方法便会报错。这一特点是很有必要的，因为在一些大型应用中，总会有一些子类去继承另一些父类，这些父类经常会定义一些必要的方法，却没有具体的实现，如 car类中的 getPrice()和getSpeed()方法，那么一旦用子类创建了一个对象，该对象总是应该具备一些必要的方法，但如果这些必要的方法从父类中继承过来而没有具体去重写实现,那么实例化对象便会调用父类<br>中的这些方法，如果父类能有一个友好提示，那么对于忘记重写子类的这些错误遗漏的避免是很有帮助的。这也是抽象类的一个作用，即定义一个产品簇，并声明一些必备的方法，如果子类中没有去重写就会抛出错误。</p>\n<p>(2)抽象工厂模式：一般用它来作为父类创建一些子类<br><img src=\"/2022/09/04/about-design-model1/abstract-factory1.png\" alt=\"abstract-factory1\"><br><img src=\"/2022/09/04/about-design-model1/abstract-factory2.png\" alt=\"abstract-factory2\"><br>抽象工厂其实是一个实现子类继承父类的方法，在这个方法中需要通过传递子类以及要继承父类(抽象类)的名称，并且在抽象工厂方法中又增加了一次对抽象类存在性的一次判断，如果存在，则将子类继承父类的方法。然后子类通过寄生式继承。继承父类过程中有一个地方需要注意，就是在对过渡类的原型继承时，不是继承父类的原型，而是通过new关键字复制的父类的一个实例，这么做是因为过渡类不应仅仅继承父类的原型方法，还要继承父类的对象属性，所以要通过new关键字将父类的构造函数执行一遍来复制构造函数中的属性和方法。对抽象工厂添加抽象类也很特殊,因为抽象工厂是个方法不需要实例化对象，故只需要一份，因此直接为抽象工厂添加类的属性即可，于是就可以通过点语法在抽象工厂上添加需要的三个汽车簇抽象类Car、Bus、Truck<br><img src=\"/2022/09/04/about-design-model1/abstract-factory3.png\" alt=\"abstract-factory3\"></p>\n<h6 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h6><p>建造者模式(Builder):将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示</p>\n<p>工厂模式主要是为了创建对象实例或者类簇(抽象工厂)，关心的是最终产出(创建)的是什么。不关心你创建的整个过程，仅仅需要知道你最终创建的结果。所以通过工厂模式我们得到的都是对象实例或者类簇。<br>建造者模式在创建对象时要更为复杂一些，虽然其目的也是为了创建对象，但是它更多关心的是创建这个对象的整个过程，甚至于创建对象的每一个细节<br><img src=\"/2022/09/04/about-design-model1/human.png\" alt=\"human\"><br><img src=\"/2022/09/04/about-design-model1/name.png\" alt=\"name\"><br><img src=\"/2022/09/04/about-design-model1/work.png\" alt=\"work\"><br><img src=\"/2022/09/04/about-design-model1/person.png\" alt=\"person\"></p>\n<p>工厂模式创建出来的是一个对象，它追求的是创建的结果<br>建造者模式不仅仅可得到创建的结果，也参与了创建的具体过程，对于创建的具体实现的细节也参与了干涉，这种模式创建的对象是一个复合对象</p>\n<p><strong>注意：这种方式对于整体对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低并且变动不大，最好还是创建整体对象</strong></p>\n<h6 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h6><p>原型模式(Prototype):用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法</p>\n<p>原型模式就是将可复用的、可共享的、耗时大的从基类中提出来然后放在其原型中，然后子类通过组合继承或者寄生组合式继承而将方法和属性继承下来，对于子类中那些需要重写的方法进行重写,这样子类创建的对象既具有子类的属性和方法也共享了基类的原型方法<br><img src=\"/2022/09/04/about-design-model1/prototype-model.png\" alt=\"prototype-model\"><br>原型模式有一个特点就是在任何时候都可以对基类或者子类进行方法的拓展，而且所有被实例化的对象或者类都能获取这些方法</p>\n<p>(1)原型继承<br>原型模式更多的是用在对对象的创建上。比如创建一个实例对象的构造函数比较复杂，或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，但可以通过对这些对象属性或者方法进行复制来实现创建，这是原型模式的最初思想。如果涉及多个对象，也可以通过原型模式来实现对新对象的创建。那么首先要有一个原型模式的对象复制方法<br><img src=\"/2022/09/04/about-design-model1/prototype-inherit1.png\" alt=\"prototype-inherit1\"><br><img src=\"/2022/09/04/about-design-model1/prototype-inherit2.png\" alt=\"prototype-inherit2\"></p>\n<p><strong>原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现</strong></p>\n<h6 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h6><p>单例模式(Singleton):又被称为单体模式，是只允许实例化一次的对象类。有时我们也用一个对象来规划一个命名空间，井井有条地管理对象上的属性与方法</p>\n<p>(1)命名空间<br>命名空间就是人们所说的namespace，有人也叫它名称空间。<br>它解决这么一类问题:为了让代码更易懂，人们常常用单词或者拼音定义变量或者方法，但由于人们可用的单词或者汉字拼音是有限的，所以不同的人定义的变量使用的单词名称很有可能重复，此时就需要用命名空间来约束每个人定义的变量来解决这类问题</p>\n<p>(2)静态变量<br><img src=\"/2022/09/04/about-design-model1/static-param.png\" alt=\"static-param\"></p>\n<p>(3)惰性单例<br><img src=\"/2022/09/04/about-design-model1/lazy-single-instance.png\" alt=\"lazy-single-instance\"></p>\n"},{"title":"JavaScript设计模式读书笔记(5)","date":"2022-09-19T09:51:10.000Z","_content":"\n#### 技巧型设计模式\n技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。\n\n###### 链模式\n链模式(Operate of Responsibility):通过在对象方法中将当前对象返回，实现对同一个对象多个方法的链式调用。从而简化对该对象的多个方法的多次调用时，对该对象的多次引用。\n\n![chain-model-1](chain-model-1.png)\n![chain-model-2](chain-model-2.png)\n![chain-model-3](chain-model-3.png)\n\njOuery获取的元素更像一个数组，上面框架返回的更像是一个对象\n原因：由于JavaScript 的弱类型语言，并且数组、对象、函数都被看成是对象的实例，所以JavaScript中并没有一个纯粹的数组类型。而且JavaScript引擎的实现也没有做严格的校验，也是基于对象实现的。一些浏览器解析引擎在判断对象是否是数组的时候不仅仅判断其有没有length 属性，可否通过‘![索引值]’方式访问元素，还会判断其是否具有数组方法来确定是否要用数组的形式展现，所以只需要在 A.fn中添加几个数组常用的方法来增强数组特性就可以解决问题了\n![chain-model-4](chain-model-4.png)\n\n![chain-model-5](chain-model-5.png)\n![chain-model-6](chain-model-6.png)\n\n###### 委托模式\n委托模式(Entrust):多个对象接收并处理同一请求，他们将请求委托给另一个对象统一处理请求。\n\n委托模式可以优化页面中事件的数量。\n\n事件委托是将子元素的事件委托给父元素，然后通过事件冒泡传递的，再通过判断事件源的某种特性来执行某一业务逻辑\n\n![entrust-model-1](entrust-model-1.png)\n![entrust-model-2](entrust-model-2.png)\n\n###### 数据访问对象模式\n数据访问对象模式(Data access object-DAO):抽象和封装对数据源的访问与存储，DAO通过对数据源链接的管理方便对数据的访问与存储。\n\n![localstorage-model-1](localstorage-model-1.png)\n![localstorage-model-2](localstorage-model-2.png)\n![localstorage-model-3](localstorage-model-3.png)\n![localstorage-model-4](localstorage-model-4.png)\n![localstorage-model-5](localstorage-model-5.png)\n![localstorage-model-6](localstorage-model-6.png)\n\n###### 节流模式\n节流模式(Throttler):对重复的业务逻辑进行节流控制，执行最后一次操作并取消其他操作，以提高性能。\n\n![throttle-model-1](throttle-model-1.png)\n![throttle-model-2](throttle-model-2.png)\n![throttle-model-3](throttle-model-3.png)\n\n节流模式的核心思想是创建计时器，延迟程序的执行。这也使得计时器中回调函数的操作异步执行(这里的异步执行并不是说JavaScript是多线程语言，JavaScript 从设计之初就是单线程语言，异步只是说脱离原来程序执行的顺序,看上去，异步程序像是在同时执行。但是某一时刻，当前执行的程序一定是所有异步程序(包括原程序)中的某一个)。\n\n节流模式优势\n(1)第一，程序能否执行是可控的。执行前的某一时刻是否清除计时器来决定程序是否可以继续执行\n(2)第二，程序是异步的。由于计时器机制，使得程序脱离原程序而异步执行(当然随着worker技术的兴起，也可开启多线程模式实现)，因此不会影响后面的程序的正常执行。在其他方面，比如对异步请求(ajax)应用节流，此时可以优化请求次数来节省资源。\n\n###### 简单模板模式\n简单模板模式(Simple template):通过格式化字符串拼凑出视图避免创建视图时大量节点操作。优化内存开销。\n\n![template-model-1](template-model-1.png)\n![template-model-2](template-model-2.png)\n![template-model-3](template-model-3.png)\n![template-model-4](template-model-4.png)\n![template-model-5](template-model-5.png)\n![template-model-6](template-model-6.png)\n\n###### 惰性模式\n惰性模式(layier):减少每次代码执行时的重复性的分支判断，通过对对象重定义来屏蔽原对象中的分支判断。\n\n两种实现方式\n(1)第一种就是在文件加载进来时通过闭包执行该方法对其重新定义。不过这样会使页面加载时占用一定资源。\n(2)第二种方式是在第一种方式基础上做一次延迟执行，在函数第一次调用的时候对其重定义。这么做的好处就是减少文件加载时的资源消耗，但是却在第一次执行时有一定的资源消耗\n\n![lazy-model-1](lazy-model-1.png)\n![lazy-model-2](lazy-model-2.png)\n![lazy-model-3](lazy-model-3.png)\n![lazy-model-4](lazy-model-4.png)\n![lazy-model-5](lazy-model-5.png)\n![lazy-model-6](lazy-model-6.png)\n\n###### 参与者模式\n参与者(participator):在特定的作用域中执行给定的函数，并将参数原封不动地传递。\n\n![participate-model-1](participate-model-1.png)\n![participate-model-2](participate-model-2.png)\n\n函数柯里化的思想是对函数的参数分割，这有点像其他面向语言中的类的多态，就是根据传递的参数不同，可以让一个函数存在多种状态，只不过函数柯里化处理的是函数，因此要实现函数的柯里化是要以函数为基础的，借助柯里化器伪造其他函数，让这些伪造的函数在执行时调用这个基函数完成不同的功能\n\n![participate-model-3](participate-model-3.png)\n![participate-model-4](participate-model-4.png)\n![participate-model-5](participate-model-5.png)\n\n参与者模式实质上是两种技术的结晶，函数绑定和函数柯里化\n(1)对于函数绑定，它将函数以函数指针(函数名)的形式传递，使函数在被绑定的对象作用域中执行，因此函数的执行中可以顺利地访问到对象内部的数据，由于函数绑定构造复杂，执行时需消耗更多的内存，因此执行速度上要稍慢一些。不过相对于解决的问题来说这种消耗还是值得的，因此它常用于事件，setTimeout或setInterval等异步逻辑中的回调函数。\n(2)对于函数柯里化即是将接受多个参数的函数转化为接受一部分参数的新函数,余下的参数保存下来，当函数调用时，返回传入的参数与保存的参数共同执行的结果。通常保存下来的参数保存于闭包内,因此函数柯里化的实现要消耗一定的资源。函数的柯里化有点类似类的重载,不同点是类的重载是同一个类对象,函数的柯里化是两个不同的函数。\n\n随着函数柯里化的发展，现在又衍生出一种反柯里化的函数，其目的是方便我们对方法的调用\n![participate-model-6](participate-model-6.png)\n\n###### 等待者模式\n等待者模式(waiter):通过对多个异步进程监听，来触发未来发生的动作。\n\n![waiter-model-1](waiter-model-1.png)\n![waiter-model-2](waiter-model-2.png)\n![waiter-model-3](waiter-model-3.png)\n![waiter-model-4](waiter-model-4.png)\n![waiter-model-5](waiter-model-5.png)\n![waiter-model-6](waiter-model-6.png)\n![waiter-model-7](waiter-model-7.png)\n![waiter-model-8](waiter-model-8.png)\n\n疑问点：\n为什么要缓存Array的slice方法？\nslice = Array.prototype.slice\n\n有一些模式很像，一定需要做区分吗？","source":"_posts/about-design-model4.md","raw":"---\ntitle: JavaScript设计模式读书笔记(5)\ndate: 2022-09-19 17:51:10\ntags:\n---\n\n#### 技巧型设计模式\n技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。\n\n###### 链模式\n链模式(Operate of Responsibility):通过在对象方法中将当前对象返回，实现对同一个对象多个方法的链式调用。从而简化对该对象的多个方法的多次调用时，对该对象的多次引用。\n\n![chain-model-1](chain-model-1.png)\n![chain-model-2](chain-model-2.png)\n![chain-model-3](chain-model-3.png)\n\njOuery获取的元素更像一个数组，上面框架返回的更像是一个对象\n原因：由于JavaScript 的弱类型语言，并且数组、对象、函数都被看成是对象的实例，所以JavaScript中并没有一个纯粹的数组类型。而且JavaScript引擎的实现也没有做严格的校验，也是基于对象实现的。一些浏览器解析引擎在判断对象是否是数组的时候不仅仅判断其有没有length 属性，可否通过‘![索引值]’方式访问元素，还会判断其是否具有数组方法来确定是否要用数组的形式展现，所以只需要在 A.fn中添加几个数组常用的方法来增强数组特性就可以解决问题了\n![chain-model-4](chain-model-4.png)\n\n![chain-model-5](chain-model-5.png)\n![chain-model-6](chain-model-6.png)\n\n###### 委托模式\n委托模式(Entrust):多个对象接收并处理同一请求，他们将请求委托给另一个对象统一处理请求。\n\n委托模式可以优化页面中事件的数量。\n\n事件委托是将子元素的事件委托给父元素，然后通过事件冒泡传递的，再通过判断事件源的某种特性来执行某一业务逻辑\n\n![entrust-model-1](entrust-model-1.png)\n![entrust-model-2](entrust-model-2.png)\n\n###### 数据访问对象模式\n数据访问对象模式(Data access object-DAO):抽象和封装对数据源的访问与存储，DAO通过对数据源链接的管理方便对数据的访问与存储。\n\n![localstorage-model-1](localstorage-model-1.png)\n![localstorage-model-2](localstorage-model-2.png)\n![localstorage-model-3](localstorage-model-3.png)\n![localstorage-model-4](localstorage-model-4.png)\n![localstorage-model-5](localstorage-model-5.png)\n![localstorage-model-6](localstorage-model-6.png)\n\n###### 节流模式\n节流模式(Throttler):对重复的业务逻辑进行节流控制，执行最后一次操作并取消其他操作，以提高性能。\n\n![throttle-model-1](throttle-model-1.png)\n![throttle-model-2](throttle-model-2.png)\n![throttle-model-3](throttle-model-3.png)\n\n节流模式的核心思想是创建计时器，延迟程序的执行。这也使得计时器中回调函数的操作异步执行(这里的异步执行并不是说JavaScript是多线程语言，JavaScript 从设计之初就是单线程语言，异步只是说脱离原来程序执行的顺序,看上去，异步程序像是在同时执行。但是某一时刻，当前执行的程序一定是所有异步程序(包括原程序)中的某一个)。\n\n节流模式优势\n(1)第一，程序能否执行是可控的。执行前的某一时刻是否清除计时器来决定程序是否可以继续执行\n(2)第二，程序是异步的。由于计时器机制，使得程序脱离原程序而异步执行(当然随着worker技术的兴起，也可开启多线程模式实现)，因此不会影响后面的程序的正常执行。在其他方面，比如对异步请求(ajax)应用节流，此时可以优化请求次数来节省资源。\n\n###### 简单模板模式\n简单模板模式(Simple template):通过格式化字符串拼凑出视图避免创建视图时大量节点操作。优化内存开销。\n\n![template-model-1](template-model-1.png)\n![template-model-2](template-model-2.png)\n![template-model-3](template-model-3.png)\n![template-model-4](template-model-4.png)\n![template-model-5](template-model-5.png)\n![template-model-6](template-model-6.png)\n\n###### 惰性模式\n惰性模式(layier):减少每次代码执行时的重复性的分支判断，通过对对象重定义来屏蔽原对象中的分支判断。\n\n两种实现方式\n(1)第一种就是在文件加载进来时通过闭包执行该方法对其重新定义。不过这样会使页面加载时占用一定资源。\n(2)第二种方式是在第一种方式基础上做一次延迟执行，在函数第一次调用的时候对其重定义。这么做的好处就是减少文件加载时的资源消耗，但是却在第一次执行时有一定的资源消耗\n\n![lazy-model-1](lazy-model-1.png)\n![lazy-model-2](lazy-model-2.png)\n![lazy-model-3](lazy-model-3.png)\n![lazy-model-4](lazy-model-4.png)\n![lazy-model-5](lazy-model-5.png)\n![lazy-model-6](lazy-model-6.png)\n\n###### 参与者模式\n参与者(participator):在特定的作用域中执行给定的函数，并将参数原封不动地传递。\n\n![participate-model-1](participate-model-1.png)\n![participate-model-2](participate-model-2.png)\n\n函数柯里化的思想是对函数的参数分割，这有点像其他面向语言中的类的多态，就是根据传递的参数不同，可以让一个函数存在多种状态，只不过函数柯里化处理的是函数，因此要实现函数的柯里化是要以函数为基础的，借助柯里化器伪造其他函数，让这些伪造的函数在执行时调用这个基函数完成不同的功能\n\n![participate-model-3](participate-model-3.png)\n![participate-model-4](participate-model-4.png)\n![participate-model-5](participate-model-5.png)\n\n参与者模式实质上是两种技术的结晶，函数绑定和函数柯里化\n(1)对于函数绑定，它将函数以函数指针(函数名)的形式传递，使函数在被绑定的对象作用域中执行，因此函数的执行中可以顺利地访问到对象内部的数据，由于函数绑定构造复杂，执行时需消耗更多的内存，因此执行速度上要稍慢一些。不过相对于解决的问题来说这种消耗还是值得的，因此它常用于事件，setTimeout或setInterval等异步逻辑中的回调函数。\n(2)对于函数柯里化即是将接受多个参数的函数转化为接受一部分参数的新函数,余下的参数保存下来，当函数调用时，返回传入的参数与保存的参数共同执行的结果。通常保存下来的参数保存于闭包内,因此函数柯里化的实现要消耗一定的资源。函数的柯里化有点类似类的重载,不同点是类的重载是同一个类对象,函数的柯里化是两个不同的函数。\n\n随着函数柯里化的发展，现在又衍生出一种反柯里化的函数，其目的是方便我们对方法的调用\n![participate-model-6](participate-model-6.png)\n\n###### 等待者模式\n等待者模式(waiter):通过对多个异步进程监听，来触发未来发生的动作。\n\n![waiter-model-1](waiter-model-1.png)\n![waiter-model-2](waiter-model-2.png)\n![waiter-model-3](waiter-model-3.png)\n![waiter-model-4](waiter-model-4.png)\n![waiter-model-5](waiter-model-5.png)\n![waiter-model-6](waiter-model-6.png)\n![waiter-model-7](waiter-model-7.png)\n![waiter-model-8](waiter-model-8.png)\n\n疑问点：\n为什么要缓存Array的slice方法？\nslice = Array.prototype.slice\n\n有一些模式很像，一定需要做区分吗？","slug":"about-design-model4","published":1,"updated":"2022-09-22T09:17:42.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpc60003jktt1k8ibk21","content":"<h4 id=\"技巧型设计模式\"><a href=\"#技巧型设计模式\" class=\"headerlink\" title=\"技巧型设计模式\"></a>技巧型设计模式</h4><p>技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。</p>\n<h6 id=\"链模式\"><a href=\"#链模式\" class=\"headerlink\" title=\"链模式\"></a>链模式</h6><p>链模式(Operate of Responsibility):通过在对象方法中将当前对象返回，实现对同一个对象多个方法的链式调用。从而简化对该对象的多个方法的多次调用时，对该对象的多次引用。</p>\n<p><img src=\"/2022/09/19/about-design-model4/chain-model-1.png\" alt=\"chain-model-1\"><br><img src=\"/2022/09/19/about-design-model4/chain-model-2.png\" alt=\"chain-model-2\"><br><img src=\"/2022/09/19/about-design-model4/chain-model-3.png\" alt=\"chain-model-3\"></p>\n<p>jOuery获取的元素更像一个数组，上面框架返回的更像是一个对象<br>原因：由于JavaScript 的弱类型语言，并且数组、对象、函数都被看成是对象的实例，所以JavaScript中并没有一个纯粹的数组类型。而且JavaScript引擎的实现也没有做严格的校验，也是基于对象实现的。一些浏览器解析引擎在判断对象是否是数组的时候不仅仅判断其有没有length 属性，可否通过‘![索引值]’方式访问元素，还会判断其是否具有数组方法来确定是否要用数组的形式展现，所以只需要在 A.fn中添加几个数组常用的方法来增强数组特性就可以解决问题了<br><img src=\"/2022/09/19/about-design-model4/chain-model-4.png\" alt=\"chain-model-4\"></p>\n<p><img src=\"/2022/09/19/about-design-model4/chain-model-5.png\" alt=\"chain-model-5\"><br><img src=\"/2022/09/19/about-design-model4/chain-model-6.png\" alt=\"chain-model-6\"></p>\n<h6 id=\"委托模式\"><a href=\"#委托模式\" class=\"headerlink\" title=\"委托模式\"></a>委托模式</h6><p>委托模式(Entrust):多个对象接收并处理同一请求，他们将请求委托给另一个对象统一处理请求。</p>\n<p>委托模式可以优化页面中事件的数量。</p>\n<p>事件委托是将子元素的事件委托给父元素，然后通过事件冒泡传递的，再通过判断事件源的某种特性来执行某一业务逻辑</p>\n<p><img src=\"/2022/09/19/about-design-model4/entrust-model-1.png\" alt=\"entrust-model-1\"><br><img src=\"/2022/09/19/about-design-model4/entrust-model-2.png\" alt=\"entrust-model-2\"></p>\n<h6 id=\"数据访问对象模式\"><a href=\"#数据访问对象模式\" class=\"headerlink\" title=\"数据访问对象模式\"></a>数据访问对象模式</h6><p>数据访问对象模式(Data access object-DAO):抽象和封装对数据源的访问与存储，DAO通过对数据源链接的管理方便对数据的访问与存储。</p>\n<p><img src=\"/2022/09/19/about-design-model4/localstorage-model-1.png\" alt=\"localstorage-model-1\"><br><img src=\"/2022/09/19/about-design-model4/localstorage-model-2.png\" alt=\"localstorage-model-2\"><br><img src=\"/2022/09/19/about-design-model4/localstorage-model-3.png\" alt=\"localstorage-model-3\"><br><img src=\"/2022/09/19/about-design-model4/localstorage-model-4.png\" alt=\"localstorage-model-4\"><br><img src=\"/2022/09/19/about-design-model4/localstorage-model-5.png\" alt=\"localstorage-model-5\"><br><img src=\"/2022/09/19/about-design-model4/localstorage-model-6.png\" alt=\"localstorage-model-6\"></p>\n<h6 id=\"节流模式\"><a href=\"#节流模式\" class=\"headerlink\" title=\"节流模式\"></a>节流模式</h6><p>节流模式(Throttler):对重复的业务逻辑进行节流控制，执行最后一次操作并取消其他操作，以提高性能。</p>\n<p><img src=\"/2022/09/19/about-design-model4/throttle-model-1.png\" alt=\"throttle-model-1\"><br><img src=\"/2022/09/19/about-design-model4/throttle-model-2.png\" alt=\"throttle-model-2\"><br><img src=\"/2022/09/19/about-design-model4/throttle-model-3.png\" alt=\"throttle-model-3\"></p>\n<p>节流模式的核心思想是创建计时器，延迟程序的执行。这也使得计时器中回调函数的操作异步执行(这里的异步执行并不是说JavaScript是多线程语言，JavaScript 从设计之初就是单线程语言，异步只是说脱离原来程序执行的顺序,看上去，异步程序像是在同时执行。但是某一时刻，当前执行的程序一定是所有异步程序(包括原程序)中的某一个)。</p>\n<p>节流模式优势<br>(1)第一，程序能否执行是可控的。执行前的某一时刻是否清除计时器来决定程序是否可以继续执行<br>(2)第二，程序是异步的。由于计时器机制，使得程序脱离原程序而异步执行(当然随着worker技术的兴起，也可开启多线程模式实现)，因此不会影响后面的程序的正常执行。在其他方面，比如对异步请求(ajax)应用节流，此时可以优化请求次数来节省资源。</p>\n<h6 id=\"简单模板模式\"><a href=\"#简单模板模式\" class=\"headerlink\" title=\"简单模板模式\"></a>简单模板模式</h6><p>简单模板模式(Simple template):通过格式化字符串拼凑出视图避免创建视图时大量节点操作。优化内存开销。</p>\n<p><img src=\"/2022/09/19/about-design-model4/template-model-1.png\" alt=\"template-model-1\"><br><img src=\"/2022/09/19/about-design-model4/template-model-2.png\" alt=\"template-model-2\"><br><img src=\"/2022/09/19/about-design-model4/template-model-3.png\" alt=\"template-model-3\"><br><img src=\"/2022/09/19/about-design-model4/template-model-4.png\" alt=\"template-model-4\"><br><img src=\"/2022/09/19/about-design-model4/template-model-5.png\" alt=\"template-model-5\"><br><img src=\"/2022/09/19/about-design-model4/template-model-6.png\" alt=\"template-model-6\"></p>\n<h6 id=\"惰性模式\"><a href=\"#惰性模式\" class=\"headerlink\" title=\"惰性模式\"></a>惰性模式</h6><p>惰性模式(layier):减少每次代码执行时的重复性的分支判断，通过对对象重定义来屏蔽原对象中的分支判断。</p>\n<p>两种实现方式<br>(1)第一种就是在文件加载进来时通过闭包执行该方法对其重新定义。不过这样会使页面加载时占用一定资源。<br>(2)第二种方式是在第一种方式基础上做一次延迟执行，在函数第一次调用的时候对其重定义。这么做的好处就是减少文件加载时的资源消耗，但是却在第一次执行时有一定的资源消耗</p>\n<p><img src=\"/2022/09/19/about-design-model4/lazy-model-1.png\" alt=\"lazy-model-1\"><br><img src=\"/2022/09/19/about-design-model4/lazy-model-2.png\" alt=\"lazy-model-2\"><br><img src=\"/2022/09/19/about-design-model4/lazy-model-3.png\" alt=\"lazy-model-3\"><br><img src=\"/2022/09/19/about-design-model4/lazy-model-4.png\" alt=\"lazy-model-4\"><br><img src=\"/2022/09/19/about-design-model4/lazy-model-5.png\" alt=\"lazy-model-5\"><br><img src=\"/2022/09/19/about-design-model4/lazy-model-6.png\" alt=\"lazy-model-6\"></p>\n<h6 id=\"参与者模式\"><a href=\"#参与者模式\" class=\"headerlink\" title=\"参与者模式\"></a>参与者模式</h6><p>参与者(participator):在特定的作用域中执行给定的函数，并将参数原封不动地传递。</p>\n<p><img src=\"/2022/09/19/about-design-model4/participate-model-1.png\" alt=\"participate-model-1\"><br><img src=\"/2022/09/19/about-design-model4/participate-model-2.png\" alt=\"participate-model-2\"></p>\n<p>函数柯里化的思想是对函数的参数分割，这有点像其他面向语言中的类的多态，就是根据传递的参数不同，可以让一个函数存在多种状态，只不过函数柯里化处理的是函数，因此要实现函数的柯里化是要以函数为基础的，借助柯里化器伪造其他函数，让这些伪造的函数在执行时调用这个基函数完成不同的功能</p>\n<p><img src=\"/2022/09/19/about-design-model4/participate-model-3.png\" alt=\"participate-model-3\"><br><img src=\"/2022/09/19/about-design-model4/participate-model-4.png\" alt=\"participate-model-4\"><br><img src=\"/2022/09/19/about-design-model4/participate-model-5.png\" alt=\"participate-model-5\"></p>\n<p>参与者模式实质上是两种技术的结晶，函数绑定和函数柯里化<br>(1)对于函数绑定，它将函数以函数指针(函数名)的形式传递，使函数在被绑定的对象作用域中执行，因此函数的执行中可以顺利地访问到对象内部的数据，由于函数绑定构造复杂，执行时需消耗更多的内存，因此执行速度上要稍慢一些。不过相对于解决的问题来说这种消耗还是值得的，因此它常用于事件，setTimeout或setInterval等异步逻辑中的回调函数。<br>(2)对于函数柯里化即是将接受多个参数的函数转化为接受一部分参数的新函数,余下的参数保存下来，当函数调用时，返回传入的参数与保存的参数共同执行的结果。通常保存下来的参数保存于闭包内,因此函数柯里化的实现要消耗一定的资源。函数的柯里化有点类似类的重载,不同点是类的重载是同一个类对象,函数的柯里化是两个不同的函数。</p>\n<p>随着函数柯里化的发展，现在又衍生出一种反柯里化的函数，其目的是方便我们对方法的调用<br><img src=\"/2022/09/19/about-design-model4/participate-model-6.png\" alt=\"participate-model-6\"></p>\n<h6 id=\"等待者模式\"><a href=\"#等待者模式\" class=\"headerlink\" title=\"等待者模式\"></a>等待者模式</h6><p>等待者模式(waiter):通过对多个异步进程监听，来触发未来发生的动作。</p>\n<p><img src=\"/2022/09/19/about-design-model4/waiter-model-1.png\" alt=\"waiter-model-1\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-2.png\" alt=\"waiter-model-2\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-3.png\" alt=\"waiter-model-3\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-4.png\" alt=\"waiter-model-4\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-5.png\" alt=\"waiter-model-5\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-6.png\" alt=\"waiter-model-6\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-7.png\" alt=\"waiter-model-7\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-8.png\" alt=\"waiter-model-8\"></p>\n<p>疑问点：<br>为什么要缓存Array的slice方法？<br>slice = Array.prototype.slice</p>\n<p>有一些模式很像，一定需要做区分吗？</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"技巧型设计模式\"><a href=\"#技巧型设计模式\" class=\"headerlink\" title=\"技巧型设计模式\"></a>技巧型设计模式</h4><p>技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。</p>\n<h6 id=\"链模式\"><a href=\"#链模式\" class=\"headerlink\" title=\"链模式\"></a>链模式</h6><p>链模式(Operate of Responsibility):通过在对象方法中将当前对象返回，实现对同一个对象多个方法的链式调用。从而简化对该对象的多个方法的多次调用时，对该对象的多次引用。</p>\n<p><img src=\"/2022/09/19/about-design-model4/chain-model-1.png\" alt=\"chain-model-1\"><br><img src=\"/2022/09/19/about-design-model4/chain-model-2.png\" alt=\"chain-model-2\"><br><img src=\"/2022/09/19/about-design-model4/chain-model-3.png\" alt=\"chain-model-3\"></p>\n<p>jOuery获取的元素更像一个数组，上面框架返回的更像是一个对象<br>原因：由于JavaScript 的弱类型语言，并且数组、对象、函数都被看成是对象的实例，所以JavaScript中并没有一个纯粹的数组类型。而且JavaScript引擎的实现也没有做严格的校验，也是基于对象实现的。一些浏览器解析引擎在判断对象是否是数组的时候不仅仅判断其有没有length 属性，可否通过‘![索引值]’方式访问元素，还会判断其是否具有数组方法来确定是否要用数组的形式展现，所以只需要在 A.fn中添加几个数组常用的方法来增强数组特性就可以解决问题了<br><img src=\"/2022/09/19/about-design-model4/chain-model-4.png\" alt=\"chain-model-4\"></p>\n<p><img src=\"/2022/09/19/about-design-model4/chain-model-5.png\" alt=\"chain-model-5\"><br><img src=\"/2022/09/19/about-design-model4/chain-model-6.png\" alt=\"chain-model-6\"></p>\n<h6 id=\"委托模式\"><a href=\"#委托模式\" class=\"headerlink\" title=\"委托模式\"></a>委托模式</h6><p>委托模式(Entrust):多个对象接收并处理同一请求，他们将请求委托给另一个对象统一处理请求。</p>\n<p>委托模式可以优化页面中事件的数量。</p>\n<p>事件委托是将子元素的事件委托给父元素，然后通过事件冒泡传递的，再通过判断事件源的某种特性来执行某一业务逻辑</p>\n<p><img src=\"/2022/09/19/about-design-model4/entrust-model-1.png\" alt=\"entrust-model-1\"><br><img src=\"/2022/09/19/about-design-model4/entrust-model-2.png\" alt=\"entrust-model-2\"></p>\n<h6 id=\"数据访问对象模式\"><a href=\"#数据访问对象模式\" class=\"headerlink\" title=\"数据访问对象模式\"></a>数据访问对象模式</h6><p>数据访问对象模式(Data access object-DAO):抽象和封装对数据源的访问与存储，DAO通过对数据源链接的管理方便对数据的访问与存储。</p>\n<p><img src=\"/2022/09/19/about-design-model4/localstorage-model-1.png\" alt=\"localstorage-model-1\"><br><img src=\"/2022/09/19/about-design-model4/localstorage-model-2.png\" alt=\"localstorage-model-2\"><br><img src=\"/2022/09/19/about-design-model4/localstorage-model-3.png\" alt=\"localstorage-model-3\"><br><img src=\"/2022/09/19/about-design-model4/localstorage-model-4.png\" alt=\"localstorage-model-4\"><br><img src=\"/2022/09/19/about-design-model4/localstorage-model-5.png\" alt=\"localstorage-model-5\"><br><img src=\"/2022/09/19/about-design-model4/localstorage-model-6.png\" alt=\"localstorage-model-6\"></p>\n<h6 id=\"节流模式\"><a href=\"#节流模式\" class=\"headerlink\" title=\"节流模式\"></a>节流模式</h6><p>节流模式(Throttler):对重复的业务逻辑进行节流控制，执行最后一次操作并取消其他操作，以提高性能。</p>\n<p><img src=\"/2022/09/19/about-design-model4/throttle-model-1.png\" alt=\"throttle-model-1\"><br><img src=\"/2022/09/19/about-design-model4/throttle-model-2.png\" alt=\"throttle-model-2\"><br><img src=\"/2022/09/19/about-design-model4/throttle-model-3.png\" alt=\"throttle-model-3\"></p>\n<p>节流模式的核心思想是创建计时器，延迟程序的执行。这也使得计时器中回调函数的操作异步执行(这里的异步执行并不是说JavaScript是多线程语言，JavaScript 从设计之初就是单线程语言，异步只是说脱离原来程序执行的顺序,看上去，异步程序像是在同时执行。但是某一时刻，当前执行的程序一定是所有异步程序(包括原程序)中的某一个)。</p>\n<p>节流模式优势<br>(1)第一，程序能否执行是可控的。执行前的某一时刻是否清除计时器来决定程序是否可以继续执行<br>(2)第二，程序是异步的。由于计时器机制，使得程序脱离原程序而异步执行(当然随着worker技术的兴起，也可开启多线程模式实现)，因此不会影响后面的程序的正常执行。在其他方面，比如对异步请求(ajax)应用节流，此时可以优化请求次数来节省资源。</p>\n<h6 id=\"简单模板模式\"><a href=\"#简单模板模式\" class=\"headerlink\" title=\"简单模板模式\"></a>简单模板模式</h6><p>简单模板模式(Simple template):通过格式化字符串拼凑出视图避免创建视图时大量节点操作。优化内存开销。</p>\n<p><img src=\"/2022/09/19/about-design-model4/template-model-1.png\" alt=\"template-model-1\"><br><img src=\"/2022/09/19/about-design-model4/template-model-2.png\" alt=\"template-model-2\"><br><img src=\"/2022/09/19/about-design-model4/template-model-3.png\" alt=\"template-model-3\"><br><img src=\"/2022/09/19/about-design-model4/template-model-4.png\" alt=\"template-model-4\"><br><img src=\"/2022/09/19/about-design-model4/template-model-5.png\" alt=\"template-model-5\"><br><img src=\"/2022/09/19/about-design-model4/template-model-6.png\" alt=\"template-model-6\"></p>\n<h6 id=\"惰性模式\"><a href=\"#惰性模式\" class=\"headerlink\" title=\"惰性模式\"></a>惰性模式</h6><p>惰性模式(layier):减少每次代码执行时的重复性的分支判断，通过对对象重定义来屏蔽原对象中的分支判断。</p>\n<p>两种实现方式<br>(1)第一种就是在文件加载进来时通过闭包执行该方法对其重新定义。不过这样会使页面加载时占用一定资源。<br>(2)第二种方式是在第一种方式基础上做一次延迟执行，在函数第一次调用的时候对其重定义。这么做的好处就是减少文件加载时的资源消耗，但是却在第一次执行时有一定的资源消耗</p>\n<p><img src=\"/2022/09/19/about-design-model4/lazy-model-1.png\" alt=\"lazy-model-1\"><br><img src=\"/2022/09/19/about-design-model4/lazy-model-2.png\" alt=\"lazy-model-2\"><br><img src=\"/2022/09/19/about-design-model4/lazy-model-3.png\" alt=\"lazy-model-3\"><br><img src=\"/2022/09/19/about-design-model4/lazy-model-4.png\" alt=\"lazy-model-4\"><br><img src=\"/2022/09/19/about-design-model4/lazy-model-5.png\" alt=\"lazy-model-5\"><br><img src=\"/2022/09/19/about-design-model4/lazy-model-6.png\" alt=\"lazy-model-6\"></p>\n<h6 id=\"参与者模式\"><a href=\"#参与者模式\" class=\"headerlink\" title=\"参与者模式\"></a>参与者模式</h6><p>参与者(participator):在特定的作用域中执行给定的函数，并将参数原封不动地传递。</p>\n<p><img src=\"/2022/09/19/about-design-model4/participate-model-1.png\" alt=\"participate-model-1\"><br><img src=\"/2022/09/19/about-design-model4/participate-model-2.png\" alt=\"participate-model-2\"></p>\n<p>函数柯里化的思想是对函数的参数分割，这有点像其他面向语言中的类的多态，就是根据传递的参数不同，可以让一个函数存在多种状态，只不过函数柯里化处理的是函数，因此要实现函数的柯里化是要以函数为基础的，借助柯里化器伪造其他函数，让这些伪造的函数在执行时调用这个基函数完成不同的功能</p>\n<p><img src=\"/2022/09/19/about-design-model4/participate-model-3.png\" alt=\"participate-model-3\"><br><img src=\"/2022/09/19/about-design-model4/participate-model-4.png\" alt=\"participate-model-4\"><br><img src=\"/2022/09/19/about-design-model4/participate-model-5.png\" alt=\"participate-model-5\"></p>\n<p>参与者模式实质上是两种技术的结晶，函数绑定和函数柯里化<br>(1)对于函数绑定，它将函数以函数指针(函数名)的形式传递，使函数在被绑定的对象作用域中执行，因此函数的执行中可以顺利地访问到对象内部的数据，由于函数绑定构造复杂，执行时需消耗更多的内存，因此执行速度上要稍慢一些。不过相对于解决的问题来说这种消耗还是值得的，因此它常用于事件，setTimeout或setInterval等异步逻辑中的回调函数。<br>(2)对于函数柯里化即是将接受多个参数的函数转化为接受一部分参数的新函数,余下的参数保存下来，当函数调用时，返回传入的参数与保存的参数共同执行的结果。通常保存下来的参数保存于闭包内,因此函数柯里化的实现要消耗一定的资源。函数的柯里化有点类似类的重载,不同点是类的重载是同一个类对象,函数的柯里化是两个不同的函数。</p>\n<p>随着函数柯里化的发展，现在又衍生出一种反柯里化的函数，其目的是方便我们对方法的调用<br><img src=\"/2022/09/19/about-design-model4/participate-model-6.png\" alt=\"participate-model-6\"></p>\n<h6 id=\"等待者模式\"><a href=\"#等待者模式\" class=\"headerlink\" title=\"等待者模式\"></a>等待者模式</h6><p>等待者模式(waiter):通过对多个异步进程监听，来触发未来发生的动作。</p>\n<p><img src=\"/2022/09/19/about-design-model4/waiter-model-1.png\" alt=\"waiter-model-1\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-2.png\" alt=\"waiter-model-2\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-3.png\" alt=\"waiter-model-3\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-4.png\" alt=\"waiter-model-4\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-5.png\" alt=\"waiter-model-5\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-6.png\" alt=\"waiter-model-6\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-7.png\" alt=\"waiter-model-7\"><br><img src=\"/2022/09/19/about-design-model4/waiter-model-8.png\" alt=\"waiter-model-8\"></p>\n<p>疑问点：<br>为什么要缓存Array的slice方法？<br>slice = Array.prototype.slice</p>\n<p>有一些模式很像，一定需要做区分吗？</p>\n"},{"title":"JavaScript设计模式读书笔记(1)","date":"2022-08-20T06:47:46.000Z","_content":"\n#### 面向对象\n一、面向过程与面向对象\n面向对象编程就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性)与动作（方法)。这个对象我们称之为类。面向对象编程思想其中有一个特点就是封装，就是说把你需要的功能放在一个对象里\n二、封装\n1、使用原型(prototype)为类添加属性和方法的两种方式(**注意两种不能混用**)：\n(1)为原型对象属性赋值\n```javascript\nBook.prototype.display = function() {\n  // ....\n}\n```\n(2)将一个对象赋值给类的原型对象\n```javascript\nBook.prototype = {\n  display = function() {}\n}\n```\n\n2、使用this和原型(prototype)为类添加属性和方法的区别：\n(1)使用this添加的属性和方法是在当前对象上添加的，每次通过类创建新对象时，this指向的属性和方法都会得到相应的创建\n(2)通过prototype继承的属性和方法是每个对象通过prototype访问到的，新创建对象时，不会再新创建属性和方法\n\n3、constructor是什么？\nconstructor是一个属性，当创建一个函数或者对象时都会为其创建一个原型对象prototype，在 prototype对象中又会像函数中创建 this一样创建一个constructor属性，那么constructor属性指向的就是拥有整个原型对象的函数或对象。\n![prototype](prototype.png)\n\n4、属性与方法的封装\n(1)私有属性与私有方法\n由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的,通过此特性创建类的私有变量以及私有方法\n(2)共有属性和共有方法\n在函数内部通过 this创建的属性和方法，在类创建对象时，每个对象自身都拥有一份并且可以在外部访问到。因此通过this创建的属性可看作是对象共有属性和对象共有方法\n(3)特权方法(类的构造器)\n通过this创建的方法，不但可以访问这些对象的共有属性与共有方法，而且还能访问到类（创建时）或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性,因此这些在创建对象时调用的特权方法还可以看作是类的构造器\n![public-and-private](public-and-private.png)\n\n5、在类的外部通过点语法定义的属性和方法以及在外部通过 prototype定义的属性和方法作用\n(1)类的外部通过点语法定义的属性和方法：通过new关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到,所以新创建的对象中无法获取他们，但是可以通过类来使用。因此在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法\n(2)外部通过 prototype定义的属性和方法: 类通过prototype创建的属性或者方法在类实例的对象中是可以通过 this访问到的，所以我们将prototype对象中的属性和方法称为共有属性和共有方法\n![static-and-public](static-and-public.png)\n通过new关键字创建的对象实质是对新对象 this 的不断赋值，并将prototype指向类的prototype所指向的对象，而类的构造函数外面通过点语法定义的属性方法是不会添加到新创建的对象上去的。因此要想在新创建的对象中使用 isChinese就得通过Book类使用而不能通过this，如 Book.isChinese，而类的原型 prototype 上定义的属性在新对象里就可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。\n\n6、闭包\n闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量\n\n7、创建对象的安全模式\nnew关键字的作用可以看作是对当前对象的this不停地赋值,没有用new，所以就会直接执行函数，而函数在全局作用域中执行所以在全局作用域中 this指向的当前对象自然就是全局变量\n![safe-model](safe-model.png)\n\n三、继承\n1、子类的原型对象 - 类式继承\n![class-inherit](class-inherit.png)\n声明2个类而已，类式继承需要将第一个类的实例赋值给第二个类的原型\n类的原型对象的作用就是为类的原型添加共有方法,但类不能直接访问这些属性和方法,必须通过原型prototype来访问。而我们实例化一个父类的时候，新创建的对象复制了父类的构造函数内的属性与方法并且将原型_proto_指向了父类的原型对象，这样就拥有了父类的原型对象上的属性与方法，并且这个新创建的对象可直接访问到父类原型对象上的属性与方法。如果我们将这个新创建的对象赋值给子类的原型，那么子类的原型就可以访问到父类的原型属性和方法。\n新创建的对象不仅仅可以访问父类原型上的属性和方法，同样也可访问从父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型,那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。这是类式继承的原理\n\n(1)可以使用instanceof来检测某个对象是否是某个类的实例，或者说某个对象是否继承了某个类\n注意：instanceof是通过判断对象的 prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构\n**instanceof是判断前面的对象是否是后面类(对象)的实例，它并不表示两者的继承，在实现上面的 subClass 继承superClass时是通过将 superClass的实例赋值给subClass 的原型prototype，所以说SubClass.prototype继承了superClass**\n\n(2)类式继承的缺点\n其一：由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的共有属性要是引用类型，就会在子类中被所有实例共用,因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其他子类\n其二：由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的,因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化\n\n2、创建即继承 - 构造函数继承\n![constructor-inherit](constructor-inherit.png)\nSuperClass.call(this，id);这条语句是构造函数式继承的精华，由于 call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共用，这样就违背了代码复用的原则\n\n3、将优点为我所用 - 组合继承\n(1)类式继承是通过子类的原型prototype对父类实例化来实现的,构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的\n![combination-inherit](combination-inherit.png)\n在子类构造函数中执行父类构造函数，在子类原型上实例化父类就是组合模式\n(2)缺点\n在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。因此父类构造函数调用了两遍\n\n4、洁净的继承者 - 原型式继承\n![prototype-inherit](prototype-inherit.png)\n对类式继承的一个封装，其实其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现的，目的是为了创建要返回的新的实例化对象\n![test-prototype-inherit](test-prototype-inherit.png)\n\n5、如虎添翼 - 寄生式继承\n![parasitic-inherit](parasitic-inherit.png)\n寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展,这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法\n\n6、终极继承者 - 寄生组合式继承\n寄生式继承和构造函数继承\n\n寄生式继承的改造\n![parasitic-inherit-change](parasitic-inherit-change.png)\n\n![parasitic-combination-inherit](parasitic-combination-inherit.png)\n\n![how-to-inherit](how-to-inherit.png)\n\n**子类再想添加原型方法必须通过 prototype.对象，通过点语法的形式一个一个添加方法了，否则直接赋予对象就会覆盖掉从父类原型继承的对象**\n\n四、多继承\n单继承(extend)：对对象中的属性的一个浅复制过程，只能复制值类型的属性，无法复制引用类型属性\n![multiple-inherit](multiple-inherit.png)\n\n五、多态\n同一个方法多种调用方式\n![multiple-status](multiple-status.png)","source":"_posts/about-design-model.md","raw":"---\ntitle: JavaScript设计模式读书笔记(1)\ndate: 2022-08-20 14:47:46\ntags:\n---\n\n#### 面向对象\n一、面向过程与面向对象\n面向对象编程就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性)与动作（方法)。这个对象我们称之为类。面向对象编程思想其中有一个特点就是封装，就是说把你需要的功能放在一个对象里\n二、封装\n1、使用原型(prototype)为类添加属性和方法的两种方式(**注意两种不能混用**)：\n(1)为原型对象属性赋值\n```javascript\nBook.prototype.display = function() {\n  // ....\n}\n```\n(2)将一个对象赋值给类的原型对象\n```javascript\nBook.prototype = {\n  display = function() {}\n}\n```\n\n2、使用this和原型(prototype)为类添加属性和方法的区别：\n(1)使用this添加的属性和方法是在当前对象上添加的，每次通过类创建新对象时，this指向的属性和方法都会得到相应的创建\n(2)通过prototype继承的属性和方法是每个对象通过prototype访问到的，新创建对象时，不会再新创建属性和方法\n\n3、constructor是什么？\nconstructor是一个属性，当创建一个函数或者对象时都会为其创建一个原型对象prototype，在 prototype对象中又会像函数中创建 this一样创建一个constructor属性，那么constructor属性指向的就是拥有整个原型对象的函数或对象。\n![prototype](prototype.png)\n\n4、属性与方法的封装\n(1)私有属性与私有方法\n由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的,通过此特性创建类的私有变量以及私有方法\n(2)共有属性和共有方法\n在函数内部通过 this创建的属性和方法，在类创建对象时，每个对象自身都拥有一份并且可以在外部访问到。因此通过this创建的属性可看作是对象共有属性和对象共有方法\n(3)特权方法(类的构造器)\n通过this创建的方法，不但可以访问这些对象的共有属性与共有方法，而且还能访问到类（创建时）或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性,因此这些在创建对象时调用的特权方法还可以看作是类的构造器\n![public-and-private](public-and-private.png)\n\n5、在类的外部通过点语法定义的属性和方法以及在外部通过 prototype定义的属性和方法作用\n(1)类的外部通过点语法定义的属性和方法：通过new关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到,所以新创建的对象中无法获取他们，但是可以通过类来使用。因此在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法\n(2)外部通过 prototype定义的属性和方法: 类通过prototype创建的属性或者方法在类实例的对象中是可以通过 this访问到的，所以我们将prototype对象中的属性和方法称为共有属性和共有方法\n![static-and-public](static-and-public.png)\n通过new关键字创建的对象实质是对新对象 this 的不断赋值，并将prototype指向类的prototype所指向的对象，而类的构造函数外面通过点语法定义的属性方法是不会添加到新创建的对象上去的。因此要想在新创建的对象中使用 isChinese就得通过Book类使用而不能通过this，如 Book.isChinese，而类的原型 prototype 上定义的属性在新对象里就可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。\n\n6、闭包\n闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量\n\n7、创建对象的安全模式\nnew关键字的作用可以看作是对当前对象的this不停地赋值,没有用new，所以就会直接执行函数，而函数在全局作用域中执行所以在全局作用域中 this指向的当前对象自然就是全局变量\n![safe-model](safe-model.png)\n\n三、继承\n1、子类的原型对象 - 类式继承\n![class-inherit](class-inherit.png)\n声明2个类而已，类式继承需要将第一个类的实例赋值给第二个类的原型\n类的原型对象的作用就是为类的原型添加共有方法,但类不能直接访问这些属性和方法,必须通过原型prototype来访问。而我们实例化一个父类的时候，新创建的对象复制了父类的构造函数内的属性与方法并且将原型_proto_指向了父类的原型对象，这样就拥有了父类的原型对象上的属性与方法，并且这个新创建的对象可直接访问到父类原型对象上的属性与方法。如果我们将这个新创建的对象赋值给子类的原型，那么子类的原型就可以访问到父类的原型属性和方法。\n新创建的对象不仅仅可以访问父类原型上的属性和方法，同样也可访问从父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型,那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。这是类式继承的原理\n\n(1)可以使用instanceof来检测某个对象是否是某个类的实例，或者说某个对象是否继承了某个类\n注意：instanceof是通过判断对象的 prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构\n**instanceof是判断前面的对象是否是后面类(对象)的实例，它并不表示两者的继承，在实现上面的 subClass 继承superClass时是通过将 superClass的实例赋值给subClass 的原型prototype，所以说SubClass.prototype继承了superClass**\n\n(2)类式继承的缺点\n其一：由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的共有属性要是引用类型，就会在子类中被所有实例共用,因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其他子类\n其二：由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的,因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化\n\n2、创建即继承 - 构造函数继承\n![constructor-inherit](constructor-inherit.png)\nSuperClass.call(this，id);这条语句是构造函数式继承的精华，由于 call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共用，这样就违背了代码复用的原则\n\n3、将优点为我所用 - 组合继承\n(1)类式继承是通过子类的原型prototype对父类实例化来实现的,构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的\n![combination-inherit](combination-inherit.png)\n在子类构造函数中执行父类构造函数，在子类原型上实例化父类就是组合模式\n(2)缺点\n在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。因此父类构造函数调用了两遍\n\n4、洁净的继承者 - 原型式继承\n![prototype-inherit](prototype-inherit.png)\n对类式继承的一个封装，其实其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现的，目的是为了创建要返回的新的实例化对象\n![test-prototype-inherit](test-prototype-inherit.png)\n\n5、如虎添翼 - 寄生式继承\n![parasitic-inherit](parasitic-inherit.png)\n寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展,这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法\n\n6、终极继承者 - 寄生组合式继承\n寄生式继承和构造函数继承\n\n寄生式继承的改造\n![parasitic-inherit-change](parasitic-inherit-change.png)\n\n![parasitic-combination-inherit](parasitic-combination-inherit.png)\n\n![how-to-inherit](how-to-inherit.png)\n\n**子类再想添加原型方法必须通过 prototype.对象，通过点语法的形式一个一个添加方法了，否则直接赋予对象就会覆盖掉从父类原型继承的对象**\n\n四、多继承\n单继承(extend)：对对象中的属性的一个浅复制过程，只能复制值类型的属性，无法复制引用类型属性\n![multiple-inherit](multiple-inherit.png)\n\n五、多态\n同一个方法多种调用方式\n![multiple-status](multiple-status.png)","slug":"about-design-model","published":1,"updated":"2022-09-22T09:15:58.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpc80005jktta8ku5w87","content":"<h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>一、面向过程与面向对象<br>面向对象编程就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性)与动作（方法)。这个对象我们称之为类。面向对象编程思想其中有一个特点就是封装，就是说把你需要的功能放在一个对象里<br>二、封装<br>1、使用原型(prototype)为类添加属性和方法的两种方式(<strong>注意两种不能混用</strong>)：<br>(1)为原型对象属性赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype.display = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2)将一个对象赋值给类的原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype = &#123;</span><br><span class=\"line\">  display = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、使用this和原型(prototype)为类添加属性和方法的区别：<br>(1)使用this添加的属性和方法是在当前对象上添加的，每次通过类创建新对象时，this指向的属性和方法都会得到相应的创建<br>(2)通过prototype继承的属性和方法是每个对象通过prototype访问到的，新创建对象时，不会再新创建属性和方法</p>\n<p>3、constructor是什么？<br>constructor是一个属性，当创建一个函数或者对象时都会为其创建一个原型对象prototype，在 prototype对象中又会像函数中创建 this一样创建一个constructor属性，那么constructor属性指向的就是拥有整个原型对象的函数或对象。<br><img src=\"/2022/08/20/about-design-model/prototype.png\" alt=\"prototype\"></p>\n<p>4、属性与方法的封装<br>(1)私有属性与私有方法<br>由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的,通过此特性创建类的私有变量以及私有方法<br>(2)共有属性和共有方法<br>在函数内部通过 this创建的属性和方法，在类创建对象时，每个对象自身都拥有一份并且可以在外部访问到。因此通过this创建的属性可看作是对象共有属性和对象共有方法<br>(3)特权方法(类的构造器)<br>通过this创建的方法，不但可以访问这些对象的共有属性与共有方法，而且还能访问到类（创建时）或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性,因此这些在创建对象时调用的特权方法还可以看作是类的构造器<br><img src=\"/2022/08/20/about-design-model/public-and-private.png\" alt=\"public-and-private\"></p>\n<p>5、在类的外部通过点语法定义的属性和方法以及在外部通过 prototype定义的属性和方法作用<br>(1)类的外部通过点语法定义的属性和方法：通过new关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到,所以新创建的对象中无法获取他们，但是可以通过类来使用。因此在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法<br>(2)外部通过 prototype定义的属性和方法: 类通过prototype创建的属性或者方法在类实例的对象中是可以通过 this访问到的，所以我们将prototype对象中的属性和方法称为共有属性和共有方法<br><img src=\"/2022/08/20/about-design-model/static-and-public.png\" alt=\"static-and-public\"><br>通过new关键字创建的对象实质是对新对象 this 的不断赋值，并将prototype指向类的prototype所指向的对象，而类的构造函数外面通过点语法定义的属性方法是不会添加到新创建的对象上去的。因此要想在新创建的对象中使用 isChinese就得通过Book类使用而不能通过this，如 Book.isChinese，而类的原型 prototype 上定义的属性在新对象里就可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。</p>\n<p>6、闭包<br>闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量</p>\n<p>7、创建对象的安全模式<br>new关键字的作用可以看作是对当前对象的this不停地赋值,没有用new，所以就会直接执行函数，而函数在全局作用域中执行所以在全局作用域中 this指向的当前对象自然就是全局变量<br><img src=\"/2022/08/20/about-design-model/safe-model.png\" alt=\"safe-model\"></p>\n<p>三、继承<br>1、子类的原型对象 - 类式继承<br><img src=\"/2022/08/20/about-design-model/class-inherit.png\" alt=\"class-inherit\"><br>声明2个类而已，类式继承需要将第一个类的实例赋值给第二个类的原型<br>类的原型对象的作用就是为类的原型添加共有方法,但类不能直接访问这些属性和方法,必须通过原型prototype来访问。而我们实例化一个父类的时候，新创建的对象复制了父类的构造函数内的属性与方法并且将原型_proto_指向了父类的原型对象，这样就拥有了父类的原型对象上的属性与方法，并且这个新创建的对象可直接访问到父类原型对象上的属性与方法。如果我们将这个新创建的对象赋值给子类的原型，那么子类的原型就可以访问到父类的原型属性和方法。<br>新创建的对象不仅仅可以访问父类原型上的属性和方法，同样也可访问从父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型,那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。这是类式继承的原理</p>\n<p>(1)可以使用instanceof来检测某个对象是否是某个类的实例，或者说某个对象是否继承了某个类<br>注意：instanceof是通过判断对象的 prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构<br><strong>instanceof是判断前面的对象是否是后面类(对象)的实例，它并不表示两者的继承，在实现上面的 subClass 继承superClass时是通过将 superClass的实例赋值给subClass 的原型prototype，所以说SubClass.prototype继承了superClass</strong></p>\n<p>(2)类式继承的缺点<br>其一：由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的共有属性要是引用类型，就会在子类中被所有实例共用,因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其他子类<br>其二：由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的,因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化</p>\n<p>2、创建即继承 - 构造函数继承<br><img src=\"/2022/08/20/about-design-model/constructor-inherit.png\" alt=\"constructor-inherit\"><br>SuperClass.call(this，id);这条语句是构造函数式继承的精华，由于 call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共用，这样就违背了代码复用的原则</p>\n<p>3、将优点为我所用 - 组合继承<br>(1)类式继承是通过子类的原型prototype对父类实例化来实现的,构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的<br><img src=\"/2022/08/20/about-design-model/combination-inherit.png\" alt=\"combination-inherit\"><br>在子类构造函数中执行父类构造函数，在子类原型上实例化父类就是组合模式<br>(2)缺点<br>在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。因此父类构造函数调用了两遍</p>\n<p>4、洁净的继承者 - 原型式继承<br><img src=\"/2022/08/20/about-design-model/prototype-inherit.png\" alt=\"prototype-inherit\"><br>对类式继承的一个封装，其实其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现的，目的是为了创建要返回的新的实例化对象<br><img src=\"/2022/08/20/about-design-model/test-prototype-inherit.png\" alt=\"test-prototype-inherit\"></p>\n<p>5、如虎添翼 - 寄生式继承<br><img src=\"/2022/08/20/about-design-model/parasitic-inherit.png\" alt=\"parasitic-inherit\"><br>寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展,这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法</p>\n<p>6、终极继承者 - 寄生组合式继承<br>寄生式继承和构造函数继承</p>\n<p>寄生式继承的改造<br><img src=\"/2022/08/20/about-design-model/parasitic-inherit-change.png\" alt=\"parasitic-inherit-change\"></p>\n<p><img src=\"/2022/08/20/about-design-model/parasitic-combination-inherit.png\" alt=\"parasitic-combination-inherit\"></p>\n<p><img src=\"/2022/08/20/about-design-model/how-to-inherit.png\" alt=\"how-to-inherit\"></p>\n<p><strong>子类再想添加原型方法必须通过 prototype.对象，通过点语法的形式一个一个添加方法了，否则直接赋予对象就会覆盖掉从父类原型继承的对象</strong></p>\n<p>四、多继承<br>单继承(extend)：对对象中的属性的一个浅复制过程，只能复制值类型的属性，无法复制引用类型属性<br><img src=\"/2022/08/20/about-design-model/multiple-inherit.png\" alt=\"multiple-inherit\"></p>\n<p>五、多态<br>同一个方法多种调用方式<br><img src=\"/2022/08/20/about-design-model/multiple-status.png\" alt=\"multiple-status\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>一、面向过程与面向对象<br>面向对象编程就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性)与动作（方法)。这个对象我们称之为类。面向对象编程思想其中有一个特点就是封装，就是说把你需要的功能放在一个对象里<br>二、封装<br>1、使用原型(prototype)为类添加属性和方法的两种方式(<strong>注意两种不能混用</strong>)：<br>(1)为原型对象属性赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype.display = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2)将一个对象赋值给类的原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype = &#123;</span><br><span class=\"line\">  display = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、使用this和原型(prototype)为类添加属性和方法的区别：<br>(1)使用this添加的属性和方法是在当前对象上添加的，每次通过类创建新对象时，this指向的属性和方法都会得到相应的创建<br>(2)通过prototype继承的属性和方法是每个对象通过prototype访问到的，新创建对象时，不会再新创建属性和方法</p>\n<p>3、constructor是什么？<br>constructor是一个属性，当创建一个函数或者对象时都会为其创建一个原型对象prototype，在 prototype对象中又会像函数中创建 this一样创建一个constructor属性，那么constructor属性指向的就是拥有整个原型对象的函数或对象。<br><img src=\"/2022/08/20/about-design-model/prototype.png\" alt=\"prototype\"></p>\n<p>4、属性与方法的封装<br>(1)私有属性与私有方法<br>由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的,通过此特性创建类的私有变量以及私有方法<br>(2)共有属性和共有方法<br>在函数内部通过 this创建的属性和方法，在类创建对象时，每个对象自身都拥有一份并且可以在外部访问到。因此通过this创建的属性可看作是对象共有属性和对象共有方法<br>(3)特权方法(类的构造器)<br>通过this创建的方法，不但可以访问这些对象的共有属性与共有方法，而且还能访问到类（创建时）或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性,因此这些在创建对象时调用的特权方法还可以看作是类的构造器<br><img src=\"/2022/08/20/about-design-model/public-and-private.png\" alt=\"public-and-private\"></p>\n<p>5、在类的外部通过点语法定义的属性和方法以及在外部通过 prototype定义的属性和方法作用<br>(1)类的外部通过点语法定义的属性和方法：通过new关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到,所以新创建的对象中无法获取他们，但是可以通过类来使用。因此在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法<br>(2)外部通过 prototype定义的属性和方法: 类通过prototype创建的属性或者方法在类实例的对象中是可以通过 this访问到的，所以我们将prototype对象中的属性和方法称为共有属性和共有方法<br><img src=\"/2022/08/20/about-design-model/static-and-public.png\" alt=\"static-and-public\"><br>通过new关键字创建的对象实质是对新对象 this 的不断赋值，并将prototype指向类的prototype所指向的对象，而类的构造函数外面通过点语法定义的属性方法是不会添加到新创建的对象上去的。因此要想在新创建的对象中使用 isChinese就得通过Book类使用而不能通过this，如 Book.isChinese，而类的原型 prototype 上定义的属性在新对象里就可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。</p>\n<p>6、闭包<br>闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量</p>\n<p>7、创建对象的安全模式<br>new关键字的作用可以看作是对当前对象的this不停地赋值,没有用new，所以就会直接执行函数，而函数在全局作用域中执行所以在全局作用域中 this指向的当前对象自然就是全局变量<br><img src=\"/2022/08/20/about-design-model/safe-model.png\" alt=\"safe-model\"></p>\n<p>三、继承<br>1、子类的原型对象 - 类式继承<br><img src=\"/2022/08/20/about-design-model/class-inherit.png\" alt=\"class-inherit\"><br>声明2个类而已，类式继承需要将第一个类的实例赋值给第二个类的原型<br>类的原型对象的作用就是为类的原型添加共有方法,但类不能直接访问这些属性和方法,必须通过原型prototype来访问。而我们实例化一个父类的时候，新创建的对象复制了父类的构造函数内的属性与方法并且将原型_proto_指向了父类的原型对象，这样就拥有了父类的原型对象上的属性与方法，并且这个新创建的对象可直接访问到父类原型对象上的属性与方法。如果我们将这个新创建的对象赋值给子类的原型，那么子类的原型就可以访问到父类的原型属性和方法。<br>新创建的对象不仅仅可以访问父类原型上的属性和方法，同样也可访问从父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型,那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。这是类式继承的原理</p>\n<p>(1)可以使用instanceof来检测某个对象是否是某个类的实例，或者说某个对象是否继承了某个类<br>注意：instanceof是通过判断对象的 prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构<br><strong>instanceof是判断前面的对象是否是后面类(对象)的实例，它并不表示两者的继承，在实现上面的 subClass 继承superClass时是通过将 superClass的实例赋值给subClass 的原型prototype，所以说SubClass.prototype继承了superClass</strong></p>\n<p>(2)类式继承的缺点<br>其一：由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的共有属性要是引用类型，就会在子类中被所有实例共用,因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其他子类<br>其二：由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的,因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化</p>\n<p>2、创建即继承 - 构造函数继承<br><img src=\"/2022/08/20/about-design-model/constructor-inherit.png\" alt=\"constructor-inherit\"><br>SuperClass.call(this，id);这条语句是构造函数式继承的精华，由于 call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共用，这样就违背了代码复用的原则</p>\n<p>3、将优点为我所用 - 组合继承<br>(1)类式继承是通过子类的原型prototype对父类实例化来实现的,构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的<br><img src=\"/2022/08/20/about-design-model/combination-inherit.png\" alt=\"combination-inherit\"><br>在子类构造函数中执行父类构造函数，在子类原型上实例化父类就是组合模式<br>(2)缺点<br>在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。因此父类构造函数调用了两遍</p>\n<p>4、洁净的继承者 - 原型式继承<br><img src=\"/2022/08/20/about-design-model/prototype-inherit.png\" alt=\"prototype-inherit\"><br>对类式继承的一个封装，其实其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现的，目的是为了创建要返回的新的实例化对象<br><img src=\"/2022/08/20/about-design-model/test-prototype-inherit.png\" alt=\"test-prototype-inherit\"></p>\n<p>5、如虎添翼 - 寄生式继承<br><img src=\"/2022/08/20/about-design-model/parasitic-inherit.png\" alt=\"parasitic-inherit\"><br>寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展,这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法</p>\n<p>6、终极继承者 - 寄生组合式继承<br>寄生式继承和构造函数继承</p>\n<p>寄生式继承的改造<br><img src=\"/2022/08/20/about-design-model/parasitic-inherit-change.png\" alt=\"parasitic-inherit-change\"></p>\n<p><img src=\"/2022/08/20/about-design-model/parasitic-combination-inherit.png\" alt=\"parasitic-combination-inherit\"></p>\n<p><img src=\"/2022/08/20/about-design-model/how-to-inherit.png\" alt=\"how-to-inherit\"></p>\n<p><strong>子类再想添加原型方法必须通过 prototype.对象，通过点语法的形式一个一个添加方法了，否则直接赋予对象就会覆盖掉从父类原型继承的对象</strong></p>\n<p>四、多继承<br>单继承(extend)：对对象中的属性的一个浅复制过程，只能复制值类型的属性，无法复制引用类型属性<br><img src=\"/2022/08/20/about-design-model/multiple-inherit.png\" alt=\"multiple-inherit\"></p>\n<p>五、多态<br>同一个方法多种调用方式<br><img src=\"/2022/08/20/about-design-model/multiple-status.png\" alt=\"multiple-status\"></p>\n"},{"title":"JavaScript设计模式读书笔记(3)","date":"2022-09-06T07:11:48.000Z","_content":"\n#### 结构型设计模式\n结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计\n\n###### 外观模式\n外观模式(Facade):为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用\n\n多用于兼容模式\n![out-look](out-look.png)\n\n###### 适配器模式\n适配器模式(Adapter):将一个类(对象)的接口(方法或者属性)转化成另外一个接口,以满足用户需求，使类(对象)之间接口的不兼容问题通过适配器得以解决\n\n(1)适配异类框架\n(2)参数适配器：通常是以一个参数对象方式传入\n(3)数据适配\n比如一个数组，每个元素代表不同意义，数据结构语义不好，将其适配为一个对象等\n(4)服务端数据适配\n获取接口的数据，先做一个适配，再使用统一的处理方法\n\n###### 代理模式\n代理模式(Proxy):由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介的作用\n\n**代理对象**\n(1)img之类的标签通过src属性可以向其他域下的服务器发送请求\n缺点：请求是get请求，且是单向的，不会有响应数据\n示例：站长统计\n![station-culculate](station-culculate.png)\n\n(2)JSONP\n通过script标签\n需要其他域下的服务端配合前端做出针对处理\n\n(3)代理模板\n不同域之间相互调用对方的页面是有限制的，那么自己域中的两个页面相互之间的调用是可以的，即代理页面B调用被代理的页面A中对象的方式是可以的。那么要实现这种方式我们只需要在被访问的域中，请求返回的Header重定向到代理页面，并在代理页面中处理被代理的页面A\n\n###### 装修者模式\n装饰者模式(Decorator):在不改变原对象的基础上，通过对其进行包装拓展(添加属性或者方法)使原有对象可以满足用户的更复杂需求\n![decorator](decorator.png)\n\n**适配器与装修者的区别**\n适配器方法是对原有对象适配，添加的方法与原有方法功能上大致相似；使用适配器时新增的方法是要调用原来的方法，要了解原有方法实现的具体细节\n装饰者提供的方法与原来的方法功能项是有一定区别的；不需要了解对象原有的功能，并且对象原有的方法照样可以原封不动地使用\n\n###### 桥接模式\n桥接模式(Bridge):在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦\n\n先抽象提取共用部分，然后将实现与抽象通过桥接方法链接在一起，来实现解耦的作用\n\n![bridge1](bridge1.png)\n![bridge2](bridge2.png)\n![bridge3](bridge3.png)\n\n桥接模式最主要的特点即是将实现层(如元素绑定的事件)与抽象层(如修饰页面UI逻辑)解耦分离，使两部分可以独立变化\n\n###### 组合模式\n组合模式(Composite):又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n组合模式常用语创建表单。\n\n###### 享元模式\n享元模式(Flyweight):运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。\n\n享元模式主要还是对其数据、方法共享分离，它将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或者共有的数据和方法,所以将这一部分提取出来减少开销，以提高性能。\n\n在一些小程序中，性能与内存的消耗对程序的执行影响不大时，强行应用享元模式而引入复杂的代码逻辑,往往会收到负效应。","source":"_posts/about-design-model2.md","raw":"---\ntitle: JavaScript设计模式读书笔记(3)\ndate: 2022-09-06 15:11:48\ntags:\n---\n\n#### 结构型设计模式\n结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计\n\n###### 外观模式\n外观模式(Facade):为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用\n\n多用于兼容模式\n![out-look](out-look.png)\n\n###### 适配器模式\n适配器模式(Adapter):将一个类(对象)的接口(方法或者属性)转化成另外一个接口,以满足用户需求，使类(对象)之间接口的不兼容问题通过适配器得以解决\n\n(1)适配异类框架\n(2)参数适配器：通常是以一个参数对象方式传入\n(3)数据适配\n比如一个数组，每个元素代表不同意义，数据结构语义不好，将其适配为一个对象等\n(4)服务端数据适配\n获取接口的数据，先做一个适配，再使用统一的处理方法\n\n###### 代理模式\n代理模式(Proxy):由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介的作用\n\n**代理对象**\n(1)img之类的标签通过src属性可以向其他域下的服务器发送请求\n缺点：请求是get请求，且是单向的，不会有响应数据\n示例：站长统计\n![station-culculate](station-culculate.png)\n\n(2)JSONP\n通过script标签\n需要其他域下的服务端配合前端做出针对处理\n\n(3)代理模板\n不同域之间相互调用对方的页面是有限制的，那么自己域中的两个页面相互之间的调用是可以的，即代理页面B调用被代理的页面A中对象的方式是可以的。那么要实现这种方式我们只需要在被访问的域中，请求返回的Header重定向到代理页面，并在代理页面中处理被代理的页面A\n\n###### 装修者模式\n装饰者模式(Decorator):在不改变原对象的基础上，通过对其进行包装拓展(添加属性或者方法)使原有对象可以满足用户的更复杂需求\n![decorator](decorator.png)\n\n**适配器与装修者的区别**\n适配器方法是对原有对象适配，添加的方法与原有方法功能上大致相似；使用适配器时新增的方法是要调用原来的方法，要了解原有方法实现的具体细节\n装饰者提供的方法与原来的方法功能项是有一定区别的；不需要了解对象原有的功能，并且对象原有的方法照样可以原封不动地使用\n\n###### 桥接模式\n桥接模式(Bridge):在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦\n\n先抽象提取共用部分，然后将实现与抽象通过桥接方法链接在一起，来实现解耦的作用\n\n![bridge1](bridge1.png)\n![bridge2](bridge2.png)\n![bridge3](bridge3.png)\n\n桥接模式最主要的特点即是将实现层(如元素绑定的事件)与抽象层(如修饰页面UI逻辑)解耦分离，使两部分可以独立变化\n\n###### 组合模式\n组合模式(Composite):又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n组合模式常用语创建表单。\n\n###### 享元模式\n享元模式(Flyweight):运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。\n\n享元模式主要还是对其数据、方法共享分离，它将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或者共有的数据和方法,所以将这一部分提取出来减少开销，以提高性能。\n\n在一些小程序中，性能与内存的消耗对程序的执行影响不大时，强行应用享元模式而引入复杂的代码逻辑,往往会收到负效应。","slug":"about-design-model2","published":1,"updated":"2022-09-22T09:16:44.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpc90007jkttfgacdrbd","content":"<h4 id=\"结构型设计模式\"><a href=\"#结构型设计模式\" class=\"headerlink\" title=\"结构型设计模式\"></a>结构型设计模式</h4><p>结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计</p>\n<h6 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h6><p>外观模式(Facade):为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用</p>\n<p>多用于兼容模式<br><img src=\"/2022/09/06/about-design-model2/out-look.png\" alt=\"out-look\"></p>\n<h6 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h6><p>适配器模式(Adapter):将一个类(对象)的接口(方法或者属性)转化成另外一个接口,以满足用户需求，使类(对象)之间接口的不兼容问题通过适配器得以解决</p>\n<p>(1)适配异类框架<br>(2)参数适配器：通常是以一个参数对象方式传入<br>(3)数据适配<br>比如一个数组，每个元素代表不同意义，数据结构语义不好，将其适配为一个对象等<br>(4)服务端数据适配<br>获取接口的数据，先做一个适配，再使用统一的处理方法</p>\n<h6 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h6><p>代理模式(Proxy):由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介的作用</p>\n<p><strong>代理对象</strong><br>(1)img之类的标签通过src属性可以向其他域下的服务器发送请求<br>缺点：请求是get请求，且是单向的，不会有响应数据<br>示例：站长统计<br><img src=\"/2022/09/06/about-design-model2/station-culculate.png\" alt=\"station-culculate\"></p>\n<p>(2)JSONP<br>通过script标签<br>需要其他域下的服务端配合前端做出针对处理</p>\n<p>(3)代理模板<br>不同域之间相互调用对方的页面是有限制的，那么自己域中的两个页面相互之间的调用是可以的，即代理页面B调用被代理的页面A中对象的方式是可以的。那么要实现这种方式我们只需要在被访问的域中，请求返回的Header重定向到代理页面，并在代理页面中处理被代理的页面A</p>\n<h6 id=\"装修者模式\"><a href=\"#装修者模式\" class=\"headerlink\" title=\"装修者模式\"></a>装修者模式</h6><p>装饰者模式(Decorator):在不改变原对象的基础上，通过对其进行包装拓展(添加属性或者方法)使原有对象可以满足用户的更复杂需求<br><img src=\"/2022/09/06/about-design-model2/decorator.png\" alt=\"decorator\"></p>\n<p><strong>适配器与装修者的区别</strong><br>适配器方法是对原有对象适配，添加的方法与原有方法功能上大致相似；使用适配器时新增的方法是要调用原来的方法，要了解原有方法实现的具体细节<br>装饰者提供的方法与原来的方法功能项是有一定区别的；不需要了解对象原有的功能，并且对象原有的方法照样可以原封不动地使用</p>\n<h6 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h6><p>桥接模式(Bridge):在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦</p>\n<p>先抽象提取共用部分，然后将实现与抽象通过桥接方法链接在一起，来实现解耦的作用</p>\n<p><img src=\"/2022/09/06/about-design-model2/bridge1.png\" alt=\"bridge1\"><br><img src=\"/2022/09/06/about-design-model2/bridge2.png\" alt=\"bridge2\"><br><img src=\"/2022/09/06/about-design-model2/bridge3.png\" alt=\"bridge3\"></p>\n<p>桥接模式最主要的特点即是将实现层(如元素绑定的事件)与抽象层(如修饰页面UI逻辑)解耦分离，使两部分可以独立变化</p>\n<h6 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h6><p>组合模式(Composite):又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>组合模式常用语创建表单。</p>\n<h6 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h6><p>享元模式(Flyweight):运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。</p>\n<p>享元模式主要还是对其数据、方法共享分离，它将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或者共有的数据和方法,所以将这一部分提取出来减少开销，以提高性能。</p>\n<p>在一些小程序中，性能与内存的消耗对程序的执行影响不大时，强行应用享元模式而引入复杂的代码逻辑,往往会收到负效应。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"结构型设计模式\"><a href=\"#结构型设计模式\" class=\"headerlink\" title=\"结构型设计模式\"></a>结构型设计模式</h4><p>结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计</p>\n<h6 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h6><p>外观模式(Facade):为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用</p>\n<p>多用于兼容模式<br><img src=\"/2022/09/06/about-design-model2/out-look.png\" alt=\"out-look\"></p>\n<h6 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h6><p>适配器模式(Adapter):将一个类(对象)的接口(方法或者属性)转化成另外一个接口,以满足用户需求，使类(对象)之间接口的不兼容问题通过适配器得以解决</p>\n<p>(1)适配异类框架<br>(2)参数适配器：通常是以一个参数对象方式传入<br>(3)数据适配<br>比如一个数组，每个元素代表不同意义，数据结构语义不好，将其适配为一个对象等<br>(4)服务端数据适配<br>获取接口的数据，先做一个适配，再使用统一的处理方法</p>\n<h6 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h6><p>代理模式(Proxy):由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介的作用</p>\n<p><strong>代理对象</strong><br>(1)img之类的标签通过src属性可以向其他域下的服务器发送请求<br>缺点：请求是get请求，且是单向的，不会有响应数据<br>示例：站长统计<br><img src=\"/2022/09/06/about-design-model2/station-culculate.png\" alt=\"station-culculate\"></p>\n<p>(2)JSONP<br>通过script标签<br>需要其他域下的服务端配合前端做出针对处理</p>\n<p>(3)代理模板<br>不同域之间相互调用对方的页面是有限制的，那么自己域中的两个页面相互之间的调用是可以的，即代理页面B调用被代理的页面A中对象的方式是可以的。那么要实现这种方式我们只需要在被访问的域中，请求返回的Header重定向到代理页面，并在代理页面中处理被代理的页面A</p>\n<h6 id=\"装修者模式\"><a href=\"#装修者模式\" class=\"headerlink\" title=\"装修者模式\"></a>装修者模式</h6><p>装饰者模式(Decorator):在不改变原对象的基础上，通过对其进行包装拓展(添加属性或者方法)使原有对象可以满足用户的更复杂需求<br><img src=\"/2022/09/06/about-design-model2/decorator.png\" alt=\"decorator\"></p>\n<p><strong>适配器与装修者的区别</strong><br>适配器方法是对原有对象适配，添加的方法与原有方法功能上大致相似；使用适配器时新增的方法是要调用原来的方法，要了解原有方法实现的具体细节<br>装饰者提供的方法与原来的方法功能项是有一定区别的；不需要了解对象原有的功能，并且对象原有的方法照样可以原封不动地使用</p>\n<h6 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h6><p>桥接模式(Bridge):在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦</p>\n<p>先抽象提取共用部分，然后将实现与抽象通过桥接方法链接在一起，来实现解耦的作用</p>\n<p><img src=\"/2022/09/06/about-design-model2/bridge1.png\" alt=\"bridge1\"><br><img src=\"/2022/09/06/about-design-model2/bridge2.png\" alt=\"bridge2\"><br><img src=\"/2022/09/06/about-design-model2/bridge3.png\" alt=\"bridge3\"></p>\n<p>桥接模式最主要的特点即是将实现层(如元素绑定的事件)与抽象层(如修饰页面UI逻辑)解耦分离，使两部分可以独立变化</p>\n<h6 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h6><p>组合模式(Composite):又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>组合模式常用语创建表单。</p>\n<h6 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h6><p>享元模式(Flyweight):运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。</p>\n<p>享元模式主要还是对其数据、方法共享分离，它将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或者共有的数据和方法,所以将这一部分提取出来减少开销，以提高性能。</p>\n<p>在一些小程序中，性能与内存的消耗对程序的执行影响不大时，强行应用享元模式而引入复杂的代码逻辑,往往会收到负效应。</p>\n"},{"title":"JavaScript设计模式读书笔记(4)","date":"2022-09-07T09:40:43.000Z","_content":"\n#### 行为型设计模式\n行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象,还涉及类或对象之间的交流模式并加以实现\n\n###### 模板方法模式\n模板方法模式(Template Method):父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时可重新定义算法中某些实现步骤。\n\n多用于归一化组件\n\n![basic-model](basic-model.png)\n![inherit-model](inherit-model.png)\n![inherit-as-basic-model](inherit-as-basic-model.png)\n\n###### 观察者模式\n观察者模式(Observer):又被称作发布-订阅者模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。\n\n观察者对象包含：一个消息容器，订阅消息方法、取消订阅的消息方法、发送订阅的消息方法\n\n![observer](observer.png)\n![observer-regist](observer-regist.png)\n![observer-fire](observer-fire.png)\n![observer-remove](observer-remove.png)\n\n![regist-message](regist-message.png)\n![regist-change-num](regist-change-num.png)\n![add-message](add-message.png)\n\n###### 状态模式\n状态模式(State):当一个对象的内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对象。\n\n状态模式简化了分支判断遍历逻辑\n\n![vote-status](vote-status.png)\n\n示例\n思路：首先创建一个状态对象，内部保存状态变量，然后内部封装好每种,动作对应的状态，最后状态对象返回一个接口对象，它可以对内部的状态修改或者调用\n![marry-state](marry-state.png)\n![marry-state1](marry-state1.png)\n\n###### 策略模式\n策略模式(Strategy):将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。\n\n**与状态模式异同点**\n相同点：结构上与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现对内部对象的调用\n不同点：策略模式不需要管理状态、状态间没有依赖关系、策略之间可以相互替换、在策略对象内部保存的是相互独立的一些算法\n\n![price-strategy](price-strategy.png)\n\n**策略模式的优点**\n第一，策略模式封装了一组代码簇，并且封装的代码相互之间独立，便于对算法的重复引用，提高了算法的复用率。\n第二，策略模式与继承相比，在类的继承中继承的方法是被封装在类中，因此当需求很多算法时，就不得不创建出多种类，这样会导致算法与算法的使用者耦合在一起,不利于算法的独立演化，并且在类的外部改变类的算法难度也是极大的。\n第三，同状态模式一样,策略模式也是一种优化分支判断语句的模式,采用策略模式对算法封装使得算法更利于维护。\n\n**策略模式的缺点**\n由于选择哪种算法的决定权在用户，所以对用户来说就必须了解每种算法的实现,增加了用户对策略对象的使用成本。\n由于每种算法间相互独立，这样对于一些复杂的算法处理相同逻辑的部分无法实现共享，这就会造成一些资源的浪费\n\n**优化分支语句的模式**\n工厂方法模式，状态模式与策略模式\n工厂方法模式：一种创建型模式，最终目的是创建对象。\n状态模式是行为型模式，不过在状态模式中，其核心是对状态的控制来决定表现行为，所以状态之间通常是不能相互替代的，否则将产生不同的行为结果。\n策略模式是行为型模式，核心是算法，由于每种算法要处理的业务逻辑相同，因此他们可以相互替换，当然策略模式并不关心使用者环境，因为同一种策略模式最终产出的结果是一定的。\n\n###### 职责链模式\n职责链模式(Chain of Responsibility):解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，直到最后一个对象完成请求的处理。\n\n示例\n![send-data](send-data.png)\n![deal-data](deal-data.png)\n![create-component](create-component.png)\n\n**缺点**\n职责链上的每一个对象不一定都能参与请求的传递，有时会造成一丝资源的浪费\n多个对象参与请求的传递，在代码调试时增加了调试成本\n\n###### 命令模式\n命令模式(Command):将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。\n命令模式常用于解耦\n![command-model-1](command-model-1.png)\n![command-model-2](command-model-2.png)\n![command-model-3](command-model-3.png)\n\n命令模式的优点:\n解决命令使用者之间的耦合。新的命令很容易加入到命令系统中，供使用者使用。\n命令的使用具有一致性，多数的命令在一定程度上是简化操作方法的使用的。\n\n命令模式的缺点:\n命令模式是对一些操作的封装，这就造成每执行一次操作都要调用一次命令对象，增加了系统的复杂度。\n\n###### 访问者模式\n访问者模式(Visitor):针对于对象结构中的元素，定义在不改变该对象的前提下访问结构中元素的新方法。\n\n![visitor-model](visitor-model.png)\n\n###### 中介者模式\n中介者模式(Mediator):通过中介者对象封装一系列对象之间的交互，使对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可改变对象之间的交互。\n\n(1)观察者模式与中介者模式的区别\n相同点\n都是通过消息的收发机制实现的\n差异点\n在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，他们之间信息交流依托于消息系统实现的解耦,需要写一个消息系统\n中介者模式中消息的发送方只有一个，就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象(订阅者)才可订阅中介者的消息，当然你也可以看作是将消息系统封装在中介者对象内部，所以中介者对象只能是消息的发送者\n\n![mediator-model](mediator-model.png)\n\n###### 备忘录模式\n备忘录模式(Memento):在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部的状态以便日后对象使用或者对象恢复到以前的某个状态。\n\n![cache-model](cache-model.png)\n\n###### 迭代器模式\n迭代器模式(Iterator):在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。\n\n![iterator-model](iterator-model.png)\n\n###### 解释器模式\n解释器模式(Interpreter):对于一种语言，给出其文法表示形式，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。\n\n![explain-model-1](explain-model-1.png)\n![explain-model-2](explain-model-2.png)\n![explain-model-3](explain-model-3.png)\n\n解释器即是对客户提出的需求，经过解析而形成的一个抽象解释程序。而是否可以应用解释器模式的一条重要准侧是**能否根据需求解析出一套完成的语法规则,不论该语法规则简单或是复杂都是必须的**。因为解释器要按照这套规则才能实现相应的功能。","source":"_posts/about-design-model3.md","raw":"---\ntitle: JavaScript设计模式读书笔记(4)\ndate: 2022-09-07 17:40:43\ntags:\n---\n\n#### 行为型设计模式\n行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象,还涉及类或对象之间的交流模式并加以实现\n\n###### 模板方法模式\n模板方法模式(Template Method):父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时可重新定义算法中某些实现步骤。\n\n多用于归一化组件\n\n![basic-model](basic-model.png)\n![inherit-model](inherit-model.png)\n![inherit-as-basic-model](inherit-as-basic-model.png)\n\n###### 观察者模式\n观察者模式(Observer):又被称作发布-订阅者模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。\n\n观察者对象包含：一个消息容器，订阅消息方法、取消订阅的消息方法、发送订阅的消息方法\n\n![observer](observer.png)\n![observer-regist](observer-regist.png)\n![observer-fire](observer-fire.png)\n![observer-remove](observer-remove.png)\n\n![regist-message](regist-message.png)\n![regist-change-num](regist-change-num.png)\n![add-message](add-message.png)\n\n###### 状态模式\n状态模式(State):当一个对象的内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对象。\n\n状态模式简化了分支判断遍历逻辑\n\n![vote-status](vote-status.png)\n\n示例\n思路：首先创建一个状态对象，内部保存状态变量，然后内部封装好每种,动作对应的状态，最后状态对象返回一个接口对象，它可以对内部的状态修改或者调用\n![marry-state](marry-state.png)\n![marry-state1](marry-state1.png)\n\n###### 策略模式\n策略模式(Strategy):将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。\n\n**与状态模式异同点**\n相同点：结构上与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现对内部对象的调用\n不同点：策略模式不需要管理状态、状态间没有依赖关系、策略之间可以相互替换、在策略对象内部保存的是相互独立的一些算法\n\n![price-strategy](price-strategy.png)\n\n**策略模式的优点**\n第一，策略模式封装了一组代码簇，并且封装的代码相互之间独立，便于对算法的重复引用，提高了算法的复用率。\n第二，策略模式与继承相比，在类的继承中继承的方法是被封装在类中，因此当需求很多算法时，就不得不创建出多种类，这样会导致算法与算法的使用者耦合在一起,不利于算法的独立演化，并且在类的外部改变类的算法难度也是极大的。\n第三，同状态模式一样,策略模式也是一种优化分支判断语句的模式,采用策略模式对算法封装使得算法更利于维护。\n\n**策略模式的缺点**\n由于选择哪种算法的决定权在用户，所以对用户来说就必须了解每种算法的实现,增加了用户对策略对象的使用成本。\n由于每种算法间相互独立，这样对于一些复杂的算法处理相同逻辑的部分无法实现共享，这就会造成一些资源的浪费\n\n**优化分支语句的模式**\n工厂方法模式，状态模式与策略模式\n工厂方法模式：一种创建型模式，最终目的是创建对象。\n状态模式是行为型模式，不过在状态模式中，其核心是对状态的控制来决定表现行为，所以状态之间通常是不能相互替代的，否则将产生不同的行为结果。\n策略模式是行为型模式，核心是算法，由于每种算法要处理的业务逻辑相同，因此他们可以相互替换，当然策略模式并不关心使用者环境，因为同一种策略模式最终产出的结果是一定的。\n\n###### 职责链模式\n职责链模式(Chain of Responsibility):解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，直到最后一个对象完成请求的处理。\n\n示例\n![send-data](send-data.png)\n![deal-data](deal-data.png)\n![create-component](create-component.png)\n\n**缺点**\n职责链上的每一个对象不一定都能参与请求的传递，有时会造成一丝资源的浪费\n多个对象参与请求的传递，在代码调试时增加了调试成本\n\n###### 命令模式\n命令模式(Command):将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。\n命令模式常用于解耦\n![command-model-1](command-model-1.png)\n![command-model-2](command-model-2.png)\n![command-model-3](command-model-3.png)\n\n命令模式的优点:\n解决命令使用者之间的耦合。新的命令很容易加入到命令系统中，供使用者使用。\n命令的使用具有一致性，多数的命令在一定程度上是简化操作方法的使用的。\n\n命令模式的缺点:\n命令模式是对一些操作的封装，这就造成每执行一次操作都要调用一次命令对象，增加了系统的复杂度。\n\n###### 访问者模式\n访问者模式(Visitor):针对于对象结构中的元素，定义在不改变该对象的前提下访问结构中元素的新方法。\n\n![visitor-model](visitor-model.png)\n\n###### 中介者模式\n中介者模式(Mediator):通过中介者对象封装一系列对象之间的交互，使对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可改变对象之间的交互。\n\n(1)观察者模式与中介者模式的区别\n相同点\n都是通过消息的收发机制实现的\n差异点\n在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，他们之间信息交流依托于消息系统实现的解耦,需要写一个消息系统\n中介者模式中消息的发送方只有一个，就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象(订阅者)才可订阅中介者的消息，当然你也可以看作是将消息系统封装在中介者对象内部，所以中介者对象只能是消息的发送者\n\n![mediator-model](mediator-model.png)\n\n###### 备忘录模式\n备忘录模式(Memento):在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部的状态以便日后对象使用或者对象恢复到以前的某个状态。\n\n![cache-model](cache-model.png)\n\n###### 迭代器模式\n迭代器模式(Iterator):在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。\n\n![iterator-model](iterator-model.png)\n\n###### 解释器模式\n解释器模式(Interpreter):对于一种语言，给出其文法表示形式，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。\n\n![explain-model-1](explain-model-1.png)\n![explain-model-2](explain-model-2.png)\n![explain-model-3](explain-model-3.png)\n\n解释器即是对客户提出的需求，经过解析而形成的一个抽象解释程序。而是否可以应用解释器模式的一条重要准侧是**能否根据需求解析出一套完成的语法规则,不论该语法规则简单或是复杂都是必须的**。因为解释器要按照这套规则才能实现相应的功能。","slug":"about-design-model3","published":1,"updated":"2022-09-22T09:17:06.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpca0009jktt5k7lg5go","content":"<h4 id=\"行为型设计模式\"><a href=\"#行为型设计模式\" class=\"headerlink\" title=\"行为型设计模式\"></a>行为型设计模式</h4><p>行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象,还涉及类或对象之间的交流模式并加以实现</p>\n<h6 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h6><p>模板方法模式(Template Method):父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时可重新定义算法中某些实现步骤。</p>\n<p>多用于归一化组件</p>\n<p><img src=\"/2022/09/07/about-design-model3/basic-model.png\" alt=\"basic-model\"><br><img src=\"/2022/09/07/about-design-model3/inherit-model.png\" alt=\"inherit-model\"><br><img src=\"/2022/09/07/about-design-model3/inherit-as-basic-model.png\" alt=\"inherit-as-basic-model\"></p>\n<h6 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h6><p>观察者模式(Observer):又被称作发布-订阅者模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。</p>\n<p>观察者对象包含：一个消息容器，订阅消息方法、取消订阅的消息方法、发送订阅的消息方法</p>\n<p><img src=\"/2022/09/07/about-design-model3/observer.png\" alt=\"observer\"><br><img src=\"/2022/09/07/about-design-model3/observer-regist.png\" alt=\"observer-regist\"><br><img src=\"/2022/09/07/about-design-model3/observer-fire.png\" alt=\"observer-fire\"><br><img src=\"/2022/09/07/about-design-model3/observer-remove.png\" alt=\"observer-remove\"></p>\n<p><img src=\"/2022/09/07/about-design-model3/regist-message.png\" alt=\"regist-message\"><br><img src=\"/2022/09/07/about-design-model3/regist-change-num.png\" alt=\"regist-change-num\"><br><img src=\"/2022/09/07/about-design-model3/add-message.png\" alt=\"add-message\"></p>\n<h6 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h6><p>状态模式(State):当一个对象的内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对象。</p>\n<p>状态模式简化了分支判断遍历逻辑</p>\n<p><img src=\"/2022/09/07/about-design-model3/vote-status.png\" alt=\"vote-status\"></p>\n<p>示例<br>思路：首先创建一个状态对象，内部保存状态变量，然后内部封装好每种,动作对应的状态，最后状态对象返回一个接口对象，它可以对内部的状态修改或者调用<br><img src=\"/2022/09/07/about-design-model3/marry-state.png\" alt=\"marry-state\"><br><img src=\"/2022/09/07/about-design-model3/marry-state1.png\" alt=\"marry-state1\"></p>\n<h6 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h6><p>策略模式(Strategy):将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。</p>\n<p><strong>与状态模式异同点</strong><br>相同点：结构上与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现对内部对象的调用<br>不同点：策略模式不需要管理状态、状态间没有依赖关系、策略之间可以相互替换、在策略对象内部保存的是相互独立的一些算法</p>\n<p><img src=\"/2022/09/07/about-design-model3/price-strategy.png\" alt=\"price-strategy\"></p>\n<p><strong>策略模式的优点</strong><br>第一，策略模式封装了一组代码簇，并且封装的代码相互之间独立，便于对算法的重复引用，提高了算法的复用率。<br>第二，策略模式与继承相比，在类的继承中继承的方法是被封装在类中，因此当需求很多算法时，就不得不创建出多种类，这样会导致算法与算法的使用者耦合在一起,不利于算法的独立演化，并且在类的外部改变类的算法难度也是极大的。<br>第三，同状态模式一样,策略模式也是一种优化分支判断语句的模式,采用策略模式对算法封装使得算法更利于维护。</p>\n<p><strong>策略模式的缺点</strong><br>由于选择哪种算法的决定权在用户，所以对用户来说就必须了解每种算法的实现,增加了用户对策略对象的使用成本。<br>由于每种算法间相互独立，这样对于一些复杂的算法处理相同逻辑的部分无法实现共享，这就会造成一些资源的浪费</p>\n<p><strong>优化分支语句的模式</strong><br>工厂方法模式，状态模式与策略模式<br>工厂方法模式：一种创建型模式，最终目的是创建对象。<br>状态模式是行为型模式，不过在状态模式中，其核心是对状态的控制来决定表现行为，所以状态之间通常是不能相互替代的，否则将产生不同的行为结果。<br>策略模式是行为型模式，核心是算法，由于每种算法要处理的业务逻辑相同，因此他们可以相互替换，当然策略模式并不关心使用者环境，因为同一种策略模式最终产出的结果是一定的。</p>\n<h6 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h6><p>职责链模式(Chain of Responsibility):解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，直到最后一个对象完成请求的处理。</p>\n<p>示例<br><img src=\"/2022/09/07/about-design-model3/send-data.png\" alt=\"send-data\"><br><img src=\"/2022/09/07/about-design-model3/deal-data.png\" alt=\"deal-data\"><br><img src=\"/2022/09/07/about-design-model3/create-component.png\" alt=\"create-component\"></p>\n<p><strong>缺点</strong><br>职责链上的每一个对象不一定都能参与请求的传递，有时会造成一丝资源的浪费<br>多个对象参与请求的传递，在代码调试时增加了调试成本</p>\n<h6 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h6><p>命令模式(Command):将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。<br>命令模式常用于解耦<br><img src=\"/2022/09/07/about-design-model3/command-model-1.png\" alt=\"command-model-1\"><br><img src=\"/2022/09/07/about-design-model3/command-model-2.png\" alt=\"command-model-2\"><br><img src=\"/2022/09/07/about-design-model3/command-model-3.png\" alt=\"command-model-3\"></p>\n<p>命令模式的优点:<br>解决命令使用者之间的耦合。新的命令很容易加入到命令系统中，供使用者使用。<br>命令的使用具有一致性，多数的命令在一定程度上是简化操作方法的使用的。</p>\n<p>命令模式的缺点:<br>命令模式是对一些操作的封装，这就造成每执行一次操作都要调用一次命令对象，增加了系统的复杂度。</p>\n<h6 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h6><p>访问者模式(Visitor):针对于对象结构中的元素，定义在不改变该对象的前提下访问结构中元素的新方法。</p>\n<p><img src=\"/2022/09/07/about-design-model3/visitor-model.png\" alt=\"visitor-model\"></p>\n<h6 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h6><p>中介者模式(Mediator):通过中介者对象封装一系列对象之间的交互，使对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可改变对象之间的交互。</p>\n<p>(1)观察者模式与中介者模式的区别<br>相同点<br>都是通过消息的收发机制实现的<br>差异点<br>在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，他们之间信息交流依托于消息系统实现的解耦,需要写一个消息系统<br>中介者模式中消息的发送方只有一个，就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象(订阅者)才可订阅中介者的消息，当然你也可以看作是将消息系统封装在中介者对象内部，所以中介者对象只能是消息的发送者</p>\n<p><img src=\"/2022/09/07/about-design-model3/mediator-model.png\" alt=\"mediator-model\"></p>\n<h6 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h6><p>备忘录模式(Memento):在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部的状态以便日后对象使用或者对象恢复到以前的某个状态。</p>\n<p><img src=\"/2022/09/07/about-design-model3/cache-model.png\" alt=\"cache-model\"></p>\n<h6 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h6><p>迭代器模式(Iterator):在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。</p>\n<p><img src=\"/2022/09/07/about-design-model3/iterator-model.png\" alt=\"iterator-model\"></p>\n<h6 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h6><p>解释器模式(Interpreter):对于一种语言，给出其文法表示形式，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。</p>\n<p><img src=\"/2022/09/07/about-design-model3/explain-model-1.png\" alt=\"explain-model-1\"><br><img src=\"/2022/09/07/about-design-model3/explain-model-2.png\" alt=\"explain-model-2\"><br><img src=\"/2022/09/07/about-design-model3/explain-model-3.png\" alt=\"explain-model-3\"></p>\n<p>解释器即是对客户提出的需求，经过解析而形成的一个抽象解释程序。而是否可以应用解释器模式的一条重要准侧是<strong>能否根据需求解析出一套完成的语法规则,不论该语法规则简单或是复杂都是必须的</strong>。因为解释器要按照这套规则才能实现相应的功能。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"行为型设计模式\"><a href=\"#行为型设计模式\" class=\"headerlink\" title=\"行为型设计模式\"></a>行为型设计模式</h4><p>行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象,还涉及类或对象之间的交流模式并加以实现</p>\n<h6 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h6><p>模板方法模式(Template Method):父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时可重新定义算法中某些实现步骤。</p>\n<p>多用于归一化组件</p>\n<p><img src=\"/2022/09/07/about-design-model3/basic-model.png\" alt=\"basic-model\"><br><img src=\"/2022/09/07/about-design-model3/inherit-model.png\" alt=\"inherit-model\"><br><img src=\"/2022/09/07/about-design-model3/inherit-as-basic-model.png\" alt=\"inherit-as-basic-model\"></p>\n<h6 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h6><p>观察者模式(Observer):又被称作发布-订阅者模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。</p>\n<p>观察者对象包含：一个消息容器，订阅消息方法、取消订阅的消息方法、发送订阅的消息方法</p>\n<p><img src=\"/2022/09/07/about-design-model3/observer.png\" alt=\"observer\"><br><img src=\"/2022/09/07/about-design-model3/observer-regist.png\" alt=\"observer-regist\"><br><img src=\"/2022/09/07/about-design-model3/observer-fire.png\" alt=\"observer-fire\"><br><img src=\"/2022/09/07/about-design-model3/observer-remove.png\" alt=\"observer-remove\"></p>\n<p><img src=\"/2022/09/07/about-design-model3/regist-message.png\" alt=\"regist-message\"><br><img src=\"/2022/09/07/about-design-model3/regist-change-num.png\" alt=\"regist-change-num\"><br><img src=\"/2022/09/07/about-design-model3/add-message.png\" alt=\"add-message\"></p>\n<h6 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h6><p>状态模式(State):当一个对象的内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对象。</p>\n<p>状态模式简化了分支判断遍历逻辑</p>\n<p><img src=\"/2022/09/07/about-design-model3/vote-status.png\" alt=\"vote-status\"></p>\n<p>示例<br>思路：首先创建一个状态对象，内部保存状态变量，然后内部封装好每种,动作对应的状态，最后状态对象返回一个接口对象，它可以对内部的状态修改或者调用<br><img src=\"/2022/09/07/about-design-model3/marry-state.png\" alt=\"marry-state\"><br><img src=\"/2022/09/07/about-design-model3/marry-state1.png\" alt=\"marry-state1\"></p>\n<h6 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h6><p>策略模式(Strategy):将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。</p>\n<p><strong>与状态模式异同点</strong><br>相同点：结构上与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现对内部对象的调用<br>不同点：策略模式不需要管理状态、状态间没有依赖关系、策略之间可以相互替换、在策略对象内部保存的是相互独立的一些算法</p>\n<p><img src=\"/2022/09/07/about-design-model3/price-strategy.png\" alt=\"price-strategy\"></p>\n<p><strong>策略模式的优点</strong><br>第一，策略模式封装了一组代码簇，并且封装的代码相互之间独立，便于对算法的重复引用，提高了算法的复用率。<br>第二，策略模式与继承相比，在类的继承中继承的方法是被封装在类中，因此当需求很多算法时，就不得不创建出多种类，这样会导致算法与算法的使用者耦合在一起,不利于算法的独立演化，并且在类的外部改变类的算法难度也是极大的。<br>第三，同状态模式一样,策略模式也是一种优化分支判断语句的模式,采用策略模式对算法封装使得算法更利于维护。</p>\n<p><strong>策略模式的缺点</strong><br>由于选择哪种算法的决定权在用户，所以对用户来说就必须了解每种算法的实现,增加了用户对策略对象的使用成本。<br>由于每种算法间相互独立，这样对于一些复杂的算法处理相同逻辑的部分无法实现共享，这就会造成一些资源的浪费</p>\n<p><strong>优化分支语句的模式</strong><br>工厂方法模式，状态模式与策略模式<br>工厂方法模式：一种创建型模式，最终目的是创建对象。<br>状态模式是行为型模式，不过在状态模式中，其核心是对状态的控制来决定表现行为，所以状态之间通常是不能相互替代的，否则将产生不同的行为结果。<br>策略模式是行为型模式，核心是算法，由于每种算法要处理的业务逻辑相同，因此他们可以相互替换，当然策略模式并不关心使用者环境，因为同一种策略模式最终产出的结果是一定的。</p>\n<h6 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h6><p>职责链模式(Chain of Responsibility):解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，直到最后一个对象完成请求的处理。</p>\n<p>示例<br><img src=\"/2022/09/07/about-design-model3/send-data.png\" alt=\"send-data\"><br><img src=\"/2022/09/07/about-design-model3/deal-data.png\" alt=\"deal-data\"><br><img src=\"/2022/09/07/about-design-model3/create-component.png\" alt=\"create-component\"></p>\n<p><strong>缺点</strong><br>职责链上的每一个对象不一定都能参与请求的传递，有时会造成一丝资源的浪费<br>多个对象参与请求的传递，在代码调试时增加了调试成本</p>\n<h6 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h6><p>命令模式(Command):将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。<br>命令模式常用于解耦<br><img src=\"/2022/09/07/about-design-model3/command-model-1.png\" alt=\"command-model-1\"><br><img src=\"/2022/09/07/about-design-model3/command-model-2.png\" alt=\"command-model-2\"><br><img src=\"/2022/09/07/about-design-model3/command-model-3.png\" alt=\"command-model-3\"></p>\n<p>命令模式的优点:<br>解决命令使用者之间的耦合。新的命令很容易加入到命令系统中，供使用者使用。<br>命令的使用具有一致性，多数的命令在一定程度上是简化操作方法的使用的。</p>\n<p>命令模式的缺点:<br>命令模式是对一些操作的封装，这就造成每执行一次操作都要调用一次命令对象，增加了系统的复杂度。</p>\n<h6 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h6><p>访问者模式(Visitor):针对于对象结构中的元素，定义在不改变该对象的前提下访问结构中元素的新方法。</p>\n<p><img src=\"/2022/09/07/about-design-model3/visitor-model.png\" alt=\"visitor-model\"></p>\n<h6 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h6><p>中介者模式(Mediator):通过中介者对象封装一系列对象之间的交互，使对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可改变对象之间的交互。</p>\n<p>(1)观察者模式与中介者模式的区别<br>相同点<br>都是通过消息的收发机制实现的<br>差异点<br>在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，他们之间信息交流依托于消息系统实现的解耦,需要写一个消息系统<br>中介者模式中消息的发送方只有一个，就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象(订阅者)才可订阅中介者的消息，当然你也可以看作是将消息系统封装在中介者对象内部，所以中介者对象只能是消息的发送者</p>\n<p><img src=\"/2022/09/07/about-design-model3/mediator-model.png\" alt=\"mediator-model\"></p>\n<h6 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h6><p>备忘录模式(Memento):在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部的状态以便日后对象使用或者对象恢复到以前的某个状态。</p>\n<p><img src=\"/2022/09/07/about-design-model3/cache-model.png\" alt=\"cache-model\"></p>\n<h6 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h6><p>迭代器模式(Iterator):在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。</p>\n<p><img src=\"/2022/09/07/about-design-model3/iterator-model.png\" alt=\"iterator-model\"></p>\n<h6 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h6><p>解释器模式(Interpreter):对于一种语言，给出其文法表示形式，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。</p>\n<p><img src=\"/2022/09/07/about-design-model3/explain-model-1.png\" alt=\"explain-model-1\"><br><img src=\"/2022/09/07/about-design-model3/explain-model-2.png\" alt=\"explain-model-2\"><br><img src=\"/2022/09/07/about-design-model3/explain-model-3.png\" alt=\"explain-model-3\"></p>\n<p>解释器即是对客户提出的需求，经过解析而形成的一个抽象解释程序。而是否可以应用解释器模式的一条重要准侧是<strong>能否根据需求解析出一套完成的语法规则,不论该语法规则简单或是复杂都是必须的</strong>。因为解释器要按照这套规则才能实现相应的功能。</p>\n"},{"title":"javascript DOM编程艺术阅读笔记","date":"2022-07-31T05:42:45.000Z","_content":"\n#### JavaScript简史\n1、DOM\nDOM是一套对文档的内容进行抽象和概念化的方法。\n\n第0级DOM(DOM Level 0)\n试验性质的初级DOM，在还未形成统一标准的初期阶段，“第0级DOM”的常见用途是翻转图片和验证表单数据。\n\n第1级DMO(DOM Level 1)\nNetscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”(DOM Level 1) 。\n\n2、浏览器战争\n2.1 DHTML\nDHTML是“Dynamic HTML”(动态HTML)的简称。DHTML并不是一项新技术，而是描述HTML、CSS和.JavaScript技术组合的术语。背后含义:\n(1)利用HTML把网页标记为各种元素;\n(2)利用CSS设置元素样式和它们的显示位置;\n(3)利用JavaScript实时地操控页面和改变样式。\n\n#### JavaScript语法\n循环语句\n1、while循环\n```javascript\nwhile (condition){\n  statements;\n}\n```\ndo...while循环\n```javascript\ndo {\n  statements;\n} while (condition);\n```\n  2、for循环\n```javascript\nfor (initial condition; test condition; alter condition){\n  statements;\n}\n```\n\n函数\n1、变量的作用域\n全局变量(global variable)可以在脚本中的任何位置被引用。一旦你在某个脚本里声明了一个全局变量，就可以从这个脚本中的任何位置―一包括函数内部—―引用它。全局变量的作用域是整个脚本。\n局部变量(local variable）只存在于声明它的那个函数的内部，在那个函数的外部是无法引用它的。局部变量的作用域仅限于某个特定的函数。\n\n对象\n对象（object）是一种非常重要的数据类型，但此前我们还没有认真对待它。对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性（property)和方法(method) :\n-属性是隶属于某个特定对象的变量\n-方法是只有某个特定对象才能调用的函数\n对象就是由一些属性和方法组合在一起而构成的一个数据实体\n\n1、用户定义对象(user-defined object)\n由程序员自行创建的对象\n\n2、内建对象(native object)\nJavaScript提供了一系列预先定义好的对象，这些可以拿来就用的对象称为内建对象( native object) \nArray、Math、Date等\n\n3、宿主对象(host object)\n由浏览器提供的预定义对象被称为宿主对象(host object ) \n宿主对象包括document、Form、Image和Element等。我们可以通过这些对象获得关于网页上表单、图像和各种表单元素等信息\n\n#### DOM\n1、文档:DOM中的'D'\n如果没有document(文档），DOM也就无从谈起。当创建了一个网页并把它加载到Web浏览器中时，DOM就在幕后悄然而生。它把你编写的网页文档转换为一个文档对象\n\n2、对象:DOM中的'O'\n如上对象\n\n3、模型:DOM中的'M'\nDOM中的“M”代表着“Model”(模型)，但说它代表着“Map”(地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表着一列真正的火车、一张城市街道图代表着一个实际存在的城市那样，DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型)，可以通过JavaScript去读取这张地图\n\n4、节点\n(1)元素节点\n(2)文本节点\n(3)属性节点\n(4)CSS\n(5)获取元素\n-getElementById 返回一个对象\n-getElementsByTagName 返回一个对象数组，使用通配符（*）获取文档中总共有多少元素节点\n```javascript\nvar shopping = document.getElementById(\"purchases\") ;\nvar items = shopping.getElementsByTagName(\"*\") ;\n```\n-getElementsByClassName 返回一个对象数组\n使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可\n注意，即使在元素的class属性中，类名的顺序和参数中指定的不一样，也照样会匹配该元素。不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。\n```javascript\nvar shopping = document.getElementById(\"purchases\");\nvar sales = shopping.getElementsByClassName(\"sale\");\n```\n\n5、获取和设置属性\n(1)getAttribute 只能通过元素节点调用\n(2)setAttribute 只能通过元素节点调用，修改属性值\n细节:通过setAttribute对文档做出修改后，在通过浏览器的viewsource(查看源代码）选项去查看文档的源代码时看到的仍将是改变前的属性值，也就是说，setAttribute做出的修改不会反映在文档本身的源代码里。这种“表里不一”的现象源自DOM的工作模式:先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。这正是DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。\n\n#### 案例研究：JavaScript图片库\nDOM是一种适用于多种环境和多种程序设计语言的通用型API。如果想把DOM技巧运用在Web浏览器以外的应用环境里，严格遵守“第1级DOM”能够避免与兼容性有关的任何问题。\n1、childNodes属性 用来获取任何一个元素的所有子元素\n2、nodeType属性 共有12中可取值\n以下3种具有实用价值：\n-元素节点的nodeType属性值是1\n-属性节点的nodeType属性值是2\n-文本节点的nodeType属性值是3\n3、nodeValue属性 得到和设置节点的值\n4、firstChild和lastChild\n\n#### 最佳实践\n1、平稳退化\n平稳退化(graceful degradation)，虽然某些功能无法使用，但最基本的操作仍能顺利完成\n2、“javascript:”伪协议\n“真”协议用来在因特网上的计算机之间传输数据包，如HTTP协议(http://) 、FTP协议（ftp://)等，伪协议则是一种非标准化的协议\n“javascript:”伪协议让我们通过一个链接来调用JavaScript函数\n```javascript\n<a href=\"javascript:popUp('http://www.example.com/');\">Example</a>\n```\n3、CSS\n结构与样式分离\n渐进增强，用一些额外的信息层去包裹原始数据\n4、分离javascript\n5、向后兼容\n(1)对象检测：检测浏览器对JavaScript的支持程度\n(2)浏览器嗅探技术\n通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。\n首先，浏览器有时会“撒谎”。因为历史原因，有些浏览器会把自己报告为另外一种浏览器，还有一些浏览器允许用户任意修改这些信息\n其次，为了适用于多种不同的浏览器，浏览器嗅探脚本会变得越来越复杂。如果想让浏览器嗅探脚本能够跨平台工作，就必须测试所有可能出现的供应商和版本号组合。这是一个无穷尽的任务，测试的组合情况越多，代码就越复杂和冗长\n最后，许多浏览器嗅探脚本在进行这类测试时要求浏览器的版本号必须得到精确的匹配。因此，每当市场上出现新版本时，就不得不修改这些脚本\n6、性能考虑\n(1)尽量少访问DOM和尽量减少标记\n(2)合并和放置脚本\n多个脚本合并，减少请求次数\n把所有/<script/>标签都放到文档的末尾，/</body/>标记之前，就可以让页面变得更快\n(3)压缩脚本\n压缩工具：\n-Douglas Crockford的JSMin (http://www.crockford.com/javascript/jsmin.html)\n-雅虎的YUI Compressor (http://developer.yahoo.com/yui/compressor)\n-谷歌的Closure Compiler (http://closure-compiler.appspot.com/home)\n\n#### 动态创建标记\n1、document.write & innerHTML属性\n2、DOM方法\n(1)createElement\n(1)appendChild\n(1)createTextNode\n(1)insertBefore\n3、Ajax\n(1)XMLHttpRequest对象\n```javascript\nfunction getHTTPObject () {\n  if (typeof XMLHttpRequest == \"undefined\") xMLHttpRequest =function () {\n    try { return new Activexobject ( \"Msxm12.XMLHTTP.6.0\"); )catch (e) { }\n    try { return new ActivexObject (\"Msxm12.XMLHTTP.3.0\");)catch (e) { }\n    try { return new ActivexObject ( \"Msxm12.XMLHTTP\"); )catch (e) { }\n    return false;\n  }\n  return new XMLHttpRequest ( ) ;\n}\n```\n\nXHTML5\n本质上是使用严格的XML规则编写的HTML5。从技术角度说，Web浏览器应该将任何XHTML5文档都视为XML文档，而不是HTML文档。而在现实中，你还得在文档的头部发送正确的MIME类型，即application/xhtml+xml。有些浏览器不认识这个MIME类型，因而一般要在服务器端对浏览器进行探查后再发送。否则最坏的情况，页面很可能根本不会在浏览器中呈现。因此，绝大多数XHTML页面仍然是以HTML类型发送的。\n\n#### CSS-DOM\n1、三位一体的网页\n(1)结构层\n网页的结构层(structural layer)由HTML或XHTML之类的标记语言负责创建\n(2)表示层\n表示层(presentation layer)由CSS负责完成。CSS描述页面内容应该如何呈现\n(3)行为层\n行为层(behavior layer)负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM主宰的领域\n(4)分离\n-使用(X)HTML去搭建文档的结构\n-使用CSS去设置文档的呈现效果\n-使用DOM脚本去实现文档的行为\n2、style属性\n在外部样式表里声明的样式不会进入style对象，在文档的<head>部分里声明的样式也是如此\nstyle对象只包含在HTML代码里用style属性声明的样式\n3、何时该使用DOM脚本设置样式\n(1)根据元素在节点树里的位置来设置样式\n(2)根据某种条件反复设置某种样式\n(3)响应事件\n4、className属性\n\n#### HTML5\n1、canvas\n2、video和audio\n\n疑问点：\n1、遇到的知识点觉得掌握了，没有记录，后面又忘了\n重要的知识点都记录，不管有没有掌握\n2、任务拆分评估时间不准\n更深入的了解项目代码和业务逻辑\n3、看书遇到问题的时候，先记录继续阅读，还是先解决问题在阅读？\n先记录继续阅读，看后面是否有解答\n4、原型链\n不建议研究__proto__这种知识点，可以看看es6中新的关于原型链的继承\n理解知识的时候，不要添加太多概念，避免混乱","source":"_posts/about-dom.md","raw":"---\ntitle: javascript DOM编程艺术阅读笔记\ndate: 2022-07-31 13:42:45\ntags:\n---\n\n#### JavaScript简史\n1、DOM\nDOM是一套对文档的内容进行抽象和概念化的方法。\n\n第0级DOM(DOM Level 0)\n试验性质的初级DOM，在还未形成统一标准的初期阶段，“第0级DOM”的常见用途是翻转图片和验证表单数据。\n\n第1级DMO(DOM Level 1)\nNetscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”(DOM Level 1) 。\n\n2、浏览器战争\n2.1 DHTML\nDHTML是“Dynamic HTML”(动态HTML)的简称。DHTML并不是一项新技术，而是描述HTML、CSS和.JavaScript技术组合的术语。背后含义:\n(1)利用HTML把网页标记为各种元素;\n(2)利用CSS设置元素样式和它们的显示位置;\n(3)利用JavaScript实时地操控页面和改变样式。\n\n#### JavaScript语法\n循环语句\n1、while循环\n```javascript\nwhile (condition){\n  statements;\n}\n```\ndo...while循环\n```javascript\ndo {\n  statements;\n} while (condition);\n```\n  2、for循环\n```javascript\nfor (initial condition; test condition; alter condition){\n  statements;\n}\n```\n\n函数\n1、变量的作用域\n全局变量(global variable)可以在脚本中的任何位置被引用。一旦你在某个脚本里声明了一个全局变量，就可以从这个脚本中的任何位置―一包括函数内部—―引用它。全局变量的作用域是整个脚本。\n局部变量(local variable）只存在于声明它的那个函数的内部，在那个函数的外部是无法引用它的。局部变量的作用域仅限于某个特定的函数。\n\n对象\n对象（object）是一种非常重要的数据类型，但此前我们还没有认真对待它。对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性（property)和方法(method) :\n-属性是隶属于某个特定对象的变量\n-方法是只有某个特定对象才能调用的函数\n对象就是由一些属性和方法组合在一起而构成的一个数据实体\n\n1、用户定义对象(user-defined object)\n由程序员自行创建的对象\n\n2、内建对象(native object)\nJavaScript提供了一系列预先定义好的对象，这些可以拿来就用的对象称为内建对象( native object) \nArray、Math、Date等\n\n3、宿主对象(host object)\n由浏览器提供的预定义对象被称为宿主对象(host object ) \n宿主对象包括document、Form、Image和Element等。我们可以通过这些对象获得关于网页上表单、图像和各种表单元素等信息\n\n#### DOM\n1、文档:DOM中的'D'\n如果没有document(文档），DOM也就无从谈起。当创建了一个网页并把它加载到Web浏览器中时，DOM就在幕后悄然而生。它把你编写的网页文档转换为一个文档对象\n\n2、对象:DOM中的'O'\n如上对象\n\n3、模型:DOM中的'M'\nDOM中的“M”代表着“Model”(模型)，但说它代表着“Map”(地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表着一列真正的火车、一张城市街道图代表着一个实际存在的城市那样，DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型)，可以通过JavaScript去读取这张地图\n\n4、节点\n(1)元素节点\n(2)文本节点\n(3)属性节点\n(4)CSS\n(5)获取元素\n-getElementById 返回一个对象\n-getElementsByTagName 返回一个对象数组，使用通配符（*）获取文档中总共有多少元素节点\n```javascript\nvar shopping = document.getElementById(\"purchases\") ;\nvar items = shopping.getElementsByTagName(\"*\") ;\n```\n-getElementsByClassName 返回一个对象数组\n使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可\n注意，即使在元素的class属性中，类名的顺序和参数中指定的不一样，也照样会匹配该元素。不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。\n```javascript\nvar shopping = document.getElementById(\"purchases\");\nvar sales = shopping.getElementsByClassName(\"sale\");\n```\n\n5、获取和设置属性\n(1)getAttribute 只能通过元素节点调用\n(2)setAttribute 只能通过元素节点调用，修改属性值\n细节:通过setAttribute对文档做出修改后，在通过浏览器的viewsource(查看源代码）选项去查看文档的源代码时看到的仍将是改变前的属性值，也就是说，setAttribute做出的修改不会反映在文档本身的源代码里。这种“表里不一”的现象源自DOM的工作模式:先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。这正是DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。\n\n#### 案例研究：JavaScript图片库\nDOM是一种适用于多种环境和多种程序设计语言的通用型API。如果想把DOM技巧运用在Web浏览器以外的应用环境里，严格遵守“第1级DOM”能够避免与兼容性有关的任何问题。\n1、childNodes属性 用来获取任何一个元素的所有子元素\n2、nodeType属性 共有12中可取值\n以下3种具有实用价值：\n-元素节点的nodeType属性值是1\n-属性节点的nodeType属性值是2\n-文本节点的nodeType属性值是3\n3、nodeValue属性 得到和设置节点的值\n4、firstChild和lastChild\n\n#### 最佳实践\n1、平稳退化\n平稳退化(graceful degradation)，虽然某些功能无法使用，但最基本的操作仍能顺利完成\n2、“javascript:”伪协议\n“真”协议用来在因特网上的计算机之间传输数据包，如HTTP协议(http://) 、FTP协议（ftp://)等，伪协议则是一种非标准化的协议\n“javascript:”伪协议让我们通过一个链接来调用JavaScript函数\n```javascript\n<a href=\"javascript:popUp('http://www.example.com/');\">Example</a>\n```\n3、CSS\n结构与样式分离\n渐进增强，用一些额外的信息层去包裹原始数据\n4、分离javascript\n5、向后兼容\n(1)对象检测：检测浏览器对JavaScript的支持程度\n(2)浏览器嗅探技术\n通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。\n首先，浏览器有时会“撒谎”。因为历史原因，有些浏览器会把自己报告为另外一种浏览器，还有一些浏览器允许用户任意修改这些信息\n其次，为了适用于多种不同的浏览器，浏览器嗅探脚本会变得越来越复杂。如果想让浏览器嗅探脚本能够跨平台工作，就必须测试所有可能出现的供应商和版本号组合。这是一个无穷尽的任务，测试的组合情况越多，代码就越复杂和冗长\n最后，许多浏览器嗅探脚本在进行这类测试时要求浏览器的版本号必须得到精确的匹配。因此，每当市场上出现新版本时，就不得不修改这些脚本\n6、性能考虑\n(1)尽量少访问DOM和尽量减少标记\n(2)合并和放置脚本\n多个脚本合并，减少请求次数\n把所有/<script/>标签都放到文档的末尾，/</body/>标记之前，就可以让页面变得更快\n(3)压缩脚本\n压缩工具：\n-Douglas Crockford的JSMin (http://www.crockford.com/javascript/jsmin.html)\n-雅虎的YUI Compressor (http://developer.yahoo.com/yui/compressor)\n-谷歌的Closure Compiler (http://closure-compiler.appspot.com/home)\n\n#### 动态创建标记\n1、document.write & innerHTML属性\n2、DOM方法\n(1)createElement\n(1)appendChild\n(1)createTextNode\n(1)insertBefore\n3、Ajax\n(1)XMLHttpRequest对象\n```javascript\nfunction getHTTPObject () {\n  if (typeof XMLHttpRequest == \"undefined\") xMLHttpRequest =function () {\n    try { return new Activexobject ( \"Msxm12.XMLHTTP.6.0\"); )catch (e) { }\n    try { return new ActivexObject (\"Msxm12.XMLHTTP.3.0\");)catch (e) { }\n    try { return new ActivexObject ( \"Msxm12.XMLHTTP\"); )catch (e) { }\n    return false;\n  }\n  return new XMLHttpRequest ( ) ;\n}\n```\n\nXHTML5\n本质上是使用严格的XML规则编写的HTML5。从技术角度说，Web浏览器应该将任何XHTML5文档都视为XML文档，而不是HTML文档。而在现实中，你还得在文档的头部发送正确的MIME类型，即application/xhtml+xml。有些浏览器不认识这个MIME类型，因而一般要在服务器端对浏览器进行探查后再发送。否则最坏的情况，页面很可能根本不会在浏览器中呈现。因此，绝大多数XHTML页面仍然是以HTML类型发送的。\n\n#### CSS-DOM\n1、三位一体的网页\n(1)结构层\n网页的结构层(structural layer)由HTML或XHTML之类的标记语言负责创建\n(2)表示层\n表示层(presentation layer)由CSS负责完成。CSS描述页面内容应该如何呈现\n(3)行为层\n行为层(behavior layer)负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM主宰的领域\n(4)分离\n-使用(X)HTML去搭建文档的结构\n-使用CSS去设置文档的呈现效果\n-使用DOM脚本去实现文档的行为\n2、style属性\n在外部样式表里声明的样式不会进入style对象，在文档的<head>部分里声明的样式也是如此\nstyle对象只包含在HTML代码里用style属性声明的样式\n3、何时该使用DOM脚本设置样式\n(1)根据元素在节点树里的位置来设置样式\n(2)根据某种条件反复设置某种样式\n(3)响应事件\n4、className属性\n\n#### HTML5\n1、canvas\n2、video和audio\n\n疑问点：\n1、遇到的知识点觉得掌握了，没有记录，后面又忘了\n重要的知识点都记录，不管有没有掌握\n2、任务拆分评估时间不准\n更深入的了解项目代码和业务逻辑\n3、看书遇到问题的时候，先记录继续阅读，还是先解决问题在阅读？\n先记录继续阅读，看后面是否有解答\n4、原型链\n不建议研究__proto__这种知识点，可以看看es6中新的关于原型链的继承\n理解知识的时候，不要添加太多概念，避免混乱","slug":"about-dom","published":1,"updated":"2022-08-30T10:54:33.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcb000ajktt7xtaeaqd","content":"<h4 id=\"JavaScript简史\"><a href=\"#JavaScript简史\" class=\"headerlink\" title=\"JavaScript简史\"></a>JavaScript简史</h4><p>1、DOM<br>DOM是一套对文档的内容进行抽象和概念化的方法。</p>\n<p>第0级DOM(DOM Level 0)<br>试验性质的初级DOM，在还未形成统一标准的初期阶段，“第0级DOM”的常见用途是翻转图片和验证表单数据。</p>\n<p>第1级DMO(DOM Level 1)<br>Netscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”(DOM Level 1) 。</p>\n<p>2、浏览器战争<br>2.1 DHTML<br>DHTML是“Dynamic HTML”(动态HTML)的简称。DHTML并不是一项新技术，而是描述HTML、CSS和.JavaScript技术组合的术语。背后含义:<br>(1)利用HTML把网页标记为各种元素;<br>(2)利用CSS设置元素样式和它们的显示位置;<br>(3)利用JavaScript实时地操控页面和改变样式。</p>\n<h4 id=\"JavaScript语法\"><a href=\"#JavaScript语法\" class=\"headerlink\" title=\"JavaScript语法\"></a>JavaScript语法</h4><p>循环语句<br>1、while循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (condition)&#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>do…while循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (condition);</span><br></pre></td></tr></table></figure>\n<p>  2、for循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (initial condition; test condition; alter condition)&#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数<br>1、变量的作用域<br>全局变量(global variable)可以在脚本中的任何位置被引用。一旦你在某个脚本里声明了一个全局变量，就可以从这个脚本中的任何位置―一包括函数内部—―引用它。全局变量的作用域是整个脚本。<br>局部变量(local variable）只存在于声明它的那个函数的内部，在那个函数的外部是无法引用它的。局部变量的作用域仅限于某个特定的函数。</p>\n<p>对象<br>对象（object）是一种非常重要的数据类型，但此前我们还没有认真对待它。对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性（property)和方法(method) :<br>-属性是隶属于某个特定对象的变量<br>-方法是只有某个特定对象才能调用的函数<br>对象就是由一些属性和方法组合在一起而构成的一个数据实体</p>\n<p>1、用户定义对象(user-defined object)<br>由程序员自行创建的对象</p>\n<p>2、内建对象(native object)<br>JavaScript提供了一系列预先定义好的对象，这些可以拿来就用的对象称为内建对象( native object)<br>Array、Math、Date等</p>\n<p>3、宿主对象(host object)<br>由浏览器提供的预定义对象被称为宿主对象(host object )<br>宿主对象包括document、Form、Image和Element等。我们可以通过这些对象获得关于网页上表单、图像和各种表单元素等信息</p>\n<h4 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h4><p>1、文档:DOM中的’D’<br>如果没有document(文档），DOM也就无从谈起。当创建了一个网页并把它加载到Web浏览器中时，DOM就在幕后悄然而生。它把你编写的网页文档转换为一个文档对象</p>\n<p>2、对象:DOM中的’O’<br>如上对象</p>\n<p>3、模型:DOM中的’M’<br>DOM中的“M”代表着“Model”(模型)，但说它代表着“Map”(地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表着一列真正的火车、一张城市街道图代表着一个实际存在的城市那样，DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型)，可以通过JavaScript去读取这张地图</p>\n<p>4、节点<br>(1)元素节点<br>(2)文本节点<br>(3)属性节点<br>(4)CSS<br>(5)获取元素<br>-getElementById 返回一个对象<br>-getElementsByTagName 返回一个对象数组，使用通配符（*）获取文档中总共有多少元素节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shopping = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;purchases&quot;</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> items = shopping.getElementsByTagName(<span class=\"string\">&quot;*&quot;</span>) ;</span><br></pre></td></tr></table></figure>\n<p>-getElementsByClassName 返回一个对象数组<br>使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可<br>注意，即使在元素的class属性中，类名的顺序和参数中指定的不一样，也照样会匹配该元素。不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shopping = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;purchases&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sales = shopping.getElementsByClassName(<span class=\"string\">&quot;sale&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>5、获取和设置属性<br>(1)getAttribute 只能通过元素节点调用<br>(2)setAttribute 只能通过元素节点调用，修改属性值<br>细节:通过setAttribute对文档做出修改后，在通过浏览器的viewsource(查看源代码）选项去查看文档的源代码时看到的仍将是改变前的属性值，也就是说，setAttribute做出的修改不会反映在文档本身的源代码里。这种“表里不一”的现象源自DOM的工作模式:先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。这正是DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。</p>\n<h4 id=\"案例研究：JavaScript图片库\"><a href=\"#案例研究：JavaScript图片库\" class=\"headerlink\" title=\"案例研究：JavaScript图片库\"></a>案例研究：JavaScript图片库</h4><p>DOM是一种适用于多种环境和多种程序设计语言的通用型API。如果想把DOM技巧运用在Web浏览器以外的应用环境里，严格遵守“第1级DOM”能够避免与兼容性有关的任何问题。<br>1、childNodes属性 用来获取任何一个元素的所有子元素<br>2、nodeType属性 共有12中可取值<br>以下3种具有实用价值：<br>-元素节点的nodeType属性值是1<br>-属性节点的nodeType属性值是2<br>-文本节点的nodeType属性值是3<br>3、nodeValue属性 得到和设置节点的值<br>4、firstChild和lastChild</p>\n<h4 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h4><p>1、平稳退化<br>平稳退化(graceful degradation)，虽然某些功能无法使用，但最基本的操作仍能顺利完成<br>2、“javascript:”伪协议<br>“真”协议用来在因特网上的计算机之间传输数据包，如HTTP协议(http://) 、FTP协议（ftp://)等，伪协议则是一种非标准化的协议<br>“javascript:”伪协议让我们通过一个链接来调用JavaScript函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">&quot;javascript:popUp(&#x27;http://www.example.com/&#x27;);&quot;</span>&gt;Example&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>3、CSS<br>结构与样式分离<br>渐进增强，用一些额外的信息层去包裹原始数据<br>4、分离javascript<br>5、向后兼容<br>(1)对象检测：检测浏览器对JavaScript的支持程度<br>(2)浏览器嗅探技术<br>通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。<br>首先，浏览器有时会“撒谎”。因为历史原因，有些浏览器会把自己报告为另外一种浏览器，还有一些浏览器允许用户任意修改这些信息<br>其次，为了适用于多种不同的浏览器，浏览器嗅探脚本会变得越来越复杂。如果想让浏览器嗅探脚本能够跨平台工作，就必须测试所有可能出现的供应商和版本号组合。这是一个无穷尽的任务，测试的组合情况越多，代码就越复杂和冗长<br>最后，许多浏览器嗅探脚本在进行这类测试时要求浏览器的版本号必须得到精确的匹配。因此，每当市场上出现新版本时，就不得不修改这些脚本<br>6、性能考虑<br>(1)尽量少访问DOM和尽量减少标记<br>(2)合并和放置脚本<br>多个脚本合并，减少请求次数<br>把所有/<script>标签都放到文档的末尾，/&lt;/body/&gt;标记之前，就可以让页面变得更快<br>(3)压缩脚本<br>压缩工具：<br>-Douglas Crockford的JSMin (<a href=\"http://www.crockford.com/javascript/jsmin.html\">http://www.crockford.com/javascript/jsmin.html</a>)<br>-雅虎的YUI Compressor (<a href=\"http://developer.yahoo.com/yui/compressor\">http://developer.yahoo.com/yui/compressor</a>)<br>-谷歌的Closure Compiler (<a href=\"http://closure-compiler.appspot.com/home\">http://closure-compiler.appspot.com/home</a>)</p>\n<h4 id=\"动态创建标记\"><a href=\"#动态创建标记\" class=\"headerlink\" title=\"动态创建标记\"></a>动态创建标记</h4><p>1、document.write &amp; innerHTML属性<br>2、DOM方法<br>(1)createElement<br>(1)appendChild<br>(1)createTextNode<br>(1)insertBefore<br>3、Ajax<br>(1)XMLHttpRequest对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHTTPObject</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> XMLHttpRequest == <span class=\"string\">&quot;undefined&quot;</span>) xMLHttpRequest =<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Activexobject ( <span class=\"string\">&quot;Msxm12.XMLHTTP.6.0&quot;</span>); )<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivexObject (<span class=\"string\">&quot;Msxm12.XMLHTTP.3.0&quot;</span>);)<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivexObject ( <span class=\"string\">&quot;Msxm12.XMLHTTP&quot;</span>); )<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XMLHttpRequest ( ) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>XHTML5<br>本质上是使用严格的XML规则编写的HTML5。从技术角度说，Web浏览器应该将任何XHTML5文档都视为XML文档，而不是HTML文档。而在现实中，你还得在文档的头部发送正确的MIME类型，即application/xhtml+xml。有些浏览器不认识这个MIME类型，因而一般要在服务器端对浏览器进行探查后再发送。否则最坏的情况，页面很可能根本不会在浏览器中呈现。因此，绝大多数XHTML页面仍然是以HTML类型发送的。</p>\n<h4 id=\"CSS-DOM\"><a href=\"#CSS-DOM\" class=\"headerlink\" title=\"CSS-DOM\"></a>CSS-DOM</h4><p>1、三位一体的网页<br>(1)结构层<br>网页的结构层(structural layer)由HTML或XHTML之类的标记语言负责创建<br>(2)表示层<br>表示层(presentation layer)由CSS负责完成。CSS描述页面内容应该如何呈现<br>(3)行为层<br>行为层(behavior layer)负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM主宰的领域<br>(4)分离<br>-使用(X)HTML去搭建文档的结构<br>-使用CSS去设置文档的呈现效果<br>-使用DOM脚本去实现文档的行为<br>2、style属性<br>在外部样式表里声明的样式不会进入style对象，在文档的<head>部分里声明的样式也是如此<br>style对象只包含在HTML代码里用style属性声明的样式<br>3、何时该使用DOM脚本设置样式<br>(1)根据元素在节点树里的位置来设置样式<br>(2)根据某种条件反复设置某种样式<br>(3)响应事件<br>4、className属性</p>\n<h4 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h4><p>1、canvas<br>2、video和audio</p>\n<p>疑问点：<br>1、遇到的知识点觉得掌握了，没有记录，后面又忘了<br>重要的知识点都记录，不管有没有掌握<br>2、任务拆分评估时间不准<br>更深入的了解项目代码和业务逻辑<br>3、看书遇到问题的时候，先记录继续阅读，还是先解决问题在阅读？<br>先记录继续阅读，看后面是否有解答<br>4、原型链<br>不建议研究__proto__这种知识点，可以看看es6中新的关于原型链的继承<br>理解知识的时候，不要添加太多概念，避免混乱</p>\n</script></p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"JavaScript简史\"><a href=\"#JavaScript简史\" class=\"headerlink\" title=\"JavaScript简史\"></a>JavaScript简史</h4><p>1、DOM<br>DOM是一套对文档的内容进行抽象和概念化的方法。</p>\n<p>第0级DOM(DOM Level 0)<br>试验性质的初级DOM，在还未形成统一标准的初期阶段，“第0级DOM”的常见用途是翻转图片和验证表单数据。</p>\n<p>第1级DMO(DOM Level 1)<br>Netscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”(DOM Level 1) 。</p>\n<p>2、浏览器战争<br>2.1 DHTML<br>DHTML是“Dynamic HTML”(动态HTML)的简称。DHTML并不是一项新技术，而是描述HTML、CSS和.JavaScript技术组合的术语。背后含义:<br>(1)利用HTML把网页标记为各种元素;<br>(2)利用CSS设置元素样式和它们的显示位置;<br>(3)利用JavaScript实时地操控页面和改变样式。</p>\n<h4 id=\"JavaScript语法\"><a href=\"#JavaScript语法\" class=\"headerlink\" title=\"JavaScript语法\"></a>JavaScript语法</h4><p>循环语句<br>1、while循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (condition)&#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>do…while循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (condition);</span><br></pre></td></tr></table></figure>\n<p>  2、for循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (initial condition; test condition; alter condition)&#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数<br>1、变量的作用域<br>全局变量(global variable)可以在脚本中的任何位置被引用。一旦你在某个脚本里声明了一个全局变量，就可以从这个脚本中的任何位置―一包括函数内部—―引用它。全局变量的作用域是整个脚本。<br>局部变量(local variable）只存在于声明它的那个函数的内部，在那个函数的外部是无法引用它的。局部变量的作用域仅限于某个特定的函数。</p>\n<p>对象<br>对象（object）是一种非常重要的数据类型，但此前我们还没有认真对待它。对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性（property)和方法(method) :<br>-属性是隶属于某个特定对象的变量<br>-方法是只有某个特定对象才能调用的函数<br>对象就是由一些属性和方法组合在一起而构成的一个数据实体</p>\n<p>1、用户定义对象(user-defined object)<br>由程序员自行创建的对象</p>\n<p>2、内建对象(native object)<br>JavaScript提供了一系列预先定义好的对象，这些可以拿来就用的对象称为内建对象( native object)<br>Array、Math、Date等</p>\n<p>3、宿主对象(host object)<br>由浏览器提供的预定义对象被称为宿主对象(host object )<br>宿主对象包括document、Form、Image和Element等。我们可以通过这些对象获得关于网页上表单、图像和各种表单元素等信息</p>\n<h4 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h4><p>1、文档:DOM中的’D’<br>如果没有document(文档），DOM也就无从谈起。当创建了一个网页并把它加载到Web浏览器中时，DOM就在幕后悄然而生。它把你编写的网页文档转换为一个文档对象</p>\n<p>2、对象:DOM中的’O’<br>如上对象</p>\n<p>3、模型:DOM中的’M’<br>DOM中的“M”代表着“Model”(模型)，但说它代表着“Map”(地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表着一列真正的火车、一张城市街道图代表着一个实际存在的城市那样，DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型)，可以通过JavaScript去读取这张地图</p>\n<p>4、节点<br>(1)元素节点<br>(2)文本节点<br>(3)属性节点<br>(4)CSS<br>(5)获取元素<br>-getElementById 返回一个对象<br>-getElementsByTagName 返回一个对象数组，使用通配符（*）获取文档中总共有多少元素节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shopping = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;purchases&quot;</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> items = shopping.getElementsByTagName(<span class=\"string\">&quot;*&quot;</span>) ;</span><br></pre></td></tr></table></figure>\n<p>-getElementsByClassName 返回一个对象数组<br>使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可<br>注意，即使在元素的class属性中，类名的顺序和参数中指定的不一样，也照样会匹配该元素。不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shopping = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;purchases&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sales = shopping.getElementsByClassName(<span class=\"string\">&quot;sale&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>5、获取和设置属性<br>(1)getAttribute 只能通过元素节点调用<br>(2)setAttribute 只能通过元素节点调用，修改属性值<br>细节:通过setAttribute对文档做出修改后，在通过浏览器的viewsource(查看源代码）选项去查看文档的源代码时看到的仍将是改变前的属性值，也就是说，setAttribute做出的修改不会反映在文档本身的源代码里。这种“表里不一”的现象源自DOM的工作模式:先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。这正是DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。</p>\n<h4 id=\"案例研究：JavaScript图片库\"><a href=\"#案例研究：JavaScript图片库\" class=\"headerlink\" title=\"案例研究：JavaScript图片库\"></a>案例研究：JavaScript图片库</h4><p>DOM是一种适用于多种环境和多种程序设计语言的通用型API。如果想把DOM技巧运用在Web浏览器以外的应用环境里，严格遵守“第1级DOM”能够避免与兼容性有关的任何问题。<br>1、childNodes属性 用来获取任何一个元素的所有子元素<br>2、nodeType属性 共有12中可取值<br>以下3种具有实用价值：<br>-元素节点的nodeType属性值是1<br>-属性节点的nodeType属性值是2<br>-文本节点的nodeType属性值是3<br>3、nodeValue属性 得到和设置节点的值<br>4、firstChild和lastChild</p>\n<h4 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h4><p>1、平稳退化<br>平稳退化(graceful degradation)，虽然某些功能无法使用，但最基本的操作仍能顺利完成<br>2、“javascript:”伪协议<br>“真”协议用来在因特网上的计算机之间传输数据包，如HTTP协议(http://) 、FTP协议（ftp://)等，伪协议则是一种非标准化的协议<br>“javascript:”伪协议让我们通过一个链接来调用JavaScript函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">&quot;javascript:popUp(&#x27;http://www.example.com/&#x27;);&quot;</span>&gt;Example&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>3、CSS<br>结构与样式分离<br>渐进增强，用一些额外的信息层去包裹原始数据<br>4、分离javascript<br>5、向后兼容<br>(1)对象检测：检测浏览器对JavaScript的支持程度<br>(2)浏览器嗅探技术<br>通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。<br>首先，浏览器有时会“撒谎”。因为历史原因，有些浏览器会把自己报告为另外一种浏览器，还有一些浏览器允许用户任意修改这些信息<br>其次，为了适用于多种不同的浏览器，浏览器嗅探脚本会变得越来越复杂。如果想让浏览器嗅探脚本能够跨平台工作，就必须测试所有可能出现的供应商和版本号组合。这是一个无穷尽的任务，测试的组合情况越多，代码就越复杂和冗长<br>最后，许多浏览器嗅探脚本在进行这类测试时要求浏览器的版本号必须得到精确的匹配。因此，每当市场上出现新版本时，就不得不修改这些脚本<br>6、性能考虑<br>(1)尽量少访问DOM和尽量减少标记<br>(2)合并和放置脚本<br>多个脚本合并，减少请求次数<br>把所有/<script>标签都放到文档的末尾，/&lt;/body/&gt;标记之前，就可以让页面变得更快<br>(3)压缩脚本<br>压缩工具：<br>-Douglas Crockford的JSMin (<a href=\"http://www.crockford.com/javascript/jsmin.html\">http://www.crockford.com/javascript/jsmin.html</a>)<br>-雅虎的YUI Compressor (<a href=\"http://developer.yahoo.com/yui/compressor\">http://developer.yahoo.com/yui/compressor</a>)<br>-谷歌的Closure Compiler (<a href=\"http://closure-compiler.appspot.com/home\">http://closure-compiler.appspot.com/home</a>)</p>\n<h4 id=\"动态创建标记\"><a href=\"#动态创建标记\" class=\"headerlink\" title=\"动态创建标记\"></a>动态创建标记</h4><p>1、document.write &amp; innerHTML属性<br>2、DOM方法<br>(1)createElement<br>(1)appendChild<br>(1)createTextNode<br>(1)insertBefore<br>3、Ajax<br>(1)XMLHttpRequest对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHTTPObject</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> XMLHttpRequest == <span class=\"string\">&quot;undefined&quot;</span>) xMLHttpRequest =<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Activexobject ( <span class=\"string\">&quot;Msxm12.XMLHTTP.6.0&quot;</span>); )<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivexObject (<span class=\"string\">&quot;Msxm12.XMLHTTP.3.0&quot;</span>);)<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivexObject ( <span class=\"string\">&quot;Msxm12.XMLHTTP&quot;</span>); )<span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XMLHttpRequest ( ) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>XHTML5<br>本质上是使用严格的XML规则编写的HTML5。从技术角度说，Web浏览器应该将任何XHTML5文档都视为XML文档，而不是HTML文档。而在现实中，你还得在文档的头部发送正确的MIME类型，即application/xhtml+xml。有些浏览器不认识这个MIME类型，因而一般要在服务器端对浏览器进行探查后再发送。否则最坏的情况，页面很可能根本不会在浏览器中呈现。因此，绝大多数XHTML页面仍然是以HTML类型发送的。</p>\n<h4 id=\"CSS-DOM\"><a href=\"#CSS-DOM\" class=\"headerlink\" title=\"CSS-DOM\"></a>CSS-DOM</h4><p>1、三位一体的网页<br>(1)结构层<br>网页的结构层(structural layer)由HTML或XHTML之类的标记语言负责创建<br>(2)表示层<br>表示层(presentation layer)由CSS负责完成。CSS描述页面内容应该如何呈现<br>(3)行为层<br>行为层(behavior layer)负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM主宰的领域<br>(4)分离<br>-使用(X)HTML去搭建文档的结构<br>-使用CSS去设置文档的呈现效果<br>-使用DOM脚本去实现文档的行为<br>2、style属性<br>在外部样式表里声明的样式不会进入style对象，在文档的<head>部分里声明的样式也是如此<br>style对象只包含在HTML代码里用style属性声明的样式<br>3、何时该使用DOM脚本设置样式<br>(1)根据元素在节点树里的位置来设置样式<br>(2)根据某种条件反复设置某种样式<br>(3)响应事件<br>4、className属性</p>\n<h4 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h4><p>1、canvas<br>2、video和audio</p>\n<p>疑问点：<br>1、遇到的知识点觉得掌握了，没有记录，后面又忘了<br>重要的知识点都记录，不管有没有掌握<br>2、任务拆分评估时间不准<br>更深入的了解项目代码和业务逻辑<br>3、看书遇到问题的时候，先记录继续阅读，还是先解决问题在阅读？<br>先记录继续阅读，看后面是否有解答<br>4、原型链<br>不建议研究__proto__这种知识点，可以看看es6中新的关于原型链的继承<br>理解知识的时候，不要添加太多概念，避免混乱</p>\n</script></p>"},{"title":"JavaScript设计模式读书笔记(6)","date":"2022-09-20T07:22:12.000Z","_content":"\n#### 架构型设计模式\n架构型设计模式是一类框架结构,通过提供一些子系统，指定他们的职责,并将它们条理清晰地组织在一起。\n\n###### 同步模块模式\n模块化:将复杂的系统分解成高内聚、低耦合的模块，使系统开发变得可控、可维护、可拓展，提高模块的复用率。\n同步模块模式——SMD (Synchronous Module Definition):请求发出后，无论模块是否存在，立即执行后续的逻辑，实现模块开发中对模块的立即引用。\n\n(1)实现模块化开发，首先要有一个模块管理器，它管理着模块的创建与调度。对于模块的调用分为两类，第一类同步模块调度的实现比较简单，不需要考虑模块间的异步加载。第二类异步模块调度的实现就比较繁琐。它可实现对模块的加载调度。\n\n![module-model-1](module-model-1.png)\n![module-model-2](module-model-2.png)\n![module-model-3](module-model-3.png)\n![module-model-4](module-model-4.png)\n![module-model-5](module-model-5.png)\n\n###### 异步模块模式\n异步模块模式——AMD (Asynchronous Module Definition):请求发出后，继续其他业务逻辑，知道模块加载完成执行后续的逻辑，实现模块开发中对模块加载完成后的引用。\n\n![async-module-model-1](async-module-model-1.png)\n![async-module-model-2](async-module-model-2.png)\n![async-module-model-3](async-module-model-3.png)\n![async-module-model-4](async-module-model-4.png)\n![async-module-model-5](async-module-model-5.png)\n![async-module-model-6](async-module-model-6.png)\n![async-module-model-7](async-module-model-7.png)\n![async-module-model-8](async-module-model-8.png)\n![async-module-model-9](async-module-model-9.png)\n\n###### Widget模式\nWidget:(Web Widget指的是一块可以在任意页面中执行的代码块)Widget模式是指借用Web Widget思想将页面分解成部件，针对部件开发，最终组合成完整的页面。\n\n![widget-model-1](widget-model-1.png)\n![widget-model-2](widget-model-2.png)\n![widget-model-3](widget-model-3.png)\n![widget-model-4](widget-model-4.png)\n![widget-model-5](widget-model-5.png)\n![widget-model-6](widget-model-6.png)\n\n###### MVC模式\nMVC即模型(model)一视图(view)一控制器(controller)，用一种将业务逻辑、数据、视图分离的方式组织架构代码。\n\n![mvc-model-1](mvc-model-1.png)\n\n**每个对象是一个自动执行的函数**\n**3个层次对象可被调用，而声明的函数在执行前是不能被调用的，比如模型对象要被视图和控制器调用，因此执行一遍为其他对象调用提供接口方法**\n\n![mvc-model-2](mvc-model-2.png)\n![mvc-model-3](mvc-model-3.png)\n视图层只有3个部分，一是操作模型数据对象方法的引用(M),二是内部视图创建方法对象，三是外部获取视图创建方法接口\n\n![mvc-model-4](mvc-model-4.png)\n\n###### MVP模式\nMVP即模型(Model)一视图(View)一管理器(Presenter): View层不直接引用Model层内的数据，而是通过Presenter层实现对Model层内的数据访问。即所有层次的交互都发生在Presenter层中。\n\n![mvp-model-1](mvp-model-1.png)\n![mvp-model-2](mvp-model-2.png)\n![mvp-model-3](mvp-model-3.png)\n![mvp-model-4](mvp-model-4.png)\n![mvp-model-5](mvp-model-5.png)\n![mvp-model-6](mvp-model-6.png)\n![mvp-model-7](mvp-model-7.png)\n\nMVP与MVC相比最重要的特征就是MVP中将视图层与数据层完全解耦，使得对视图层的修改不会影响到数据层，数据层内的数据改动又不会影响到视图层。因此，我们在管理器中对数据或者视图灵活地调用就可使数据层内的数据与视图层内的视图得到更高效的复用。因此，MVP模式也可以实现一个管理器，可以调用多个数据，或者创建多种视图，而且是不受限制的。因而管理器有更高的操作权限，因此对于业务逻辑与需求的实现只需专注于管理器的开发即可，当然管理器内过多的逻辑也使得其开发与维护成本提高。\n\n###### MVVM模式\nMVVM模式，模型(Model)-视图(View)-视图模型(ViewModel):为视图层(View)量身定做一套视图模型(ViewModel)，并在视图模型(ViewModel)中创建属性和方法，为视图层(View)绑定数据(Model)并实现交互。\n\n![mvvm-model-1](mvvm-model-1.png)\n![mvvm-model-2](mvvm-model-2.png)\n![mvvm-model-3](mvvm-model-3.png)\n![mvvm-model-4](mvvm-model-4.png)\n![mvvm-model-5](mvvm-model-5.png)\n![mvvm-model-6](mvvm-model-6.png)\n![mvvm-model-7](mvvm-model-7.png)\n![mvvm-model-8](mvvm-model-8.png)\n\n###### 附录\n![appendix-1](appendix-1.png)\n![appendix-2](appendix-2.png)\n![appendix-3](appendix-3.png)\n![appendix-4](appendix-4.png)\n![appendix-5](appendix-5.png)\n![appendix-6](appendix-6.png)\n![appendix-7](appendix-7.png)\n![appendix-8](appendix-8.png)\n![appendix-9](appendix-9.png)\n![appendix-10](appendix-10.png)","source":"_posts/about-design-model5.md","raw":"---\ntitle: JavaScript设计模式读书笔记(6)\ndate: 2022-09-20 15:22:12\ntags:\n---\n\n#### 架构型设计模式\n架构型设计模式是一类框架结构,通过提供一些子系统，指定他们的职责,并将它们条理清晰地组织在一起。\n\n###### 同步模块模式\n模块化:将复杂的系统分解成高内聚、低耦合的模块，使系统开发变得可控、可维护、可拓展，提高模块的复用率。\n同步模块模式——SMD (Synchronous Module Definition):请求发出后，无论模块是否存在，立即执行后续的逻辑，实现模块开发中对模块的立即引用。\n\n(1)实现模块化开发，首先要有一个模块管理器，它管理着模块的创建与调度。对于模块的调用分为两类，第一类同步模块调度的实现比较简单，不需要考虑模块间的异步加载。第二类异步模块调度的实现就比较繁琐。它可实现对模块的加载调度。\n\n![module-model-1](module-model-1.png)\n![module-model-2](module-model-2.png)\n![module-model-3](module-model-3.png)\n![module-model-4](module-model-4.png)\n![module-model-5](module-model-5.png)\n\n###### 异步模块模式\n异步模块模式——AMD (Asynchronous Module Definition):请求发出后，继续其他业务逻辑，知道模块加载完成执行后续的逻辑，实现模块开发中对模块加载完成后的引用。\n\n![async-module-model-1](async-module-model-1.png)\n![async-module-model-2](async-module-model-2.png)\n![async-module-model-3](async-module-model-3.png)\n![async-module-model-4](async-module-model-4.png)\n![async-module-model-5](async-module-model-5.png)\n![async-module-model-6](async-module-model-6.png)\n![async-module-model-7](async-module-model-7.png)\n![async-module-model-8](async-module-model-8.png)\n![async-module-model-9](async-module-model-9.png)\n\n###### Widget模式\nWidget:(Web Widget指的是一块可以在任意页面中执行的代码块)Widget模式是指借用Web Widget思想将页面分解成部件，针对部件开发，最终组合成完整的页面。\n\n![widget-model-1](widget-model-1.png)\n![widget-model-2](widget-model-2.png)\n![widget-model-3](widget-model-3.png)\n![widget-model-4](widget-model-4.png)\n![widget-model-5](widget-model-5.png)\n![widget-model-6](widget-model-6.png)\n\n###### MVC模式\nMVC即模型(model)一视图(view)一控制器(controller)，用一种将业务逻辑、数据、视图分离的方式组织架构代码。\n\n![mvc-model-1](mvc-model-1.png)\n\n**每个对象是一个自动执行的函数**\n**3个层次对象可被调用，而声明的函数在执行前是不能被调用的，比如模型对象要被视图和控制器调用，因此执行一遍为其他对象调用提供接口方法**\n\n![mvc-model-2](mvc-model-2.png)\n![mvc-model-3](mvc-model-3.png)\n视图层只有3个部分，一是操作模型数据对象方法的引用(M),二是内部视图创建方法对象，三是外部获取视图创建方法接口\n\n![mvc-model-4](mvc-model-4.png)\n\n###### MVP模式\nMVP即模型(Model)一视图(View)一管理器(Presenter): View层不直接引用Model层内的数据，而是通过Presenter层实现对Model层内的数据访问。即所有层次的交互都发生在Presenter层中。\n\n![mvp-model-1](mvp-model-1.png)\n![mvp-model-2](mvp-model-2.png)\n![mvp-model-3](mvp-model-3.png)\n![mvp-model-4](mvp-model-4.png)\n![mvp-model-5](mvp-model-5.png)\n![mvp-model-6](mvp-model-6.png)\n![mvp-model-7](mvp-model-7.png)\n\nMVP与MVC相比最重要的特征就是MVP中将视图层与数据层完全解耦，使得对视图层的修改不会影响到数据层，数据层内的数据改动又不会影响到视图层。因此，我们在管理器中对数据或者视图灵活地调用就可使数据层内的数据与视图层内的视图得到更高效的复用。因此，MVP模式也可以实现一个管理器，可以调用多个数据，或者创建多种视图，而且是不受限制的。因而管理器有更高的操作权限，因此对于业务逻辑与需求的实现只需专注于管理器的开发即可，当然管理器内过多的逻辑也使得其开发与维护成本提高。\n\n###### MVVM模式\nMVVM模式，模型(Model)-视图(View)-视图模型(ViewModel):为视图层(View)量身定做一套视图模型(ViewModel)，并在视图模型(ViewModel)中创建属性和方法，为视图层(View)绑定数据(Model)并实现交互。\n\n![mvvm-model-1](mvvm-model-1.png)\n![mvvm-model-2](mvvm-model-2.png)\n![mvvm-model-3](mvvm-model-3.png)\n![mvvm-model-4](mvvm-model-4.png)\n![mvvm-model-5](mvvm-model-5.png)\n![mvvm-model-6](mvvm-model-6.png)\n![mvvm-model-7](mvvm-model-7.png)\n![mvvm-model-8](mvvm-model-8.png)\n\n###### 附录\n![appendix-1](appendix-1.png)\n![appendix-2](appendix-2.png)\n![appendix-3](appendix-3.png)\n![appendix-4](appendix-4.png)\n![appendix-5](appendix-5.png)\n![appendix-6](appendix-6.png)\n![appendix-7](appendix-7.png)\n![appendix-8](appendix-8.png)\n![appendix-9](appendix-9.png)\n![appendix-10](appendix-10.png)","slug":"about-design-model5","published":1,"updated":"2022-09-22T09:17:58.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcc000bjktt1s4y2cz6","content":"<h4 id=\"架构型设计模式\"><a href=\"#架构型设计模式\" class=\"headerlink\" title=\"架构型设计模式\"></a>架构型设计模式</h4><p>架构型设计模式是一类框架结构,通过提供一些子系统，指定他们的职责,并将它们条理清晰地组织在一起。</p>\n<h6 id=\"同步模块模式\"><a href=\"#同步模块模式\" class=\"headerlink\" title=\"同步模块模式\"></a>同步模块模式</h6><p>模块化:将复杂的系统分解成高内聚、低耦合的模块，使系统开发变得可控、可维护、可拓展，提高模块的复用率。<br>同步模块模式——SMD (Synchronous Module Definition):请求发出后，无论模块是否存在，立即执行后续的逻辑，实现模块开发中对模块的立即引用。</p>\n<p>(1)实现模块化开发，首先要有一个模块管理器，它管理着模块的创建与调度。对于模块的调用分为两类，第一类同步模块调度的实现比较简单，不需要考虑模块间的异步加载。第二类异步模块调度的实现就比较繁琐。它可实现对模块的加载调度。</p>\n<p><img src=\"/2022/09/20/about-design-model5/module-model-1.png\" alt=\"module-model-1\"><br><img src=\"/2022/09/20/about-design-model5/module-model-2.png\" alt=\"module-model-2\"><br><img src=\"/2022/09/20/about-design-model5/module-model-3.png\" alt=\"module-model-3\"><br><img src=\"/2022/09/20/about-design-model5/module-model-4.png\" alt=\"module-model-4\"><br><img src=\"/2022/09/20/about-design-model5/module-model-5.png\" alt=\"module-model-5\"></p>\n<h6 id=\"异步模块模式\"><a href=\"#异步模块模式\" class=\"headerlink\" title=\"异步模块模式\"></a>异步模块模式</h6><p>异步模块模式——AMD (Asynchronous Module Definition):请求发出后，继续其他业务逻辑，知道模块加载完成执行后续的逻辑，实现模块开发中对模块加载完成后的引用。</p>\n<p><img src=\"/2022/09/20/about-design-model5/async-module-model-1.png\" alt=\"async-module-model-1\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-2.png\" alt=\"async-module-model-2\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-3.png\" alt=\"async-module-model-3\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-4.png\" alt=\"async-module-model-4\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-5.png\" alt=\"async-module-model-5\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-6.png\" alt=\"async-module-model-6\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-7.png\" alt=\"async-module-model-7\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-8.png\" alt=\"async-module-model-8\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-9.png\" alt=\"async-module-model-9\"></p>\n<h6 id=\"Widget模式\"><a href=\"#Widget模式\" class=\"headerlink\" title=\"Widget模式\"></a>Widget模式</h6><p>Widget:(Web Widget指的是一块可以在任意页面中执行的代码块)Widget模式是指借用Web Widget思想将页面分解成部件，针对部件开发，最终组合成完整的页面。</p>\n<p><img src=\"/2022/09/20/about-design-model5/widget-model-1.png\" alt=\"widget-model-1\"><br><img src=\"/2022/09/20/about-design-model5/widget-model-2.png\" alt=\"widget-model-2\"><br><img src=\"/2022/09/20/about-design-model5/widget-model-3.png\" alt=\"widget-model-3\"><br><img src=\"/2022/09/20/about-design-model5/widget-model-4.png\" alt=\"widget-model-4\"><br><img src=\"/2022/09/20/about-design-model5/widget-model-5.png\" alt=\"widget-model-5\"><br><img src=\"/2022/09/20/about-design-model5/widget-model-6.png\" alt=\"widget-model-6\"></p>\n<h6 id=\"MVC模式\"><a href=\"#MVC模式\" class=\"headerlink\" title=\"MVC模式\"></a>MVC模式</h6><p>MVC即模型(model)一视图(view)一控制器(controller)，用一种将业务逻辑、数据、视图分离的方式组织架构代码。</p>\n<p><img src=\"/2022/09/20/about-design-model5/mvc-model-1.png\" alt=\"mvc-model-1\"></p>\n<p><strong>每个对象是一个自动执行的函数</strong><br><strong>3个层次对象可被调用，而声明的函数在执行前是不能被调用的，比如模型对象要被视图和控制器调用，因此执行一遍为其他对象调用提供接口方法</strong></p>\n<p><img src=\"/2022/09/20/about-design-model5/mvc-model-2.png\" alt=\"mvc-model-2\"><br><img src=\"/2022/09/20/about-design-model5/mvc-model-3.png\" alt=\"mvc-model-3\"><br>视图层只有3个部分，一是操作模型数据对象方法的引用(M),二是内部视图创建方法对象，三是外部获取视图创建方法接口</p>\n<p><img src=\"/2022/09/20/about-design-model5/mvc-model-4.png\" alt=\"mvc-model-4\"></p>\n<h6 id=\"MVP模式\"><a href=\"#MVP模式\" class=\"headerlink\" title=\"MVP模式\"></a>MVP模式</h6><p>MVP即模型(Model)一视图(View)一管理器(Presenter): View层不直接引用Model层内的数据，而是通过Presenter层实现对Model层内的数据访问。即所有层次的交互都发生在Presenter层中。</p>\n<p><img src=\"/2022/09/20/about-design-model5/mvp-model-1.png\" alt=\"mvp-model-1\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-2.png\" alt=\"mvp-model-2\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-3.png\" alt=\"mvp-model-3\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-4.png\" alt=\"mvp-model-4\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-5.png\" alt=\"mvp-model-5\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-6.png\" alt=\"mvp-model-6\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-7.png\" alt=\"mvp-model-7\"></p>\n<p>MVP与MVC相比最重要的特征就是MVP中将视图层与数据层完全解耦，使得对视图层的修改不会影响到数据层，数据层内的数据改动又不会影响到视图层。因此，我们在管理器中对数据或者视图灵活地调用就可使数据层内的数据与视图层内的视图得到更高效的复用。因此，MVP模式也可以实现一个管理器，可以调用多个数据，或者创建多种视图，而且是不受限制的。因而管理器有更高的操作权限，因此对于业务逻辑与需求的实现只需专注于管理器的开发即可，当然管理器内过多的逻辑也使得其开发与维护成本提高。</p>\n<h6 id=\"MVVM模式\"><a href=\"#MVVM模式\" class=\"headerlink\" title=\"MVVM模式\"></a>MVVM模式</h6><p>MVVM模式，模型(Model)-视图(View)-视图模型(ViewModel):为视图层(View)量身定做一套视图模型(ViewModel)，并在视图模型(ViewModel)中创建属性和方法，为视图层(View)绑定数据(Model)并实现交互。</p>\n<p><img src=\"/2022/09/20/about-design-model5/mvvm-model-1.png\" alt=\"mvvm-model-1\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-2.png\" alt=\"mvvm-model-2\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-3.png\" alt=\"mvvm-model-3\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-4.png\" alt=\"mvvm-model-4\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-5.png\" alt=\"mvvm-model-5\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-6.png\" alt=\"mvvm-model-6\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-7.png\" alt=\"mvvm-model-7\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-8.png\" alt=\"mvvm-model-8\"></p>\n<h6 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h6><p><img src=\"/2022/09/20/about-design-model5/appendix-1.png\" alt=\"appendix-1\"><br><img src=\"/2022/09/20/about-design-model5/appendix-2.png\" alt=\"appendix-2\"><br><img src=\"/2022/09/20/about-design-model5/appendix-3.png\" alt=\"appendix-3\"><br><img src=\"/2022/09/20/about-design-model5/appendix-4.png\" alt=\"appendix-4\"><br><img src=\"/2022/09/20/about-design-model5/appendix-5.png\" alt=\"appendix-5\"><br><img src=\"/2022/09/20/about-design-model5/appendix-6.png\" alt=\"appendix-6\"><br><img src=\"/2022/09/20/about-design-model5/appendix-7.png\" alt=\"appendix-7\"><br><img src=\"/2022/09/20/about-design-model5/appendix-8.png\" alt=\"appendix-8\"><br><img src=\"/2022/09/20/about-design-model5/appendix-9.png\" alt=\"appendix-9\"><br><img src=\"/2022/09/20/about-design-model5/appendix-10.png\" alt=\"appendix-10\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"架构型设计模式\"><a href=\"#架构型设计模式\" class=\"headerlink\" title=\"架构型设计模式\"></a>架构型设计模式</h4><p>架构型设计模式是一类框架结构,通过提供一些子系统，指定他们的职责,并将它们条理清晰地组织在一起。</p>\n<h6 id=\"同步模块模式\"><a href=\"#同步模块模式\" class=\"headerlink\" title=\"同步模块模式\"></a>同步模块模式</h6><p>模块化:将复杂的系统分解成高内聚、低耦合的模块，使系统开发变得可控、可维护、可拓展，提高模块的复用率。<br>同步模块模式——SMD (Synchronous Module Definition):请求发出后，无论模块是否存在，立即执行后续的逻辑，实现模块开发中对模块的立即引用。</p>\n<p>(1)实现模块化开发，首先要有一个模块管理器，它管理着模块的创建与调度。对于模块的调用分为两类，第一类同步模块调度的实现比较简单，不需要考虑模块间的异步加载。第二类异步模块调度的实现就比较繁琐。它可实现对模块的加载调度。</p>\n<p><img src=\"/2022/09/20/about-design-model5/module-model-1.png\" alt=\"module-model-1\"><br><img src=\"/2022/09/20/about-design-model5/module-model-2.png\" alt=\"module-model-2\"><br><img src=\"/2022/09/20/about-design-model5/module-model-3.png\" alt=\"module-model-3\"><br><img src=\"/2022/09/20/about-design-model5/module-model-4.png\" alt=\"module-model-4\"><br><img src=\"/2022/09/20/about-design-model5/module-model-5.png\" alt=\"module-model-5\"></p>\n<h6 id=\"异步模块模式\"><a href=\"#异步模块模式\" class=\"headerlink\" title=\"异步模块模式\"></a>异步模块模式</h6><p>异步模块模式——AMD (Asynchronous Module Definition):请求发出后，继续其他业务逻辑，知道模块加载完成执行后续的逻辑，实现模块开发中对模块加载完成后的引用。</p>\n<p><img src=\"/2022/09/20/about-design-model5/async-module-model-1.png\" alt=\"async-module-model-1\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-2.png\" alt=\"async-module-model-2\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-3.png\" alt=\"async-module-model-3\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-4.png\" alt=\"async-module-model-4\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-5.png\" alt=\"async-module-model-5\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-6.png\" alt=\"async-module-model-6\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-7.png\" alt=\"async-module-model-7\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-8.png\" alt=\"async-module-model-8\"><br><img src=\"/2022/09/20/about-design-model5/async-module-model-9.png\" alt=\"async-module-model-9\"></p>\n<h6 id=\"Widget模式\"><a href=\"#Widget模式\" class=\"headerlink\" title=\"Widget模式\"></a>Widget模式</h6><p>Widget:(Web Widget指的是一块可以在任意页面中执行的代码块)Widget模式是指借用Web Widget思想将页面分解成部件，针对部件开发，最终组合成完整的页面。</p>\n<p><img src=\"/2022/09/20/about-design-model5/widget-model-1.png\" alt=\"widget-model-1\"><br><img src=\"/2022/09/20/about-design-model5/widget-model-2.png\" alt=\"widget-model-2\"><br><img src=\"/2022/09/20/about-design-model5/widget-model-3.png\" alt=\"widget-model-3\"><br><img src=\"/2022/09/20/about-design-model5/widget-model-4.png\" alt=\"widget-model-4\"><br><img src=\"/2022/09/20/about-design-model5/widget-model-5.png\" alt=\"widget-model-5\"><br><img src=\"/2022/09/20/about-design-model5/widget-model-6.png\" alt=\"widget-model-6\"></p>\n<h6 id=\"MVC模式\"><a href=\"#MVC模式\" class=\"headerlink\" title=\"MVC模式\"></a>MVC模式</h6><p>MVC即模型(model)一视图(view)一控制器(controller)，用一种将业务逻辑、数据、视图分离的方式组织架构代码。</p>\n<p><img src=\"/2022/09/20/about-design-model5/mvc-model-1.png\" alt=\"mvc-model-1\"></p>\n<p><strong>每个对象是一个自动执行的函数</strong><br><strong>3个层次对象可被调用，而声明的函数在执行前是不能被调用的，比如模型对象要被视图和控制器调用，因此执行一遍为其他对象调用提供接口方法</strong></p>\n<p><img src=\"/2022/09/20/about-design-model5/mvc-model-2.png\" alt=\"mvc-model-2\"><br><img src=\"/2022/09/20/about-design-model5/mvc-model-3.png\" alt=\"mvc-model-3\"><br>视图层只有3个部分，一是操作模型数据对象方法的引用(M),二是内部视图创建方法对象，三是外部获取视图创建方法接口</p>\n<p><img src=\"/2022/09/20/about-design-model5/mvc-model-4.png\" alt=\"mvc-model-4\"></p>\n<h6 id=\"MVP模式\"><a href=\"#MVP模式\" class=\"headerlink\" title=\"MVP模式\"></a>MVP模式</h6><p>MVP即模型(Model)一视图(View)一管理器(Presenter): View层不直接引用Model层内的数据，而是通过Presenter层实现对Model层内的数据访问。即所有层次的交互都发生在Presenter层中。</p>\n<p><img src=\"/2022/09/20/about-design-model5/mvp-model-1.png\" alt=\"mvp-model-1\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-2.png\" alt=\"mvp-model-2\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-3.png\" alt=\"mvp-model-3\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-4.png\" alt=\"mvp-model-4\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-5.png\" alt=\"mvp-model-5\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-6.png\" alt=\"mvp-model-6\"><br><img src=\"/2022/09/20/about-design-model5/mvp-model-7.png\" alt=\"mvp-model-7\"></p>\n<p>MVP与MVC相比最重要的特征就是MVP中将视图层与数据层完全解耦，使得对视图层的修改不会影响到数据层，数据层内的数据改动又不会影响到视图层。因此，我们在管理器中对数据或者视图灵活地调用就可使数据层内的数据与视图层内的视图得到更高效的复用。因此，MVP模式也可以实现一个管理器，可以调用多个数据，或者创建多种视图，而且是不受限制的。因而管理器有更高的操作权限，因此对于业务逻辑与需求的实现只需专注于管理器的开发即可，当然管理器内过多的逻辑也使得其开发与维护成本提高。</p>\n<h6 id=\"MVVM模式\"><a href=\"#MVVM模式\" class=\"headerlink\" title=\"MVVM模式\"></a>MVVM模式</h6><p>MVVM模式，模型(Model)-视图(View)-视图模型(ViewModel):为视图层(View)量身定做一套视图模型(ViewModel)，并在视图模型(ViewModel)中创建属性和方法，为视图层(View)绑定数据(Model)并实现交互。</p>\n<p><img src=\"/2022/09/20/about-design-model5/mvvm-model-1.png\" alt=\"mvvm-model-1\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-2.png\" alt=\"mvvm-model-2\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-3.png\" alt=\"mvvm-model-3\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-4.png\" alt=\"mvvm-model-4\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-5.png\" alt=\"mvvm-model-5\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-6.png\" alt=\"mvvm-model-6\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-7.png\" alt=\"mvvm-model-7\"><br><img src=\"/2022/09/20/about-design-model5/mvvm-model-8.png\" alt=\"mvvm-model-8\"></p>\n<h6 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h6><p><img src=\"/2022/09/20/about-design-model5/appendix-1.png\" alt=\"appendix-1\"><br><img src=\"/2022/09/20/about-design-model5/appendix-2.png\" alt=\"appendix-2\"><br><img src=\"/2022/09/20/about-design-model5/appendix-3.png\" alt=\"appendix-3\"><br><img src=\"/2022/09/20/about-design-model5/appendix-4.png\" alt=\"appendix-4\"><br><img src=\"/2022/09/20/about-design-model5/appendix-5.png\" alt=\"appendix-5\"><br><img src=\"/2022/09/20/about-design-model5/appendix-6.png\" alt=\"appendix-6\"><br><img src=\"/2022/09/20/about-design-model5/appendix-7.png\" alt=\"appendix-7\"><br><img src=\"/2022/09/20/about-design-model5/appendix-8.png\" alt=\"appendix-8\"><br><img src=\"/2022/09/20/about-design-model5/appendix-9.png\" alt=\"appendix-9\"><br><img src=\"/2022/09/20/about-design-model5/appendix-10.png\" alt=\"appendix-10\"></p>\n"},{"title":"js中apply怎么把数组转化为参数？","date":"2022-09-21T09:07:53.000Z","_content":"","source":"_posts/apply-array-to-params.md","raw":"---\ntitle: js中apply怎么把数组转化为参数？\ndate: 2022-09-21 17:07:53\ntags:\n---\n","slug":"apply-array-to-params","published":1,"updated":"2022-09-21T09:08:28.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcd000cjktt2w9agxue","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"前端概念相关-渐进增强与优雅降级","date":"2022-07-12T02:37:56.000Z","_content":"\n#### 渐进增强(Progressive Enhancement)(相当于向上兼容)\n一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验\n\n#### 优雅降级(Graceful Degradation)(相当于向下兼容)\n一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览\n\n向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少\n大多数软件都是向下兼容的\n\n#### 渐进增强与优雅降级的区别\n优雅降级和渐进增强都关注于同一网站在不同设备以及不同浏览器下的表现程度\n关键的区别则在于它们各自关注于何处，以及这种关注如何影响工作的流程\n\n优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n渐进增强观点则认为应关注于内容本身。\n```javascript\n.transition { /*渐进增强写法*/\n  -webkit-transition: all .5s;\n     -moz-transition: all .5s;\n       -o-transition: all .5s;\n          transition: all .5s;\n}\n.transition { /*优雅降级写法*/\n          transition: all .5s;\n       -o-transition: all .5s;\n     -moz-transition: all .5s;\n  -webkit-transition: all .5s;\n}\n```\n前缀CSS3（-webkit-* / -moz-* / -o-*）和正常CSS3在浏览器中的支持情况是这样的：\n\n1、很久以前：浏览器前缀CSS3和正常CSS3都不支持；\n2、不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；\n3、现在：浏览器既支持前缀CSS3，又支持正常CSS3；\n4、未来：浏览器不支持前缀CSS3，仅支持正常CSS3.\n\n渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。\n","source":"_posts/about-fe-theory.md","raw":"---\ntitle: 前端概念相关-渐进增强与优雅降级\ndate: 2022-07-12 10:37:56\ntags:\n---\n\n#### 渐进增强(Progressive Enhancement)(相当于向上兼容)\n一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验\n\n#### 优雅降级(Graceful Degradation)(相当于向下兼容)\n一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览\n\n向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少\n大多数软件都是向下兼容的\n\n#### 渐进增强与优雅降级的区别\n优雅降级和渐进增强都关注于同一网站在不同设备以及不同浏览器下的表现程度\n关键的区别则在于它们各自关注于何处，以及这种关注如何影响工作的流程\n\n优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n渐进增强观点则认为应关注于内容本身。\n```javascript\n.transition { /*渐进增强写法*/\n  -webkit-transition: all .5s;\n     -moz-transition: all .5s;\n       -o-transition: all .5s;\n          transition: all .5s;\n}\n.transition { /*优雅降级写法*/\n          transition: all .5s;\n       -o-transition: all .5s;\n     -moz-transition: all .5s;\n  -webkit-transition: all .5s;\n}\n```\n前缀CSS3（-webkit-* / -moz-* / -o-*）和正常CSS3在浏览器中的支持情况是这样的：\n\n1、很久以前：浏览器前缀CSS3和正常CSS3都不支持；\n2、不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；\n3、现在：浏览器既支持前缀CSS3，又支持正常CSS3；\n4、未来：浏览器不支持前缀CSS3，仅支持正常CSS3.\n\n渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。\n","slug":"about-fe-theory","published":1,"updated":"2022-07-18T05:47:25.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcd000djkttf8s02olt","content":"<h4 id=\"渐进增强-Progressive-Enhancement-相当于向上兼容\"><a href=\"#渐进增强-Progressive-Enhancement-相当于向上兼容\" class=\"headerlink\" title=\"渐进增强(Progressive Enhancement)(相当于向上兼容)\"></a>渐进增强(Progressive Enhancement)(相当于向上兼容)</h4><p>一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验</p>\n<h4 id=\"优雅降级-Graceful-Degradation-相当于向下兼容\"><a href=\"#优雅降级-Graceful-Degradation-相当于向下兼容\" class=\"headerlink\" title=\"优雅降级(Graceful Degradation)(相当于向下兼容)\"></a>优雅降级(Graceful Degradation)(相当于向下兼容)</h4><p>一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览</p>\n<p>向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少<br>大多数软件都是向下兼容的</p>\n<h4 id=\"渐进增强与优雅降级的区别\"><a href=\"#渐进增强与优雅降级的区别\" class=\"headerlink\" title=\"渐进增强与优雅降级的区别\"></a>渐进增强与优雅降级的区别</h4><p>优雅降级和渐进增强都关注于同一网站在不同设备以及不同浏览器下的表现程度<br>关键的区别则在于它们各自关注于何处，以及这种关注如何影响工作的流程</p>\n<p>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>\n<p>渐进增强观点则认为应关注于内容本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.transition &#123; <span class=\"comment\">/*渐进增强写法*/</span></span><br><span class=\"line\">  -webkit-transition: all .5s;</span><br><span class=\"line\">     -moz-transition: all .5s;</span><br><span class=\"line\">       -o-transition: all .5s;</span><br><span class=\"line\">          transition: all .5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.transition &#123; <span class=\"comment\">/*优雅降级写法*/</span></span><br><span class=\"line\">          <span class=\"attr\">transition</span>: all .5s;</span><br><span class=\"line\">       -o-transition: all .5s;</span><br><span class=\"line\">     -moz-transition: all .5s;</span><br><span class=\"line\">  -webkit-transition: all .5s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前缀CSS3（-webkit-* / -moz-* / -o-*）和正常CSS3在浏览器中的支持情况是这样的：</p>\n<p>1、很久以前：浏览器前缀CSS3和正常CSS3都不支持；<br>2、不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；<br>3、现在：浏览器既支持前缀CSS3，又支持正常CSS3；<br>4、未来：浏览器不支持前缀CSS3，仅支持正常CSS3.</p>\n<p>渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"渐进增强-Progressive-Enhancement-相当于向上兼容\"><a href=\"#渐进增强-Progressive-Enhancement-相当于向上兼容\" class=\"headerlink\" title=\"渐进增强(Progressive Enhancement)(相当于向上兼容)\"></a>渐进增强(Progressive Enhancement)(相当于向上兼容)</h4><p>一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验</p>\n<h4 id=\"优雅降级-Graceful-Degradation-相当于向下兼容\"><a href=\"#优雅降级-Graceful-Degradation-相当于向下兼容\" class=\"headerlink\" title=\"优雅降级(Graceful Degradation)(相当于向下兼容)\"></a>优雅降级(Graceful Degradation)(相当于向下兼容)</h4><p>一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览</p>\n<p>向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少<br>大多数软件都是向下兼容的</p>\n<h4 id=\"渐进增强与优雅降级的区别\"><a href=\"#渐进增强与优雅降级的区别\" class=\"headerlink\" title=\"渐进增强与优雅降级的区别\"></a>渐进增强与优雅降级的区别</h4><p>优雅降级和渐进增强都关注于同一网站在不同设备以及不同浏览器下的表现程度<br>关键的区别则在于它们各自关注于何处，以及这种关注如何影响工作的流程</p>\n<p>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>\n<p>渐进增强观点则认为应关注于内容本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.transition &#123; <span class=\"comment\">/*渐进增强写法*/</span></span><br><span class=\"line\">  -webkit-transition: all .5s;</span><br><span class=\"line\">     -moz-transition: all .5s;</span><br><span class=\"line\">       -o-transition: all .5s;</span><br><span class=\"line\">          transition: all .5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.transition &#123; <span class=\"comment\">/*优雅降级写法*/</span></span><br><span class=\"line\">          <span class=\"attr\">transition</span>: all .5s;</span><br><span class=\"line\">       -o-transition: all .5s;</span><br><span class=\"line\">     -moz-transition: all .5s;</span><br><span class=\"line\">  -webkit-transition: all .5s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前缀CSS3（-webkit-* / -moz-* / -o-*）和正常CSS3在浏览器中的支持情况是这样的：</p>\n<p>1、很久以前：浏览器前缀CSS3和正常CSS3都不支持；<br>2、不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；<br>3、现在：浏览器既支持前缀CSS3，又支持正常CSS3；<br>4、未来：浏览器不支持前缀CSS3，仅支持正常CSS3.</p>\n<p>渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。</p>\n"},{"title":"Map 结构","date":"2022-08-04T06:07:12.000Z","_content":"\n#### 什么是Map?\n由ES6提供的一种数据结构。它类似于对象，也是键值对的集合，但和对象不同的是，对象的键只能是字符串，map的键可以是各种类型的值（包括对象）。即，Object提供了 字符串-值 的对应，map提供了 值-值 的对应，是一种更完善的Hash结构实现。\n\n#### 怎么创建map？\n```javascript\nconst map = new Map();\n```\nmap可以使用一个对象作为键\n```javascript\nconst map = new Map();\nconst o = { p: 'string' };\n\nmap.set(o, 'text');\nmap.get(o); // text\n\nmap.has(o); // true\nmap.delete(o);\n```\nmap还可以接受一个数组作为参数，该数组成员是一个个表示键值对的数组\n```javascript\nconst map = new Map([['name', 'Tom'], ['age', 12]]);\nmap.size; // 2\nmap.has('name'); // true\nmap.get('age'); // 12\n```\n\n##### 注意点\n如果对同一个键多次赋值，后面的值将覆盖前面的值\n```javascript\nmap.set(1, 'qw').set(1, 'sdf');\nmap.get(1); // sdf\n```\n\n#### map的实例属性和方法\n1、size\n用法：map.size\n作用：获取map结构的大小\n返回：map结构的长度大小\n```javascript\nconst map = new Map();\nmap.size; // 0\nmap.set(1, 12);\nmap.size; // 1\n```\n\n2、set()\n用法：map.set(key, value)\n作用：向map中添加或修改map的数据\n返回：修改后的map\n```javascript\nconst map = new Map();\nmap.set(1, 12);\n```\n\n3、get()\n用法：map.get(key)\n作用：获取对应key的value值\n返回：map结构中key对应的值，不存在对应key时，返回undefined\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.get(1); // 12\nmap.get(2); // undefined\n```\n\n4、has()\n用法：map.has(key)\n作用：判断map中是否有对应的key\n返回：true/false，依据map中是否有对应的key，返回true或false\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.has(1); // true\nmap.has(2); // has\n```\n\n5、delete()\n用法：map.delete(key)\n作用：删除map中对应的key及value\n返回：true/false，删除成功返回true，删除失败返回false\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.delete(1); // true\nmap.delete(2); // false\n```\n\n6、clear()\n用法：map.clear()\n作用：清空map中的数据\n返回：undefined\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.clear(); // undefined\n```\n\n#### map的遍历方法\n1、keys()\n2、values()\n3、entries()\n4、forEach()\n\n参考：https://www.jianshu.com/p/93b5a5940de8","source":"_posts/about-map.md","raw":"---\ntitle: Map 结构\ndate: 2022-08-04 14:07:12\ntags:\n---\n\n#### 什么是Map?\n由ES6提供的一种数据结构。它类似于对象，也是键值对的集合，但和对象不同的是，对象的键只能是字符串，map的键可以是各种类型的值（包括对象）。即，Object提供了 字符串-值 的对应，map提供了 值-值 的对应，是一种更完善的Hash结构实现。\n\n#### 怎么创建map？\n```javascript\nconst map = new Map();\n```\nmap可以使用一个对象作为键\n```javascript\nconst map = new Map();\nconst o = { p: 'string' };\n\nmap.set(o, 'text');\nmap.get(o); // text\n\nmap.has(o); // true\nmap.delete(o);\n```\nmap还可以接受一个数组作为参数，该数组成员是一个个表示键值对的数组\n```javascript\nconst map = new Map([['name', 'Tom'], ['age', 12]]);\nmap.size; // 2\nmap.has('name'); // true\nmap.get('age'); // 12\n```\n\n##### 注意点\n如果对同一个键多次赋值，后面的值将覆盖前面的值\n```javascript\nmap.set(1, 'qw').set(1, 'sdf');\nmap.get(1); // sdf\n```\n\n#### map的实例属性和方法\n1、size\n用法：map.size\n作用：获取map结构的大小\n返回：map结构的长度大小\n```javascript\nconst map = new Map();\nmap.size; // 0\nmap.set(1, 12);\nmap.size; // 1\n```\n\n2、set()\n用法：map.set(key, value)\n作用：向map中添加或修改map的数据\n返回：修改后的map\n```javascript\nconst map = new Map();\nmap.set(1, 12);\n```\n\n3、get()\n用法：map.get(key)\n作用：获取对应key的value值\n返回：map结构中key对应的值，不存在对应key时，返回undefined\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.get(1); // 12\nmap.get(2); // undefined\n```\n\n4、has()\n用法：map.has(key)\n作用：判断map中是否有对应的key\n返回：true/false，依据map中是否有对应的key，返回true或false\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.has(1); // true\nmap.has(2); // has\n```\n\n5、delete()\n用法：map.delete(key)\n作用：删除map中对应的key及value\n返回：true/false，删除成功返回true，删除失败返回false\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.delete(1); // true\nmap.delete(2); // false\n```\n\n6、clear()\n用法：map.clear()\n作用：清空map中的数据\n返回：undefined\n```javascript\nconst map = new Map();\nmap.set(1, 12);\nmap.clear(); // undefined\n```\n\n#### map的遍历方法\n1、keys()\n2、values()\n3、entries()\n4、forEach()\n\n参考：https://www.jianshu.com/p/93b5a5940de8","slug":"about-map","published":1,"updated":"2022-08-04T07:31:23.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpce000ejktta9kcghto","content":"<h4 id=\"什么是Map\"><a href=\"#什么是Map\" class=\"headerlink\" title=\"什么是Map?\"></a>什么是Map?</h4><p>由ES6提供的一种数据结构。它类似于对象，也是键值对的集合，但和对象不同的是，对象的键只能是字符串，map的键可以是各种类型的值（包括对象）。即，Object提供了 字符串-值 的对应，map提供了 值-值 的对应，是一种更完善的Hash结构实现。</p>\n<h4 id=\"怎么创建map？\"><a href=\"#怎么创建map？\" class=\"headerlink\" title=\"怎么创建map？\"></a>怎么创建map？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br></pre></td></tr></table></figure>\n<p>map可以使用一个对象作为键</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123; <span class=\"attr\">p</span>: <span class=\"string\">&#x27;string&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">map.set(o, <span class=\"string\">&#x27;text&#x27;</span>);</span><br><span class=\"line\">map.get(o); <span class=\"comment\">// text</span></span><br><span class=\"line\"></span><br><span class=\"line\">map.has(o); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(o);</span><br></pre></td></tr></table></figure>\n<p>map还可以接受一个数组作为参数，该数组成员是一个个表示键值对的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;Tom&#x27;</span>], [<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">12</span>]]);</span><br><span class=\"line\">map.size; <span class=\"comment\">// 2</span></span><br><span class=\"line\">map.has(<span class=\"string\">&#x27;name&#x27;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.get(<span class=\"string\">&#x27;age&#x27;</span>); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h5><p>如果对同一个键多次赋值，后面的值将覆盖前面的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"string\">&#x27;qw&#x27;</span>).set(<span class=\"number\">1</span>, <span class=\"string\">&#x27;sdf&#x27;</span>);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>); <span class=\"comment\">// sdf</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"map的实例属性和方法\"><a href=\"#map的实例属性和方法\" class=\"headerlink\" title=\"map的实例属性和方法\"></a>map的实例属性和方法</h4><p>1、size<br>用法：map.size<br>作用：获取map结构的大小<br>返回：map结构的长度大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.size; <span class=\"comment\">// 0</span></span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.size; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>2、set()<br>用法：map.set(key, value)<br>作用：向map中添加或修改map的数据<br>返回：修改后的map</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n\n<p>3、get()<br>用法：map.get(key)<br>作用：获取对应key的value值<br>返回：map结构中key对应的值，不存在对应key时，返回undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>); <span class=\"comment\">// 12</span></span><br><span class=\"line\">map.get(<span class=\"number\">2</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>4、has()<br>用法：map.has(key)<br>作用：判断map中是否有对应的key<br>返回：true/false，依据map中是否有对应的key，返回true或false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.has(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.has(<span class=\"number\">2</span>); <span class=\"comment\">// has</span></span><br></pre></td></tr></table></figure>\n\n<p>5、delete()<br>用法：map.delete(key)<br>作用：删除map中对应的key及value<br>返回：true/false，删除成功返回true，删除失败返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.delete(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(<span class=\"number\">2</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>6、clear()<br>用法：map.clear()<br>作用：清空map中的数据<br>返回：undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.clear(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"map的遍历方法\"><a href=\"#map的遍历方法\" class=\"headerlink\" title=\"map的遍历方法\"></a>map的遍历方法</h4><p>1、keys()<br>2、values()<br>3、entries()<br>4、forEach()</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/93b5a5940de8\">https://www.jianshu.com/p/93b5a5940de8</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是Map\"><a href=\"#什么是Map\" class=\"headerlink\" title=\"什么是Map?\"></a>什么是Map?</h4><p>由ES6提供的一种数据结构。它类似于对象，也是键值对的集合，但和对象不同的是，对象的键只能是字符串，map的键可以是各种类型的值（包括对象）。即，Object提供了 字符串-值 的对应，map提供了 值-值 的对应，是一种更完善的Hash结构实现。</p>\n<h4 id=\"怎么创建map？\"><a href=\"#怎么创建map？\" class=\"headerlink\" title=\"怎么创建map？\"></a>怎么创建map？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br></pre></td></tr></table></figure>\n<p>map可以使用一个对象作为键</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123; <span class=\"attr\">p</span>: <span class=\"string\">&#x27;string&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">map.set(o, <span class=\"string\">&#x27;text&#x27;</span>);</span><br><span class=\"line\">map.get(o); <span class=\"comment\">// text</span></span><br><span class=\"line\"></span><br><span class=\"line\">map.has(o); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(o);</span><br></pre></td></tr></table></figure>\n<p>map还可以接受一个数组作为参数，该数组成员是一个个表示键值对的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;Tom&#x27;</span>], [<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">12</span>]]);</span><br><span class=\"line\">map.size; <span class=\"comment\">// 2</span></span><br><span class=\"line\">map.has(<span class=\"string\">&#x27;name&#x27;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.get(<span class=\"string\">&#x27;age&#x27;</span>); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h5><p>如果对同一个键多次赋值，后面的值将覆盖前面的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"string\">&#x27;qw&#x27;</span>).set(<span class=\"number\">1</span>, <span class=\"string\">&#x27;sdf&#x27;</span>);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>); <span class=\"comment\">// sdf</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"map的实例属性和方法\"><a href=\"#map的实例属性和方法\" class=\"headerlink\" title=\"map的实例属性和方法\"></a>map的实例属性和方法</h4><p>1、size<br>用法：map.size<br>作用：获取map结构的大小<br>返回：map结构的长度大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.size; <span class=\"comment\">// 0</span></span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.size; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>2、set()<br>用法：map.set(key, value)<br>作用：向map中添加或修改map的数据<br>返回：修改后的map</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n\n<p>3、get()<br>用法：map.get(key)<br>作用：获取对应key的value值<br>返回：map结构中key对应的值，不存在对应key时，返回undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>); <span class=\"comment\">// 12</span></span><br><span class=\"line\">map.get(<span class=\"number\">2</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>4、has()<br>用法：map.has(key)<br>作用：判断map中是否有对应的key<br>返回：true/false，依据map中是否有对应的key，返回true或false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.has(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.has(<span class=\"number\">2</span>); <span class=\"comment\">// has</span></span><br></pre></td></tr></table></figure>\n\n<p>5、delete()<br>用法：map.delete(key)<br>作用：删除map中对应的key及value<br>返回：true/false，删除成功返回true，删除失败返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.delete(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(<span class=\"number\">2</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>6、clear()<br>用法：map.clear()<br>作用：清空map中的数据<br>返回：undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.clear(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"map的遍历方法\"><a href=\"#map的遍历方法\" class=\"headerlink\" title=\"map的遍历方法\"></a>map的遍历方法</h4><p>1、keys()<br>2、values()<br>3、entries()<br>4、forEach()</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/93b5a5940de8\">https://www.jianshu.com/p/93b5a5940de8</a></p>\n"},{"title":"基本数据类型-Symbol","date":"2022-08-19T05:37:24.000Z","_content":"\n#### 什么是Symbol?\n\n\n\n#### 有什么用处？\n\n#### Symbol的属性\n\n#### Symbol的方法\n","source":"_posts/about-symbol.md","raw":"---\ntitle: 基本数据类型-Symbol\ndate: 2022-08-19 13:37:24\ntags:\n---\n\n#### 什么是Symbol?\n\n\n\n#### 有什么用处？\n\n#### Symbol的属性\n\n#### Symbol的方法\n","slug":"about-symbol","published":1,"updated":"2022-08-19T05:42:42.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcf000fjktt1kb54m9z","content":"<h4 id=\"什么是Symbol\"><a href=\"#什么是Symbol\" class=\"headerlink\" title=\"什么是Symbol?\"></a>什么是Symbol?</h4><h4 id=\"有什么用处？\"><a href=\"#有什么用处？\" class=\"headerlink\" title=\"有什么用处？\"></a>有什么用处？</h4><h4 id=\"Symbol的属性\"><a href=\"#Symbol的属性\" class=\"headerlink\" title=\"Symbol的属性\"></a>Symbol的属性</h4><h4 id=\"Symbol的方法\"><a href=\"#Symbol的方法\" class=\"headerlink\" title=\"Symbol的方法\"></a>Symbol的方法</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是Symbol\"><a href=\"#什么是Symbol\" class=\"headerlink\" title=\"什么是Symbol?\"></a>什么是Symbol?</h4><h4 id=\"有什么用处？\"><a href=\"#有什么用处？\" class=\"headerlink\" title=\"有什么用处？\"></a>有什么用处？</h4><h4 id=\"Symbol的属性\"><a href=\"#Symbol的属性\" class=\"headerlink\" title=\"Symbol的属性\"></a>Symbol的属性</h4><h4 id=\"Symbol的方法\"><a href=\"#Symbol的方法\" class=\"headerlink\" title=\"Symbol的方法\"></a>Symbol的方法</h4>"},{"title":"使用hexo相关","date":"2022-03-26T13:14:29.000Z","_content":"\n## 一些使用hexo搭建博客时遇到的问题\n\n1、一段时间为使用hexo，重新打开，生成新页面时，终端报错：'hexo' 不是内部或外部命令，也不是可运行的程序或批处理文件  或 bash: hexo: command not found\n解决办法：重新运行命令：npm install hexo-cli -g\n","source":"_posts/about-use-hexo.md","raw":"---\ntitle: 使用hexo相关\ndate: 2022-03-26 21:14:29\ntags:\n---\n\n## 一些使用hexo搭建博客时遇到的问题\n\n1、一段时间为使用hexo，重新打开，生成新页面时，终端报错：'hexo' 不是内部或外部命令，也不是可运行的程序或批处理文件  或 bash: hexo: command not found\n解决办法：重新运行命令：npm install hexo-cli -g\n","slug":"about-use-hexo","published":1,"updated":"2022-08-10T03:11:53.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcg000gjktt6hgy5y9t","content":"<h2 id=\"一些使用hexo搭建博客时遇到的问题\"><a href=\"#一些使用hexo搭建博客时遇到的问题\" class=\"headerlink\" title=\"一些使用hexo搭建博客时遇到的问题\"></a>一些使用hexo搭建博客时遇到的问题</h2><p>1、一段时间为使用hexo，重新打开，生成新页面时，终端报错：’hexo’ 不是内部或外部命令，也不是可运行的程序或批处理文件  或 bash: hexo: command not found<br>解决办法：重新运行命令：npm install hexo-cli -g</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一些使用hexo搭建博客时遇到的问题\"><a href=\"#一些使用hexo搭建博客时遇到的问题\" class=\"headerlink\" title=\"一些使用hexo搭建博客时遇到的问题\"></a>一些使用hexo搭建博客时遇到的问题</h2><p>1、一段时间为使用hexo，重新打开，生成新页面时，终端报错：’hexo’ 不是内部或外部命令，也不是可运行的程序或批处理文件  或 bash: hexo: command not found<br>解决办法：重新运行命令：npm install hexo-cli -g</p>\n"},{"title":"数据结构与算法阅读笔记(1)","date":"2022-09-20T09:41:00.000Z","_content":"\nECMAScript 和 javascript 的关系\nECMAScript 是一个语言标准，JavaScript 是该标准(最流行)的一个实现。\n\nES5、ES6、ES2015、ES7、ES2016、ES8、ES2017 和 ES.Next 的区别\n\n(1)2009 年 12 月发布的 ECMAScript5(即 ES5，其中的 ES 是 ECMAScript 的简称)\n\n(2)ECMAScript2015(ES2015)在 2015 年 6 月标准化。负责起草 ECMAScript 规范的委员会决定把定义新标准的模式改为每年更新一次，新的特性\n一旦通过就加入标准。因此，ECMAScript 第六版更名为 ECMAScript2015(ES6)\n\n(3)2016 年 6 月，ECMAScript 第七版被标准化，称为 ECMAScript2016 或 ES2016(ES7)\n\n(4)2017 年 6 月，ECMAScript 第八版被标准化。我们称它为 ECMAScript2017 或 ES2017(ES8)\n\n(5)ES.Next 用来指代下一个版本的 ECMAScript\n\nES6 兼容性：http://kangax.github.io/compat-table/es6/\nES7 兼容性：http://kangax.github.io/compat-table/es2016plus/\n\nES5 中 class 类，使用属性存取器\n(1)声明 get 和 set 函数，只需要在我们要暴露和使用的函数名前面加上 get 或 set 关键字\n(2)可以用相同的名字声明类属性，或者在属性名前面加下划线，让这个属性看起来像是私有的\n\n```javascript\nclass Person {\n  constructor(name) {\n    this._name = name; // {1}\n  }\n  get name() {\n    // {2}\n    return this._name;\n  }\n  set name(value) {\n    // {3}\n    this._name = value;\n  }\n}\nlet lotrChar = new Person('Frodo');\nconsole.log(lotrChar.name); // {4} // Frodo\nlotrChar.name = 'Gandalf'; // {5}\nconsole.log(lotrChar.name); // Gandalf\nlotrChar._name = 'Sam'; // {6}\nconsole.log(lotrChar.name); // Sam\n```\n\n乘方运算符\n\n```javascript\nconst area = 3.14 * r * r;\nconst area = 3.14 * Math.pow(r, 2);\n// ES2016 中引入了**运算符，用来进行指数运算\nconst area = 3.14 * r ** 2;\n```\n\n[JavaScript 和 ECMAScript 的完整功能列表](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)\n\n###### TypeScript\n\nTypeScript 有一个名为鸭子类型的概念：如果它看起来像鸭子，像鸭子一样游泳，像鸭子一样叫，那么它一定是一只鸭子.\n(1)接口\n\n```javascript\n// 第一种定义接口的方式\ninterface Person {\n  name: string;\n  age: number;\n}\nfunction printName(person: Person) {\n  console.log(person.name);\n}\n/** 第二种定义接口的方式：Comparable 接口告诉 MyObject 类，它需要实现一个叫作 compareTo 的方法，\n并且该方法接收一个参数。在该方法内部，我们可以实现需要的逻辑。**/\ninterface Comparable {\n  compareTo(b): number;\n}\nclass MyObject implements Comparable {\n  age: number;\n  compareTo(b): number {\n    if (this.age === b.age) {\n      return 0;\n    }\n    return this.age > b.age ? 1 : -1;\n  }\n}\n```\n\n**JavaScript 中使用一些类型和错误检测功能方式：在计算机上全局安装 TypeScript，使用时，只需要在 JavaScript 文件的第一行添加一句 // @ts-check**\n\n###### 数组\n\n数组是最简单的内存数据结构。JavaScript 里也有数组类型，但它的第一个版本并没有支持数组\n\n(1)使用@@iterator 对象\nES2015 为 Array 类增加了一个@@iterator 属性，需要通过 Symbol.iterator 来访问\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet iterator = numbers[Symbol.iterator]();\nconsole.log(iterator.next().value); // 1\nconsole.log(iterator.next().value); // 2\nconsole.log(iterator.next().value); // 3\nconsole.log(iterator.next().value); // 4\nconsole.log(iterator.next().value); // 5\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\niterator = numbers[Symbol.iterator]();\nfor (const n of iterator) {\n  console.log(n);\n}\n\n// 复制已有数组\nlet numbers2 = Array.from(numbers);\nlet numbers3 = Array.of(...numbers);\n```\n\n(2)copyWithin\ncopyWithin 方法复制数组中的一系列元素到同一数组指定的起始位置\n\n```javascript\ncopyArray = [1, 2, 3, 4, 5, 6];\ncopyArray.copyWithin(1, 3, 5);\n// copyWithin(起始位置，开始位置，结束位置)\n// [1, 4, 5, 4, 5, 6]\n```\n\n(3)排序\n\n```javascript\n// 自定义排序\nconst friends = [\n  { name: 'John', age: 30 },\n  { name: 'Ana', age: 20 },\n  { name: 'Chris', age: 25 }, // ES2017 允许存在尾逗号\n];\nfunction comparePerson(a, b) {\n  if (a.age < b.age) {\n    return -1;\n  }\n  if (a.age > b.age) {\n    return 1;\n  }\n  return 0;\n}\nconsole.log(friends.sort(comparePerson));\n/**\n[ \n { name: 'Ana', age: 20 }, \n { name: 'Chris', age: 25 },\n { name: 'John', age: 30 }, \n]\n*/\n// 忽略大小写的比较\nconst names = ['Ana', 'ana', 'john', 'John']; // 重置数组的初始状态\nconsole.log(\n  names.sort((a, b) => {\n    if (a.toLowerCase() < b.toLowerCase()) {\n      return -1;\n    }\n    if (a.toLowerCase() > b.toLowerCase()) {\n      return 1;\n    }\n    return 0;\n  })\n);\n// 希望小写字母排在前面或者对带有重音符号的字符做排序的话，那么需要使用 localeCompare 方法\nconst names = ['Ana', 'ana', 'john', 'John'];\nnames.sort((a, b) => a.localeCompare(b));\n// ['ana', 'Ana', 'john', 'John']\n\nconst names2 = ['Maève', 'Maeve'];\nconsole.log(names2.sort((a, b) => a.localeCompare(b)));\n// [\"Maeve\", \"Maève\"]\n```\n\n###### 类型数组\n\n| 类型数组          | 数据类型            |\n| ----------------- | ------------------- |\n| Int8Array         | 8 位二进制补码整数  |\n| Uint8Array        | 8 位无符号整数      |\n| Uint8ClampedArray | 8 位无符号整数      |\n| Int16Array        | 16 位二进制补码整数 |\n| Uint16Array       | 16 位无符号整数     |\n| Int32Array        | 32 位二进制补码整数 |\n| Uint32Array       | 32 位无符号整数     |\n| Float32Array      | 32 位 IEEE 浮点数   |\n| Float64Array      | 64 位 IEEE 浮点数   |\n\n```javascript\nlet length = 5;\nlet int16 = new Int16Array(length);\nlet array16 = [];\narray16.length = length;\nfor (let i = 0; i < length; i++) {\n  int16[i] = i + 1;\n}\nconsole.log(int16);\n```\n\n类型数组作用：WebGL API、位操作、处理文件和图像\n\n[类型数组文档](https://web.dev/webgl-typed-arrays/)\n\n###### 栈\n\n栈是一种遵从后进先出（LIFO）原则的有序集合。新添加或待删除的元素都保存在栈的同一端，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底\n\n栈被用在编程语言的编译器和内存中保存变量、方法调用等，也被用于浏览器历史记录（浏览器的返回按钮）\n\n(1)创建一个基于数组的栈\n\n```javascript\nclass Stack {\n  constructor() {\n    this.items = [];\n  }\n  // 添加一个（或几个）新元素到栈顶\n  push(element) {\n    this.items.push(element);\n  }\n  // 移除栈顶的元素，同时返回被移除的元素\n  pop() {\n    return this.items.pop();\n  }\n  // 返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）\n  peek() {\n    return this.items[this.items.length - 1];\n  }\n  // 如果栈里没有任何元素就返回 true，否则返回 false\n  isEmpty() {\n    return this.items.length === 0;\n  }\n  // 返回栈里的元素个数。该方法和数组的 length 属性很类似\n  size() {\n    return this.items.length;\n  }\n  // 移除栈里的所有元素\n  clear() {\n    this.items = [];\n  }\n}\n```\n\n**在使用数组时，大部分方法的时间复杂度是 O(n)。O(n)的意思是，我们需要迭代整个数组直到找到要找的那个元素，在最坏的情况下需要迭代数组的所有位置，其中的 n 代表数组的长度。如果数组有更多元素的话，所需的时间会更长。另外，数组是元素的一个有序集合，为了保证元素排列有序，它会占用更多的内存空间。**\n(2)创建一个基于 JavaScript 对象的 Stack 类\n\n```javascript\nclass Stack {\n constructor() {\n  this.count = 0; // count 属性记录栈的大小,也能帮助我们从数据结构中添加和删除元素\n  this.items = {};\n }\n // 向栈中插入元素,只允许一次插入一个元素\n push(element) {\n  this.items[this.count] = element;\n  this.count++;\n }\n // 验证一个栈的大小\n size() {\n  return this.count;\n }\n // 获取栈是否为空\n isEmpty() {\n  return this.count === 0;\n }\n // 从栈中弹出元素\n pop() {\n  if (this.isEmpty()) {\n   return undefined;\n  }\n  this.count--;\n  const result = this.items[this.count];\n  delete this.items[this.count];\n  return result;\n }\n // 查看栈顶的值\n peek() {\n  if (this.isEmpty()) {\n   return undefined;\n  }\n  return this.items[this.count - 1];\n }\n // 清空栈\n clear() {\n  this.items = {};\n  this.count = 0;\n //  while (!this.isEmpty()) {\n //  this.pop();\n // }\n }\n toString() { \n  if (this.isEmpty()) { \n   return ''; \n  } \n  let objString = `${this.items[0]}`; // {1} \n  for (let i = 1; i < this.count; i++) { // {2} \n   objString = `${objString},${this.items[i]}`; // {3} \n  }\n  return objString; \n }\n}\n```\n\n**javascript实现私有属性的方法**\n下划线命名约定\n```javascript\n// 中使用下划线命名约定来标记一个属性为私有属性\nclass Stack { \n constructor() { \n  this._count = 0; \n  this._items = {}; \n } \n}\n```\n*下划线命名约定就是在属性名称之前加上一个下划线（_）。不过这种方式只是一种约定，并不能保护数据，而且只能依赖于使用我们代码的开发者所具备的常识*\n\n**用ES2015 的限定作用域 Symbol 实现类**\n","source":"_posts/data-structure1.md","raw":"---\ntitle: 数据结构与算法阅读笔记(1)\ndate: 2022-09-20 17:41:00\ntags:\n---\n\nECMAScript 和 javascript 的关系\nECMAScript 是一个语言标准，JavaScript 是该标准(最流行)的一个实现。\n\nES5、ES6、ES2015、ES7、ES2016、ES8、ES2017 和 ES.Next 的区别\n\n(1)2009 年 12 月发布的 ECMAScript5(即 ES5，其中的 ES 是 ECMAScript 的简称)\n\n(2)ECMAScript2015(ES2015)在 2015 年 6 月标准化。负责起草 ECMAScript 规范的委员会决定把定义新标准的模式改为每年更新一次，新的特性\n一旦通过就加入标准。因此，ECMAScript 第六版更名为 ECMAScript2015(ES6)\n\n(3)2016 年 6 月，ECMAScript 第七版被标准化，称为 ECMAScript2016 或 ES2016(ES7)\n\n(4)2017 年 6 月，ECMAScript 第八版被标准化。我们称它为 ECMAScript2017 或 ES2017(ES8)\n\n(5)ES.Next 用来指代下一个版本的 ECMAScript\n\nES6 兼容性：http://kangax.github.io/compat-table/es6/\nES7 兼容性：http://kangax.github.io/compat-table/es2016plus/\n\nES5 中 class 类，使用属性存取器\n(1)声明 get 和 set 函数，只需要在我们要暴露和使用的函数名前面加上 get 或 set 关键字\n(2)可以用相同的名字声明类属性，或者在属性名前面加下划线，让这个属性看起来像是私有的\n\n```javascript\nclass Person {\n  constructor(name) {\n    this._name = name; // {1}\n  }\n  get name() {\n    // {2}\n    return this._name;\n  }\n  set name(value) {\n    // {3}\n    this._name = value;\n  }\n}\nlet lotrChar = new Person('Frodo');\nconsole.log(lotrChar.name); // {4} // Frodo\nlotrChar.name = 'Gandalf'; // {5}\nconsole.log(lotrChar.name); // Gandalf\nlotrChar._name = 'Sam'; // {6}\nconsole.log(lotrChar.name); // Sam\n```\n\n乘方运算符\n\n```javascript\nconst area = 3.14 * r * r;\nconst area = 3.14 * Math.pow(r, 2);\n// ES2016 中引入了**运算符，用来进行指数运算\nconst area = 3.14 * r ** 2;\n```\n\n[JavaScript 和 ECMAScript 的完整功能列表](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)\n\n###### TypeScript\n\nTypeScript 有一个名为鸭子类型的概念：如果它看起来像鸭子，像鸭子一样游泳，像鸭子一样叫，那么它一定是一只鸭子.\n(1)接口\n\n```javascript\n// 第一种定义接口的方式\ninterface Person {\n  name: string;\n  age: number;\n}\nfunction printName(person: Person) {\n  console.log(person.name);\n}\n/** 第二种定义接口的方式：Comparable 接口告诉 MyObject 类，它需要实现一个叫作 compareTo 的方法，\n并且该方法接收一个参数。在该方法内部，我们可以实现需要的逻辑。**/\ninterface Comparable {\n  compareTo(b): number;\n}\nclass MyObject implements Comparable {\n  age: number;\n  compareTo(b): number {\n    if (this.age === b.age) {\n      return 0;\n    }\n    return this.age > b.age ? 1 : -1;\n  }\n}\n```\n\n**JavaScript 中使用一些类型和错误检测功能方式：在计算机上全局安装 TypeScript，使用时，只需要在 JavaScript 文件的第一行添加一句 // @ts-check**\n\n###### 数组\n\n数组是最简单的内存数据结构。JavaScript 里也有数组类型，但它的第一个版本并没有支持数组\n\n(1)使用@@iterator 对象\nES2015 为 Array 类增加了一个@@iterator 属性，需要通过 Symbol.iterator 来访问\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet iterator = numbers[Symbol.iterator]();\nconsole.log(iterator.next().value); // 1\nconsole.log(iterator.next().value); // 2\nconsole.log(iterator.next().value); // 3\nconsole.log(iterator.next().value); // 4\nconsole.log(iterator.next().value); // 5\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\niterator = numbers[Symbol.iterator]();\nfor (const n of iterator) {\n  console.log(n);\n}\n\n// 复制已有数组\nlet numbers2 = Array.from(numbers);\nlet numbers3 = Array.of(...numbers);\n```\n\n(2)copyWithin\ncopyWithin 方法复制数组中的一系列元素到同一数组指定的起始位置\n\n```javascript\ncopyArray = [1, 2, 3, 4, 5, 6];\ncopyArray.copyWithin(1, 3, 5);\n// copyWithin(起始位置，开始位置，结束位置)\n// [1, 4, 5, 4, 5, 6]\n```\n\n(3)排序\n\n```javascript\n// 自定义排序\nconst friends = [\n  { name: 'John', age: 30 },\n  { name: 'Ana', age: 20 },\n  { name: 'Chris', age: 25 }, // ES2017 允许存在尾逗号\n];\nfunction comparePerson(a, b) {\n  if (a.age < b.age) {\n    return -1;\n  }\n  if (a.age > b.age) {\n    return 1;\n  }\n  return 0;\n}\nconsole.log(friends.sort(comparePerson));\n/**\n[ \n { name: 'Ana', age: 20 }, \n { name: 'Chris', age: 25 },\n { name: 'John', age: 30 }, \n]\n*/\n// 忽略大小写的比较\nconst names = ['Ana', 'ana', 'john', 'John']; // 重置数组的初始状态\nconsole.log(\n  names.sort((a, b) => {\n    if (a.toLowerCase() < b.toLowerCase()) {\n      return -1;\n    }\n    if (a.toLowerCase() > b.toLowerCase()) {\n      return 1;\n    }\n    return 0;\n  })\n);\n// 希望小写字母排在前面或者对带有重音符号的字符做排序的话，那么需要使用 localeCompare 方法\nconst names = ['Ana', 'ana', 'john', 'John'];\nnames.sort((a, b) => a.localeCompare(b));\n// ['ana', 'Ana', 'john', 'John']\n\nconst names2 = ['Maève', 'Maeve'];\nconsole.log(names2.sort((a, b) => a.localeCompare(b)));\n// [\"Maeve\", \"Maève\"]\n```\n\n###### 类型数组\n\n| 类型数组          | 数据类型            |\n| ----------------- | ------------------- |\n| Int8Array         | 8 位二进制补码整数  |\n| Uint8Array        | 8 位无符号整数      |\n| Uint8ClampedArray | 8 位无符号整数      |\n| Int16Array        | 16 位二进制补码整数 |\n| Uint16Array       | 16 位无符号整数     |\n| Int32Array        | 32 位二进制补码整数 |\n| Uint32Array       | 32 位无符号整数     |\n| Float32Array      | 32 位 IEEE 浮点数   |\n| Float64Array      | 64 位 IEEE 浮点数   |\n\n```javascript\nlet length = 5;\nlet int16 = new Int16Array(length);\nlet array16 = [];\narray16.length = length;\nfor (let i = 0; i < length; i++) {\n  int16[i] = i + 1;\n}\nconsole.log(int16);\n```\n\n类型数组作用：WebGL API、位操作、处理文件和图像\n\n[类型数组文档](https://web.dev/webgl-typed-arrays/)\n\n###### 栈\n\n栈是一种遵从后进先出（LIFO）原则的有序集合。新添加或待删除的元素都保存在栈的同一端，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底\n\n栈被用在编程语言的编译器和内存中保存变量、方法调用等，也被用于浏览器历史记录（浏览器的返回按钮）\n\n(1)创建一个基于数组的栈\n\n```javascript\nclass Stack {\n  constructor() {\n    this.items = [];\n  }\n  // 添加一个（或几个）新元素到栈顶\n  push(element) {\n    this.items.push(element);\n  }\n  // 移除栈顶的元素，同时返回被移除的元素\n  pop() {\n    return this.items.pop();\n  }\n  // 返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）\n  peek() {\n    return this.items[this.items.length - 1];\n  }\n  // 如果栈里没有任何元素就返回 true，否则返回 false\n  isEmpty() {\n    return this.items.length === 0;\n  }\n  // 返回栈里的元素个数。该方法和数组的 length 属性很类似\n  size() {\n    return this.items.length;\n  }\n  // 移除栈里的所有元素\n  clear() {\n    this.items = [];\n  }\n}\n```\n\n**在使用数组时，大部分方法的时间复杂度是 O(n)。O(n)的意思是，我们需要迭代整个数组直到找到要找的那个元素，在最坏的情况下需要迭代数组的所有位置，其中的 n 代表数组的长度。如果数组有更多元素的话，所需的时间会更长。另外，数组是元素的一个有序集合，为了保证元素排列有序，它会占用更多的内存空间。**\n(2)创建一个基于 JavaScript 对象的 Stack 类\n\n```javascript\nclass Stack {\n constructor() {\n  this.count = 0; // count 属性记录栈的大小,也能帮助我们从数据结构中添加和删除元素\n  this.items = {};\n }\n // 向栈中插入元素,只允许一次插入一个元素\n push(element) {\n  this.items[this.count] = element;\n  this.count++;\n }\n // 验证一个栈的大小\n size() {\n  return this.count;\n }\n // 获取栈是否为空\n isEmpty() {\n  return this.count === 0;\n }\n // 从栈中弹出元素\n pop() {\n  if (this.isEmpty()) {\n   return undefined;\n  }\n  this.count--;\n  const result = this.items[this.count];\n  delete this.items[this.count];\n  return result;\n }\n // 查看栈顶的值\n peek() {\n  if (this.isEmpty()) {\n   return undefined;\n  }\n  return this.items[this.count - 1];\n }\n // 清空栈\n clear() {\n  this.items = {};\n  this.count = 0;\n //  while (!this.isEmpty()) {\n //  this.pop();\n // }\n }\n toString() { \n  if (this.isEmpty()) { \n   return ''; \n  } \n  let objString = `${this.items[0]}`; // {1} \n  for (let i = 1; i < this.count; i++) { // {2} \n   objString = `${objString},${this.items[i]}`; // {3} \n  }\n  return objString; \n }\n}\n```\n\n**javascript实现私有属性的方法**\n下划线命名约定\n```javascript\n// 中使用下划线命名约定来标记一个属性为私有属性\nclass Stack { \n constructor() { \n  this._count = 0; \n  this._items = {}; \n } \n}\n```\n*下划线命名约定就是在属性名称之前加上一个下划线（_）。不过这种方式只是一种约定，并不能保护数据，而且只能依赖于使用我们代码的开发者所具备的常识*\n\n**用ES2015 的限定作用域 Symbol 实现类**\n","slug":"data-structure1","published":1,"updated":"2022-09-23T03:29:09.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcg000hjkttece31eka","content":"<p>ECMAScript 和 javascript 的关系<br>ECMAScript 是一个语言标准，JavaScript 是该标准(最流行)的一个实现。</p>\n<p>ES5、ES6、ES2015、ES7、ES2016、ES8、ES2017 和 ES.Next 的区别</p>\n<p>(1)2009 年 12 月发布的 ECMAScript5(即 ES5，其中的 ES 是 ECMAScript 的简称)</p>\n<p>(2)ECMAScript2015(ES2015)在 2015 年 6 月标准化。负责起草 ECMAScript 规范的委员会决定把定义新标准的模式改为每年更新一次，新的特性<br>一旦通过就加入标准。因此，ECMAScript 第六版更名为 ECMAScript2015(ES6)</p>\n<p>(3)2016 年 6 月，ECMAScript 第七版被标准化，称为 ECMAScript2016 或 ES2016(ES7)</p>\n<p>(4)2017 年 6 月，ECMAScript 第八版被标准化。我们称它为 ECMAScript2017 或 ES2017(ES8)</p>\n<p>(5)ES.Next 用来指代下一个版本的 ECMAScript</p>\n<p>ES6 兼容性：<a href=\"http://kangax.github.io/compat-table/es6/\">http://kangax.github.io/compat-table/es6/</a><br>ES7 兼容性：<a href=\"http://kangax.github.io/compat-table/es2016plus/\">http://kangax.github.io/compat-table/es2016plus/</a></p>\n<p>ES5 中 class 类，使用属性存取器<br>(1)声明 get 和 set 函数，只需要在我们要暴露和使用的函数名前面加上 get 或 set 关键字<br>(2)可以用相同的名字声明类属性，或者在属性名前面加下划线，让这个属性看起来像是私有的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._name = name; <span class=\"comment\">// &#123;1&#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title\">name</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &#123;2&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title\">name</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &#123;3&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lotrChar = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Frodo&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lotrChar.name); <span class=\"comment\">// &#123;4&#125; // Frodo</span></span><br><span class=\"line\">lotrChar.name = <span class=\"string\">&#x27;Gandalf&#x27;</span>; <span class=\"comment\">// &#123;5&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lotrChar.name); <span class=\"comment\">// Gandalf</span></span><br><span class=\"line\">lotrChar._name = <span class=\"string\">&#x27;Sam&#x27;</span>; <span class=\"comment\">// &#123;6&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lotrChar.name); <span class=\"comment\">// Sam</span></span><br></pre></td></tr></table></figure>\n\n<p>乘方运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> area = <span class=\"number\">3.14</span> * r * r;</span><br><span class=\"line\"><span class=\"keyword\">const</span> area = <span class=\"number\">3.14</span> * <span class=\"built_in\">Math</span>.pow(r, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// ES2016 中引入了**运算符，用来进行指数运算</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> area = <span class=\"number\">3.14</span> * r ** <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">JavaScript 和 ECMAScript 的完整功能列表</a></p>\n<h6 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h6><p>TypeScript 有一个名为鸭子类型的概念：如果它看起来像鸭子，像鸭子一样游泳，像鸭子一样叫，那么它一定是一只鸭子.<br>(1)接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种定义接口的方式</span></span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\">person: Person</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(person.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** 第二种定义接口的方式：Comparable 接口告诉 MyObject 类，它需要实现一个叫作 compareTo 的方法，</span></span><br><span class=\"line\"><span class=\"comment\">并且该方法接收一个参数。在该方法内部，我们可以实现需要的逻辑。**/</span></span><br><span class=\"line\">interface Comparable &#123;</span><br><span class=\"line\">  compareTo(b): number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObject</span> <span class=\"title\">implements</span> <span class=\"title\">Comparable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: number;</span><br><span class=\"line\">  compareTo(b): number &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.age === b.age) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.age &gt; b.age ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>JavaScript 中使用一些类型和错误检测功能方式：在计算机上全局安装 TypeScript，使用时，只需要在 JavaScript 文件的第一行添加一句 // @ts-check</strong></p>\n<h6 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h6><p>数组是最简单的内存数据结构。JavaScript 里也有数组类型，但它的第一个版本并没有支持数组</p>\n<p>(1)使用@@iterator 对象<br>ES2015 为 Array 类增加了一个@@iterator 属性，需要通过 Symbol.iterator 来访问</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = numbers[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">iterator = numbers[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> n <span class=\"keyword\">of</span> iterator) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制已有数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers2 = <span class=\"built_in\">Array</span>.from(numbers);</span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers3 = <span class=\"built_in\">Array</span>.of(...numbers);</span><br></pre></td></tr></table></figure>\n\n<p>(2)copyWithin<br>copyWithin 方法复制数组中的一系列元素到同一数组指定的起始位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copyArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">copyArray.copyWithin(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// copyWithin(起始位置，开始位置，结束位置)</span></span><br><span class=\"line\"><span class=\"comment\">// [1, 4, 5, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<p>(3)排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义排序</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> friends = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Ana&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Chris&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;, <span class=\"comment\">// ES2017 允许存在尾逗号</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">comparePerson</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a.age &lt; b.age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a.age &gt; b.age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(friends.sort(comparePerson));</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">[ </span></span><br><span class=\"line\"><span class=\"comment\"> &#123; name: &#x27;Ana&#x27;, age: 20 &#125;, </span></span><br><span class=\"line\"><span class=\"comment\"> &#123; name: &#x27;Chris&#x27;, age: 25 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> &#123; name: &#x27;John&#x27;, age: 30 &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// 忽略大小写的比较</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;Ana&#x27;</span>, <span class=\"string\">&#x27;ana&#x27;</span>, <span class=\"string\">&#x27;john&#x27;</span>, <span class=\"string\">&#x27;John&#x27;</span>]; <span class=\"comment\">// 重置数组的初始状态</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  names.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.toLowerCase() &lt; b.toLowerCase()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.toLowerCase() &gt; b.toLowerCase()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 希望小写字母排在前面或者对带有重音符号的字符做排序的话，那么需要使用 localeCompare 方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;Ana&#x27;</span>, <span class=\"string\">&#x27;ana&#x27;</span>, <span class=\"string\">&#x27;john&#x27;</span>, <span class=\"string\">&#x27;John&#x27;</span>];</span><br><span class=\"line\">names.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.localeCompare(b));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;ana&#x27;, &#x27;Ana&#x27;, &#x27;john&#x27;, &#x27;John&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> names2 = [<span class=\"string\">&#x27;Maève&#x27;</span>, <span class=\"string\">&#x27;Maeve&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names2.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.localeCompare(b)));</span><br><span class=\"line\"><span class=\"comment\">// [&quot;Maeve&quot;, &quot;Maève&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"类型数组\"><a href=\"#类型数组\" class=\"headerlink\" title=\"类型数组\"></a>类型数组</h6><table>\n<thead>\n<tr>\n<th>类型数组</th>\n<th>数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Int8Array</td>\n<td>8 位二进制补码整数</td>\n</tr>\n<tr>\n<td>Uint8Array</td>\n<td>8 位无符号整数</td>\n</tr>\n<tr>\n<td>Uint8ClampedArray</td>\n<td>8 位无符号整数</td>\n</tr>\n<tr>\n<td>Int16Array</td>\n<td>16 位二进制补码整数</td>\n</tr>\n<tr>\n<td>Uint16Array</td>\n<td>16 位无符号整数</td>\n</tr>\n<tr>\n<td>Int32Array</td>\n<td>32 位二进制补码整数</td>\n</tr>\n<tr>\n<td>Uint32Array</td>\n<td>32 位无符号整数</td>\n</tr>\n<tr>\n<td>Float32Array</td>\n<td>32 位 IEEE 浮点数</td>\n</tr>\n<tr>\n<td>Float64Array</td>\n<td>64 位 IEEE 浮点数</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> length = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> int16 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(length);</span><br><span class=\"line\"><span class=\"keyword\">let</span> array16 = [];</span><br><span class=\"line\">array16.length = length;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">  int16[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(int16);</span><br></pre></td></tr></table></figure>\n\n<p>类型数组作用：WebGL API、位操作、处理文件和图像</p>\n<p><a href=\"https://web.dev/webgl-typed-arrays/\">类型数组文档</a></p>\n<h6 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h6><p>栈是一种遵从后进先出（LIFO）原则的有序集合。新添加或待删除的元素都保存在栈的同一端，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底</p>\n<p>栈被用在编程语言的编译器和内存中保存变量、方法调用等，也被用于浏览器历史记录（浏览器的返回按钮）</p>\n<p>(1)创建一个基于数组的栈</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.items = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加一个（或几个）新元素到栈顶</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">push</span>(<span class=\"params\">element</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.items.push(element);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 移除栈顶的元素，同时返回被移除的元素</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">pop</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">peek</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items[<span class=\"built_in\">this</span>.items.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果栈里没有任何元素就返回 true，否则返回 false</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">isEmpty</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回栈里的元素个数。该方法和数组的 length 属性很类似</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">size</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 移除栈里的所有元素</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">clear</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.items = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在使用数组时，大部分方法的时间复杂度是 O(n)。O(n)的意思是，我们需要迭代整个数组直到找到要找的那个元素，在最坏的情况下需要迭代数组的所有位置，其中的 n 代表数组的长度。如果数组有更多元素的话，所需的时间会更长。另外，数组是元素的一个有序集合，为了保证元素排列有序，它会占用更多的内存空间。</strong><br>(2)创建一个基于 JavaScript 对象的 Stack 类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.count = <span class=\"number\">0</span>; <span class=\"comment\">// count 属性记录栈的大小,也能帮助我们从数据结构中添加和删除元素</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = &#123;&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 向栈中插入元素,只允许一次插入一个元素</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">push</span>(<span class=\"params\">element</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items[<span class=\"built_in\">this</span>.count] = element;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.count++;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 验证一个栈的大小</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">size</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.count;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 获取栈是否为空</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">isEmpty</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.count === <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 从栈中弹出元素</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">pop</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.isEmpty()) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.count--;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"built_in\">this</span>.items[<span class=\"built_in\">this</span>.count];</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> <span class=\"built_in\">this</span>.items[<span class=\"built_in\">this</span>.count];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 查看栈顶的值</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">peek</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.isEmpty()) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items[<span class=\"built_in\">this</span>.count - <span class=\"number\">1</span>];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 清空栈</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">clear</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"comment\">//  while (!this.isEmpty()) &#123;</span></span><br><span class=\"line\"> <span class=\"comment\">//  this.pop();</span></span><br><span class=\"line\"> <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.isEmpty()) &#123; </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> objString = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.items[<span class=\"number\">0</span>]&#125;</span>`</span>; <span class=\"comment\">// &#123;1&#125; </span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">this</span>.count; i++) &#123; <span class=\"comment\">// &#123;2&#125; </span></span><br><span class=\"line\">   objString = <span class=\"string\">`<span class=\"subst\">$&#123;objString&#125;</span>,<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.items[i]&#125;</span>`</span>; <span class=\"comment\">// &#123;3&#125; </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> objString; </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>javascript实现私有属性的方法</strong><br>下划线命名约定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中使用下划线命名约定来标记一个属性为私有属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> </span>&#123; </span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; </span><br><span class=\"line\">  <span class=\"built_in\">this</span>._count = <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"built_in\">this</span>._items = &#123;&#125;; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>下划线命名约定就是在属性名称之前加上一个下划线（_）。不过这种方式只是一种约定，并不能保护数据，而且只能依赖于使用我们代码的开发者所具备的常识</em></p>\n<p><strong>用ES2015 的限定作用域 Symbol 实现类</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>ECMAScript 和 javascript 的关系<br>ECMAScript 是一个语言标准，JavaScript 是该标准(最流行)的一个实现。</p>\n<p>ES5、ES6、ES2015、ES7、ES2016、ES8、ES2017 和 ES.Next 的区别</p>\n<p>(1)2009 年 12 月发布的 ECMAScript5(即 ES5，其中的 ES 是 ECMAScript 的简称)</p>\n<p>(2)ECMAScript2015(ES2015)在 2015 年 6 月标准化。负责起草 ECMAScript 规范的委员会决定把定义新标准的模式改为每年更新一次，新的特性<br>一旦通过就加入标准。因此，ECMAScript 第六版更名为 ECMAScript2015(ES6)</p>\n<p>(3)2016 年 6 月，ECMAScript 第七版被标准化，称为 ECMAScript2016 或 ES2016(ES7)</p>\n<p>(4)2017 年 6 月，ECMAScript 第八版被标准化。我们称它为 ECMAScript2017 或 ES2017(ES8)</p>\n<p>(5)ES.Next 用来指代下一个版本的 ECMAScript</p>\n<p>ES6 兼容性：<a href=\"http://kangax.github.io/compat-table/es6/\">http://kangax.github.io/compat-table/es6/</a><br>ES7 兼容性：<a href=\"http://kangax.github.io/compat-table/es2016plus/\">http://kangax.github.io/compat-table/es2016plus/</a></p>\n<p>ES5 中 class 类，使用属性存取器<br>(1)声明 get 和 set 函数，只需要在我们要暴露和使用的函数名前面加上 get 或 set 关键字<br>(2)可以用相同的名字声明类属性，或者在属性名前面加下划线，让这个属性看起来像是私有的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._name = name; <span class=\"comment\">// &#123;1&#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title\">name</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &#123;2&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title\">name</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &#123;3&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lotrChar = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Frodo&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lotrChar.name); <span class=\"comment\">// &#123;4&#125; // Frodo</span></span><br><span class=\"line\">lotrChar.name = <span class=\"string\">&#x27;Gandalf&#x27;</span>; <span class=\"comment\">// &#123;5&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lotrChar.name); <span class=\"comment\">// Gandalf</span></span><br><span class=\"line\">lotrChar._name = <span class=\"string\">&#x27;Sam&#x27;</span>; <span class=\"comment\">// &#123;6&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lotrChar.name); <span class=\"comment\">// Sam</span></span><br></pre></td></tr></table></figure>\n\n<p>乘方运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> area = <span class=\"number\">3.14</span> * r * r;</span><br><span class=\"line\"><span class=\"keyword\">const</span> area = <span class=\"number\">3.14</span> * <span class=\"built_in\">Math</span>.pow(r, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// ES2016 中引入了**运算符，用来进行指数运算</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> area = <span class=\"number\">3.14</span> * r ** <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">JavaScript 和 ECMAScript 的完整功能列表</a></p>\n<h6 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h6><p>TypeScript 有一个名为鸭子类型的概念：如果它看起来像鸭子，像鸭子一样游泳，像鸭子一样叫，那么它一定是一只鸭子.<br>(1)接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种定义接口的方式</span></span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\">person: Person</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(person.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** 第二种定义接口的方式：Comparable 接口告诉 MyObject 类，它需要实现一个叫作 compareTo 的方法，</span></span><br><span class=\"line\"><span class=\"comment\">并且该方法接收一个参数。在该方法内部，我们可以实现需要的逻辑。**/</span></span><br><span class=\"line\">interface Comparable &#123;</span><br><span class=\"line\">  compareTo(b): number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObject</span> <span class=\"title\">implements</span> <span class=\"title\">Comparable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: number;</span><br><span class=\"line\">  compareTo(b): number &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.age === b.age) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.age &gt; b.age ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>JavaScript 中使用一些类型和错误检测功能方式：在计算机上全局安装 TypeScript，使用时，只需要在 JavaScript 文件的第一行添加一句 // @ts-check</strong></p>\n<h6 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h6><p>数组是最简单的内存数据结构。JavaScript 里也有数组类型，但它的第一个版本并没有支持数组</p>\n<p>(1)使用@@iterator 对象<br>ES2015 为 Array 类增加了一个@@iterator 属性，需要通过 Symbol.iterator 来访问</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = numbers[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">iterator = numbers[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> n <span class=\"keyword\">of</span> iterator) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制已有数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers2 = <span class=\"built_in\">Array</span>.from(numbers);</span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers3 = <span class=\"built_in\">Array</span>.of(...numbers);</span><br></pre></td></tr></table></figure>\n\n<p>(2)copyWithin<br>copyWithin 方法复制数组中的一系列元素到同一数组指定的起始位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copyArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">copyArray.copyWithin(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// copyWithin(起始位置，开始位置，结束位置)</span></span><br><span class=\"line\"><span class=\"comment\">// [1, 4, 5, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<p>(3)排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义排序</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> friends = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Ana&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Chris&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;, <span class=\"comment\">// ES2017 允许存在尾逗号</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">comparePerson</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a.age &lt; b.age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a.age &gt; b.age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(friends.sort(comparePerson));</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">[ </span></span><br><span class=\"line\"><span class=\"comment\"> &#123; name: &#x27;Ana&#x27;, age: 20 &#125;, </span></span><br><span class=\"line\"><span class=\"comment\"> &#123; name: &#x27;Chris&#x27;, age: 25 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> &#123; name: &#x27;John&#x27;, age: 30 &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// 忽略大小写的比较</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;Ana&#x27;</span>, <span class=\"string\">&#x27;ana&#x27;</span>, <span class=\"string\">&#x27;john&#x27;</span>, <span class=\"string\">&#x27;John&#x27;</span>]; <span class=\"comment\">// 重置数组的初始状态</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  names.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.toLowerCase() &lt; b.toLowerCase()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.toLowerCase() &gt; b.toLowerCase()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 希望小写字母排在前面或者对带有重音符号的字符做排序的话，那么需要使用 localeCompare 方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;Ana&#x27;</span>, <span class=\"string\">&#x27;ana&#x27;</span>, <span class=\"string\">&#x27;john&#x27;</span>, <span class=\"string\">&#x27;John&#x27;</span>];</span><br><span class=\"line\">names.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.localeCompare(b));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;ana&#x27;, &#x27;Ana&#x27;, &#x27;john&#x27;, &#x27;John&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> names2 = [<span class=\"string\">&#x27;Maève&#x27;</span>, <span class=\"string\">&#x27;Maeve&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names2.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.localeCompare(b)));</span><br><span class=\"line\"><span class=\"comment\">// [&quot;Maeve&quot;, &quot;Maève&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"类型数组\"><a href=\"#类型数组\" class=\"headerlink\" title=\"类型数组\"></a>类型数组</h6><table>\n<thead>\n<tr>\n<th>类型数组</th>\n<th>数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Int8Array</td>\n<td>8 位二进制补码整数</td>\n</tr>\n<tr>\n<td>Uint8Array</td>\n<td>8 位无符号整数</td>\n</tr>\n<tr>\n<td>Uint8ClampedArray</td>\n<td>8 位无符号整数</td>\n</tr>\n<tr>\n<td>Int16Array</td>\n<td>16 位二进制补码整数</td>\n</tr>\n<tr>\n<td>Uint16Array</td>\n<td>16 位无符号整数</td>\n</tr>\n<tr>\n<td>Int32Array</td>\n<td>32 位二进制补码整数</td>\n</tr>\n<tr>\n<td>Uint32Array</td>\n<td>32 位无符号整数</td>\n</tr>\n<tr>\n<td>Float32Array</td>\n<td>32 位 IEEE 浮点数</td>\n</tr>\n<tr>\n<td>Float64Array</td>\n<td>64 位 IEEE 浮点数</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> length = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> int16 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(length);</span><br><span class=\"line\"><span class=\"keyword\">let</span> array16 = [];</span><br><span class=\"line\">array16.length = length;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">  int16[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(int16);</span><br></pre></td></tr></table></figure>\n\n<p>类型数组作用：WebGL API、位操作、处理文件和图像</p>\n<p><a href=\"https://web.dev/webgl-typed-arrays/\">类型数组文档</a></p>\n<h6 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h6><p>栈是一种遵从后进先出（LIFO）原则的有序集合。新添加或待删除的元素都保存在栈的同一端，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底</p>\n<p>栈被用在编程语言的编译器和内存中保存变量、方法调用等，也被用于浏览器历史记录（浏览器的返回按钮）</p>\n<p>(1)创建一个基于数组的栈</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.items = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加一个（或几个）新元素到栈顶</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">push</span>(<span class=\"params\">element</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.items.push(element);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 移除栈顶的元素，同时返回被移除的元素</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">pop</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">peek</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items[<span class=\"built_in\">this</span>.items.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果栈里没有任何元素就返回 true，否则返回 false</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">isEmpty</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回栈里的元素个数。该方法和数组的 length 属性很类似</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">size</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 移除栈里的所有元素</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">clear</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.items = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在使用数组时，大部分方法的时间复杂度是 O(n)。O(n)的意思是，我们需要迭代整个数组直到找到要找的那个元素，在最坏的情况下需要迭代数组的所有位置，其中的 n 代表数组的长度。如果数组有更多元素的话，所需的时间会更长。另外，数组是元素的一个有序集合，为了保证元素排列有序，它会占用更多的内存空间。</strong><br>(2)创建一个基于 JavaScript 对象的 Stack 类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.count = <span class=\"number\">0</span>; <span class=\"comment\">// count 属性记录栈的大小,也能帮助我们从数据结构中添加和删除元素</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = &#123;&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 向栈中插入元素,只允许一次插入一个元素</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">push</span>(<span class=\"params\">element</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items[<span class=\"built_in\">this</span>.count] = element;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.count++;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 验证一个栈的大小</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">size</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.count;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 获取栈是否为空</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">isEmpty</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.count === <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 从栈中弹出元素</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">pop</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.isEmpty()) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.count--;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"built_in\">this</span>.items[<span class=\"built_in\">this</span>.count];</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> <span class=\"built_in\">this</span>.items[<span class=\"built_in\">this</span>.count];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 查看栈顶的值</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">peek</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.isEmpty()) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items[<span class=\"built_in\">this</span>.count - <span class=\"number\">1</span>];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 清空栈</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">clear</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"comment\">//  while (!this.isEmpty()) &#123;</span></span><br><span class=\"line\"> <span class=\"comment\">//  this.pop();</span></span><br><span class=\"line\"> <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.isEmpty()) &#123; </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> objString = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.items[<span class=\"number\">0</span>]&#125;</span>`</span>; <span class=\"comment\">// &#123;1&#125; </span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">this</span>.count; i++) &#123; <span class=\"comment\">// &#123;2&#125; </span></span><br><span class=\"line\">   objString = <span class=\"string\">`<span class=\"subst\">$&#123;objString&#125;</span>,<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.items[i]&#125;</span>`</span>; <span class=\"comment\">// &#123;3&#125; </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> objString; </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>javascript实现私有属性的方法</strong><br>下划线命名约定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中使用下划线命名约定来标记一个属性为私有属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> </span>&#123; </span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; </span><br><span class=\"line\">  <span class=\"built_in\">this</span>._count = <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"built_in\">this</span>._items = &#123;&#125;; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>下划线命名约定就是在属性名称之前加上一个下划线（_）。不过这种方式只是一种约定，并不能保护数据，而且只能依赖于使用我们代码的开发者所具备的常识</em></p>\n<p><strong>用ES2015 的限定作用域 Symbol 实现类</strong></p>\n"},{"title":"装箱拆箱操作","date":"2022-08-09T05:43:57.000Z","_content":"\n我们都知道属性和方法是对象上的，但是基本数据类型可以访问属性和方法，比如：'hello world'.length。这是由于浏览器在内部做了装箱和拆箱操作。\n\n#### 什么是装箱拆箱？\n装箱：把基本数据类型转化为对应的引用类型的操作\n拆箱：把引用类型转化为基本数据类型的操作\n\n基本数据类型：字符串(String)、数字(Number)、布尔(Boolean)、空(Null)、未定义(Undefined)、Symbol\n引用数据类型：对象(Object)、数组(Array)、函数(Function)\n四个基本的包装类型 String、Number、Boolean、Symbol\n\n什么是包装类型？\n在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，之所以具有对象特征的原因是字符串、数值、布尔类型数据是JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型\n\n#### 装箱\n装箱分为显式装箱和隐式装箱\n\n###### 显式装箱\n通过基本包装类型对象对基本类型进行显式装箱，即通过new的方式声明数据\n```JavaScript\nvar string = new String('test_string');\nvar number = new Number(1);\n```\n显式装箱可以对声明的对象进行属性和方法的添加，这是因为通过new创建的实例，在执行流离开当前作用域之前一直保留在内存中\n```JavaScript\nvar string = new String('test_string');\nstring.name = 'for test';\nstring.sayHi = function(){\n    console.log('this is test string');\n}\nconsole.log(string.name); // for test\nstring.sayHi(); // this is test string\n```\n\n###### 隐式装箱\n隐式装箱是引擎自动执行的\n基本类型不能添加属性和方法，添加会报错。但是常常在使用的时候，可以直接调用方法，比如：'test_string'.substring()、'test_string'.indexOf()等，这是由于浏览器在内部做了隐式装箱。\n\n下面以一个例子进行说明：\n```JavaScript\n// 第一步\nvar string = 'test_string';\n// 第二步\nvar result = string.substring(4);\nconsole.log(result); // _string\n```\n在上面这段代码里面实际的执行步骤是：\n1、先创建一个String类型的一个实例\n2、在实例中调用方法\n3、销毁这个实例\n```JavaScript\nvar string = 'test_string';\n// 1\nvar newString = new String(string);\n// 2\nvar result = newString.substring(4);\n// 3\nnewString = null;\n```\n基于以上的隐式装箱操作，我们可以在基本类型上使用方法\n隐式装箱当读取一个基本类型值时，后台会创建一个该基本类型所对应的基本包装类型对象。在这个基本类型的对象上调用方法，其实就是在这个基本类型对象上调用方法。这个基本包装类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立即被销毁。这也是在基本类型上添加属性和方法会不识别或报错的原因了\n\n\n显式装箱可以添加属性和方法，隐式装箱不能添加属性和方法\n\n引用类型与基本包装类型的主要区别就是对象的生存期，使用new创建的引用类型实例当执行流离开当前作用域之前，都一直保存在内存中，而自动创建的基本包装类型的对象，则只存在于一行代码执行的瞬间，然后就被销毁。这就意味着我们不能给基本包装类型添加属性和方法。\n#### 拆箱\n拆箱是和装箱相反的操作，即把引用类型转换成基本的数据类型。通常通过引用类型的valueOf()和toString()方法来实现，toString()返回字符串，valueOf()返回对象本身。\n需要注意的是，toString() 和 valueOf() 返回的值有一定差别\n```JavaScript\nvar numberObj = new Number(64);\nvar stringObj = new String('64');\nconsole.log(typeof numberObj); // object\nconsole.log(typeof stringObj); // object\n// 拆箱\nconsole.log(numberObj.valueOf()); // 64\nconsole.log(typeof numberObj.valueOf()); // number 基本的数字类型\nconsole.log(numberObj.toString()); // '64'\nconsole.log(typeof numberObj.toString()); // string 基本的字符类型\n\nconsole.log(stringObj.valueOf()); // '64'\nconsole.log(typeof stringObj.valueOf()); // string 基本的数据类型\nconsole.log(stringObj.toString()); // '64'\nconsole.log(typeof stringObj.toString()); // string 基本的数据类型\n```\n在进行拆箱操作的时候，toString()和valueOf()先执行哪个？在回答这个问题之前，我们先暂停一下，看一下包装类型中的symbol。\n\n这里简单介绍一下Symbol，感兴趣的可以自己去学习。\n\n###### Symbol\nSymbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突\n创建Symbol\n```JavaScript\nlet sym1 = Symbol();\nlet sym2 = Symbol('sym');\n```\n注意：\n1、每次调用Symbol都会创建新的symbol\n2、不可以用new 创建Symbol（围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。）\n3、symbol的参数可以不传，这个参数是用于描述symbol，可以用于调试但不是用于访问symbol本身\n4、创建Symbol包装器对象，可以使用Object()函数\n```JavaScript\n// 1\nSymbol('sym') === Symbol('sym'); // false\n// 2\nlet sym = new Symbol(); // TypeError: Symbol is not a constructor\n// 4\nlet sym2 = Symbol('sym');\ntypeof sym2; // 'symbol'\nlet sym2Obj = Object(sym2);\ntypeof sym2Obj; // 'object'\n```\n在[symbol的文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)中，有一个属性[Symbol.toPrimitive](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive)。文档中关于它的介绍是：\n\nSymbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。该函数被调用时，会被传递一个字符串参数 hint ，表示要转换到的原始值的预期类型。 hint 参数的取值是 \"number\"、\"string\" 和 \"default\" 中的任意一个。\n\n我们看一下这个属性是怎么干扰一个对象转换为原始值的\n```JavaScript\n// 一个没有提供 Symbol.toPrimitive 属性的对象，参与运算时的输出结果\nvar obj1 = {};\nconsole.log(+obj1);     // NaN\nconsole.log(`${obj1}`); // \"[object Object]\"\nconsole.log(obj1 + \"\"); // \"[object Object]\"\n\n// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果\nvar obj2 = {\n  [Symbol.toPrimitive](hint) {\n    if (hint == \"number\") {\n      return 10;\n    }\n    if (hint == \"string\") {\n      return \"hello\";\n    }\n    return true;\n  }\n};\nconsole.log(+obj2);     // 10      -- hint 参数值是 \"number\"\nconsole.log(`${obj2}`); // \"hello\" -- hint 参数值是 \"string\"\nconsole.log(obj2 + \"\"); // \"true\"  -- hint 参数值是 \"default\"\n```\n注意：\nhint 取值为：\n'number':该场合需要转成数值，\n'string':该场合需要转成字符串，\n'default':该场合可以转成数值，也可以转成字符串。\n\n#### 对象转换成原始值的方法及执行顺序\n以下优先级从上到下依次降低\n1、先判断对象中是否有/[Symbol.toPrimitive/]/(hint/)方法，如果有的话，优先执行该方法\n2、如果预期被转化成字符串类型时，则优先执行toString()方法\n3、如果预期被转化成默认类型或数字类型时，则优先执行valueOf()方法\n注意：若没有valueOf()方法，但是定义了toString()方法，则会执行toString()方法\n```JavaScript\nvar obj = {\n  [Symbol.toPrimitive](hint) {\n    console.log(hint);\n    return 'symbol';\n  },\n  toString() {\n    return 'string';\n  },\n  valueOf() {\n    return 'valueOf';\n  }\n};\nconsole.log(String(obj)); // string symbol\nconsole.log(Number(obj)); // number NaN\n\nvar obj1 = {\n  toString() {\n    return 'string';\n  },\n  valueOf() {\n    return 'valueOf';\n  }\n};\nconsole.log(String(obj1)); // string\nconsole.log(Number(obj1)); // NaN\n\nvar obj2 = {\n  toString() {\n    return '1';\n  },\n};\nconsole.log(String(obj2)); // '1'\nconsole.log(Number(obj2)); // 1\n\nvar obj3 = {\n  valueOf() {\n    return '2';\n  }\n};\nconsole.log(Number(obj3)); // 2\nconsole.log(String(obj3)); // [object Object]\n```","source":"_posts/devan-operation.md","raw":"---\ntitle: 装箱拆箱操作\ndate: 2022-08-09 13:43:57\ntags:\n---\n\n我们都知道属性和方法是对象上的，但是基本数据类型可以访问属性和方法，比如：'hello world'.length。这是由于浏览器在内部做了装箱和拆箱操作。\n\n#### 什么是装箱拆箱？\n装箱：把基本数据类型转化为对应的引用类型的操作\n拆箱：把引用类型转化为基本数据类型的操作\n\n基本数据类型：字符串(String)、数字(Number)、布尔(Boolean)、空(Null)、未定义(Undefined)、Symbol\n引用数据类型：对象(Object)、数组(Array)、函数(Function)\n四个基本的包装类型 String、Number、Boolean、Symbol\n\n什么是包装类型？\n在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，之所以具有对象特征的原因是字符串、数值、布尔类型数据是JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型\n\n#### 装箱\n装箱分为显式装箱和隐式装箱\n\n###### 显式装箱\n通过基本包装类型对象对基本类型进行显式装箱，即通过new的方式声明数据\n```JavaScript\nvar string = new String('test_string');\nvar number = new Number(1);\n```\n显式装箱可以对声明的对象进行属性和方法的添加，这是因为通过new创建的实例，在执行流离开当前作用域之前一直保留在内存中\n```JavaScript\nvar string = new String('test_string');\nstring.name = 'for test';\nstring.sayHi = function(){\n    console.log('this is test string');\n}\nconsole.log(string.name); // for test\nstring.sayHi(); // this is test string\n```\n\n###### 隐式装箱\n隐式装箱是引擎自动执行的\n基本类型不能添加属性和方法，添加会报错。但是常常在使用的时候，可以直接调用方法，比如：'test_string'.substring()、'test_string'.indexOf()等，这是由于浏览器在内部做了隐式装箱。\n\n下面以一个例子进行说明：\n```JavaScript\n// 第一步\nvar string = 'test_string';\n// 第二步\nvar result = string.substring(4);\nconsole.log(result); // _string\n```\n在上面这段代码里面实际的执行步骤是：\n1、先创建一个String类型的一个实例\n2、在实例中调用方法\n3、销毁这个实例\n```JavaScript\nvar string = 'test_string';\n// 1\nvar newString = new String(string);\n// 2\nvar result = newString.substring(4);\n// 3\nnewString = null;\n```\n基于以上的隐式装箱操作，我们可以在基本类型上使用方法\n隐式装箱当读取一个基本类型值时，后台会创建一个该基本类型所对应的基本包装类型对象。在这个基本类型的对象上调用方法，其实就是在这个基本类型对象上调用方法。这个基本包装类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立即被销毁。这也是在基本类型上添加属性和方法会不识别或报错的原因了\n\n\n显式装箱可以添加属性和方法，隐式装箱不能添加属性和方法\n\n引用类型与基本包装类型的主要区别就是对象的生存期，使用new创建的引用类型实例当执行流离开当前作用域之前，都一直保存在内存中，而自动创建的基本包装类型的对象，则只存在于一行代码执行的瞬间，然后就被销毁。这就意味着我们不能给基本包装类型添加属性和方法。\n#### 拆箱\n拆箱是和装箱相反的操作，即把引用类型转换成基本的数据类型。通常通过引用类型的valueOf()和toString()方法来实现，toString()返回字符串，valueOf()返回对象本身。\n需要注意的是，toString() 和 valueOf() 返回的值有一定差别\n```JavaScript\nvar numberObj = new Number(64);\nvar stringObj = new String('64');\nconsole.log(typeof numberObj); // object\nconsole.log(typeof stringObj); // object\n// 拆箱\nconsole.log(numberObj.valueOf()); // 64\nconsole.log(typeof numberObj.valueOf()); // number 基本的数字类型\nconsole.log(numberObj.toString()); // '64'\nconsole.log(typeof numberObj.toString()); // string 基本的字符类型\n\nconsole.log(stringObj.valueOf()); // '64'\nconsole.log(typeof stringObj.valueOf()); // string 基本的数据类型\nconsole.log(stringObj.toString()); // '64'\nconsole.log(typeof stringObj.toString()); // string 基本的数据类型\n```\n在进行拆箱操作的时候，toString()和valueOf()先执行哪个？在回答这个问题之前，我们先暂停一下，看一下包装类型中的symbol。\n\n这里简单介绍一下Symbol，感兴趣的可以自己去学习。\n\n###### Symbol\nSymbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突\n创建Symbol\n```JavaScript\nlet sym1 = Symbol();\nlet sym2 = Symbol('sym');\n```\n注意：\n1、每次调用Symbol都会创建新的symbol\n2、不可以用new 创建Symbol（围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。）\n3、symbol的参数可以不传，这个参数是用于描述symbol，可以用于调试但不是用于访问symbol本身\n4、创建Symbol包装器对象，可以使用Object()函数\n```JavaScript\n// 1\nSymbol('sym') === Symbol('sym'); // false\n// 2\nlet sym = new Symbol(); // TypeError: Symbol is not a constructor\n// 4\nlet sym2 = Symbol('sym');\ntypeof sym2; // 'symbol'\nlet sym2Obj = Object(sym2);\ntypeof sym2Obj; // 'object'\n```\n在[symbol的文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)中，有一个属性[Symbol.toPrimitive](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive)。文档中关于它的介绍是：\n\nSymbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。该函数被调用时，会被传递一个字符串参数 hint ，表示要转换到的原始值的预期类型。 hint 参数的取值是 \"number\"、\"string\" 和 \"default\" 中的任意一个。\n\n我们看一下这个属性是怎么干扰一个对象转换为原始值的\n```JavaScript\n// 一个没有提供 Symbol.toPrimitive 属性的对象，参与运算时的输出结果\nvar obj1 = {};\nconsole.log(+obj1);     // NaN\nconsole.log(`${obj1}`); // \"[object Object]\"\nconsole.log(obj1 + \"\"); // \"[object Object]\"\n\n// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果\nvar obj2 = {\n  [Symbol.toPrimitive](hint) {\n    if (hint == \"number\") {\n      return 10;\n    }\n    if (hint == \"string\") {\n      return \"hello\";\n    }\n    return true;\n  }\n};\nconsole.log(+obj2);     // 10      -- hint 参数值是 \"number\"\nconsole.log(`${obj2}`); // \"hello\" -- hint 参数值是 \"string\"\nconsole.log(obj2 + \"\"); // \"true\"  -- hint 参数值是 \"default\"\n```\n注意：\nhint 取值为：\n'number':该场合需要转成数值，\n'string':该场合需要转成字符串，\n'default':该场合可以转成数值，也可以转成字符串。\n\n#### 对象转换成原始值的方法及执行顺序\n以下优先级从上到下依次降低\n1、先判断对象中是否有/[Symbol.toPrimitive/]/(hint/)方法，如果有的话，优先执行该方法\n2、如果预期被转化成字符串类型时，则优先执行toString()方法\n3、如果预期被转化成默认类型或数字类型时，则优先执行valueOf()方法\n注意：若没有valueOf()方法，但是定义了toString()方法，则会执行toString()方法\n```JavaScript\nvar obj = {\n  [Symbol.toPrimitive](hint) {\n    console.log(hint);\n    return 'symbol';\n  },\n  toString() {\n    return 'string';\n  },\n  valueOf() {\n    return 'valueOf';\n  }\n};\nconsole.log(String(obj)); // string symbol\nconsole.log(Number(obj)); // number NaN\n\nvar obj1 = {\n  toString() {\n    return 'string';\n  },\n  valueOf() {\n    return 'valueOf';\n  }\n};\nconsole.log(String(obj1)); // string\nconsole.log(Number(obj1)); // NaN\n\nvar obj2 = {\n  toString() {\n    return '1';\n  },\n};\nconsole.log(String(obj2)); // '1'\nconsole.log(Number(obj2)); // 1\n\nvar obj3 = {\n  valueOf() {\n    return '2';\n  }\n};\nconsole.log(Number(obj3)); // 2\nconsole.log(String(obj3)); // [object Object]\n```","slug":"devan-operation","published":1,"updated":"2022-08-18T07:29:53.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcg000ijkttgowr4hgf","content":"<p>我们都知道属性和方法是对象上的，但是基本数据类型可以访问属性和方法，比如：’hello world’.length。这是由于浏览器在内部做了装箱和拆箱操作。</p>\n<h4 id=\"什么是装箱拆箱？\"><a href=\"#什么是装箱拆箱？\" class=\"headerlink\" title=\"什么是装箱拆箱？\"></a>什么是装箱拆箱？</h4><p>装箱：把基本数据类型转化为对应的引用类型的操作<br>拆箱：把引用类型转化为基本数据类型的操作</p>\n<p>基本数据类型：字符串(String)、数字(Number)、布尔(Boolean)、空(Null)、未定义(Undefined)、Symbol<br>引用数据类型：对象(Object)、数组(Array)、函数(Function)<br>四个基本的包装类型 String、Number、Boolean、Symbol</p>\n<p>什么是包装类型？<br>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，之所以具有对象特征的原因是字符串、数值、布尔类型数据是JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型</p>\n<h4 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h4><p>装箱分为显式装箱和隐式装箱</p>\n<h6 id=\"显式装箱\"><a href=\"#显式装箱\" class=\"headerlink\" title=\"显式装箱\"></a>显式装箱</h6><p>通过基本包装类型对象对基本类型进行显式装箱，即通过new的方式声明数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;test_string&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>显式装箱可以对声明的对象进行属性和方法的添加，这是因为通过new创建的实例，在执行流离开当前作用域之前一直保留在内存中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;test_string&#x27;</span>);</span><br><span class=\"line\">string.name = <span class=\"string\">&#x27;for test&#x27;</span>;</span><br><span class=\"line\">string.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;this is test string&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(string.name); <span class=\"comment\">// for test</span></span><br><span class=\"line\">string.sayHi(); <span class=\"comment\">// this is test string</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"隐式装箱\"><a href=\"#隐式装箱\" class=\"headerlink\" title=\"隐式装箱\"></a>隐式装箱</h6><p>隐式装箱是引擎自动执行的<br>基本类型不能添加属性和方法，添加会报错。但是常常在使用的时候，可以直接调用方法，比如：’test_string’.substring()、’test_string’.indexOf()等，这是由于浏览器在内部做了隐式装箱。</p>\n<p>下面以一个例子进行说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;test_string&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第二步</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = string.substring(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// _string</span></span><br></pre></td></tr></table></figure>\n<p>在上面这段代码里面实际的执行步骤是：<br>1、先创建一个String类型的一个实例<br>2、在实例中调用方法<br>3、销毁这个实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;test_string&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(string);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = newString.substring(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\">newString = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>基于以上的隐式装箱操作，我们可以在基本类型上使用方法<br>隐式装箱当读取一个基本类型值时，后台会创建一个该基本类型所对应的基本包装类型对象。在这个基本类型的对象上调用方法，其实就是在这个基本类型对象上调用方法。这个基本包装类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立即被销毁。这也是在基本类型上添加属性和方法会不识别或报错的原因了</p>\n<p>显式装箱可以添加属性和方法，隐式装箱不能添加属性和方法</p>\n<p>引用类型与基本包装类型的主要区别就是对象的生存期，使用new创建的引用类型实例当执行流离开当前作用域之前，都一直保存在内存中，而自动创建的基本包装类型的对象，则只存在于一行代码执行的瞬间，然后就被销毁。这就意味着我们不能给基本包装类型添加属性和方法。</p>\n<h4 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h4><p>拆箱是和装箱相反的操作，即把引用类型转换成基本的数据类型。通常通过引用类型的valueOf()和toString()方法来实现，toString()返回字符串，valueOf()返回对象本身。<br>需要注意的是，toString() 和 valueOf() 返回的值有一定差别</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numberObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">64</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringObj = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;64&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj); <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj); <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"comment\">// 拆箱</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numberObj.valueOf()); <span class=\"comment\">// 64</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj.valueOf()); <span class=\"comment\">// number 基本的数字类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numberObj.toString()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj.toString()); <span class=\"comment\">// string 基本的字符类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObj.valueOf()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj.valueOf()); <span class=\"comment\">// string 基本的数据类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObj.toString()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj.toString()); <span class=\"comment\">// string 基本的数据类型</span></span><br></pre></td></tr></table></figure>\n<p>在进行拆箱操作的时候，toString()和valueOf()先执行哪个？在回答这个问题之前，我们先暂停一下，看一下包装类型中的symbol。</p>\n<p>这里简单介绍一下Symbol，感兴趣的可以自己去学习。</p>\n<h6 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h6><p>Symbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突<br>创建Symbol</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sym1 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>注意：<br>1、每次调用Symbol都会创建新的symbol<br>2、不可以用new 创建Symbol（围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。）<br>3、symbol的参数可以不传，这个参数是用于描述symbol，可以用于调试但不是用于访问symbol本身<br>4、创建Symbol包装器对象，可以使用Object()函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>) === <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym = <span class=\"keyword\">new</span> <span class=\"built_in\">Symbol</span>(); <span class=\"comment\">// TypeError: Symbol is not a constructor</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> sym2; <span class=\"comment\">// &#x27;symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2Obj = <span class=\"built_in\">Object</span>(sym2);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> sym2Obj; <span class=\"comment\">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol的文档</a>中，有一个属性<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\">Symbol.toPrimitive</a>。文档中关于它的介绍是：</p>\n<p>Symbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。该函数被调用时，会被传递一个字符串参数 hint ，表示要转换到的原始值的预期类型。 hint 参数的取值是 “number”、”string” 和 “default” 中的任意一个。</p>\n<p>我们看一下这个属性是怎么干扰一个对象转换为原始值的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个没有提供 Symbol.toPrimitive 属性的对象，参与运算时的输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+obj1);     <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;obj1&#125;</span>`</span>); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1 + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hint == <span class=\"string\">&quot;number&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hint == <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+obj2);     <span class=\"comment\">// 10      -- hint 参数值是 &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;obj2&#125;</span>`</span>); <span class=\"comment\">// &quot;hello&quot; -- hint 参数值是 &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2 + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// &quot;true&quot;  -- hint 参数值是 &quot;default&quot;</span></span><br></pre></td></tr></table></figure>\n<p>注意：<br>hint 取值为：<br>‘number’:该场合需要转成数值，<br>‘string’:该场合需要转成字符串，<br>‘default’:该场合可以转成数值，也可以转成字符串。</p>\n<h4 id=\"对象转换成原始值的方法及执行顺序\"><a href=\"#对象转换成原始值的方法及执行顺序\" class=\"headerlink\" title=\"对象转换成原始值的方法及执行顺序\"></a>对象转换成原始值的方法及执行顺序</h4><p>以下优先级从上到下依次降低<br>1、先判断对象中是否有/[Symbol.toPrimitive/]/(hint/)方法，如果有的话，优先执行该方法<br>2、如果预期被转化成字符串类型时，则优先执行toString()方法<br>3、如果预期被转化成默认类型或数字类型时，则优先执行valueOf()方法<br>注意：若没有valueOf()方法，但是定义了toString()方法，则会执行toString()方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(hint);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;symbol&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;valueOf&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj)); <span class=\"comment\">// string symbol</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj)); <span class=\"comment\">// number NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;valueOf&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj1)); <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj1)); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj2)); <span class=\"comment\">// &#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj2)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj3)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj3)); <span class=\"comment\">// [object Object]</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>我们都知道属性和方法是对象上的，但是基本数据类型可以访问属性和方法，比如：’hello world’.length。这是由于浏览器在内部做了装箱和拆箱操作。</p>\n<h4 id=\"什么是装箱拆箱？\"><a href=\"#什么是装箱拆箱？\" class=\"headerlink\" title=\"什么是装箱拆箱？\"></a>什么是装箱拆箱？</h4><p>装箱：把基本数据类型转化为对应的引用类型的操作<br>拆箱：把引用类型转化为基本数据类型的操作</p>\n<p>基本数据类型：字符串(String)、数字(Number)、布尔(Boolean)、空(Null)、未定义(Undefined)、Symbol<br>引用数据类型：对象(Object)、数组(Array)、函数(Function)<br>四个基本的包装类型 String、Number、Boolean、Symbol</p>\n<p>什么是包装类型？<br>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，之所以具有对象特征的原因是字符串、数值、布尔类型数据是JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型</p>\n<h4 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h4><p>装箱分为显式装箱和隐式装箱</p>\n<h6 id=\"显式装箱\"><a href=\"#显式装箱\" class=\"headerlink\" title=\"显式装箱\"></a>显式装箱</h6><p>通过基本包装类型对象对基本类型进行显式装箱，即通过new的方式声明数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;test_string&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>显式装箱可以对声明的对象进行属性和方法的添加，这是因为通过new创建的实例，在执行流离开当前作用域之前一直保留在内存中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;test_string&#x27;</span>);</span><br><span class=\"line\">string.name = <span class=\"string\">&#x27;for test&#x27;</span>;</span><br><span class=\"line\">string.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;this is test string&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(string.name); <span class=\"comment\">// for test</span></span><br><span class=\"line\">string.sayHi(); <span class=\"comment\">// this is test string</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"隐式装箱\"><a href=\"#隐式装箱\" class=\"headerlink\" title=\"隐式装箱\"></a>隐式装箱</h6><p>隐式装箱是引擎自动执行的<br>基本类型不能添加属性和方法，添加会报错。但是常常在使用的时候，可以直接调用方法，比如：’test_string’.substring()、’test_string’.indexOf()等，这是由于浏览器在内部做了隐式装箱。</p>\n<p>下面以一个例子进行说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;test_string&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第二步</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = string.substring(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// _string</span></span><br></pre></td></tr></table></figure>\n<p>在上面这段代码里面实际的执行步骤是：<br>1、先创建一个String类型的一个实例<br>2、在实例中调用方法<br>3、销毁这个实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;test_string&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(string);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = newString.substring(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\">newString = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>基于以上的隐式装箱操作，我们可以在基本类型上使用方法<br>隐式装箱当读取一个基本类型值时，后台会创建一个该基本类型所对应的基本包装类型对象。在这个基本类型的对象上调用方法，其实就是在这个基本类型对象上调用方法。这个基本包装类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立即被销毁。这也是在基本类型上添加属性和方法会不识别或报错的原因了</p>\n<p>显式装箱可以添加属性和方法，隐式装箱不能添加属性和方法</p>\n<p>引用类型与基本包装类型的主要区别就是对象的生存期，使用new创建的引用类型实例当执行流离开当前作用域之前，都一直保存在内存中，而自动创建的基本包装类型的对象，则只存在于一行代码执行的瞬间，然后就被销毁。这就意味着我们不能给基本包装类型添加属性和方法。</p>\n<h4 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h4><p>拆箱是和装箱相反的操作，即把引用类型转换成基本的数据类型。通常通过引用类型的valueOf()和toString()方法来实现，toString()返回字符串，valueOf()返回对象本身。<br>需要注意的是，toString() 和 valueOf() 返回的值有一定差别</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numberObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">64</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringObj = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;64&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj); <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj); <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"comment\">// 拆箱</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numberObj.valueOf()); <span class=\"comment\">// 64</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj.valueOf()); <span class=\"comment\">// number 基本的数字类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numberObj.toString()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> numberObj.toString()); <span class=\"comment\">// string 基本的字符类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObj.valueOf()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj.valueOf()); <span class=\"comment\">// string 基本的数据类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObj.toString()); <span class=\"comment\">// &#x27;64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObj.toString()); <span class=\"comment\">// string 基本的数据类型</span></span><br></pre></td></tr></table></figure>\n<p>在进行拆箱操作的时候，toString()和valueOf()先执行哪个？在回答这个问题之前，我们先暂停一下，看一下包装类型中的symbol。</p>\n<p>这里简单介绍一下Symbol，感兴趣的可以自己去学习。</p>\n<h6 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h6><p>Symbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突<br>创建Symbol</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sym1 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>注意：<br>1、每次调用Symbol都会创建新的symbol<br>2、不可以用new 创建Symbol（围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。）<br>3、symbol的参数可以不传，这个参数是用于描述symbol，可以用于调试但不是用于访问symbol本身<br>4、创建Symbol包装器对象，可以使用Object()函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>) === <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym = <span class=\"keyword\">new</span> <span class=\"built_in\">Symbol</span>(); <span class=\"comment\">// TypeError: Symbol is not a constructor</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;sym&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> sym2; <span class=\"comment\">// &#x27;symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym2Obj = <span class=\"built_in\">Object</span>(sym2);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> sym2Obj; <span class=\"comment\">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol的文档</a>中，有一个属性<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\">Symbol.toPrimitive</a>。文档中关于它的介绍是：</p>\n<p>Symbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。该函数被调用时，会被传递一个字符串参数 hint ，表示要转换到的原始值的预期类型。 hint 参数的取值是 “number”、”string” 和 “default” 中的任意一个。</p>\n<p>我们看一下这个属性是怎么干扰一个对象转换为原始值的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个没有提供 Symbol.toPrimitive 属性的对象，参与运算时的输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+obj1);     <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;obj1&#125;</span>`</span>); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1 + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hint == <span class=\"string\">&quot;number&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hint == <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+obj2);     <span class=\"comment\">// 10      -- hint 参数值是 &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;obj2&#125;</span>`</span>); <span class=\"comment\">// &quot;hello&quot; -- hint 参数值是 &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2 + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// &quot;true&quot;  -- hint 参数值是 &quot;default&quot;</span></span><br></pre></td></tr></table></figure>\n<p>注意：<br>hint 取值为：<br>‘number’:该场合需要转成数值，<br>‘string’:该场合需要转成字符串，<br>‘default’:该场合可以转成数值，也可以转成字符串。</p>\n<h4 id=\"对象转换成原始值的方法及执行顺序\"><a href=\"#对象转换成原始值的方法及执行顺序\" class=\"headerlink\" title=\"对象转换成原始值的方法及执行顺序\"></a>对象转换成原始值的方法及执行顺序</h4><p>以下优先级从上到下依次降低<br>1、先判断对象中是否有/[Symbol.toPrimitive/]/(hint/)方法，如果有的话，优先执行该方法<br>2、如果预期被转化成字符串类型时，则优先执行toString()方法<br>3、如果预期被转化成默认类型或数字类型时，则优先执行valueOf()方法<br>注意：若没有valueOf()方法，但是定义了toString()方法，则会执行toString()方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(hint);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;symbol&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;valueOf&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj)); <span class=\"comment\">// string symbol</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj)); <span class=\"comment\">// number NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;valueOf&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj1)); <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj1)); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj2)); <span class=\"comment\">// &#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj2)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">valueOf</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(obj3)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(obj3)); <span class=\"comment\">// [object Object]</span></span><br></pre></td></tr></table></figure>"},{"title":"浏览器渲染","date":"2022-05-23T06:13:56.000Z","_content":"\n## 渲染流程\n(1)深度遍历解析HTML建立DOM树\n(2)解析CSS建立CSSOM树\n(3)依据DOM树和CSSOM树构造Render树\n(4)计算各元素尺寸、位置\n(5)绘制页面像素信息\n(6)浏览器将各层信息发送给GPU，GPU将各层合成，显示在屏幕上\n(7)(PS:上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完某一部分（整体大块的）内容就显示一部分内容，同时，可能还在通过网络下载其余内容。)\n## GUI渲染线程\n(1)解析HTML，CSS，构建DOM树和Render树，布局和绘制等\n(2)重排/重绘\n--1、重排又称重构、回流，当我们通过JavaScript或者CSS修改了元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段。重排需要更新完整的渲染流水线，所以开销也是最大的。每个页面至少需要一次reflow，就是在页面第一次加载的时候。\n--2、任何页面布局和几何属性的改变都会触发重排，比如：\n页面渲染初始化；(无法避免)\n添加或删除可见的DOM元素；\n元素位置的改变；\n改变元素尺寸（宽、高、内外边距、边框等）；\n浏览器窗口尺寸的变化（resize事件发生时）；\n填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；\n读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)\n--3、重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如通过 JavaScript 更改某些元素的背景颜色，没有改变元素的几何属性，那么布局阶段不会执行，而是直接进入绘制阶段。\n--4、重绘省去了布局和分层阶段，效率会高于重排。重排必定会引发重绘，但重绘不一定会引发重排。\n## JS引擎线程\n(1)解析Javascript脚本，单线程执行\n(2)与GUI互斥，GUI ON then JS Suspend.等待着任务队列中任务的到来，然后加以处理，JS执行的时间过长会导致页面渲染加载阻塞\n## 事件触发线程\n(1)归属于浏览器而不是JS引擎，用来控制事件循环\n(2)当JS引擎执行代码块如click事件时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件待处理队列的队尾，等待JS引擎的处理\n## 定时触发器线程\n(1)setInterval与setTimeout所在线程\n(2)浏览器定时计数器并不是由JS引擎计数的,因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确\n(3)计时完毕后，将事件添加到事件队列中，等待JS引擎空闲后执行\n## 异步http请求线程\n(1)在XMLHttpRequest在连接后是通过浏览器新开一个线程请求\n(2)将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。\n\n## 实现hover等鼠标操作\n![hover](/images/hover.png)\n\n## 使用performance分析页面性能\n![performance](/images/performance.png)\n\n## 使用network调试\n![network](/images/network.png)\n","source":"_posts/browser-render.md","raw":"---\ntitle: 浏览器渲染\ndate: 2022-05-23 14:13:56\ntags:\n---\n\n## 渲染流程\n(1)深度遍历解析HTML建立DOM树\n(2)解析CSS建立CSSOM树\n(3)依据DOM树和CSSOM树构造Render树\n(4)计算各元素尺寸、位置\n(5)绘制页面像素信息\n(6)浏览器将各层信息发送给GPU，GPU将各层合成，显示在屏幕上\n(7)(PS:上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完某一部分（整体大块的）内容就显示一部分内容，同时，可能还在通过网络下载其余内容。)\n## GUI渲染线程\n(1)解析HTML，CSS，构建DOM树和Render树，布局和绘制等\n(2)重排/重绘\n--1、重排又称重构、回流，当我们通过JavaScript或者CSS修改了元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段。重排需要更新完整的渲染流水线，所以开销也是最大的。每个页面至少需要一次reflow，就是在页面第一次加载的时候。\n--2、任何页面布局和几何属性的改变都会触发重排，比如：\n页面渲染初始化；(无法避免)\n添加或删除可见的DOM元素；\n元素位置的改变；\n改变元素尺寸（宽、高、内外边距、边框等）；\n浏览器窗口尺寸的变化（resize事件发生时）；\n填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；\n读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)\n--3、重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如通过 JavaScript 更改某些元素的背景颜色，没有改变元素的几何属性，那么布局阶段不会执行，而是直接进入绘制阶段。\n--4、重绘省去了布局和分层阶段，效率会高于重排。重排必定会引发重绘，但重绘不一定会引发重排。\n## JS引擎线程\n(1)解析Javascript脚本，单线程执行\n(2)与GUI互斥，GUI ON then JS Suspend.等待着任务队列中任务的到来，然后加以处理，JS执行的时间过长会导致页面渲染加载阻塞\n## 事件触发线程\n(1)归属于浏览器而不是JS引擎，用来控制事件循环\n(2)当JS引擎执行代码块如click事件时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件待处理队列的队尾，等待JS引擎的处理\n## 定时触发器线程\n(1)setInterval与setTimeout所在线程\n(2)浏览器定时计数器并不是由JS引擎计数的,因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确\n(3)计时完毕后，将事件添加到事件队列中，等待JS引擎空闲后执行\n## 异步http请求线程\n(1)在XMLHttpRequest在连接后是通过浏览器新开一个线程请求\n(2)将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。\n\n## 实现hover等鼠标操作\n![hover](/images/hover.png)\n\n## 使用performance分析页面性能\n![performance](/images/performance.png)\n\n## 使用network调试\n![network](/images/network.png)\n","slug":"browser-render","published":1,"updated":"2022-08-10T03:12:04.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpch000jjktt4b7cfq4c","content":"<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p>(1)深度遍历解析HTML建立DOM树<br>(2)解析CSS建立CSSOM树<br>(3)依据DOM树和CSSOM树构造Render树<br>(4)计算各元素尺寸、位置<br>(5)绘制页面像素信息<br>(6)浏览器将各层信息发送给GPU，GPU将各层合成，显示在屏幕上<br>(7)(PS:上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完某一部分（整体大块的）内容就显示一部分内容，同时，可能还在通过网络下载其余内容。)</p>\n<h2 id=\"GUI渲染线程\"><a href=\"#GUI渲染线程\" class=\"headerlink\" title=\"GUI渲染线程\"></a>GUI渲染线程</h2><p>(1)解析HTML，CSS，构建DOM树和Render树，布局和绘制等<br>(2)重排/重绘<br>–1、重排又称重构、回流，当我们通过JavaScript或者CSS修改了元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段。重排需要更新完整的渲染流水线，所以开销也是最大的。每个页面至少需要一次reflow，就是在页面第一次加载的时候。<br>–2、任何页面布局和几何属性的改变都会触发重排，比如：<br>页面渲染初始化；(无法避免)<br>添加或删除可见的DOM元素；<br>元素位置的改变；<br>改变元素尺寸（宽、高、内外边距、边框等）；<br>浏览器窗口尺寸的变化（resize事件发生时）；<br>填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；<br>读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)<br>–3、重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如通过 JavaScript 更改某些元素的背景颜色，没有改变元素的几何属性，那么布局阶段不会执行，而是直接进入绘制阶段。<br>–4、重绘省去了布局和分层阶段，效率会高于重排。重排必定会引发重绘，但重绘不一定会引发重排。</p>\n<h2 id=\"JS引擎线程\"><a href=\"#JS引擎线程\" class=\"headerlink\" title=\"JS引擎线程\"></a>JS引擎线程</h2><p>(1)解析Javascript脚本，单线程执行<br>(2)与GUI互斥，GUI ON then JS Suspend.等待着任务队列中任务的到来，然后加以处理，JS执行的时间过长会导致页面渲染加载阻塞</p>\n<h2 id=\"事件触发线程\"><a href=\"#事件触发线程\" class=\"headerlink\" title=\"事件触发线程\"></a>事件触发线程</h2><p>(1)归属于浏览器而不是JS引擎，用来控制事件循环<br>(2)当JS引擎执行代码块如click事件时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件待处理队列的队尾，等待JS引擎的处理</p>\n<h2 id=\"定时触发器线程\"><a href=\"#定时触发器线程\" class=\"headerlink\" title=\"定时触发器线程\"></a>定时触发器线程</h2><p>(1)setInterval与setTimeout所在线程<br>(2)浏览器定时计数器并不是由JS引擎计数的,因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确<br>(3)计时完毕后，将事件添加到事件队列中，等待JS引擎空闲后执行</p>\n<h2 id=\"异步http请求线程\"><a href=\"#异步http请求线程\" class=\"headerlink\" title=\"异步http请求线程\"></a>异步http请求线程</h2><p>(1)在XMLHttpRequest在连接后是通过浏览器新开一个线程请求<br>(2)将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。</p>\n<h2 id=\"实现hover等鼠标操作\"><a href=\"#实现hover等鼠标操作\" class=\"headerlink\" title=\"实现hover等鼠标操作\"></a>实现hover等鼠标操作</h2><p><img src=\"/images/hover.png\" alt=\"hover\"></p>\n<h2 id=\"使用performance分析页面性能\"><a href=\"#使用performance分析页面性能\" class=\"headerlink\" title=\"使用performance分析页面性能\"></a>使用performance分析页面性能</h2><p><img src=\"/images/performance.png\" alt=\"performance\"></p>\n<h2 id=\"使用network调试\"><a href=\"#使用network调试\" class=\"headerlink\" title=\"使用network调试\"></a>使用network调试</h2><p><img src=\"/images/network.png\" alt=\"network\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p>(1)深度遍历解析HTML建立DOM树<br>(2)解析CSS建立CSSOM树<br>(3)依据DOM树和CSSOM树构造Render树<br>(4)计算各元素尺寸、位置<br>(5)绘制页面像素信息<br>(6)浏览器将各层信息发送给GPU，GPU将各层合成，显示在屏幕上<br>(7)(PS:上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完某一部分（整体大块的）内容就显示一部分内容，同时，可能还在通过网络下载其余内容。)</p>\n<h2 id=\"GUI渲染线程\"><a href=\"#GUI渲染线程\" class=\"headerlink\" title=\"GUI渲染线程\"></a>GUI渲染线程</h2><p>(1)解析HTML，CSS，构建DOM树和Render树，布局和绘制等<br>(2)重排/重绘<br>–1、重排又称重构、回流，当我们通过JavaScript或者CSS修改了元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段。重排需要更新完整的渲染流水线，所以开销也是最大的。每个页面至少需要一次reflow，就是在页面第一次加载的时候。<br>–2、任何页面布局和几何属性的改变都会触发重排，比如：<br>页面渲染初始化；(无法避免)<br>添加或删除可见的DOM元素；<br>元素位置的改变；<br>改变元素尺寸（宽、高、内外边距、边框等）；<br>浏览器窗口尺寸的变化（resize事件发生时）；<br>填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；<br>读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)<br>–3、重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如通过 JavaScript 更改某些元素的背景颜色，没有改变元素的几何属性，那么布局阶段不会执行，而是直接进入绘制阶段。<br>–4、重绘省去了布局和分层阶段，效率会高于重排。重排必定会引发重绘，但重绘不一定会引发重排。</p>\n<h2 id=\"JS引擎线程\"><a href=\"#JS引擎线程\" class=\"headerlink\" title=\"JS引擎线程\"></a>JS引擎线程</h2><p>(1)解析Javascript脚本，单线程执行<br>(2)与GUI互斥，GUI ON then JS Suspend.等待着任务队列中任务的到来，然后加以处理，JS执行的时间过长会导致页面渲染加载阻塞</p>\n<h2 id=\"事件触发线程\"><a href=\"#事件触发线程\" class=\"headerlink\" title=\"事件触发线程\"></a>事件触发线程</h2><p>(1)归属于浏览器而不是JS引擎，用来控制事件循环<br>(2)当JS引擎执行代码块如click事件时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件待处理队列的队尾，等待JS引擎的处理</p>\n<h2 id=\"定时触发器线程\"><a href=\"#定时触发器线程\" class=\"headerlink\" title=\"定时触发器线程\"></a>定时触发器线程</h2><p>(1)setInterval与setTimeout所在线程<br>(2)浏览器定时计数器并不是由JS引擎计数的,因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确<br>(3)计时完毕后，将事件添加到事件队列中，等待JS引擎空闲后执行</p>\n<h2 id=\"异步http请求线程\"><a href=\"#异步http请求线程\" class=\"headerlink\" title=\"异步http请求线程\"></a>异步http请求线程</h2><p>(1)在XMLHttpRequest在连接后是通过浏览器新开一个线程请求<br>(2)将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。</p>\n<h2 id=\"实现hover等鼠标操作\"><a href=\"#实现hover等鼠标操作\" class=\"headerlink\" title=\"实现hover等鼠标操作\"></a>实现hover等鼠标操作</h2><p><img src=\"/images/hover.png\" alt=\"hover\"></p>\n<h2 id=\"使用performance分析页面性能\"><a href=\"#使用performance分析页面性能\" class=\"headerlink\" title=\"使用performance分析页面性能\"></a>使用performance分析页面性能</h2><p><img src=\"/images/performance.png\" alt=\"performance\"></p>\n<h2 id=\"使用network调试\"><a href=\"#使用network调试\" class=\"headerlink\" title=\"使用network调试\"></a>使用network调试</h2><p><img src=\"/images/network.png\" alt=\"network\"></p>\n"},{"title":"js-新建固定长度数据","date":"2022-06-27T02:20:46.000Z","_content":"\n#### 新建固定长度数组\n\n###### 使用primitives填充数组\n```javascript\nconst newArray = Array(3).fill(3);\nconsole.log(newArray);  // [3, 3, 3]\n```\nArray(length).fill(initialValue) 是一种创建具有所需长度并使用原始值（数字、字符串、布尔值）初始化的数组的便捷方法\n\n###### 使用对象填充数组\n(1)使用Array().fill()创建数组\n```javascript\nconst newArray = Array(3).fill({ value: 0 });\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\nArray(length).fill({ value: 0 })创建一个 length 数组3，并为每个项目分配{ value: 0 }，要注意的是：分配相同的对象实例。\n这种方法创建了一个具有相同对象实例的数组。如果碰巧修改了数组中的任何一项，那么数组中的每一项都会受到影响:\n```javascript\nconst newArray = Array(3).fill({ value: 0 });\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2;\nconsole.log(newArray);  // [{value: 2}, {value: 2}, {value: 2}]\n```\n(2)使用Array.from()创建数组\nArray.from() 方法对一个数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n因此利用 Array.from() 方法可以轻松地创建和初始化具有不同对象实例的数组:\n```javascript\nconst newArray = Array.from(Array(3), () => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\n如果修改数组中的任何项目，则只有该项目会受到影响，其他项目不受影响：\n```javascript\nconst newArray = Array.from(Array(3), () => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2\nconsole.log(newArray);  // [{value: 0}, {value: 2}, {value: 0}]\n```\n(3)使用Array.map()结合Array.fill()创建数组\n注意：不要直接使用map新建数组，**array.map()跳过 empty 元素**\n```javascript\nconst newArray = Array(3).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [empty x 3]\n```\n解决方法很简单，将 empty 数组 fill null 即可：\n```javascript\nconst newArray = Array(3).fill(null).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\n注意：使用这种方法创建的数组，修改某一项时不影响其他项：\n```javascript\nconst newArray = Array(3).fill(null).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2;\nconsole.log(newArray);  // [{value: 0}, {value: 2}, {value: 0}]\n```\n","source":"_posts/create-fixed-length-array.md","raw":"---\ntitle: js-新建固定长度数据\ndate: 2022-06-27 10:20:46\ntags:\n---\n\n#### 新建固定长度数组\n\n###### 使用primitives填充数组\n```javascript\nconst newArray = Array(3).fill(3);\nconsole.log(newArray);  // [3, 3, 3]\n```\nArray(length).fill(initialValue) 是一种创建具有所需长度并使用原始值（数字、字符串、布尔值）初始化的数组的便捷方法\n\n###### 使用对象填充数组\n(1)使用Array().fill()创建数组\n```javascript\nconst newArray = Array(3).fill({ value: 0 });\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\nArray(length).fill({ value: 0 })创建一个 length 数组3，并为每个项目分配{ value: 0 }，要注意的是：分配相同的对象实例。\n这种方法创建了一个具有相同对象实例的数组。如果碰巧修改了数组中的任何一项，那么数组中的每一项都会受到影响:\n```javascript\nconst newArray = Array(3).fill({ value: 0 });\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2;\nconsole.log(newArray);  // [{value: 2}, {value: 2}, {value: 2}]\n```\n(2)使用Array.from()创建数组\nArray.from() 方法对一个数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n因此利用 Array.from() 方法可以轻松地创建和初始化具有不同对象实例的数组:\n```javascript\nconst newArray = Array.from(Array(3), () => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\n如果修改数组中的任何项目，则只有该项目会受到影响，其他项目不受影响：\n```javascript\nconst newArray = Array.from(Array(3), () => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2\nconsole.log(newArray);  // [{value: 0}, {value: 2}, {value: 0}]\n```\n(3)使用Array.map()结合Array.fill()创建数组\n注意：不要直接使用map新建数组，**array.map()跳过 empty 元素**\n```javascript\nconst newArray = Array(3).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [empty x 3]\n```\n解决方法很简单，将 empty 数组 fill null 即可：\n```javascript\nconst newArray = Array(3).fill(null).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\n```\n注意：使用这种方法创建的数组，修改某一项时不影响其他项：\n```javascript\nconst newArray = Array(3).fill(null).map(() => {\n  return { value: 0 };\n});\nconsole.log(newArray);  // [{value: 0}, {value: 0}, {value: 0}]\nnewArray[1].value = 2;\nconsole.log(newArray);  // [{value: 0}, {value: 2}, {value: 0}]\n```\n","slug":"create-fixed-length-array","published":1,"updated":"2022-08-10T03:12:26.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpch000kjktthryx3276","content":"<h4 id=\"新建固定长度数组\"><a href=\"#新建固定长度数组\" class=\"headerlink\" title=\"新建固定长度数组\"></a>新建固定长度数组</h4><h6 id=\"使用primitives填充数组\"><a href=\"#使用primitives填充数组\" class=\"headerlink\" title=\"使用primitives填充数组\"></a>使用primitives填充数组</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [3, 3, 3]</span></span><br></pre></td></tr></table></figure>\n<p>Array(length).fill(initialValue) 是一种创建具有所需长度并使用原始值（数字、字符串、布尔值）初始化的数组的便捷方法</p>\n<h6 id=\"使用对象填充数组\"><a href=\"#使用对象填充数组\" class=\"headerlink\" title=\"使用对象填充数组\"></a>使用对象填充数组</h6><p>(1)使用Array().fill()创建数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(&#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>Array(length).fill({ value: 0 })创建一个 length 数组3，并为每个项目分配{ value: 0 }，要注意的是：分配相同的对象实例。<br>这种方法创建了一个具有相同对象实例的数组。如果碰巧修改了数组中的任何一项，那么数组中的每一项都会受到影响:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(&#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 2&#125;, &#123;value: 2&#125;, &#123;value: 2&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>(2)使用Array.from()创建数组<br>Array.from() 方法对一个数组或可迭代对象创建一个新的，浅拷贝的数组实例。<br>因此利用 Array.from() 方法可以轻松地创建和初始化具有不同对象实例的数组:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">3</span>), <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>如果修改数组中的任何项目，则只有该项目会受到影响，其他项目不受影响：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">3</span>), <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 2&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>(3)使用Array.map()结合Array.fill()创建数组<br>注意：不要直接使用map新建数组，<strong>array.map()跳过 empty 元素</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [empty x 3]</span></span><br></pre></td></tr></table></figure>\n<p>解决方法很简单，将 empty 数组 fill null 即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"literal\">null</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>注意：使用这种方法创建的数组，修改某一项时不影响其他项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"literal\">null</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 2&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"新建固定长度数组\"><a href=\"#新建固定长度数组\" class=\"headerlink\" title=\"新建固定长度数组\"></a>新建固定长度数组</h4><h6 id=\"使用primitives填充数组\"><a href=\"#使用primitives填充数组\" class=\"headerlink\" title=\"使用primitives填充数组\"></a>使用primitives填充数组</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [3, 3, 3]</span></span><br></pre></td></tr></table></figure>\n<p>Array(length).fill(initialValue) 是一种创建具有所需长度并使用原始值（数字、字符串、布尔值）初始化的数组的便捷方法</p>\n<h6 id=\"使用对象填充数组\"><a href=\"#使用对象填充数组\" class=\"headerlink\" title=\"使用对象填充数组\"></a>使用对象填充数组</h6><p>(1)使用Array().fill()创建数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(&#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>Array(length).fill({ value: 0 })创建一个 length 数组3，并为每个项目分配{ value: 0 }，要注意的是：分配相同的对象实例。<br>这种方法创建了一个具有相同对象实例的数组。如果碰巧修改了数组中的任何一项，那么数组中的每一项都会受到影响:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(&#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 2&#125;, &#123;value: 2&#125;, &#123;value: 2&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>(2)使用Array.from()创建数组<br>Array.from() 方法对一个数组或可迭代对象创建一个新的，浅拷贝的数组实例。<br>因此利用 Array.from() 方法可以轻松地创建和初始化具有不同对象实例的数组:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">3</span>), <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>如果修改数组中的任何项目，则只有该项目会受到影响，其他项目不受影响：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">3</span>), <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 2&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>(3)使用Array.map()结合Array.fill()创建数组<br>注意：不要直接使用map新建数组，<strong>array.map()跳过 empty 元素</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [empty x 3]</span></span><br></pre></td></tr></table></figure>\n<p>解决方法很简单，将 empty 数组 fill null 即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"literal\">null</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>注意：使用这种方法创建的数组，修改某一项时不影响其他项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArray = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"literal\">null</span>).map(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 0&#125;, &#123;value: 0&#125;]</span></span><br><span class=\"line\">newArray[<span class=\"number\">1</span>].value = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray);  <span class=\"comment\">// [&#123;value: 0&#125;, &#123;value: 2&#125;, &#123;value: 0&#125;]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"开发一个vscode插件的流程","date":"2022-08-05T02:33:23.000Z","_content":"\n#### vscode中文手册\nhttps://www.bookstack.cn/read/CN-VScode-Docs/README.md\n\n#### vscode插件脚手架\n安装脚手架和代码生成器\n```javascript\nnpm install -g yo generator-code\n```\n生成vscode脚手架项目\n```javascript\nyo code\n```","source":"_posts/create-vscode-plugin.md","raw":"---\ntitle: 开发一个vscode插件的流程\ndate: 2022-08-05 10:33:23\ntags:\n---\n\n#### vscode中文手册\nhttps://www.bookstack.cn/read/CN-VScode-Docs/README.md\n\n#### vscode插件脚手架\n安装脚手架和代码生成器\n```javascript\nnpm install -g yo generator-code\n```\n生成vscode脚手架项目\n```javascript\nyo code\n```","slug":"create-vscode-plugin","published":1,"updated":"2022-08-05T06:08:56.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpci000ljktt112506lc","content":"<h4 id=\"vscode中文手册\"><a href=\"#vscode中文手册\" class=\"headerlink\" title=\"vscode中文手册\"></a>vscode中文手册</h4><p><a href=\"https://www.bookstack.cn/read/CN-VScode-Docs/README.md\">https://www.bookstack.cn/read/CN-VScode-Docs/README.md</a></p>\n<h4 id=\"vscode插件脚手架\"><a href=\"#vscode插件脚手架\" class=\"headerlink\" title=\"vscode插件脚手架\"></a>vscode插件脚手架</h4><p>安装脚手架和代码生成器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yo generator-code</span><br></pre></td></tr></table></figure>\n<p>生成vscode脚手架项目</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo code</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"vscode中文手册\"><a href=\"#vscode中文手册\" class=\"headerlink\" title=\"vscode中文手册\"></a>vscode中文手册</h4><p><a href=\"https://www.bookstack.cn/read/CN-VScode-Docs/README.md\">https://www.bookstack.cn/read/CN-VScode-Docs/README.md</a></p>\n<h4 id=\"vscode插件脚手架\"><a href=\"#vscode插件脚手架\" class=\"headerlink\" title=\"vscode插件脚手架\"></a>vscode插件脚手架</h4><p>安装脚手架和代码生成器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yo generator-code</span><br></pre></td></tr></table></figure>\n<p>生成vscode脚手架项目</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo code</span><br></pre></td></tr></table></figure>"},{"title":"各类文档地址","date":"2022-07-05T08:17:32.000Z","_content":"\n#### code spell checker配置项说明\n[文档地址](https://streetsidesoftware.com/vscode-spell-checker/docs/configuration/#code-spell-checker)\n\n#### 查看chrome各个版本功能变更\n[chrome status](https://chromestatus.com/features)\n\n#### 查看== 、=== 、if()在不同情况下的执行结果\n[地址](https://dorey.github.io/JavaScript-Equality-Table/)\n\n#### css层叠样式表\n[官方文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade)\n\n#### Recoil\n[官方文档](https://recoiljs.org/)\n\n#### React\n[官方文档](https://reactjs.org/)\n\n#### vue\n[官方文档](https://vuejs.org/)\n\n#### VueUse--vue使用的hooks库\n[官方文档](https://vueuse.org/)\n\n#### HTML\n[官方文档](https://html.spec.whatwg.org/)","source":"_posts/document-location.md","raw":"---\ntitle: 各类文档地址\ndate: 2022-07-05 16:17:32\ntags:\n---\n\n#### code spell checker配置项说明\n[文档地址](https://streetsidesoftware.com/vscode-spell-checker/docs/configuration/#code-spell-checker)\n\n#### 查看chrome各个版本功能变更\n[chrome status](https://chromestatus.com/features)\n\n#### 查看== 、=== 、if()在不同情况下的执行结果\n[地址](https://dorey.github.io/JavaScript-Equality-Table/)\n\n#### css层叠样式表\n[官方文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade)\n\n#### Recoil\n[官方文档](https://recoiljs.org/)\n\n#### React\n[官方文档](https://reactjs.org/)\n\n#### vue\n[官方文档](https://vuejs.org/)\n\n#### VueUse--vue使用的hooks库\n[官方文档](https://vueuse.org/)\n\n#### HTML\n[官方文档](https://html.spec.whatwg.org/)","slug":"document-location","published":1,"updated":"2022-08-16T03:06:06.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpci000mjkttcdhv1ymg","content":"<h4 id=\"code-spell-checker配置项说明\"><a href=\"#code-spell-checker配置项说明\" class=\"headerlink\" title=\"code spell checker配置项说明\"></a>code spell checker配置项说明</h4><p><a href=\"https://streetsidesoftware.com/vscode-spell-checker/docs/configuration/#code-spell-checker\">文档地址</a></p>\n<h4 id=\"查看chrome各个版本功能变更\"><a href=\"#查看chrome各个版本功能变更\" class=\"headerlink\" title=\"查看chrome各个版本功能变更\"></a>查看chrome各个版本功能变更</h4><p><a href=\"https://chromestatus.com/features\">chrome status</a></p>\n<h4 id=\"查看-、-、if-在不同情况下的执行结果\"><a href=\"#查看-、-、if-在不同情况下的执行结果\" class=\"headerlink\" title=\"查看== 、=== 、if()在不同情况下的执行结果\"></a>查看== 、=== 、if()在不同情况下的执行结果</h4><p><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">地址</a></p>\n<h4 id=\"css层叠样式表\"><a href=\"#css层叠样式表\" class=\"headerlink\" title=\"css层叠样式表\"></a>css层叠样式表</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade\">官方文档</a></p>\n<h4 id=\"Recoil\"><a href=\"#Recoil\" class=\"headerlink\" title=\"Recoil\"></a>Recoil</h4><p><a href=\"https://recoiljs.org/\">官方文档</a></p>\n<h4 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h4><p><a href=\"https://reactjs.org/\">官方文档</a></p>\n<h4 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h4><p><a href=\"https://vuejs.org/\">官方文档</a></p>\n<h4 id=\"VueUse–vue使用的hooks库\"><a href=\"#VueUse–vue使用的hooks库\" class=\"headerlink\" title=\"VueUse–vue使用的hooks库\"></a>VueUse–vue使用的hooks库</h4><p><a href=\"https://vueuse.org/\">官方文档</a></p>\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p><a href=\"https://html.spec.whatwg.org/\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"code-spell-checker配置项说明\"><a href=\"#code-spell-checker配置项说明\" class=\"headerlink\" title=\"code spell checker配置项说明\"></a>code spell checker配置项说明</h4><p><a href=\"https://streetsidesoftware.com/vscode-spell-checker/docs/configuration/#code-spell-checker\">文档地址</a></p>\n<h4 id=\"查看chrome各个版本功能变更\"><a href=\"#查看chrome各个版本功能变更\" class=\"headerlink\" title=\"查看chrome各个版本功能变更\"></a>查看chrome各个版本功能变更</h4><p><a href=\"https://chromestatus.com/features\">chrome status</a></p>\n<h4 id=\"查看-、-、if-在不同情况下的执行结果\"><a href=\"#查看-、-、if-在不同情况下的执行结果\" class=\"headerlink\" title=\"查看== 、=== 、if()在不同情况下的执行结果\"></a>查看== 、=== 、if()在不同情况下的执行结果</h4><p><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">地址</a></p>\n<h4 id=\"css层叠样式表\"><a href=\"#css层叠样式表\" class=\"headerlink\" title=\"css层叠样式表\"></a>css层叠样式表</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade\">官方文档</a></p>\n<h4 id=\"Recoil\"><a href=\"#Recoil\" class=\"headerlink\" title=\"Recoil\"></a>Recoil</h4><p><a href=\"https://recoiljs.org/\">官方文档</a></p>\n<h4 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h4><p><a href=\"https://reactjs.org/\">官方文档</a></p>\n<h4 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h4><p><a href=\"https://vuejs.org/\">官方文档</a></p>\n<h4 id=\"VueUse–vue使用的hooks库\"><a href=\"#VueUse–vue使用的hooks库\" class=\"headerlink\" title=\"VueUse–vue使用的hooks库\"></a>VueUse–vue使用的hooks库</h4><p><a href=\"https://vueuse.org/\">官方文档</a></p>\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p><a href=\"https://html.spec.whatwg.org/\">官方文档</a></p>\n"},{"title":"es6对象增强","date":"2022-09-02T02:42:05.000Z","_content":"\n#### 对象字面量语法扩展\n\n(1)属性赋值简写：给一个属性赋变量值时，如果变量和属性的名称相同，可以省略冒号、变量名，直接写属性名即可，js 引擎执行代码时，会自动查找与属性名相同的变量进行属性赋值。\n\n```javascript\nvar name = 'test';\nvar obj = {\n  name,\n};\nconsole.log(obj); // {name: 'test'}\n```\n\n(2)简化属性方法定义：给一个属性赋匿名函数方法时，可以使用更简洁的方法\n\n```javascript\n// ES5\nconst es5Obj = {\n  testFunction: function () {\n    console.log('es5');\n  },\n};\nconsole.log(es5Obj.testFunction()); // es5\n\n// es6\nconst es6Obj = {\n  testFunction() {\n    console.log('es6');\n  },\n};\nconsole.log(es6Obj.testFunction()); // es6\n\n// **注意：只有赋值的是匿名函数，才可以使用简介语法**\nconst es6Obj1 = {\n  testFunction: function Hello() {\n    console.log('hello');\n  },\n};\nconsole.log(es6Obj1.testFunction()); // hello\n```\n\n**常见给函数取名字的情况：(1)递归，自己调用自己；(2)debugger 的时候，方便问题定位**\n\n(3)计算属性名：属性可以动态生成，需要把动态属性用[]包括起来\n\n```javascript\nconst es6Obj = {\n  ['first' + 'second']: 'hanmeimei',\n};\nconsole.log(es6Obj['first' + 'second']); // hanmeimei\n\nconst first = 'first';\nconst es6Obj1 = {\n  [first + 'second']: 'hanmeimei',\n};\nconsole.log(es6Obj[first + 'second']); // hanmeimei\n```\n\n(4)重复属性名的处理：es5 中，给对象赋值，如果存在相同的属性名，会报错；es6 中，不会报错，相同属性名的最后一个，会覆盖之前的属性\n\n```javascript\nconst es6Obj = {\n  name: 'first',\n  name: 'second',\n};\nconsole.log(es6Obj); // {name: 'second'}\n```\n\n#### 新方法\n\n(1)Object.is()\n作用：判断两个数是否相等，与===基本一致，不过有两点不同：+0 不等于-0；NaN 等于 NaN\n\n```javascript\nconsole.log(+0 == -0); // true\nconsole.log(Object.is(+0, -0)); // false\nconsole.log(Object.is(NaN, NaN)); // true\n```\n\n(2)Object.assign()\n作用：将所有可枚举属性从一个或多个源对象复制到目标对象，并返回目标对象\n\n```javascript\n// Object.assign(target, ...sources);  target为目标对象  sources为源对象\nconst target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\nconst returnedTarget = Object.assign(target, source);\nconsole.log(target); // Object { a: 1, b: 4, c: 5 }\nconsole.log(returnedTarget); // Object { a: 1, b: 4, c: 5 }\n```\n\n(3)Object.setPrototypeOf()\n作用：设置对象的原型对象，有两个参数，一个是对象，一个是对象要链接到的原型对象\n```javascript\n// Object.setPrototypeOf(object, prototypeObject);\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {};\n// obj 链接到person\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // hello\n// obj 链接到dog\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woof\n```\n当在对象上有某个方法时，会直接调用对象上的方法，不会去原型链上找\n```javascript\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {\n greeting() {\n    return 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // obj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // obj\n```\n在obj 对象中定义的方法，可能使用到原型对象上的同名方法， 只要调用原型对象上面的方法再进行一下组装就可以达到要求了。ES6 提供了super 关键词，它就指向原型对象\n```javascript\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {\n greeting() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // helloobj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woofobj\n```\n对象方法的定义只能使用简洁的语法形式，否则报错:Uncaught SyntaxError: 'super' keyword unexpected here\n**为什么？？**\n```javascript\nlet person = {\n  greeting: function() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting: function() {\n    return 'woof';\n  },\n};\nlet obj = {\n // 以下写法报错：Uncaught SyntaxError: 'super' keyword unexpected here\n greeting: function() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting());\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting());\n\nlet person = {\n  greeting: function() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting: function() {\n    return 'woof';\n  },\n};\nlet obj = {\n // 以下方法可以正常运行\n greeting() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // helloobj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woofobj\n```\n**在ES6 中，如果一个对象中定义了方法，这个方法自动获取到一个内置的属性[[HomeObject]], 来指向这个对象。super 呢，就是通过Object.getPrototypeOf([[HomeObject]]) 来获取到原型对象。obj.greeting() greeting() 方法中的[[HomeObject]] 就指向了obj.  那里面的super 就是Object.getPrototypeOf(obj), 那就是person 或dog 了，super.greeting() 就相当于person.greeting()了， 更为准确的说是 person.greeting.call(this).  因为如果person中的greenting有this, 我们还要给它指定this 指向， 不能让里面的this 指向别的对象， 只能让this 指向 obj 了。**","source":"_posts/es6-object-strong.md","raw":"---\ntitle: es6对象增强\ndate: 2022-09-02 10:42:05\ntags:\n---\n\n#### 对象字面量语法扩展\n\n(1)属性赋值简写：给一个属性赋变量值时，如果变量和属性的名称相同，可以省略冒号、变量名，直接写属性名即可，js 引擎执行代码时，会自动查找与属性名相同的变量进行属性赋值。\n\n```javascript\nvar name = 'test';\nvar obj = {\n  name,\n};\nconsole.log(obj); // {name: 'test'}\n```\n\n(2)简化属性方法定义：给一个属性赋匿名函数方法时，可以使用更简洁的方法\n\n```javascript\n// ES5\nconst es5Obj = {\n  testFunction: function () {\n    console.log('es5');\n  },\n};\nconsole.log(es5Obj.testFunction()); // es5\n\n// es6\nconst es6Obj = {\n  testFunction() {\n    console.log('es6');\n  },\n};\nconsole.log(es6Obj.testFunction()); // es6\n\n// **注意：只有赋值的是匿名函数，才可以使用简介语法**\nconst es6Obj1 = {\n  testFunction: function Hello() {\n    console.log('hello');\n  },\n};\nconsole.log(es6Obj1.testFunction()); // hello\n```\n\n**常见给函数取名字的情况：(1)递归，自己调用自己；(2)debugger 的时候，方便问题定位**\n\n(3)计算属性名：属性可以动态生成，需要把动态属性用[]包括起来\n\n```javascript\nconst es6Obj = {\n  ['first' + 'second']: 'hanmeimei',\n};\nconsole.log(es6Obj['first' + 'second']); // hanmeimei\n\nconst first = 'first';\nconst es6Obj1 = {\n  [first + 'second']: 'hanmeimei',\n};\nconsole.log(es6Obj[first + 'second']); // hanmeimei\n```\n\n(4)重复属性名的处理：es5 中，给对象赋值，如果存在相同的属性名，会报错；es6 中，不会报错，相同属性名的最后一个，会覆盖之前的属性\n\n```javascript\nconst es6Obj = {\n  name: 'first',\n  name: 'second',\n};\nconsole.log(es6Obj); // {name: 'second'}\n```\n\n#### 新方法\n\n(1)Object.is()\n作用：判断两个数是否相等，与===基本一致，不过有两点不同：+0 不等于-0；NaN 等于 NaN\n\n```javascript\nconsole.log(+0 == -0); // true\nconsole.log(Object.is(+0, -0)); // false\nconsole.log(Object.is(NaN, NaN)); // true\n```\n\n(2)Object.assign()\n作用：将所有可枚举属性从一个或多个源对象复制到目标对象，并返回目标对象\n\n```javascript\n// Object.assign(target, ...sources);  target为目标对象  sources为源对象\nconst target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\nconst returnedTarget = Object.assign(target, source);\nconsole.log(target); // Object { a: 1, b: 4, c: 5 }\nconsole.log(returnedTarget); // Object { a: 1, b: 4, c: 5 }\n```\n\n(3)Object.setPrototypeOf()\n作用：设置对象的原型对象，有两个参数，一个是对象，一个是对象要链接到的原型对象\n```javascript\n// Object.setPrototypeOf(object, prototypeObject);\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {};\n// obj 链接到person\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // hello\n// obj 链接到dog\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woof\n```\n当在对象上有某个方法时，会直接调用对象上的方法，不会去原型链上找\n```javascript\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {\n greeting() {\n    return 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // obj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // obj\n```\n在obj 对象中定义的方法，可能使用到原型对象上的同名方法， 只要调用原型对象上面的方法再进行一下组装就可以达到要求了。ES6 提供了super 关键词，它就指向原型对象\n```javascript\nlet person = {\n  greeting() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting() {\n    return 'woof';\n  },\n};\nlet obj = {\n greeting() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // helloobj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woofobj\n```\n对象方法的定义只能使用简洁的语法形式，否则报错:Uncaught SyntaxError: 'super' keyword unexpected here\n**为什么？？**\n```javascript\nlet person = {\n  greeting: function() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting: function() {\n    return 'woof';\n  },\n};\nlet obj = {\n // 以下写法报错：Uncaught SyntaxError: 'super' keyword unexpected here\n greeting: function() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting());\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting());\n\nlet person = {\n  greeting: function() {\n    return 'hello';\n  },\n};\nlet dog = {\n  greeting: function() {\n    return 'woof';\n  },\n};\nlet obj = {\n // 以下方法可以正常运行\n greeting() {\n    return super.greeting() + 'obj';\n  },\n};\nObject.setPrototypeOf(obj, person);\nconsole.log(obj.greeting()); // helloobj\nObject.setPrototypeOf(obj, dog);\nconsole.log(obj.greeting()); // woofobj\n```\n**在ES6 中，如果一个对象中定义了方法，这个方法自动获取到一个内置的属性[[HomeObject]], 来指向这个对象。super 呢，就是通过Object.getPrototypeOf([[HomeObject]]) 来获取到原型对象。obj.greeting() greeting() 方法中的[[HomeObject]] 就指向了obj.  那里面的super 就是Object.getPrototypeOf(obj), 那就是person 或dog 了，super.greeting() 就相当于person.greeting()了， 更为准确的说是 person.greeting.call(this).  因为如果person中的greenting有this, 我们还要给它指定this 指向， 不能让里面的this 指向别的对象， 只能让this 指向 obj 了。**","slug":"es6-object-strong","published":1,"updated":"2022-09-02T05:49:32.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcj000njktt1d2421lz","content":"<h4 id=\"对象字面量语法扩展\"><a href=\"#对象字面量语法扩展\" class=\"headerlink\" title=\"对象字面量语法扩展\"></a>对象字面量语法扩展</h4><p>(1)属性赋值简写：给一个属性赋变量值时，如果变量和属性的名称相同，可以省略冒号、变量名，直接写属性名即可，js 引擎执行代码时，会自动查找与属性名相同的变量进行属性赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;test&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;name: &#x27;test&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)简化属性方法定义：给一个属性赋匿名函数方法时，可以使用更简洁的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es5Obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">testFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;es5&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es5Obj.testFunction()); <span class=\"comment\">// es5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">testFunction</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;es6&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj.testFunction()); <span class=\"comment\">// es6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// **注意：只有赋值的是匿名函数，才可以使用简介语法**</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">testFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj1.testFunction()); <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常见给函数取名字的情况：(1)递归，自己调用自己；(2)debugger 的时候，方便问题定位</strong></p>\n<p>(3)计算属性名：属性可以动态生成，需要把动态属性用[]包括起来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  [<span class=\"string\">&#x27;first&#x27;</span> + <span class=\"string\">&#x27;second&#x27;</span>]: <span class=\"string\">&#x27;hanmeimei&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj[<span class=\"string\">&#x27;first&#x27;</span> + <span class=\"string\">&#x27;second&#x27;</span>]); <span class=\"comment\">// hanmeimei</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> first = <span class=\"string\">&#x27;first&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj1 = &#123;</span><br><span class=\"line\">  [first + <span class=\"string\">&#x27;second&#x27;</span>]: <span class=\"string\">&#x27;hanmeimei&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj[first + <span class=\"string\">&#x27;second&#x27;</span>]); <span class=\"comment\">// hanmeimei</span></span><br></pre></td></tr></table></figure>\n\n<p>(4)重复属性名的处理：es5 中，给对象赋值，如果存在相同的属性名，会报错；es6 中，不会报错，相同属性名的最后一个，会覆盖之前的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;second&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj); <span class=\"comment\">// &#123;name: &#x27;second&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新方法\"><a href=\"#新方法\" class=\"headerlink\" title=\"新方法\"></a>新方法</h4><p>(1)Object.is()<br>作用：判断两个数是否相等，与===基本一致，不过有两点不同：+0 不等于-0；NaN 等于 NaN</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"number\">0</span> == -<span class=\"number\">0</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, -<span class=\"number\">0</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)Object.assign()<br>作用：将所有可枚举属性从一个或多个源对象复制到目标对象，并返回目标对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.assign(target, ...sources);  target为目标对象  sources为源对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = &#123; <span class=\"attr\">b</span>: <span class=\"number\">4</span>, <span class=\"attr\">c</span>: <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> returnedTarget = <span class=\"built_in\">Object</span>.assign(target, source);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target); <span class=\"comment\">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(returnedTarget); <span class=\"comment\">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(3)Object.setPrototypeOf()<br>作用：设置对象的原型对象，有两个参数，一个是对象，一个是对象要链接到的原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.setPrototypeOf(object, prototypeObject);</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// obj 链接到person</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// obj 链接到dog</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woof</span></span><br></pre></td></tr></table></figure>\n<p>当在对象上有某个方法时，会直接调用对象上的方法，不会去原型链上找</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// obj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// obj</span></span><br></pre></td></tr></table></figure>\n<p>在obj 对象中定义的方法，可能使用到原型对象上的同名方法， 只要调用原型对象上面的方法再进行一下组装就可以达到要求了。ES6 提供了super 关键词，它就指向原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// helloobj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woofobj</span></span><br></pre></td></tr></table></figure>\n<p>对象方法的定义只能使用简洁的语法形式，否则报错:Uncaught SyntaxError: ‘super’ keyword unexpected here<br><strong>为什么？？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 以下写法报错：Uncaught SyntaxError: &#x27;super&#x27; keyword unexpected here</span></span><br><span class=\"line\"> <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting());</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 以下方法可以正常运行</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// helloobj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woofobj</span></span><br></pre></td></tr></table></figure>\n<p><strong>在ES6 中，如果一个对象中定义了方法，这个方法自动获取到一个内置的属性[[HomeObject]], 来指向这个对象。super 呢，就是通过Object.getPrototypeOf([[HomeObject]]) 来获取到原型对象。obj.greeting() greeting() 方法中的[[HomeObject]] 就指向了obj.  那里面的super 就是Object.getPrototypeOf(obj), 那就是person 或dog 了，super.greeting() 就相当于person.greeting()了， 更为准确的说是 person.greeting.call(this).  因为如果person中的greenting有this, 我们还要给它指定this 指向， 不能让里面的this 指向别的对象， 只能让this 指向 obj 了。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"对象字面量语法扩展\"><a href=\"#对象字面量语法扩展\" class=\"headerlink\" title=\"对象字面量语法扩展\"></a>对象字面量语法扩展</h4><p>(1)属性赋值简写：给一个属性赋变量值时，如果变量和属性的名称相同，可以省略冒号、变量名，直接写属性名即可，js 引擎执行代码时，会自动查找与属性名相同的变量进行属性赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;test&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;name: &#x27;test&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)简化属性方法定义：给一个属性赋匿名函数方法时，可以使用更简洁的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es5Obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">testFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;es5&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es5Obj.testFunction()); <span class=\"comment\">// es5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">testFunction</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;es6&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj.testFunction()); <span class=\"comment\">// es6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// **注意：只有赋值的是匿名函数，才可以使用简介语法**</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">testFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj1.testFunction()); <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常见给函数取名字的情况：(1)递归，自己调用自己；(2)debugger 的时候，方便问题定位</strong></p>\n<p>(3)计算属性名：属性可以动态生成，需要把动态属性用[]包括起来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  [<span class=\"string\">&#x27;first&#x27;</span> + <span class=\"string\">&#x27;second&#x27;</span>]: <span class=\"string\">&#x27;hanmeimei&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj[<span class=\"string\">&#x27;first&#x27;</span> + <span class=\"string\">&#x27;second&#x27;</span>]); <span class=\"comment\">// hanmeimei</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> first = <span class=\"string\">&#x27;first&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> es6Obj1 = &#123;</span><br><span class=\"line\">  [first + <span class=\"string\">&#x27;second&#x27;</span>]: <span class=\"string\">&#x27;hanmeimei&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj[first + <span class=\"string\">&#x27;second&#x27;</span>]); <span class=\"comment\">// hanmeimei</span></span><br></pre></td></tr></table></figure>\n\n<p>(4)重复属性名的处理：es5 中，给对象赋值，如果存在相同的属性名，会报错；es6 中，不会报错，相同属性名的最后一个，会覆盖之前的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> es6Obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;second&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es6Obj); <span class=\"comment\">// &#123;name: &#x27;second&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新方法\"><a href=\"#新方法\" class=\"headerlink\" title=\"新方法\"></a>新方法</h4><p>(1)Object.is()<br>作用：判断两个数是否相等，与===基本一致，不过有两点不同：+0 不等于-0；NaN 等于 NaN</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"number\">0</span> == -<span class=\"number\">0</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, -<span class=\"number\">0</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)Object.assign()<br>作用：将所有可枚举属性从一个或多个源对象复制到目标对象，并返回目标对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.assign(target, ...sources);  target为目标对象  sources为源对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = &#123; <span class=\"attr\">b</span>: <span class=\"number\">4</span>, <span class=\"attr\">c</span>: <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> returnedTarget = <span class=\"built_in\">Object</span>.assign(target, source);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target); <span class=\"comment\">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(returnedTarget); <span class=\"comment\">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(3)Object.setPrototypeOf()<br>作用：设置对象的原型对象，有两个参数，一个是对象，一个是对象要链接到的原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.setPrototypeOf(object, prototypeObject);</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// obj 链接到person</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// obj 链接到dog</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woof</span></span><br></pre></td></tr></table></figure>\n<p>当在对象上有某个方法时，会直接调用对象上的方法，不会去原型链上找</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// obj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// obj</span></span><br></pre></td></tr></table></figure>\n<p>在obj 对象中定义的方法，可能使用到原型对象上的同名方法， 只要调用原型对象上面的方法再进行一下组装就可以达到要求了。ES6 提供了super 关键词，它就指向原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// helloobj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woofobj</span></span><br></pre></td></tr></table></figure>\n<p>对象方法的定义只能使用简洁的语法形式，否则报错:Uncaught SyntaxError: ‘super’ keyword unexpected here<br><strong>为什么？？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 以下写法报错：Uncaught SyntaxError: &#x27;super&#x27; keyword unexpected here</span></span><br><span class=\"line\"> <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting());</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">  <span class=\"attr\">greeting</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woof&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 以下方法可以正常运行</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">greeting</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.greeting() + <span class=\"string\">&#x27;obj&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// helloobj</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, dog);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.greeting()); <span class=\"comment\">// woofobj</span></span><br></pre></td></tr></table></figure>\n<p><strong>在ES6 中，如果一个对象中定义了方法，这个方法自动获取到一个内置的属性[[HomeObject]], 来指向这个对象。super 呢，就是通过Object.getPrototypeOf([[HomeObject]]) 来获取到原型对象。obj.greeting() greeting() 方法中的[[HomeObject]] 就指向了obj.  那里面的super 就是Object.getPrototypeOf(obj), 那就是person 或dog 了，super.greeting() 就相当于person.greeting()了， 更为准确的说是 person.greeting.call(this).  因为如果person中的greenting有this, 我们还要给它指定this 指向， 不能让里面的this 指向别的对象， 只能让this 指向 obj 了。</strong></p>\n"},{"title":"github生成令牌(Personal_access_tokens)操作步骤","date":"2022-06-30T03:23:56.000Z","_content":"\n#### github生成令牌\n(1)登录[GitHub网站](https://github.com/)\n(2)找到setting页面 -> Developer setting\n(3)选择 Personal access tokens ，点击 Generate new token 按钮\n(4)需要填写token的权限范围\n(5)**<font color=\"Red\">注意：生成的token只在生成后可以看一次，一定要记得保存！！！</font>**","source":"_posts/github生成令牌-Personal-access-tokens-操作步骤.md","raw":"---\ntitle: github生成令牌(Personal_access_tokens)操作步骤\ndate: 2022-06-30 11:23:56\ntags:\n---\n\n#### github生成令牌\n(1)登录[GitHub网站](https://github.com/)\n(2)找到setting页面 -> Developer setting\n(3)选择 Personal access tokens ，点击 Generate new token 按钮\n(4)需要填写token的权限范围\n(5)**<font color=\"Red\">注意：生成的token只在生成后可以看一次，一定要记得保存！！！</font>**","slug":"github生成令牌-Personal-access-tokens-操作步骤","published":1,"updated":"2022-06-30T05:18:19.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcj000ojkttcxxhhzef","content":"<h4 id=\"github生成令牌\"><a href=\"#github生成令牌\" class=\"headerlink\" title=\"github生成令牌\"></a>github生成令牌</h4><p>(1)登录<a href=\"https://github.com/\">GitHub网站</a><br>(2)找到setting页面 -&gt; Developer setting<br>(3)选择 Personal access tokens ，点击 Generate new token 按钮<br>(4)需要填写token的权限范围<br>(5)<strong><font color=\"Red\">注意：生成的token只在生成后可以看一次，一定要记得保存！！！</font></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"github生成令牌\"><a href=\"#github生成令牌\" class=\"headerlink\" title=\"github生成令牌\"></a>github生成令牌</h4><p>(1)登录<a href=\"https://github.com/\">GitHub网站</a><br>(2)找到setting页面 -&gt; Developer setting<br>(3)选择 Personal access tokens ，点击 Generate new token 按钮<br>(4)需要填写token的权限范围<br>(5)<strong><font color=\"Red\">注意：生成的token只在生成后可以看一次，一定要记得保存！！！</font></strong></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### deploy产生如下错误的解决方法\n(1)使用hexo部署报错Error: Spawn failed\n解决办法：删除.deploy_git文件夹 -> 修改_config.yml文件中deploy的repository地址，修改为SSH方式 -> 按顺序执行命令hexo clean、hexo generate、hexo deploy\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### deploy产生如下错误的解决方法\n(1)使用hexo部署报错Error: Spawn failed\n解决办法：删除.deploy_git文件夹 -> 修改_config.yml文件中deploy的repository地址，修改为SSH方式 -> 按顺序执行命令hexo clean、hexo generate、hexo deploy\n","slug":"hello-world","published":1,"date":"2022-01-05T09:20:43.363Z","updated":"2022-06-23T01:58:33.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcj000pjkttahf33mce","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"deploy产生如下错误的解决方法\"><a href=\"#deploy产生如下错误的解决方法\" class=\"headerlink\" title=\"deploy产生如下错误的解决方法\"></a>deploy产生如下错误的解决方法</h3><p>(1)使用hexo部署报错Error: Spawn failed<br>解决办法：删除.deploy_git文件夹 -&gt; 修改_config.yml文件中deploy的repository地址，修改为SSH方式 -&gt; 按顺序执行命令hexo clean、hexo generate、hexo deploy</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h3 id=\"deploy产生如下错误的解决方法\"><a href=\"#deploy产生如下错误的解决方法\" class=\"headerlink\" title=\"deploy产生如下错误的解决方法\"></a>deploy产生如下错误的解决方法</h3><p>(1)使用hexo部署报错Error: Spawn failed<br>解决办法：删除.deploy_git文件夹 -&gt; 修改_config.yml文件中deploy的repository地址，修改为SSH方式 -&gt; 按顺序执行命令hexo clean、hexo generate、hexo deploy</p>\n"},{"title":"Object获取及设置原型对象","date":"2022-09-05T05:54:58.000Z","_content":"\n###### Object获取原型对象：Object.getPrototypeOf\nObject.getPrototypeOf用于获取指定对象的原型对象\n```javascript\nObject.getPrototypeOf(obj);\n```\n**参数**\nobj: 参数为要获取原型对象的对象\n**返回值**\n返回指定对象的原型对象或null\n注意：\nes5中，如果参数不是对象，会抛出TypeError错误\nes6中，如果参数不是对象，会强制类型转换为对象\n**示例**\n```javascript\nconsole.log(Object.getPrototypeOf('12') === String.prototype); // true\n// \nconsole.log(Object.getPrototypeOf(12) === Number.prototype); // true\n//\nconsole.log(Object.getPrototypeOf({}) === Object.prototype); // true\n// \nconsole.log(Object.getPrototypeOf(true) === Boolean.prototype); // true\n// \nconsole.log(Object.getPrototypeOf(Symbol('test')) === Symbol.prototype); // true\n// \nconsole.log(Object.getPrototypeOf(null)); // Uncaught TypeError: Cannot convert undefined or null to object\n// \nconsole.log(Object.getPrototypeOf(undefined)); // Uncaught TypeError: Cannot convert undefined or null to object\n\n// 对没有原型对象的对象进行操作\nconst obj = Object.create(null);\nconsole.log(Object.getPrototypeOf(obj)); // null\nconst obj = Object.create(undefined);\nconsole.log(Object.getPrototypeOf(obj)); // Uncaught TypeError: Object prototype may only be an Object or null: undefined\n```\n\n###### Object修改原型对象: Object.setPrototypeOf\nObject.setPrototypeOf用于将指定对象的原型对象设置到一个新的对象或null上\n```javascript\nObject.setPrototypeOf(obj, proto);\n```\n**参数**\nobj: 要设置原型对象的对象\nproto: 要设置的新原型对象或null，未设置时抛出TypeError错误\n\n**返回值**\n设置了新原型对象的对象\n\n注意：该操作实际上是个很耗时的操作，如果对性能有更高的要求，不建议直接修改已有对象的原型，而应该通过Object.create()方法来创建一个新的对象\n\n**示例**\n```javascript\nconst obj = { name: 'test' };\nconst newObj = Object.create(obj);\nObject.setPrototypeOf(newObj, obj);\nconsole.log(newObj.name); // 'test'\n\nconst otherObj = { age: 12};\nconsole.log(Object.getPrototypeOf(newObj) === obj); // true\nObject.setPrototypeOf(newObj, otherObj);\nconsole.log(Object.getPrototypeOf(newObj) === obj); // false\nconsole.log(Object.getPrototypeOf(newObj) === otherObj); // true\nconsole.log(newObj.name); // undefined\nconsole.log(newObj.age); // 12\n```","source":"_posts/get-and-set-prototypeof.md","raw":"---\ntitle: Object获取及设置原型对象\ndate: 2022-09-05 13:54:58\ntags:\n---\n\n###### Object获取原型对象：Object.getPrototypeOf\nObject.getPrototypeOf用于获取指定对象的原型对象\n```javascript\nObject.getPrototypeOf(obj);\n```\n**参数**\nobj: 参数为要获取原型对象的对象\n**返回值**\n返回指定对象的原型对象或null\n注意：\nes5中，如果参数不是对象，会抛出TypeError错误\nes6中，如果参数不是对象，会强制类型转换为对象\n**示例**\n```javascript\nconsole.log(Object.getPrototypeOf('12') === String.prototype); // true\n// \nconsole.log(Object.getPrototypeOf(12) === Number.prototype); // true\n//\nconsole.log(Object.getPrototypeOf({}) === Object.prototype); // true\n// \nconsole.log(Object.getPrototypeOf(true) === Boolean.prototype); // true\n// \nconsole.log(Object.getPrototypeOf(Symbol('test')) === Symbol.prototype); // true\n// \nconsole.log(Object.getPrototypeOf(null)); // Uncaught TypeError: Cannot convert undefined or null to object\n// \nconsole.log(Object.getPrototypeOf(undefined)); // Uncaught TypeError: Cannot convert undefined or null to object\n\n// 对没有原型对象的对象进行操作\nconst obj = Object.create(null);\nconsole.log(Object.getPrototypeOf(obj)); // null\nconst obj = Object.create(undefined);\nconsole.log(Object.getPrototypeOf(obj)); // Uncaught TypeError: Object prototype may only be an Object or null: undefined\n```\n\n###### Object修改原型对象: Object.setPrototypeOf\nObject.setPrototypeOf用于将指定对象的原型对象设置到一个新的对象或null上\n```javascript\nObject.setPrototypeOf(obj, proto);\n```\n**参数**\nobj: 要设置原型对象的对象\nproto: 要设置的新原型对象或null，未设置时抛出TypeError错误\n\n**返回值**\n设置了新原型对象的对象\n\n注意：该操作实际上是个很耗时的操作，如果对性能有更高的要求，不建议直接修改已有对象的原型，而应该通过Object.create()方法来创建一个新的对象\n\n**示例**\n```javascript\nconst obj = { name: 'test' };\nconst newObj = Object.create(obj);\nObject.setPrototypeOf(newObj, obj);\nconsole.log(newObj.name); // 'test'\n\nconst otherObj = { age: 12};\nconsole.log(Object.getPrototypeOf(newObj) === obj); // true\nObject.setPrototypeOf(newObj, otherObj);\nconsole.log(Object.getPrototypeOf(newObj) === obj); // false\nconsole.log(Object.getPrototypeOf(newObj) === otherObj); // true\nconsole.log(newObj.name); // undefined\nconsole.log(newObj.age); // 12\n```","slug":"get-and-set-prototypeof","published":1,"updated":"2022-09-05T06:42:22.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpck000qjkttahyj82d8","content":"<h6 id=\"Object获取原型对象：Object-getPrototypeOf\"><a href=\"#Object获取原型对象：Object-getPrototypeOf\" class=\"headerlink\" title=\"Object获取原型对象：Object.getPrototypeOf\"></a>Object获取原型对象：Object.getPrototypeOf</h6><p>Object.getPrototypeOf用于获取指定对象的原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(obj);</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong><br>obj: 参数为要获取原型对象的对象<br><strong>返回值</strong><br>返回指定对象的原型对象或null<br>注意：<br>es5中，如果参数不是对象，会抛出TypeError错误<br>es6中，如果参数不是对象，会强制类型转换为对象<br><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"string\">&#x27;12&#x27;</span>) === <span class=\"built_in\">String</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"number\">12</span>) === <span class=\"built_in\">Number</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(&#123;&#125;) === <span class=\"built_in\">Object</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"literal\">true</span>) === <span class=\"built_in\">Boolean</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;test&#x27;</span>)) === <span class=\"built_in\">Symbol</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"literal\">null</span>)); <span class=\"comment\">// Uncaught TypeError: Cannot convert undefined or null to object</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"literal\">undefined</span>)); <span class=\"comment\">// Uncaught TypeError: Cannot convert undefined or null to object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对没有原型对象的对象进行操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(obj)); <span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(obj)); <span class=\"comment\">// Uncaught TypeError: Object prototype may only be an Object or null: undefined</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Object修改原型对象-Object-setPrototypeOf\"><a href=\"#Object修改原型对象-Object-setPrototypeOf\" class=\"headerlink\" title=\"Object修改原型对象: Object.setPrototypeOf\"></a>Object修改原型对象: Object.setPrototypeOf</h6><p>Object.setPrototypeOf用于将指定对象的原型对象设置到一个新的对象或null上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, proto);</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong><br>obj: 要设置原型对象的对象<br>proto: 要设置的新原型对象或null，未设置时抛出TypeError错误</p>\n<p><strong>返回值</strong><br>设置了新原型对象的对象</p>\n<p>注意：该操作实际上是个很耗时的操作，如果对性能有更高的要求，不建议直接修改已有对象的原型，而应该通过Object.create()方法来创建一个新的对象</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;test&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> newObj = <span class=\"built_in\">Object</span>.create(obj);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(newObj, obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.name); <span class=\"comment\">// &#x27;test&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> otherObj = &#123; <span class=\"attr\">age</span>: <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(newObj) === obj); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(newObj, otherObj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(newObj) === obj); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(newObj) === otherObj); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.name); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.age); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h6 id=\"Object获取原型对象：Object-getPrototypeOf\"><a href=\"#Object获取原型对象：Object-getPrototypeOf\" class=\"headerlink\" title=\"Object获取原型对象：Object.getPrototypeOf\"></a>Object获取原型对象：Object.getPrototypeOf</h6><p>Object.getPrototypeOf用于获取指定对象的原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(obj);</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong><br>obj: 参数为要获取原型对象的对象<br><strong>返回值</strong><br>返回指定对象的原型对象或null<br>注意：<br>es5中，如果参数不是对象，会抛出TypeError错误<br>es6中，如果参数不是对象，会强制类型转换为对象<br><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"string\">&#x27;12&#x27;</span>) === <span class=\"built_in\">String</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"number\">12</span>) === <span class=\"built_in\">Number</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(&#123;&#125;) === <span class=\"built_in\">Object</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"literal\">true</span>) === <span class=\"built_in\">Boolean</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;test&#x27;</span>)) === <span class=\"built_in\">Symbol</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"literal\">null</span>)); <span class=\"comment\">// Uncaught TypeError: Cannot convert undefined or null to object</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"literal\">undefined</span>)); <span class=\"comment\">// Uncaught TypeError: Cannot convert undefined or null to object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对没有原型对象的对象进行操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(obj)); <span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(obj)); <span class=\"comment\">// Uncaught TypeError: Object prototype may only be an Object or null: undefined</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Object修改原型对象-Object-setPrototypeOf\"><a href=\"#Object修改原型对象-Object-setPrototypeOf\" class=\"headerlink\" title=\"Object修改原型对象: Object.setPrototypeOf\"></a>Object修改原型对象: Object.setPrototypeOf</h6><p>Object.setPrototypeOf用于将指定对象的原型对象设置到一个新的对象或null上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, proto);</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong><br>obj: 要设置原型对象的对象<br>proto: 要设置的新原型对象或null，未设置时抛出TypeError错误</p>\n<p><strong>返回值</strong><br>设置了新原型对象的对象</p>\n<p>注意：该操作实际上是个很耗时的操作，如果对性能有更高的要求，不建议直接修改已有对象的原型，而应该通过Object.create()方法来创建一个新的对象</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;test&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> newObj = <span class=\"built_in\">Object</span>.create(obj);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(newObj, obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.name); <span class=\"comment\">// &#x27;test&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> otherObj = &#123; <span class=\"attr\">age</span>: <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(newObj) === obj); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(newObj, otherObj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(newObj) === obj); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(newObj) === otherObj); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.name); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.age); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>"},{"title":"js-类型转换","date":"2022-07-19T07:59:15.000Z","_content":"\n在开始之前，先说一下为什么会说这个，之前在看一篇文章的时候，提到 == 和 === 的区别。\n== ：比较两个数据是否相等，允许进行类型转化\n比如：1==true、'1'==true，结果都是true\n===：严格比较两个数据是否是否相等，包括比较类型是否相同，类型不匹配返回false\n比如：1===true、'1'===true，结果为false\n\n#### 数学运算符中的类型转换\n\n1、减、乘、除运算\n**非Number类型的使用减、乘、除(-、*、/)运算符时，会先将非Number类型转换为Number类型**\n```javascript\n1 - true // 0, true先转换乘1，然后执行 1 - 1\n1 - false // 1, true先转换乘0，然后执行 1 - 0\n1 - null // 1, true先转换乘0，然后执行 1 - 0\n1 - undefined // NaN, undefined转换为数字为 NaN\n2 * ['5'] // 10, ['5']先变成'5'（这一步涉及拆箱操作）,然后变成数字5\n```\n{% btn /2022/08/09/devan-operation/, 拆箱操作, %}\n\n2、加运算\n**js中的加法运算，还可以用来拼接字符串**\n* 加号一侧为String类型，则加法运算被识别为拼接字符串操作，并会优先将另一侧转换为字符串类型\n* 加号一侧为Number类型，另一侧为原始类型，则将原始类型转换为Number类型\n* 加号一侧为Number类型，另一侧为引用类型，将引用类型和Number类型转换成字符串后进行拼接\n**以上三点，优先级从高到低**\n\n```javascript\n123 + '123' // '123123' (规则1)\n123 + null //  123 (规则2)\n123 + true //  124 (规则2)\n123 + {}   //  '123[object Object]' (规则3)\n```\n\n#### 逻辑运算中的类型转换\n1、单个变量\n先将变量转换为Boolean值\n**只有null、undefined、''、NaN、0、false的boolean值是false，其他情况都是true，比如：{}、[]**\n\n2、使用 == 比较中的5条规则\n**建议使用 ===**\n* 规则1：NaN和其他任何类型比较永远返回false(包括和他自己)\n```javascript\nNaN == NaN // false\n```\n* 规则2：boolean和其他任何类型比较，Boolean首先被转换成Number类型\n```javascript\ntrue == 1 // true\ntrue == '2' // false,先将true转换为1，而不是把'2'变成true\ntrue == ['1'] // true, 先将true转换为1，['1']拆箱成'1',在参考规则3\ntrue == ['2'] // false, 同上\nundefined == false // false, 首先false变成0，然后参考规则4\nnull == false // false, 同上\n```\n* String和Number比较，先将String转换为Number类型\n```javascript\n123 == '123' // true, '123'会变成123\n'' == 0 // true，''会变成 0\n```\n* null == undefined 比较结果是true，除此之外，null、undefined和其他任何结果的比较值都为false\n```javascript\nnull == undefined  // true\nnull == '' // false\nnull == 0 // false\nnull == false // false\nundefined == '' // false\nundefined == 0 // false\nundefined == false // false\n```\n* 原始类型和引用类型做比较时，引用类型会依照ToPrimitive规则转换为原始类型\n**ToPrimitive规则是引用类型向原始类型转变的规则，它遵循先 valueOf后 toString的模式期望得到一个原始类型，如果无法得到一个原始类型，就会抛出TypeError**\n```javascript\n'[object Object]' == {} // true, 对象和字符串比较，对象通过toString 得到一个基本类型值\n'1,2,3' == [1,2,3] // true, [1,2,3]通过toString得到一个基本类型\n```\n\n#### 类型转换表\n![类型转换对照表](convert-table.png)\n\n#### 类型转换对照网站\nhttps://dorey.github.io/JavaScript-Equality-Table/\n\n{% btn /,, home %}","source":"_posts/js-transform.md","raw":"---\ntitle: js-类型转换\ndate: 2022-07-19 15:59:15\ntags:\n---\n\n在开始之前，先说一下为什么会说这个，之前在看一篇文章的时候，提到 == 和 === 的区别。\n== ：比较两个数据是否相等，允许进行类型转化\n比如：1==true、'1'==true，结果都是true\n===：严格比较两个数据是否是否相等，包括比较类型是否相同，类型不匹配返回false\n比如：1===true、'1'===true，结果为false\n\n#### 数学运算符中的类型转换\n\n1、减、乘、除运算\n**非Number类型的使用减、乘、除(-、*、/)运算符时，会先将非Number类型转换为Number类型**\n```javascript\n1 - true // 0, true先转换乘1，然后执行 1 - 1\n1 - false // 1, true先转换乘0，然后执行 1 - 0\n1 - null // 1, true先转换乘0，然后执行 1 - 0\n1 - undefined // NaN, undefined转换为数字为 NaN\n2 * ['5'] // 10, ['5']先变成'5'（这一步涉及拆箱操作）,然后变成数字5\n```\n{% btn /2022/08/09/devan-operation/, 拆箱操作, %}\n\n2、加运算\n**js中的加法运算，还可以用来拼接字符串**\n* 加号一侧为String类型，则加法运算被识别为拼接字符串操作，并会优先将另一侧转换为字符串类型\n* 加号一侧为Number类型，另一侧为原始类型，则将原始类型转换为Number类型\n* 加号一侧为Number类型，另一侧为引用类型，将引用类型和Number类型转换成字符串后进行拼接\n**以上三点，优先级从高到低**\n\n```javascript\n123 + '123' // '123123' (规则1)\n123 + null //  123 (规则2)\n123 + true //  124 (规则2)\n123 + {}   //  '123[object Object]' (规则3)\n```\n\n#### 逻辑运算中的类型转换\n1、单个变量\n先将变量转换为Boolean值\n**只有null、undefined、''、NaN、0、false的boolean值是false，其他情况都是true，比如：{}、[]**\n\n2、使用 == 比较中的5条规则\n**建议使用 ===**\n* 规则1：NaN和其他任何类型比较永远返回false(包括和他自己)\n```javascript\nNaN == NaN // false\n```\n* 规则2：boolean和其他任何类型比较，Boolean首先被转换成Number类型\n```javascript\ntrue == 1 // true\ntrue == '2' // false,先将true转换为1，而不是把'2'变成true\ntrue == ['1'] // true, 先将true转换为1，['1']拆箱成'1',在参考规则3\ntrue == ['2'] // false, 同上\nundefined == false // false, 首先false变成0，然后参考规则4\nnull == false // false, 同上\n```\n* String和Number比较，先将String转换为Number类型\n```javascript\n123 == '123' // true, '123'会变成123\n'' == 0 // true，''会变成 0\n```\n* null == undefined 比较结果是true，除此之外，null、undefined和其他任何结果的比较值都为false\n```javascript\nnull == undefined  // true\nnull == '' // false\nnull == 0 // false\nnull == false // false\nundefined == '' // false\nundefined == 0 // false\nundefined == false // false\n```\n* 原始类型和引用类型做比较时，引用类型会依照ToPrimitive规则转换为原始类型\n**ToPrimitive规则是引用类型向原始类型转变的规则，它遵循先 valueOf后 toString的模式期望得到一个原始类型，如果无法得到一个原始类型，就会抛出TypeError**\n```javascript\n'[object Object]' == {} // true, 对象和字符串比较，对象通过toString 得到一个基本类型值\n'1,2,3' == [1,2,3] // true, [1,2,3]通过toString得到一个基本类型\n```\n\n#### 类型转换表\n![类型转换对照表](convert-table.png)\n\n#### 类型转换对照网站\nhttps://dorey.github.io/JavaScript-Equality-Table/\n\n{% btn /,, home %}","slug":"js-transform","published":1,"updated":"2022-08-10T03:11:17.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcm000rjktt20j8bhl2","content":"<p>在开始之前，先说一下为什么会说这个，之前在看一篇文章的时候，提到 == 和 === 的区别。<br>== ：比较两个数据是否相等，允许进行类型转化<br>比如：1==true、’1’==true，结果都是true<br>===：严格比较两个数据是否是否相等，包括比较类型是否相同，类型不匹配返回false<br>比如：1===true、’1’===true，结果为false</p>\n<h4 id=\"数学运算符中的类型转换\"><a href=\"#数学运算符中的类型转换\" class=\"headerlink\" title=\"数学运算符中的类型转换\"></a>数学运算符中的类型转换</h4><p>1、减、乘、除运算<br><strong>非Number类型的使用减、乘、除(-、*、/)运算符时，会先将非Number类型转换为Number类型</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">true</span> <span class=\"comment\">// 0, true先转换乘1，然后执行 1 - 1</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">false</span> <span class=\"comment\">// 1, true先转换乘0，然后执行 1 - 0</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">null</span> <span class=\"comment\">// 1, true先转换乘0，然后执行 1 - 0</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">undefined</span> <span class=\"comment\">// NaN, undefined转换为数字为 NaN</span></span><br><span class=\"line\"><span class=\"number\">2</span> * [<span class=\"string\">&#x27;5&#x27;</span>] <span class=\"comment\">// 10, [&#x27;5&#x27;]先变成&#x27;5&#x27;（这一步涉及拆箱操作）,然后变成数字5</span></span><br></pre></td></tr></table></figure>\n<a class=\"btn\" href=\"/2022/08/09/devan-operation/\">拆箱操作</a>\n\n<p>2、加运算<br><strong>js中的加法运算，还可以用来拼接字符串</strong></p>\n<ul>\n<li>加号一侧为String类型，则加法运算被识别为拼接字符串操作，并会优先将另一侧转换为字符串类型</li>\n<li>加号一侧为Number类型，另一侧为原始类型，则将原始类型转换为Number类型</li>\n<li>加号一侧为Number类型，另一侧为引用类型，将引用类型和Number类型转换成字符串后进行拼接</li>\n<li><em>以上三点，优先级从高到低</em>*</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span> + <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// &#x27;123123&#x27; (规则1)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + <span class=\"literal\">null</span> <span class=\"comment\">//  123 (规则2)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + <span class=\"literal\">true</span> <span class=\"comment\">//  124 (规则2)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + &#123;&#125;   <span class=\"comment\">//  &#x27;123[object Object]&#x27; (规则3)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算中的类型转换\"><a href=\"#逻辑运算中的类型转换\" class=\"headerlink\" title=\"逻辑运算中的类型转换\"></a>逻辑运算中的类型转换</h4><p>1、单个变量<br>先将变量转换为Boolean值<br><strong>只有null、undefined、’’、NaN、0、false的boolean值是false，其他情况都是true，比如：{}、[]</strong></p>\n<p>2、使用 == 比较中的5条规则<br><strong>建议使用 ===</strong></p>\n<ul>\n<li>规则1：NaN和其他任何类型比较永远返回false(包括和他自己)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li>规则2：boolean和其他任何类型比较，Boolean首先被转换成Number类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"string\">&#x27;2&#x27;</span> <span class=\"comment\">// false,先将true转换为1，而不是把&#x27;2&#x27;变成true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == [<span class=\"string\">&#x27;1&#x27;</span>] <span class=\"comment\">// true, 先将true转换为1，[&#x27;1&#x27;]拆箱成&#x27;1&#x27;,在参考规则3</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == [<span class=\"string\">&#x27;2&#x27;</span>] <span class=\"comment\">// false, 同上</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false, 首先false变成0，然后参考规则4</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false, 同上</span></span><br></pre></td></tr></table></figure></li>\n<li>String和Number比较，先将String转换为Number类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span> == <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// true, &#x27;123&#x27;会变成123</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"number\">0</span> <span class=\"comment\">// true，&#x27;&#x27;会变成 0</span></span><br></pre></td></tr></table></figure></li>\n<li>null == undefined 比较结果是true，除此之外，null、undefined和其他任何结果的比较值都为false<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li>原始类型和引用类型做比较时，引用类型会依照ToPrimitive规则转换为原始类型</li>\n<li><em>ToPrimitive规则是引用类型向原始类型转变的规则，它遵循先 valueOf后 toString的模式期望得到一个原始类型，如果无法得到一个原始类型，就会抛出TypeError</em>*<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;[object Object]&#x27;</span> == &#123;&#125; <span class=\"comment\">// true, 对象和字符串比较，对象通过toString 得到一个基本类型值</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1,2,3&#x27;</span> == [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">// true, [1,2,3]通过toString得到一个基本类型</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"类型转换表\"><a href=\"#类型转换表\" class=\"headerlink\" title=\"类型转换表\"></a>类型转换表</h4><p><img src=\"/2022/07/19/js-transform/convert-table.png\" alt=\"类型转换对照表\"></p>\n<h4 id=\"类型转换对照网站\"><a href=\"#类型转换对照网站\" class=\"headerlink\" title=\"类型转换对照网站\"></a>类型转换对照网站</h4><p><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">https://dorey.github.io/JavaScript-Equality-Table/</a></p>\n<a class=\"btn\" href=\"/\"><i class=\"fa fa-home\"></i></a>","site":{"data":{}},"excerpt":"","more":"<p>在开始之前，先说一下为什么会说这个，之前在看一篇文章的时候，提到 == 和 === 的区别。<br>== ：比较两个数据是否相等，允许进行类型转化<br>比如：1==true、’1’==true，结果都是true<br>===：严格比较两个数据是否是否相等，包括比较类型是否相同，类型不匹配返回false<br>比如：1===true、’1’===true，结果为false</p>\n<h4 id=\"数学运算符中的类型转换\"><a href=\"#数学运算符中的类型转换\" class=\"headerlink\" title=\"数学运算符中的类型转换\"></a>数学运算符中的类型转换</h4><p>1、减、乘、除运算<br><strong>非Number类型的使用减、乘、除(-、*、/)运算符时，会先将非Number类型转换为Number类型</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">true</span> <span class=\"comment\">// 0, true先转换乘1，然后执行 1 - 1</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">false</span> <span class=\"comment\">// 1, true先转换乘0，然后执行 1 - 0</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">null</span> <span class=\"comment\">// 1, true先转换乘0，然后执行 1 - 0</span></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"literal\">undefined</span> <span class=\"comment\">// NaN, undefined转换为数字为 NaN</span></span><br><span class=\"line\"><span class=\"number\">2</span> * [<span class=\"string\">&#x27;5&#x27;</span>] <span class=\"comment\">// 10, [&#x27;5&#x27;]先变成&#x27;5&#x27;（这一步涉及拆箱操作）,然后变成数字5</span></span><br></pre></td></tr></table></figure>\n<a class=\"btn\" href=\"/2022/08/09/devan-operation/\">拆箱操作</a>\n\n<p>2、加运算<br><strong>js中的加法运算，还可以用来拼接字符串</strong></p>\n<ul>\n<li>加号一侧为String类型，则加法运算被识别为拼接字符串操作，并会优先将另一侧转换为字符串类型</li>\n<li>加号一侧为Number类型，另一侧为原始类型，则将原始类型转换为Number类型</li>\n<li>加号一侧为Number类型，另一侧为引用类型，将引用类型和Number类型转换成字符串后进行拼接</li>\n<li><em>以上三点，优先级从高到低</em>*</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span> + <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// &#x27;123123&#x27; (规则1)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + <span class=\"literal\">null</span> <span class=\"comment\">//  123 (规则2)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + <span class=\"literal\">true</span> <span class=\"comment\">//  124 (规则2)</span></span><br><span class=\"line\"><span class=\"number\">123</span> + &#123;&#125;   <span class=\"comment\">//  &#x27;123[object Object]&#x27; (规则3)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算中的类型转换\"><a href=\"#逻辑运算中的类型转换\" class=\"headerlink\" title=\"逻辑运算中的类型转换\"></a>逻辑运算中的类型转换</h4><p>1、单个变量<br>先将变量转换为Boolean值<br><strong>只有null、undefined、’’、NaN、0、false的boolean值是false，其他情况都是true，比如：{}、[]</strong></p>\n<p>2、使用 == 比较中的5条规则<br><strong>建议使用 ===</strong></p>\n<ul>\n<li>规则1：NaN和其他任何类型比较永远返回false(包括和他自己)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li>规则2：boolean和其他任何类型比较，Boolean首先被转换成Number类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"string\">&#x27;2&#x27;</span> <span class=\"comment\">// false,先将true转换为1，而不是把&#x27;2&#x27;变成true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == [<span class=\"string\">&#x27;1&#x27;</span>] <span class=\"comment\">// true, 先将true转换为1，[&#x27;1&#x27;]拆箱成&#x27;1&#x27;,在参考规则3</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == [<span class=\"string\">&#x27;2&#x27;</span>] <span class=\"comment\">// false, 同上</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false, 首先false变成0，然后参考规则4</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false, 同上</span></span><br></pre></td></tr></table></figure></li>\n<li>String和Number比较，先将String转换为Number类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span> == <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// true, &#x27;123&#x27;会变成123</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"number\">0</span> <span class=\"comment\">// true，&#x27;&#x27;会变成 0</span></span><br></pre></td></tr></table></figure></li>\n<li>null == undefined 比较结果是true，除此之外，null、undefined和其他任何结果的比较值都为false<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li>原始类型和引用类型做比较时，引用类型会依照ToPrimitive规则转换为原始类型</li>\n<li><em>ToPrimitive规则是引用类型向原始类型转变的规则，它遵循先 valueOf后 toString的模式期望得到一个原始类型，如果无法得到一个原始类型，就会抛出TypeError</em>*<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;[object Object]&#x27;</span> == &#123;&#125; <span class=\"comment\">// true, 对象和字符串比较，对象通过toString 得到一个基本类型值</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1,2,3&#x27;</span> == [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">// true, [1,2,3]通过toString得到一个基本类型</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"类型转换表\"><a href=\"#类型转换表\" class=\"headerlink\" title=\"类型转换表\"></a>类型转换表</h4><p><img src=\"/2022/07/19/js-transform/convert-table.png\" alt=\"类型转换对照表\"></p>\n<h4 id=\"类型转换对照网站\"><a href=\"#类型转换对照网站\" class=\"headerlink\" title=\"类型转换对照网站\"></a>类型转换对照网站</h4><p><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">https://dorey.github.io/JavaScript-Equality-Table/</a></p>\n<a class=\"btn\" href=\"/\"><i class=\"fa fa-home\"></i></a>"},{"title":"meta标签的使用","date":"2022-06-28T14:16:30.000Z","_content":"\n#### meta标签的使用\n\n###### <meta>文档级元数据元素\nmeta标签一般放在HTML页面的head里面，[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta)定义：\n>HTML <meta> 元素表示那些不能由其它 HTML 元相关（meta-related）元素（(\\<base\\>,\\<link\\>,\\<script\\>,\\<style\\> 或 \\<title\\>）之一表示的任何元数据信息。\n\n###### meta定义的元数据类型\n(1)name属性：meta元素提供文档级别元数据，应用于整个页面\n-- name和content一起使用，name表示元数据名称，content表示元数据的值\n---- name=\"author\"，表示网页作者的名字，例如某个组织或机构\n```\n<mate name=\"author\" content=\"xxx@mail.com\">\n```\n\n---- name=\"description\"，是一段简短而精确的，对页面内容的描述\n```javascript\n//淘宝网页的meta\n<meta name=\"description\" content=\"淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！\">\n```\n\n---- name=\"keywords\"，与页面内容相关的关键词，使用逗号分隔，需要注意某些搜索引擎会用这些关键词对文档进行分类\n```javascript\n//淘宝网页的meta\n<meta name=\"keyword\" content=\"淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺\">\n```\n\n---- name=\"viewport\"，为viewport（视口）的初始大小提供指示，目前仅用于移动设备\n```javascript\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\nwidth：用来设置viewport的宽度为设备宽度，常用值：device-width、？？？？\ninitial-scale：为设备宽度与viewport大小之间的缩放比例\nmaximum-scale：？？？？\nminimum-scale：？？？？\nuser-scalable：？？？？\nminimal-ui：？？？？\n\n---- name=\"robots\"，表示爬虫对此页面的处理行为，或者说，应当遵守的规则，是用来做搜索引擎抓取的\ncontent类型：\nall：搜索引擎将索引此网页，并继续通过此网页的链接索引文件将被检索\nnone：搜索引擎将忽略此网页\nindex：搜索引擎索引此网页\nfollow：搜索引擎继续通过此网页的链接索引搜索其它的网页\n\n---- name=\"renderer\"，用来指定双核浏览器的渲染方式，比如360浏览器，我们可以通过这个设置来指定360浏览器的渲染方式\n```javascript\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\ncontent类型：\n？？？？\n\n---- name=\"spm-id\"，？？？？\n```javascript\n// 淘宝\n<meta name=\"spm-id\" content=\"a21bo\">\n```\n---- name=\"aplus-xplug\"，？？？？\n```javascript\n// 淘宝网\n<meta name=\"aplus-xplug\" content=\"NONE\">\n```\n\n\n(2)http-equiv属性：meta元素是编译指令，提供的信息与类似命名的http头部相同\n-- http-equiv和content一起使用，http-equiv表示元数据名称，content表示元数据的值\n-- http-equiv所有允许的值都是特定http头部的名称\n---- http-equiv=\"X-UA-Compatible\"\n```javascript\n// 淘宝网\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=10,chrome=1\">//IE浏览器适配\n```\nIE=10告诉浏览器，以当前浏览器支持的最新版本来渲染。\nchrome=1告诉浏览器，如果当前IE浏览器安装了Google Chrome Frame插件，就以chrome内核来渲染页面。\n两者都存在的情况：如果有chrome插件，就以chrome内核渲染，如果没有，就以当前浏览器支持的最高版本渲染。\n另外，这个属性支持的范围是IE8-IE11\n如果在http头部中也设置了这个属性，并且和meta中设置的有冲突，开发者偏好（meta元素）优先于Web服务器设置（HTTP头）。\n\n---- http-equiv=\"content-type\"，用来声明文档类型和字符集\n```javascript\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n```\n\n---- http-equiv=\"x-dns-prefetch-control\"\n一般来说，HTML页面中的a标签会自动启用DNS提前解析来提升网站性能，但是在使用https协议的网站中失效了，我们可以如下设置打开对a标签的提前解析：\n```javascript\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n```\n\n---- cache-control、Pragma、Expires，和缓存相关的设置，但是遗憾的是这些往往不生效，我们一般都通过http headers来设置缓存策略  ？？？？\n\n(3)charset属性：meta元素是一个字符集声明，告诉文档使用哪种字符编码\n(4)itemprop属性：meta元素提供用户定义的元数据","source":"_posts/meta标签的使用.md","raw":"---\ntitle: meta标签的使用\ndate: 2022-06-28 22:16:30\ntags:\n---\n\n#### meta标签的使用\n\n###### <meta>文档级元数据元素\nmeta标签一般放在HTML页面的head里面，[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta)定义：\n>HTML <meta> 元素表示那些不能由其它 HTML 元相关（meta-related）元素（(\\<base\\>,\\<link\\>,\\<script\\>,\\<style\\> 或 \\<title\\>）之一表示的任何元数据信息。\n\n###### meta定义的元数据类型\n(1)name属性：meta元素提供文档级别元数据，应用于整个页面\n-- name和content一起使用，name表示元数据名称，content表示元数据的值\n---- name=\"author\"，表示网页作者的名字，例如某个组织或机构\n```\n<mate name=\"author\" content=\"xxx@mail.com\">\n```\n\n---- name=\"description\"，是一段简短而精确的，对页面内容的描述\n```javascript\n//淘宝网页的meta\n<meta name=\"description\" content=\"淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！\">\n```\n\n---- name=\"keywords\"，与页面内容相关的关键词，使用逗号分隔，需要注意某些搜索引擎会用这些关键词对文档进行分类\n```javascript\n//淘宝网页的meta\n<meta name=\"keyword\" content=\"淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺\">\n```\n\n---- name=\"viewport\"，为viewport（视口）的初始大小提供指示，目前仅用于移动设备\n```javascript\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\nwidth：用来设置viewport的宽度为设备宽度，常用值：device-width、？？？？\ninitial-scale：为设备宽度与viewport大小之间的缩放比例\nmaximum-scale：？？？？\nminimum-scale：？？？？\nuser-scalable：？？？？\nminimal-ui：？？？？\n\n---- name=\"robots\"，表示爬虫对此页面的处理行为，或者说，应当遵守的规则，是用来做搜索引擎抓取的\ncontent类型：\nall：搜索引擎将索引此网页，并继续通过此网页的链接索引文件将被检索\nnone：搜索引擎将忽略此网页\nindex：搜索引擎索引此网页\nfollow：搜索引擎继续通过此网页的链接索引搜索其它的网页\n\n---- name=\"renderer\"，用来指定双核浏览器的渲染方式，比如360浏览器，我们可以通过这个设置来指定360浏览器的渲染方式\n```javascript\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\ncontent类型：\n？？？？\n\n---- name=\"spm-id\"，？？？？\n```javascript\n// 淘宝\n<meta name=\"spm-id\" content=\"a21bo\">\n```\n---- name=\"aplus-xplug\"，？？？？\n```javascript\n// 淘宝网\n<meta name=\"aplus-xplug\" content=\"NONE\">\n```\n\n\n(2)http-equiv属性：meta元素是编译指令，提供的信息与类似命名的http头部相同\n-- http-equiv和content一起使用，http-equiv表示元数据名称，content表示元数据的值\n-- http-equiv所有允许的值都是特定http头部的名称\n---- http-equiv=\"X-UA-Compatible\"\n```javascript\n// 淘宝网\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=10,chrome=1\">//IE浏览器适配\n```\nIE=10告诉浏览器，以当前浏览器支持的最新版本来渲染。\nchrome=1告诉浏览器，如果当前IE浏览器安装了Google Chrome Frame插件，就以chrome内核来渲染页面。\n两者都存在的情况：如果有chrome插件，就以chrome内核渲染，如果没有，就以当前浏览器支持的最高版本渲染。\n另外，这个属性支持的范围是IE8-IE11\n如果在http头部中也设置了这个属性，并且和meta中设置的有冲突，开发者偏好（meta元素）优先于Web服务器设置（HTTP头）。\n\n---- http-equiv=\"content-type\"，用来声明文档类型和字符集\n```javascript\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n```\n\n---- http-equiv=\"x-dns-prefetch-control\"\n一般来说，HTML页面中的a标签会自动启用DNS提前解析来提升网站性能，但是在使用https协议的网站中失效了，我们可以如下设置打开对a标签的提前解析：\n```javascript\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n```\n\n---- cache-control、Pragma、Expires，和缓存相关的设置，但是遗憾的是这些往往不生效，我们一般都通过http headers来设置缓存策略  ？？？？\n\n(3)charset属性：meta元素是一个字符集声明，告诉文档使用哪种字符编码\n(4)itemprop属性：meta元素提供用户定义的元数据","slug":"meta标签的使用","published":1,"updated":"2022-07-21T07:48:28.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcn000sjktt31lv5zgp","content":"<h4 id=\"meta标签的使用\"><a href=\"#meta标签的使用\" class=\"headerlink\" title=\"meta标签的使用\"></a>meta标签的使用</h4><h6 id=\"文档级元数据元素\"><a href=\"#文档级元数据元素\" class=\"headerlink\" title=\"文档级元数据元素\"></a><meta>文档级元数据元素</h6><p>meta标签一般放在HTML页面的head里面，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta\">MDN</a>定义：</p>\n<blockquote>\n<p>HTML <meta> 元素表示那些不能由其它 HTML 元相关（meta-related）元素（(&lt;base&gt;,&lt;link&gt;,&lt;script&gt;,&lt;style&gt; 或 &lt;title&gt;）之一表示的任何元数据信息。</p>\n</blockquote>\n<h6 id=\"meta定义的元数据类型\"><a href=\"#meta定义的元数据类型\" class=\"headerlink\" title=\"meta定义的元数据类型\"></a>meta定义的元数据类型</h6><p>(1)name属性：meta元素提供文档级别元数据，应用于整个页面<br>– name和content一起使用，name表示元数据名称，content表示元数据的值<br>—- name=”author”，表示网页作者的名字，例如某个组织或机构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mate name=&quot;author&quot; content=&quot;xxx@mail.com&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”description”，是一段简短而精确的，对页面内容的描述</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//淘宝网页的meta</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;description&quot;</span> content=<span class=\"string\">&quot;淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”keywords”，与页面内容相关的关键词，使用逗号分隔，需要注意某些搜索引擎会用这些关键词对文档进行分类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//淘宝网页的meta</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;keyword&quot;</span> content=<span class=\"string\">&quot;淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”viewport”，为viewport（视口）的初始大小提供指示，目前仅用于移动设备</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>width：用来设置viewport的宽度为设备宽度，常用值：device-width、？？？？<br>initial-scale：为设备宽度与viewport大小之间的缩放比例<br>maximum-scale：？？？？<br>minimum-scale：？？？？<br>user-scalable：？？？？<br>minimal-ui：？？？？</p>\n<p>—- name=”robots”，表示爬虫对此页面的处理行为，或者说，应当遵守的规则，是用来做搜索引擎抓取的<br>content类型：<br>all：搜索引擎将索引此网页，并继续通过此网页的链接索引文件将被检索<br>none：搜索引擎将忽略此网页<br>index：搜索引擎索引此网页<br>follow：搜索引擎继续通过此网页的链接索引搜索其它的网页</p>\n<p>—- name=”renderer”，用来指定双核浏览器的渲染方式，比如360浏览器，我们可以通过这个设置来指定360浏览器的渲染方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;renderer&quot;</span> content=<span class=\"string\">&quot;webkit&quot;</span>&gt; <span class=\"comment\">//默认webkit内核</span></span><br><span class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quot;&gt; //默认IE兼容模式</span><br><span class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;ie-stand&quot;&gt; //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<p>content类型：<br>？？？？</p>\n<p>—- name=”spm-id”，？？？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;spm-id&quot;</span> content=<span class=\"string\">&quot;a21bo&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>—- name=”aplus-xplug”，？？？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝网</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;aplus-xplug&quot;</span> content=<span class=\"string\">&quot;NONE&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>(2)http-equiv属性：meta元素是编译指令，提供的信息与类似命名的http头部相同<br>– http-equiv和content一起使用，http-equiv表示元数据名称，content表示元数据的值<br>– http-equiv所有允许的值都是特定http头部的名称<br>—- http-equiv=”X-UA-Compatible”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝网</span></span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=10,chrome=1&quot;</span>&gt;<span class=\"comment\">//IE浏览器适配</span></span><br></pre></td></tr></table></figure>\n<p>IE=10告诉浏览器，以当前浏览器支持的最新版本来渲染。<br>chrome=1告诉浏览器，如果当前IE浏览器安装了Google Chrome Frame插件，就以chrome内核来渲染页面。<br>两者都存在的情况：如果有chrome插件，就以chrome内核渲染，如果没有，就以当前浏览器支持的最高版本渲染。<br>另外，这个属性支持的范围是IE8-IE11<br>如果在http头部中也设置了这个属性，并且和meta中设置的有冲突，开发者偏好（meta元素）优先于Web服务器设置（HTTP头）。</p>\n<p>—- http-equiv=”content-type”，用来声明文档类型和字符集</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;content-type&quot;</span> content=<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- http-equiv=”x-dns-prefetch-control”<br>一般来说，HTML页面中的a标签会自动启用DNS提前解析来提升网站性能，但是在使用https协议的网站中失效了，我们可以如下设置打开对a标签的提前解析：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;x-dns-prefetch-control&quot;</span> content=<span class=\"string\">&quot;on&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- cache-control、Pragma、Expires，和缓存相关的设置，但是遗憾的是这些往往不生效，我们一般都通过http headers来设置缓存策略  ？？？？</p>\n<p>(3)charset属性：meta元素是一个字符集声明，告诉文档使用哪种字符编码<br>(4)itemprop属性：meta元素提供用户定义的元数据</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"meta标签的使用\"><a href=\"#meta标签的使用\" class=\"headerlink\" title=\"meta标签的使用\"></a>meta标签的使用</h4><h6 id=\"文档级元数据元素\"><a href=\"#文档级元数据元素\" class=\"headerlink\" title=\"文档级元数据元素\"></a><meta>文档级元数据元素</h6><p>meta标签一般放在HTML页面的head里面，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta\">MDN</a>定义：</p>\n<blockquote>\n<p>HTML <meta> 元素表示那些不能由其它 HTML 元相关（meta-related）元素（(&lt;base&gt;,&lt;link&gt;,&lt;script&gt;,&lt;style&gt; 或 &lt;title&gt;）之一表示的任何元数据信息。</p>\n</blockquote>\n<h6 id=\"meta定义的元数据类型\"><a href=\"#meta定义的元数据类型\" class=\"headerlink\" title=\"meta定义的元数据类型\"></a>meta定义的元数据类型</h6><p>(1)name属性：meta元素提供文档级别元数据，应用于整个页面<br>– name和content一起使用，name表示元数据名称，content表示元数据的值<br>—- name=”author”，表示网页作者的名字，例如某个组织或机构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mate name=&quot;author&quot; content=&quot;xxx@mail.com&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”description”，是一段简短而精确的，对页面内容的描述</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//淘宝网页的meta</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;description&quot;</span> content=<span class=\"string\">&quot;淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”keywords”，与页面内容相关的关键词，使用逗号分隔，需要注意某些搜索引擎会用这些关键词对文档进行分类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//淘宝网页的meta</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;keyword&quot;</span> content=<span class=\"string\">&quot;淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- name=”viewport”，为viewport（视口）的初始大小提供指示，目前仅用于移动设备</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>width：用来设置viewport的宽度为设备宽度，常用值：device-width、？？？？<br>initial-scale：为设备宽度与viewport大小之间的缩放比例<br>maximum-scale：？？？？<br>minimum-scale：？？？？<br>user-scalable：？？？？<br>minimal-ui：？？？？</p>\n<p>—- name=”robots”，表示爬虫对此页面的处理行为，或者说，应当遵守的规则，是用来做搜索引擎抓取的<br>content类型：<br>all：搜索引擎将索引此网页，并继续通过此网页的链接索引文件将被检索<br>none：搜索引擎将忽略此网页<br>index：搜索引擎索引此网页<br>follow：搜索引擎继续通过此网页的链接索引搜索其它的网页</p>\n<p>—- name=”renderer”，用来指定双核浏览器的渲染方式，比如360浏览器，我们可以通过这个设置来指定360浏览器的渲染方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;renderer&quot;</span> content=<span class=\"string\">&quot;webkit&quot;</span>&gt; <span class=\"comment\">//默认webkit内核</span></span><br><span class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quot;&gt; //默认IE兼容模式</span><br><span class=\"line\">&lt;meta name=&quot;renderer&quot; content=&quot;ie-stand&quot;&gt; //默认IE标准模式</span><br></pre></td></tr></table></figure>\n<p>content类型：<br>？？？？</p>\n<p>—- name=”spm-id”，？？？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;spm-id&quot;</span> content=<span class=\"string\">&quot;a21bo&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>—- name=”aplus-xplug”，？？？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝网</span></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;aplus-xplug&quot;</span> content=<span class=\"string\">&quot;NONE&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>(2)http-equiv属性：meta元素是编译指令，提供的信息与类似命名的http头部相同<br>– http-equiv和content一起使用，http-equiv表示元数据名称，content表示元数据的值<br>– http-equiv所有允许的值都是特定http头部的名称<br>—- http-equiv=”X-UA-Compatible”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 淘宝网</span></span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=10,chrome=1&quot;</span>&gt;<span class=\"comment\">//IE浏览器适配</span></span><br></pre></td></tr></table></figure>\n<p>IE=10告诉浏览器，以当前浏览器支持的最新版本来渲染。<br>chrome=1告诉浏览器，如果当前IE浏览器安装了Google Chrome Frame插件，就以chrome内核来渲染页面。<br>两者都存在的情况：如果有chrome插件，就以chrome内核渲染，如果没有，就以当前浏览器支持的最高版本渲染。<br>另外，这个属性支持的范围是IE8-IE11<br>如果在http头部中也设置了这个属性，并且和meta中设置的有冲突，开发者偏好（meta元素）优先于Web服务器设置（HTTP头）。</p>\n<p>—- http-equiv=”content-type”，用来声明文档类型和字符集</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;content-type&quot;</span> content=<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- http-equiv=”x-dns-prefetch-control”<br>一般来说，HTML页面中的a标签会自动启用DNS提前解析来提升网站性能，但是在使用https协议的网站中失效了，我们可以如下设置打开对a标签的提前解析：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;x-dns-prefetch-control&quot;</span> content=<span class=\"string\">&quot;on&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>—- cache-control、Pragma、Expires，和缓存相关的设置，但是遗憾的是这些往往不生效，我们一般都通过http headers来设置缓存策略  ？？？？</p>\n<p>(3)charset属性：meta元素是一个字符集声明，告诉文档使用哪种字符编码<br>(4)itemprop属性：meta元素提供用户定义的元数据</p>\n"},{"title":"伪数组","date":"2022-08-04T02:57:14.000Z","_content":"\n#### 概念\nArrayLike，也叫作类数组。是一种按照索引存储数据且具有length属性的对象。\n\n#### 特征\n1、具有length属性\n2、按照索引方式存储数据\n3、不具有数组的方法，如push、pop等\n![document获取的伪数组](document.png)\n\n#### 有哪些常见的伪数组\n1、function的arguments对象\n2、document.getElementsByTagName、document.getElementsByClassName等document方法获取的NodeList对象\n3、上传文件是选择的file对象\n4、自定义的某些对象\n\n#### 判断一个数组是不是伪数组的方法\n1、Array.isArray\n```javascript\n// fakeArray表示伪数组\n// array 表示正常数组\nArray.isArray(fakeArray); // false\nArray.isArray(array); // true\n```\n2、instanceof\n```javascript\n// fakeArray表示伪数组\n// array 表示正常数组\nfakeArray instanceof Array; // false\narray instanceof Array; // true\n```\n\n#### 将数组转为真正数组的方法\n1、使用Array.prototype.slice.call()\n![Array.prototype.slice.call转换](prototype_call.png)\n2、使用[].slice.call()\n![slice.call转换](slice_call.png)\n3、使用Array.from()\n![array.from转换](array_from.png)\n","source":"_posts/fake-array.md","raw":"---\ntitle: 伪数组\ndate: 2022-08-04 10:57:14\ntags:\n---\n\n#### 概念\nArrayLike，也叫作类数组。是一种按照索引存储数据且具有length属性的对象。\n\n#### 特征\n1、具有length属性\n2、按照索引方式存储数据\n3、不具有数组的方法，如push、pop等\n![document获取的伪数组](document.png)\n\n#### 有哪些常见的伪数组\n1、function的arguments对象\n2、document.getElementsByTagName、document.getElementsByClassName等document方法获取的NodeList对象\n3、上传文件是选择的file对象\n4、自定义的某些对象\n\n#### 判断一个数组是不是伪数组的方法\n1、Array.isArray\n```javascript\n// fakeArray表示伪数组\n// array 表示正常数组\nArray.isArray(fakeArray); // false\nArray.isArray(array); // true\n```\n2、instanceof\n```javascript\n// fakeArray表示伪数组\n// array 表示正常数组\nfakeArray instanceof Array; // false\narray instanceof Array; // true\n```\n\n#### 将数组转为真正数组的方法\n1、使用Array.prototype.slice.call()\n![Array.prototype.slice.call转换](prototype_call.png)\n2、使用[].slice.call()\n![slice.call转换](slice_call.png)\n3、使用Array.from()\n![array.from转换](array_from.png)\n","slug":"fake-array","published":1,"updated":"2022-08-04T07:17:36.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcn000tjktt291vev4n","content":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>ArrayLike，也叫作类数组。是一种按照索引存储数据且具有length属性的对象。</p>\n<h4 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h4><p>1、具有length属性<br>2、按照索引方式存储数据<br>3、不具有数组的方法，如push、pop等<br><img src=\"/2022/08/04/fake-array/document.png\" alt=\"document获取的伪数组\"></p>\n<h4 id=\"有哪些常见的伪数组\"><a href=\"#有哪些常见的伪数组\" class=\"headerlink\" title=\"有哪些常见的伪数组\"></a>有哪些常见的伪数组</h4><p>1、function的arguments对象<br>2、document.getElementsByTagName、document.getElementsByClassName等document方法获取的NodeList对象<br>3、上传文件是选择的file对象<br>4、自定义的某些对象</p>\n<h4 id=\"判断一个数组是不是伪数组的方法\"><a href=\"#判断一个数组是不是伪数组的方法\" class=\"headerlink\" title=\"判断一个数组是不是伪数组的方法\"></a>判断一个数组是不是伪数组的方法</h4><p>1、Array.isArray</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fakeArray表示伪数组</span></span><br><span class=\"line\"><span class=\"comment\">// array 表示正常数组</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(fakeArray); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(array); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>2、instanceof</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fakeArray表示伪数组</span></span><br><span class=\"line\"><span class=\"comment\">// array 表示正常数组</span></span><br><span class=\"line\">fakeArray <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将数组转为真正数组的方法\"><a href=\"#将数组转为真正数组的方法\" class=\"headerlink\" title=\"将数组转为真正数组的方法\"></a>将数组转为真正数组的方法</h4><p>1、使用Array.prototype.slice.call()<br><img src=\"/2022/08/04/fake-array/prototype_call.png\" alt=\"Array.prototype.slice.call转换\"><br>2、使用[].slice.call()<br><img src=\"/2022/08/04/fake-array/slice_call.png\" alt=\"slice.call转换\"><br>3、使用Array.from()<br><img src=\"/2022/08/04/fake-array/array_from.png\" alt=\"array.from转换\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>ArrayLike，也叫作类数组。是一种按照索引存储数据且具有length属性的对象。</p>\n<h4 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h4><p>1、具有length属性<br>2、按照索引方式存储数据<br>3、不具有数组的方法，如push、pop等<br><img src=\"/2022/08/04/fake-array/document.png\" alt=\"document获取的伪数组\"></p>\n<h4 id=\"有哪些常见的伪数组\"><a href=\"#有哪些常见的伪数组\" class=\"headerlink\" title=\"有哪些常见的伪数组\"></a>有哪些常见的伪数组</h4><p>1、function的arguments对象<br>2、document.getElementsByTagName、document.getElementsByClassName等document方法获取的NodeList对象<br>3、上传文件是选择的file对象<br>4、自定义的某些对象</p>\n<h4 id=\"判断一个数组是不是伪数组的方法\"><a href=\"#判断一个数组是不是伪数组的方法\" class=\"headerlink\" title=\"判断一个数组是不是伪数组的方法\"></a>判断一个数组是不是伪数组的方法</h4><p>1、Array.isArray</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fakeArray表示伪数组</span></span><br><span class=\"line\"><span class=\"comment\">// array 表示正常数组</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(fakeArray); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(array); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>2、instanceof</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fakeArray表示伪数组</span></span><br><span class=\"line\"><span class=\"comment\">// array 表示正常数组</span></span><br><span class=\"line\">fakeArray <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将数组转为真正数组的方法\"><a href=\"#将数组转为真正数组的方法\" class=\"headerlink\" title=\"将数组转为真正数组的方法\"></a>将数组转为真正数组的方法</h4><p>1、使用Array.prototype.slice.call()<br><img src=\"/2022/08/04/fake-array/prototype_call.png\" alt=\"Array.prototype.slice.call转换\"><br>2、使用[].slice.call()<br><img src=\"/2022/08/04/fake-array/slice_call.png\" alt=\"slice.call转换\"><br>3、使用Array.from()<br><img src=\"/2022/08/04/fake-array/array_from.png\" alt=\"array.from转换\"></p>\n"},{"title":"js-基本类型与引用类型","date":"2022-07-19T08:23:28.000Z","_content":"","source":"_posts/origin-type-and-reference-type.md","raw":"---\ntitle: js-基本类型与引用类型\ndate: 2022-07-19 16:23:28\ntags:\n---\n","slug":"origin-type-and-reference-type","published":1,"updated":"2022-08-10T03:14:27.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpco000ujktth86w9xne","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"react渲染","date":"2022-06-22T14:12:37.000Z","_content":"\n## 主要步骤\n#### React.createElement语法糖\n(1)React.createElement(type, [props], [...children]);\n(2)type：元素类型\n(3)props：属性值\n(4)children：子元素\n#### 虚拟DOM\n(1)本质为JS对象，使用键值对存储信息，嵌套表示层级关系\n(2)$$typeof：标识符，使用Symbol数据结构确保唯一性\n\n#### 协调算法\n#### filter图示\n![filter_tree](fiber_tree.png)\n\n## Element转化为Dom\n(1)所有从React.createElement中收到的值组装成一个React的虚拟Dom，最终调用ReactDom.render方法去实现转化\n(2)ReactDOM.render(element, container[, callback])\n(3)ReactDOM.render三个参数，其中第一个参数便是生成的虚拟Dom，第二个参数则是一个真实Dom，此Dom相当于是一个容器，React元素将被渲染到这个容器里面去，第三个参数则是一个callback function\n\n## 源码相关\n1、setState触发更新、父组件重新渲染时触发更新\n![update_class](update_class.png)\n(1)static getDerivedStateFromProps()\n(2)shouldComponentUpdate(nextProps,nextState)\n(3)render()\n(4)getSnapshotBeforeUpdate(prevProps,prevState)\n(5)componentDidUpdate(prevProps,prevState,snapshot)\n其中，getSnapshotBeforeUpdate(prevProps,prevState)必须返回null或任意快照值(Snapshot Value，undefined除外)。返回的快照值将作为componentDidUpdate的第三个形参\n2、forceUpdate触发更新\n![force_update](force_update.png)\n(1)static getDerivedStateFromProps()\n(2)render()\n(3)getSnapshotBeforeUpdate()\n(4)componentDidUpdate()","source":"_posts/react-render.md","raw":"---\ntitle: react渲染\ndate: 2022-06-22 22:12:37\ntags:\n---\n\n## 主要步骤\n#### React.createElement语法糖\n(1)React.createElement(type, [props], [...children]);\n(2)type：元素类型\n(3)props：属性值\n(4)children：子元素\n#### 虚拟DOM\n(1)本质为JS对象，使用键值对存储信息，嵌套表示层级关系\n(2)$$typeof：标识符，使用Symbol数据结构确保唯一性\n\n#### 协调算法\n#### filter图示\n![filter_tree](fiber_tree.png)\n\n## Element转化为Dom\n(1)所有从React.createElement中收到的值组装成一个React的虚拟Dom，最终调用ReactDom.render方法去实现转化\n(2)ReactDOM.render(element, container[, callback])\n(3)ReactDOM.render三个参数，其中第一个参数便是生成的虚拟Dom，第二个参数则是一个真实Dom，此Dom相当于是一个容器，React元素将被渲染到这个容器里面去，第三个参数则是一个callback function\n\n## 源码相关\n1、setState触发更新、父组件重新渲染时触发更新\n![update_class](update_class.png)\n(1)static getDerivedStateFromProps()\n(2)shouldComponentUpdate(nextProps,nextState)\n(3)render()\n(4)getSnapshotBeforeUpdate(prevProps,prevState)\n(5)componentDidUpdate(prevProps,prevState,snapshot)\n其中，getSnapshotBeforeUpdate(prevProps,prevState)必须返回null或任意快照值(Snapshot Value，undefined除外)。返回的快照值将作为componentDidUpdate的第三个形参\n2、forceUpdate触发更新\n![force_update](force_update.png)\n(1)static getDerivedStateFromProps()\n(2)render()\n(3)getSnapshotBeforeUpdate()\n(4)componentDidUpdate()","slug":"react-render","published":1,"updated":"2022-08-10T03:15:06.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpco000vjktt9m8k6ha3","content":"<h2 id=\"主要步骤\"><a href=\"#主要步骤\" class=\"headerlink\" title=\"主要步骤\"></a>主要步骤</h2><h4 id=\"React-createElement语法糖\"><a href=\"#React-createElement语法糖\" class=\"headerlink\" title=\"React.createElement语法糖\"></a>React.createElement语法糖</h4><p>(1)React.createElement(type, [props], […children]);<br>(2)type：元素类型<br>(3)props：属性值<br>(4)children：子元素</p>\n<h4 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h4><p>(1)本质为JS对象，使用键值对存储信息，嵌套表示层级关系<br>(2)$$typeof：标识符，使用Symbol数据结构确保唯一性</p>\n<h4 id=\"协调算法\"><a href=\"#协调算法\" class=\"headerlink\" title=\"协调算法\"></a>协调算法</h4><h4 id=\"filter图示\"><a href=\"#filter图示\" class=\"headerlink\" title=\"filter图示\"></a>filter图示</h4><p><img src=\"/2022/06/22/react-render/fiber_tree.png\" alt=\"filter_tree\"></p>\n<h2 id=\"Element转化为Dom\"><a href=\"#Element转化为Dom\" class=\"headerlink\" title=\"Element转化为Dom\"></a>Element转化为Dom</h2><p>(1)所有从React.createElement中收到的值组装成一个React的虚拟Dom，最终调用ReactDom.render方法去实现转化<br>(2)ReactDOM.render(element, container[, callback])<br>(3)ReactDOM.render三个参数，其中第一个参数便是生成的虚拟Dom，第二个参数则是一个真实Dom，此Dom相当于是一个容器，React元素将被渲染到这个容器里面去，第三个参数则是一个callback function</p>\n<h2 id=\"源码相关\"><a href=\"#源码相关\" class=\"headerlink\" title=\"源码相关\"></a>源码相关</h2><p>1、setState触发更新、父组件重新渲染时触发更新<br><img src=\"/2022/06/22/react-render/update_class.png\" alt=\"update_class\"><br>(1)static getDerivedStateFromProps()<br>(2)shouldComponentUpdate(nextProps,nextState)<br>(3)render()<br>(4)getSnapshotBeforeUpdate(prevProps,prevState)<br>(5)componentDidUpdate(prevProps,prevState,snapshot)<br>其中，getSnapshotBeforeUpdate(prevProps,prevState)必须返回null或任意快照值(Snapshot Value，undefined除外)。返回的快照值将作为componentDidUpdate的第三个形参<br>2、forceUpdate触发更新<br><img src=\"/2022/06/22/react-render/force_update.png\" alt=\"force_update\"><br>(1)static getDerivedStateFromProps()<br>(2)render()<br>(3)getSnapshotBeforeUpdate()<br>(4)componentDidUpdate()</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"主要步骤\"><a href=\"#主要步骤\" class=\"headerlink\" title=\"主要步骤\"></a>主要步骤</h2><h4 id=\"React-createElement语法糖\"><a href=\"#React-createElement语法糖\" class=\"headerlink\" title=\"React.createElement语法糖\"></a>React.createElement语法糖</h4><p>(1)React.createElement(type, [props], […children]);<br>(2)type：元素类型<br>(3)props：属性值<br>(4)children：子元素</p>\n<h4 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h4><p>(1)本质为JS对象，使用键值对存储信息，嵌套表示层级关系<br>(2)$$typeof：标识符，使用Symbol数据结构确保唯一性</p>\n<h4 id=\"协调算法\"><a href=\"#协调算法\" class=\"headerlink\" title=\"协调算法\"></a>协调算法</h4><h4 id=\"filter图示\"><a href=\"#filter图示\" class=\"headerlink\" title=\"filter图示\"></a>filter图示</h4><p><img src=\"/2022/06/22/react-render/fiber_tree.png\" alt=\"filter_tree\"></p>\n<h2 id=\"Element转化为Dom\"><a href=\"#Element转化为Dom\" class=\"headerlink\" title=\"Element转化为Dom\"></a>Element转化为Dom</h2><p>(1)所有从React.createElement中收到的值组装成一个React的虚拟Dom，最终调用ReactDom.render方法去实现转化<br>(2)ReactDOM.render(element, container[, callback])<br>(3)ReactDOM.render三个参数，其中第一个参数便是生成的虚拟Dom，第二个参数则是一个真实Dom，此Dom相当于是一个容器，React元素将被渲染到这个容器里面去，第三个参数则是一个callback function</p>\n<h2 id=\"源码相关\"><a href=\"#源码相关\" class=\"headerlink\" title=\"源码相关\"></a>源码相关</h2><p>1、setState触发更新、父组件重新渲染时触发更新<br><img src=\"/2022/06/22/react-render/update_class.png\" alt=\"update_class\"><br>(1)static getDerivedStateFromProps()<br>(2)shouldComponentUpdate(nextProps,nextState)<br>(3)render()<br>(4)getSnapshotBeforeUpdate(prevProps,prevState)<br>(5)componentDidUpdate(prevProps,prevState,snapshot)<br>其中，getSnapshotBeforeUpdate(prevProps,prevState)必须返回null或任意快照值(Snapshot Value，undefined除外)。返回的快照值将作为componentDidUpdate的第三个形参<br>2、forceUpdate触发更新<br><img src=\"/2022/06/22/react-render/force_update.png\" alt=\"force_update\"><br>(1)static getDerivedStateFromProps()<br>(2)render()<br>(3)getSnapshotBeforeUpdate()<br>(4)componentDidUpdate()</p>\n"},{"title":"react & vue渲染问题","date":"2022-06-23T05:21:12.000Z","_content":"\n#### 疑问点\n(1)react中的快照的具体作用是什么？vue3中是否有类似的操作？\n类似渲染的子节点？？？\n(2)react中将调试打印的信息放在块级作用域中？为什么不直接放在代码里面？\n没什么特别意义，团队规范规定\n(3)vue3中在patch的时候，为什么在有了patchElement（感觉能满足大部分情况了）的情况下，分了其他几种类型？\n性能、更新\n(4)react中react和react-dom的关系？vue3中vue.cjs.js和vue.global.js\nreact-dom =》 渲染浏览器\nvue可以搭配react-dom\n(5)vue3中是否有类似react的hooks那样返回的内容含有页面代码？\n可以，使用createElement\n(6)hooks和函数的区别是什么？没区别\n(7)vue3中element-plus组件函数的类型从哪里获取？\n(8)如何将看到的东西和实际应用联系起来？\n(9)怎么抓住重点？\n","source":"_posts/question-about-render.md","raw":"---\ntitle: react & vue渲染问题\ndate: 2022-06-23 13:21:12\ntags:\n---\n\n#### 疑问点\n(1)react中的快照的具体作用是什么？vue3中是否有类似的操作？\n类似渲染的子节点？？？\n(2)react中将调试打印的信息放在块级作用域中？为什么不直接放在代码里面？\n没什么特别意义，团队规范规定\n(3)vue3中在patch的时候，为什么在有了patchElement（感觉能满足大部分情况了）的情况下，分了其他几种类型？\n性能、更新\n(4)react中react和react-dom的关系？vue3中vue.cjs.js和vue.global.js\nreact-dom =》 渲染浏览器\nvue可以搭配react-dom\n(5)vue3中是否有类似react的hooks那样返回的内容含有页面代码？\n可以，使用createElement\n(6)hooks和函数的区别是什么？没区别\n(7)vue3中element-plus组件函数的类型从哪里获取？\n(8)如何将看到的东西和实际应用联系起来？\n(9)怎么抓住重点？\n","slug":"question-about-render","published":1,"updated":"2022-08-10T03:14:53.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcp000wjktt38ctd6gb","content":"<h4 id=\"疑问点\"><a href=\"#疑问点\" class=\"headerlink\" title=\"疑问点\"></a>疑问点</h4><p>(1)react中的快照的具体作用是什么？vue3中是否有类似的操作？<br>类似渲染的子节点？？？<br>(2)react中将调试打印的信息放在块级作用域中？为什么不直接放在代码里面？<br>没什么特别意义，团队规范规定<br>(3)vue3中在patch的时候，为什么在有了patchElement（感觉能满足大部分情况了）的情况下，分了其他几种类型？<br>性能、更新<br>(4)react中react和react-dom的关系？vue3中vue.cjs.js和vue.global.js<br>react-dom =》 渲染浏览器<br>vue可以搭配react-dom<br>(5)vue3中是否有类似react的hooks那样返回的内容含有页面代码？<br>可以，使用createElement<br>(6)hooks和函数的区别是什么？没区别<br>(7)vue3中element-plus组件函数的类型从哪里获取？<br>(8)如何将看到的东西和实际应用联系起来？<br>(9)怎么抓住重点？</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"疑问点\"><a href=\"#疑问点\" class=\"headerlink\" title=\"疑问点\"></a>疑问点</h4><p>(1)react中的快照的具体作用是什么？vue3中是否有类似的操作？<br>类似渲染的子节点？？？<br>(2)react中将调试打印的信息放在块级作用域中？为什么不直接放在代码里面？<br>没什么特别意义，团队规范规定<br>(3)vue3中在patch的时候，为什么在有了patchElement（感觉能满足大部分情况了）的情况下，分了其他几种类型？<br>性能、更新<br>(4)react中react和react-dom的关系？vue3中vue.cjs.js和vue.global.js<br>react-dom =》 渲染浏览器<br>vue可以搭配react-dom<br>(5)vue3中是否有类似react的hooks那样返回的内容含有页面代码？<br>可以，使用createElement<br>(6)hooks和函数的区别是什么？没区别<br>(7)vue3中element-plus组件函数的类型从哪里获取？<br>(8)如何将看到的东西和实际应用联系起来？<br>(9)怎么抓住重点？</p>\n"},{"title":"MarkDown语法及示例","date":"2022-06-27T02:43:07.000Z","_content":"\n#### MarkDown语法及示例\n\n###### 代码块\n\\```javascript\nconst name = 'eric';\n....\n\\``` \n###### 加粗字体\n\\*\\*文字\\*\\*\n","source":"_posts/text-type-about-markdown.md","raw":"---\ntitle: MarkDown语法及示例\ndate: 2022-06-27 10:43:07\ntags:\n---\n\n#### MarkDown语法及示例\n\n###### 代码块\n\\```javascript\nconst name = 'eric';\n....\n\\``` \n###### 加粗字体\n\\*\\*文字\\*\\*\n","slug":"text-type-about-markdown","published":1,"updated":"2022-08-10T03:15:53.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcq000xjktt1h933eez","content":"<h4 id=\"MarkDown语法及示例\"><a href=\"#MarkDown语法及示例\" class=\"headerlink\" title=\"MarkDown语法及示例\"></a>MarkDown语法及示例</h4><h6 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h6><p>```javascript<br>const name = ‘eric’;<br>….<br>``` </p>\n<h6 id=\"加粗字体\"><a href=\"#加粗字体\" class=\"headerlink\" title=\"加粗字体\"></a>加粗字体</h6><p>**文字**</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"MarkDown语法及示例\"><a href=\"#MarkDown语法及示例\" class=\"headerlink\" title=\"MarkDown语法及示例\"></a>MarkDown语法及示例</h4><h6 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h6><p>```javascript<br>const name = ‘eric’;<br>….<br>``` </p>\n<h6 id=\"加粗字体\"><a href=\"#加粗字体\" class=\"headerlink\" title=\"加粗字体\"></a>加粗字体</h6><p>**文字**</p>\n"},{"title":"github推送代码弹窗应该怎么输入？","date":"2022-06-30T02:45:15.000Z","_content":"\n#### github推送代码弹窗应该怎么输入?\n\n当本地修改代码后，需要推送到github仓库时，由于本地未记录用户名与密码，导致push时，先后出现GitHub登录弹窗，以及一个小弹窗，\n鉴于在输入实际操作中，两次输入username和password不知道应该怎么输入，做个记录，避免遗忘。\n\n(1)本地修改代码，提交。本文仅从git push开始记录，之前的命令和操作如果不知道怎么办，请自行百度或Google。\n```javascript\ngit push\n```\n---- 注意：有时推送代码时，会出现超时等情况，可能是网络问题，可多试几次或稍后再试\n```javascript\n$ git push\nfatal: unable to access 'https://github.com/sunjinkang/test_vue3_sql.git/': Failed to connect to github.com port 443: Timed out\n\n// --------\n$ git push\nfatal: unable to access 'https://github.com/sunjinkang/test_vue3_sql.git/': OpenSSL SSL_read: Connection was aborted, errno 10053\n```\n(2)第一个GitHub登录弹窗\n![github_login]()\n该弹窗中 **username为github的登录邮箱，password为GitHub的登录密码**\n---- 注意：本次输入完成后，虽然输入的均为正确信息，但是由于GitHub不在支持用户名密码推送，改为使用令牌，导致输入后悔提示登录失败\n```javascript\nLogon failed, use ctrl+c to cancel basic credential prompt.\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\n```\n(3)第二个登录弹窗\n![login_insert]\n该弹窗会出现两次，第一次输入username，第二次输入password，**username为GitHub的登录邮箱，<font color=\"Red\">password为GitHub网站的连接令牌(Personal access tokens)(如何生成token可以查看文章[github生成令牌](/2022/06/30/github生成令牌-Personal-access-tokens-操作步骤/))</font>**\n---- 注意：如果password输入错误，会导致无法提交\n```javascript\n$ git push\nLogon failed, use ctrl+c to cancel basic credential prompt.\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: Authentication failed for 'https://github.com/xxxxxxx.git/'\n```\n\n当username和password输入完成后，就可以正常push代码啦","source":"_posts/github推送代码弹窗应该怎么输入？.md","raw":"---\ntitle: github推送代码弹窗应该怎么输入？\ndate: 2022-06-30 10:45:15\ntags:\n---\n\n#### github推送代码弹窗应该怎么输入?\n\n当本地修改代码后，需要推送到github仓库时，由于本地未记录用户名与密码，导致push时，先后出现GitHub登录弹窗，以及一个小弹窗，\n鉴于在输入实际操作中，两次输入username和password不知道应该怎么输入，做个记录，避免遗忘。\n\n(1)本地修改代码，提交。本文仅从git push开始记录，之前的命令和操作如果不知道怎么办，请自行百度或Google。\n```javascript\ngit push\n```\n---- 注意：有时推送代码时，会出现超时等情况，可能是网络问题，可多试几次或稍后再试\n```javascript\n$ git push\nfatal: unable to access 'https://github.com/sunjinkang/test_vue3_sql.git/': Failed to connect to github.com port 443: Timed out\n\n// --------\n$ git push\nfatal: unable to access 'https://github.com/sunjinkang/test_vue3_sql.git/': OpenSSL SSL_read: Connection was aborted, errno 10053\n```\n(2)第一个GitHub登录弹窗\n![github_login]()\n该弹窗中 **username为github的登录邮箱，password为GitHub的登录密码**\n---- 注意：本次输入完成后，虽然输入的均为正确信息，但是由于GitHub不在支持用户名密码推送，改为使用令牌，导致输入后悔提示登录失败\n```javascript\nLogon failed, use ctrl+c to cancel basic credential prompt.\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\n```\n(3)第二个登录弹窗\n![login_insert]\n该弹窗会出现两次，第一次输入username，第二次输入password，**username为GitHub的登录邮箱，<font color=\"Red\">password为GitHub网站的连接令牌(Personal access tokens)(如何生成token可以查看文章[github生成令牌](/2022/06/30/github生成令牌-Personal-access-tokens-操作步骤/))</font>**\n---- 注意：如果password输入错误，会导致无法提交\n```javascript\n$ git push\nLogon failed, use ctrl+c to cancel basic credential prompt.\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: Authentication failed for 'https://github.com/xxxxxxx.git/'\n```\n\n当username和password输入完成后，就可以正常push代码啦","slug":"github推送代码弹窗应该怎么输入？","published":1,"updated":"2022-06-30T05:22:12.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcr000yjktt12jq67ta","content":"<h4 id=\"github推送代码弹窗应该怎么输入\"><a href=\"#github推送代码弹窗应该怎么输入\" class=\"headerlink\" title=\"github推送代码弹窗应该怎么输入?\"></a>github推送代码弹窗应该怎么输入?</h4><p>当本地修改代码后，需要推送到github仓库时，由于本地未记录用户名与密码，导致push时，先后出现GitHub登录弹窗，以及一个小弹窗，<br>鉴于在输入实际操作中，两次输入username和password不知道应该怎么输入，做个记录，避免遗忘。</p>\n<p>(1)本地修改代码，提交。本文仅从git push开始记录，之前的命令和操作如果不知道怎么办，请自行百度或Google。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>—- 注意：有时推送代码时，会出现超时等情况，可能是网络问题，可多试几次或稍后再试</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br><span class=\"line\"><span class=\"attr\">fatal</span>: unable to access <span class=\"string\">&#x27;https://github.com/sunjinkang/test_vue3_sql.git/&#x27;</span>: Failed to connect to github.com port <span class=\"number\">443</span>: Timed out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --------</span></span><br><span class=\"line\">$ git push</span><br><span class=\"line\"><span class=\"attr\">fatal</span>: unable to access <span class=\"string\">&#x27;https://github.com/sunjinkang/test_vue3_sql.git/&#x27;</span>: OpenSSL SSL_read: Connection was aborted, errno <span class=\"number\">10053</span></span><br></pre></td></tr></table></figure>\n<p>(2)第一个GitHub登录弹窗<br><img src alt=\"github_login\"><br>该弹窗中 <strong>username为github的登录邮箱，password为GitHub的登录密码</strong><br>—- 注意：本次输入完成后，虽然输入的均为正确信息，但是由于GitHub不在支持用户名密码推送，改为使用令牌，导致输入后悔提示登录失败</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Support <span class=\"keyword\">for</span> password authentication was removed on August <span class=\"number\">13</span>, <span class=\"number\">2021.</span> Please use a personal access token instead.</span><br></pre></td></tr></table></figure>\n<p>(3)第二个登录弹窗<br>![login_insert]<br>该弹窗会出现两次，第一次输入username，第二次输入password，<strong>username为GitHub的登录邮箱，<font color=\"Red\">password为GitHub网站的连接令牌(Personal access tokens)(如何生成token可以查看文章<a href=\"/2022/06/30/github%E7%94%9F%E6%88%90%E4%BB%A4%E7%89%8C-Personal-access-tokens-%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4/\">github生成令牌</a>)</font></strong><br>—- 注意：如果password输入错误，会导致无法提交</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br><span class=\"line\">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Support <span class=\"keyword\">for</span> password authentication was removed on August <span class=\"number\">13</span>, <span class=\"number\">2021.</span> Please use a personal access token instead.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Please see https:<span class=\"comment\">//github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span></span><br><span class=\"line\">fatal: Authentication failed <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com/xxxxxxx.git/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当username和password输入完成后，就可以正常push代码啦</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"github推送代码弹窗应该怎么输入\"><a href=\"#github推送代码弹窗应该怎么输入\" class=\"headerlink\" title=\"github推送代码弹窗应该怎么输入?\"></a>github推送代码弹窗应该怎么输入?</h4><p>当本地修改代码后，需要推送到github仓库时，由于本地未记录用户名与密码，导致push时，先后出现GitHub登录弹窗，以及一个小弹窗，<br>鉴于在输入实际操作中，两次输入username和password不知道应该怎么输入，做个记录，避免遗忘。</p>\n<p>(1)本地修改代码，提交。本文仅从git push开始记录，之前的命令和操作如果不知道怎么办，请自行百度或Google。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>—- 注意：有时推送代码时，会出现超时等情况，可能是网络问题，可多试几次或稍后再试</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br><span class=\"line\"><span class=\"attr\">fatal</span>: unable to access <span class=\"string\">&#x27;https://github.com/sunjinkang/test_vue3_sql.git/&#x27;</span>: Failed to connect to github.com port <span class=\"number\">443</span>: Timed out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --------</span></span><br><span class=\"line\">$ git push</span><br><span class=\"line\"><span class=\"attr\">fatal</span>: unable to access <span class=\"string\">&#x27;https://github.com/sunjinkang/test_vue3_sql.git/&#x27;</span>: OpenSSL SSL_read: Connection was aborted, errno <span class=\"number\">10053</span></span><br></pre></td></tr></table></figure>\n<p>(2)第一个GitHub登录弹窗<br><img src alt=\"github_login\"><br>该弹窗中 <strong>username为github的登录邮箱，password为GitHub的登录密码</strong><br>—- 注意：本次输入完成后，虽然输入的均为正确信息，但是由于GitHub不在支持用户名密码推送，改为使用令牌，导致输入后悔提示登录失败</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Support <span class=\"keyword\">for</span> password authentication was removed on August <span class=\"number\">13</span>, <span class=\"number\">2021.</span> Please use a personal access token instead.</span><br></pre></td></tr></table></figure>\n<p>(3)第二个登录弹窗<br>![login_insert]<br>该弹窗会出现两次，第一次输入username，第二次输入password，<strong>username为GitHub的登录邮箱，<font color=\"Red\">password为GitHub网站的连接令牌(Personal access tokens)(如何生成token可以查看文章<a href=\"/2022/06/30/github%E7%94%9F%E6%88%90%E4%BB%A4%E7%89%8C-Personal-access-tokens-%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4/\">github生成令牌</a>)</font></strong><br>—- 注意：如果password输入错误，会导致无法提交</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br><span class=\"line\">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Support <span class=\"keyword\">for</span> password authentication was removed on August <span class=\"number\">13</span>, <span class=\"number\">2021.</span> Please use a personal access token instead.</span><br><span class=\"line\"><span class=\"attr\">remote</span>: Please see https:<span class=\"comment\">//github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span></span><br><span class=\"line\">fatal: Authentication failed <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com/xxxxxxx.git/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当username和password输入完成后，就可以正常push代码啦</p>\n"},{"title":"开发中使用的便捷代码","date":"2022-09-05T05:24:10.000Z","_content":"\n###### 基于条件设置对象属性\n```javascript\n// 空值\nconst name = '';\nconst obj = { ...name && {name}};\nconsole.log(obj); // {}\n// 非空值\nconst name = 'test_name';\nconst obj = { ...name && {name}};\nconsole.log(obj); // { name: 'test_name'}\n```\n\n###### 无中间变量交换变量值\n```javascript\nlet one = '12';\nlet two = '34';\n[one, two] = [two, one];\nconsole.log(one); // '34'\nconsole.log(two); // '12'\n```\n\n###### 过滤Boolean值为false的值\n```javascript\nconst array = [0, false, 12, true, '12', undefined, '', 8, null];\nconst result = array.filter(Boolean);\nconsole.log(result); // [12, true, '12', 8]\n```\n\n###### 转换元素类型\n```javascript\n// 将Number类型转换为String\nconst string = [1, 2, 3, 12].map(String);\nconsole.log(string); // ['1', '2', '3', '12']\n// 将String类型转换为Number\nconst string = ['1', '2', '3', '12'].map(Number);\nconsole.log(string); // [1, 2, 3, 12]\n```\n\n###### 数组去重\n```javascript\nconst repeatArray = [1,1,1,3,5,6,7,8,9,23,45,1,2,3,5,6];\nconst result = [...new Set(repeatArray)];\nconsole.log(result); // [1, 3, 5, 6, 7, 8, 9, 23, 45, 2]\n```","source":"_posts/some-convenient-code.md","raw":"---\ntitle: 开发中使用的便捷代码\ndate: 2022-09-05 13:24:10\ntags:\n---\n\n###### 基于条件设置对象属性\n```javascript\n// 空值\nconst name = '';\nconst obj = { ...name && {name}};\nconsole.log(obj); // {}\n// 非空值\nconst name = 'test_name';\nconst obj = { ...name && {name}};\nconsole.log(obj); // { name: 'test_name'}\n```\n\n###### 无中间变量交换变量值\n```javascript\nlet one = '12';\nlet two = '34';\n[one, two] = [two, one];\nconsole.log(one); // '34'\nconsole.log(two); // '12'\n```\n\n###### 过滤Boolean值为false的值\n```javascript\nconst array = [0, false, 12, true, '12', undefined, '', 8, null];\nconst result = array.filter(Boolean);\nconsole.log(result); // [12, true, '12', 8]\n```\n\n###### 转换元素类型\n```javascript\n// 将Number类型转换为String\nconst string = [1, 2, 3, 12].map(String);\nconsole.log(string); // ['1', '2', '3', '12']\n// 将String类型转换为Number\nconst string = ['1', '2', '3', '12'].map(Number);\nconsole.log(string); // [1, 2, 3, 12]\n```\n\n###### 数组去重\n```javascript\nconst repeatArray = [1,1,1,3,5,6,7,8,9,23,45,1,2,3,5,6];\nconst result = [...new Set(repeatArray)];\nconsole.log(result); // [1, 3, 5, 6, 7, 8, 9, 23, 45, 2]\n```","slug":"some-convenient-code","published":1,"updated":"2022-09-05T05:42:03.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcr000zjkttcp94ardf","content":"<h6 id=\"基于条件设置对象属性\"><a href=\"#基于条件设置对象属性\" class=\"headerlink\" title=\"基于条件设置对象属性\"></a>基于条件设置对象属性</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; ...name &amp;&amp; &#123;name&#125;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 非空值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;test_name&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; ...name &amp;&amp; &#123;name&#125;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; name: &#x27;test_name&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"无中间变量交换变量值\"><a href=\"#无中间变量交换变量值\" class=\"headerlink\" title=\"无中间变量交换变量值\"></a>无中间变量交换变量值</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> one = <span class=\"string\">&#x27;12&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> two = <span class=\"string\">&#x27;34&#x27;</span>;</span><br><span class=\"line\">[one, two] = [two, one];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(one); <span class=\"comment\">// &#x27;34&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(two); <span class=\"comment\">// &#x27;12&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"过滤Boolean值为false的值\"><a href=\"#过滤Boolean值为false的值\" class=\"headerlink\" title=\"过滤Boolean值为false的值\"></a>过滤Boolean值为false的值</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">0</span>, <span class=\"literal\">false</span>, <span class=\"number\">12</span>, <span class=\"literal\">true</span>, <span class=\"string\">&#x27;12&#x27;</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">8</span>, <span class=\"literal\">null</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = array.filter(<span class=\"built_in\">Boolean</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [12, true, &#x27;12&#x27;, 8]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"转换元素类型\"><a href=\"#转换元素类型\" class=\"headerlink\" title=\"转换元素类型\"></a>转换元素类型</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将Number类型转换为String</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> string = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>].map(<span class=\"built_in\">String</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(string); <span class=\"comment\">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;12&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 将String类型转换为Number</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> string = [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;12&#x27;</span>].map(<span class=\"built_in\">Number</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(string); <span class=\"comment\">// [1, 2, 3, 12]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> repeatArray = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">23</span>,<span class=\"number\">45</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = [...new <span class=\"built_in\">Set</span>(repeatArray)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [1, 3, 5, 6, 7, 8, 9, 23, 45, 2]</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h6 id=\"基于条件设置对象属性\"><a href=\"#基于条件设置对象属性\" class=\"headerlink\" title=\"基于条件设置对象属性\"></a>基于条件设置对象属性</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; ...name &amp;&amp; &#123;name&#125;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 非空值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;test_name&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; ...name &amp;&amp; &#123;name&#125;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; name: &#x27;test_name&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"无中间变量交换变量值\"><a href=\"#无中间变量交换变量值\" class=\"headerlink\" title=\"无中间变量交换变量值\"></a>无中间变量交换变量值</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> one = <span class=\"string\">&#x27;12&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> two = <span class=\"string\">&#x27;34&#x27;</span>;</span><br><span class=\"line\">[one, two] = [two, one];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(one); <span class=\"comment\">// &#x27;34&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(two); <span class=\"comment\">// &#x27;12&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"过滤Boolean值为false的值\"><a href=\"#过滤Boolean值为false的值\" class=\"headerlink\" title=\"过滤Boolean值为false的值\"></a>过滤Boolean值为false的值</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">0</span>, <span class=\"literal\">false</span>, <span class=\"number\">12</span>, <span class=\"literal\">true</span>, <span class=\"string\">&#x27;12&#x27;</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">8</span>, <span class=\"literal\">null</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = array.filter(<span class=\"built_in\">Boolean</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [12, true, &#x27;12&#x27;, 8]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"转换元素类型\"><a href=\"#转换元素类型\" class=\"headerlink\" title=\"转换元素类型\"></a>转换元素类型</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将Number类型转换为String</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> string = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>].map(<span class=\"built_in\">String</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(string); <span class=\"comment\">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;12&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 将String类型转换为Number</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> string = [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;12&#x27;</span>].map(<span class=\"built_in\">Number</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(string); <span class=\"comment\">// [1, 2, 3, 12]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> repeatArray = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">23</span>,<span class=\"number\">45</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = [...new <span class=\"built_in\">Set</span>(repeatArray)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [1, 3, 5, 6, 7, 8, 9, 23, 45, 2]</span></span><br></pre></td></tr></table></figure>"},{"title":"vue3渲染","date":"2022-06-22T14:12:51.000Z","_content":"\n## 渲染流程\n![vue3_render](vue3_render.png)\n(1)创建一个vue实例 -> 初始化实例（包括需要相关事件与生命周期函数等）\n(2)调用beforeCreate\n(3)初始化注入，包括data、method等添加到实例对象\n(4)实例创建完成，调用created\n(5)有el挂载，使用template替换；无挂载，使用mount自动挂载\n(6)有template，进行编译，使其成为render函数\n(7)（1）有template，使用模板构建抽象语法树；（2）通过数据获取元素的outerHTML属性值即元素结构的字符串形式构建HTML模板\n(8)调用beforeMount（vue实例挂载在虚拟DOM上）\n(9)生成HTML元素节点，替换页面原有的挂载节点（页面渲染）\n(10)调用mounted\n-- （1）数据变更，即将重新渲染\n-- （2）调用beforeUpdate\n-- （3）进行虚拟DOM和真实DOM对比，进行patch\n-- （4）渲染完成，调用updated\n(11)实例销毁之前调用beforeUnmount\n(12)实例销毁，vm.$destroy\n(13)销毁后调用unmounted\n\n## render函数\n![render](render.png)\n(1)首先会判断Vnode是否存在，如果不存在，则调用unmount函数，进行组件的卸载\n(2)否则调用patch函数，对组件进行patch（PS: patch是一个递归的过程）\n(3)patch 结束后，会调用flushPostFlushCbs函数冲刷任务池\n(4)最后更新容器上的Vnode\n注：patch函数的主要职责就是去判断Vnode的节点类型（打上patchFlag标志），然后调用对应类型的Vnode处理方式，进行更细致的patch（最后进行render渲染）\n\n## patch函数\n![render_node1](render_node1.png)\n![render_node2](render_node2.png)\n![render_function](render_function.png)\n注：patch依据不同节点类型，执行不同的处理函数，包括：Text、Comment、Static、Fragment等\n(1)n1 与 n2 是待比较的两个节点，n1 为旧节点，n2 为新节点\n(2)container 是新节点的容器\n(3)anchor 是一个锚点，用来标识当我们对新旧节点做增删或移动等操作时，以哪个节点为参照物\n(4)optimized 参数是是否开启优化模式的标识\n\n## 卸载组件\n如果调用render函数时没有传Vnode，则会调用unmount函数对组件进行卸载 ，卸载过程中：\n(1)如果存在ref，会首先重置ref\n(2)如果组件是经过Keep-Alive缓存的组件，会通过deactivate对组件进行卸载\n(3)如果是组件类型Vnode，会通过unmountComponent函数对组件进行卸载\n","source":"_posts/vue3-render.md","raw":"---\ntitle: vue3渲染\ndate: 2022-06-22 22:12:51\ntags:\n---\n\n## 渲染流程\n![vue3_render](vue3_render.png)\n(1)创建一个vue实例 -> 初始化实例（包括需要相关事件与生命周期函数等）\n(2)调用beforeCreate\n(3)初始化注入，包括data、method等添加到实例对象\n(4)实例创建完成，调用created\n(5)有el挂载，使用template替换；无挂载，使用mount自动挂载\n(6)有template，进行编译，使其成为render函数\n(7)（1）有template，使用模板构建抽象语法树；（2）通过数据获取元素的outerHTML属性值即元素结构的字符串形式构建HTML模板\n(8)调用beforeMount（vue实例挂载在虚拟DOM上）\n(9)生成HTML元素节点，替换页面原有的挂载节点（页面渲染）\n(10)调用mounted\n-- （1）数据变更，即将重新渲染\n-- （2）调用beforeUpdate\n-- （3）进行虚拟DOM和真实DOM对比，进行patch\n-- （4）渲染完成，调用updated\n(11)实例销毁之前调用beforeUnmount\n(12)实例销毁，vm.$destroy\n(13)销毁后调用unmounted\n\n## render函数\n![render](render.png)\n(1)首先会判断Vnode是否存在，如果不存在，则调用unmount函数，进行组件的卸载\n(2)否则调用patch函数，对组件进行patch（PS: patch是一个递归的过程）\n(3)patch 结束后，会调用flushPostFlushCbs函数冲刷任务池\n(4)最后更新容器上的Vnode\n注：patch函数的主要职责就是去判断Vnode的节点类型（打上patchFlag标志），然后调用对应类型的Vnode处理方式，进行更细致的patch（最后进行render渲染）\n\n## patch函数\n![render_node1](render_node1.png)\n![render_node2](render_node2.png)\n![render_function](render_function.png)\n注：patch依据不同节点类型，执行不同的处理函数，包括：Text、Comment、Static、Fragment等\n(1)n1 与 n2 是待比较的两个节点，n1 为旧节点，n2 为新节点\n(2)container 是新节点的容器\n(3)anchor 是一个锚点，用来标识当我们对新旧节点做增删或移动等操作时，以哪个节点为参照物\n(4)optimized 参数是是否开启优化模式的标识\n\n## 卸载组件\n如果调用render函数时没有传Vnode，则会调用unmount函数对组件进行卸载 ，卸载过程中：\n(1)如果存在ref，会首先重置ref\n(2)如果组件是经过Keep-Alive缓存的组件，会通过deactivate对组件进行卸载\n(3)如果是组件类型Vnode，会通过unmountComponent函数对组件进行卸载\n","slug":"vue3-render","published":1,"updated":"2022-08-10T03:16:20.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcs0010jktthb67ebxh","content":"<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p><img src=\"/2022/06/22/vue3-render/vue3_render.png\" alt=\"vue3_render\"><br>(1)创建一个vue实例 -&gt; 初始化实例（包括需要相关事件与生命周期函数等）<br>(2)调用beforeCreate<br>(3)初始化注入，包括data、method等添加到实例对象<br>(4)实例创建完成，调用created<br>(5)有el挂载，使用template替换；无挂载，使用mount自动挂载<br>(6)有template，进行编译，使其成为render函数<br>(7)（1）有template，使用模板构建抽象语法树；（2）通过数据获取元素的outerHTML属性值即元素结构的字符串形式构建HTML模板<br>(8)调用beforeMount（vue实例挂载在虚拟DOM上）<br>(9)生成HTML元素节点，替换页面原有的挂载节点（页面渲染）<br>(10)调用mounted<br>– （1）数据变更，即将重新渲染<br>– （2）调用beforeUpdate<br>– （3）进行虚拟DOM和真实DOM对比，进行patch<br>– （4）渲染完成，调用updated<br>(11)实例销毁之前调用beforeUnmount<br>(12)实例销毁，vm.$destroy<br>(13)销毁后调用unmounted</p>\n<h2 id=\"render函数\"><a href=\"#render函数\" class=\"headerlink\" title=\"render函数\"></a>render函数</h2><p><img src=\"/2022/06/22/vue3-render/render.png\" alt=\"render\"><br>(1)首先会判断Vnode是否存在，如果不存在，则调用unmount函数，进行组件的卸载<br>(2)否则调用patch函数，对组件进行patch（PS: patch是一个递归的过程）<br>(3)patch 结束后，会调用flushPostFlushCbs函数冲刷任务池<br>(4)最后更新容器上的Vnode<br>注：patch函数的主要职责就是去判断Vnode的节点类型（打上patchFlag标志），然后调用对应类型的Vnode处理方式，进行更细致的patch（最后进行render渲染）</p>\n<h2 id=\"patch函数\"><a href=\"#patch函数\" class=\"headerlink\" title=\"patch函数\"></a>patch函数</h2><p><img src=\"/2022/06/22/vue3-render/render_node1.png\" alt=\"render_node1\"><br><img src=\"/2022/06/22/vue3-render/render_node2.png\" alt=\"render_node2\"><br><img src=\"/2022/06/22/vue3-render/render_function.png\" alt=\"render_function\"><br>注：patch依据不同节点类型，执行不同的处理函数，包括：Text、Comment、Static、Fragment等<br>(1)n1 与 n2 是待比较的两个节点，n1 为旧节点，n2 为新节点<br>(2)container 是新节点的容器<br>(3)anchor 是一个锚点，用来标识当我们对新旧节点做增删或移动等操作时，以哪个节点为参照物<br>(4)optimized 参数是是否开启优化模式的标识</p>\n<h2 id=\"卸载组件\"><a href=\"#卸载组件\" class=\"headerlink\" title=\"卸载组件\"></a>卸载组件</h2><p>如果调用render函数时没有传Vnode，则会调用unmount函数对组件进行卸载 ，卸载过程中：<br>(1)如果存在ref，会首先重置ref<br>(2)如果组件是经过Keep-Alive缓存的组件，会通过deactivate对组件进行卸载<br>(3)如果是组件类型Vnode，会通过unmountComponent函数对组件进行卸载</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p><img src=\"/2022/06/22/vue3-render/vue3_render.png\" alt=\"vue3_render\"><br>(1)创建一个vue实例 -&gt; 初始化实例（包括需要相关事件与生命周期函数等）<br>(2)调用beforeCreate<br>(3)初始化注入，包括data、method等添加到实例对象<br>(4)实例创建完成，调用created<br>(5)有el挂载，使用template替换；无挂载，使用mount自动挂载<br>(6)有template，进行编译，使其成为render函数<br>(7)（1）有template，使用模板构建抽象语法树；（2）通过数据获取元素的outerHTML属性值即元素结构的字符串形式构建HTML模板<br>(8)调用beforeMount（vue实例挂载在虚拟DOM上）<br>(9)生成HTML元素节点，替换页面原有的挂载节点（页面渲染）<br>(10)调用mounted<br>– （1）数据变更，即将重新渲染<br>– （2）调用beforeUpdate<br>– （3）进行虚拟DOM和真实DOM对比，进行patch<br>– （4）渲染完成，调用updated<br>(11)实例销毁之前调用beforeUnmount<br>(12)实例销毁，vm.$destroy<br>(13)销毁后调用unmounted</p>\n<h2 id=\"render函数\"><a href=\"#render函数\" class=\"headerlink\" title=\"render函数\"></a>render函数</h2><p><img src=\"/2022/06/22/vue3-render/render.png\" alt=\"render\"><br>(1)首先会判断Vnode是否存在，如果不存在，则调用unmount函数，进行组件的卸载<br>(2)否则调用patch函数，对组件进行patch（PS: patch是一个递归的过程）<br>(3)patch 结束后，会调用flushPostFlushCbs函数冲刷任务池<br>(4)最后更新容器上的Vnode<br>注：patch函数的主要职责就是去判断Vnode的节点类型（打上patchFlag标志），然后调用对应类型的Vnode处理方式，进行更细致的patch（最后进行render渲染）</p>\n<h2 id=\"patch函数\"><a href=\"#patch函数\" class=\"headerlink\" title=\"patch函数\"></a>patch函数</h2><p><img src=\"/2022/06/22/vue3-render/render_node1.png\" alt=\"render_node1\"><br><img src=\"/2022/06/22/vue3-render/render_node2.png\" alt=\"render_node2\"><br><img src=\"/2022/06/22/vue3-render/render_function.png\" alt=\"render_function\"><br>注：patch依据不同节点类型，执行不同的处理函数，包括：Text、Comment、Static、Fragment等<br>(1)n1 与 n2 是待比较的两个节点，n1 为旧节点，n2 为新节点<br>(2)container 是新节点的容器<br>(3)anchor 是一个锚点，用来标识当我们对新旧节点做增删或移动等操作时，以哪个节点为参照物<br>(4)optimized 参数是是否开启优化模式的标识</p>\n<h2 id=\"卸载组件\"><a href=\"#卸载组件\" class=\"headerlink\" title=\"卸载组件\"></a>卸载组件</h2><p>如果调用render函数时没有传Vnode，则会调用unmount函数对组件进行卸载 ，卸载过程中：<br>(1)如果存在ref，会首先重置ref<br>(2)如果组件是经过Keep-Alive缓存的组件，会通过deactivate对组件进行卸载<br>(3)如果是组件类型Vnode，会通过unmountComponent函数对组件进行卸载</p>\n"},{"title":"var、const、let区别","date":"2022-03-26T13:04:12.000Z","_content":"\n#### 1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\n```javascript\nvar a = 100;\nconsole.log(a,window.a);    // 100 100\nlet b = 10;\nconsole.log(b,window.b);    // 10 undefined\nconst c = 1;\nconsole.log(c,window.c);    // 1 undefined\n```\nlet声明的变量或const声明的常量会挂载到Script下，var会挂载到Global下（window类似于Global的代理）。可查看文章[let和const声明的变量到底去哪里了？](https://zhuanlan.zhihu.com/p/114128108)\n\n#### 2、","source":"_posts/var-const-let.md","raw":"---\ntitle: var、const、let区别\ndate: 2022-03-26 21:04:12\ntags:\n---\n\n#### 1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\n```javascript\nvar a = 100;\nconsole.log(a,window.a);    // 100 100\nlet b = 10;\nconsole.log(b,window.b);    // 10 undefined\nconst c = 1;\nconsole.log(c,window.c);    // 1 undefined\n```\nlet声明的变量或const声明的常量会挂载到Script下，var会挂载到Global下（window类似于Global的代理）。可查看文章[let和const声明的变量到底去哪里了？](https://zhuanlan.zhihu.com/p/114128108)\n\n#### 2、","slug":"var-const-let","published":1,"updated":"2022-08-10T03:16:09.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpcs0011jkttgonleba9","content":"<h4 id=\"1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\"><a href=\"#1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\" class=\"headerlink\" title=\"1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\"></a>1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,<span class=\"built_in\">window</span>.a);    <span class=\"comment\">// 100 100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b,<span class=\"built_in\">window</span>.b);    <span class=\"comment\">// 10 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c,<span class=\"built_in\">window</span>.c);    <span class=\"comment\">// 1 undefined</span></span><br></pre></td></tr></table></figure>\n<p>let声明的变量或const声明的常量会挂载到Script下，var会挂载到Global下（window类似于Global的代理）。可查看文章<a href=\"https://zhuanlan.zhihu.com/p/114128108\">let和const声明的变量到底去哪里了？</a></p>\n<h4 id=\"2、\"><a href=\"#2、\" class=\"headerlink\" title=\"2、\"></a>2、</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\"><a href=\"#1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\" class=\"headerlink\" title=\"1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会\"></a>1、挂载节点不同：var声明的变量挂载在window上，const与let声明的变量不会</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,<span class=\"built_in\">window</span>.a);    <span class=\"comment\">// 100 100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b,<span class=\"built_in\">window</span>.b);    <span class=\"comment\">// 10 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c,<span class=\"built_in\">window</span>.c);    <span class=\"comment\">// 1 undefined</span></span><br></pre></td></tr></table></figure>\n<p>let声明的变量或const声明的常量会挂载到Script下，var会挂载到Global下（window类似于Global的代理）。可查看文章<a href=\"https://zhuanlan.zhihu.com/p/114128108\">let和const声明的变量到底去哪里了？</a></p>\n<h4 id=\"2、\"><a href=\"#2、\" class=\"headerlink\" title=\"2、\"></a>2、</h4>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <script>\n      console.log(`1 - true: ${1 - true}`);\n      console.log(`1 - false: ${1 - false}`);\n      console.log(`1 - null: ${1 - null}`);\n      console.log(`1 - undefined: ${1 - undefined}`);\n      console.log(`2 * ['5']: ${2 * ['5']}`);\n\n      console.log(`123 + '123': ${123 + '123'}`);\n      console.log(`123 + null: ${123 + null}`);\n      console.log(`123 + true: ${123 + true}`);\n      console.log(`123 + {}: ${123 + {}}`);\n\n      console.log(`NaN == NaN: ${NaN == NaN}`);\n\n      console.log(`true == 1: ${true == 1}`);\n      console.log(`true == '2': ${true == '2'}`);\n      console.log(`true == ['1']: ${true == ['1']}`);\n      console.log(`true == ['2']: ${true == ['2']}`);\n      console.log(`undefined == false: ${undefined == false}`);\n      console.log(`null == false: ${null == false}`);\n\n      console.log(`123 == '123': ${123 == '123'}`);\n      console.log(`'' == 0: ${'' == 0}`);\n\n      console.log(`null == undefined: ${null == undefined}`); // true\n      console.log(`null == '': ${null == ''}`); // false\n      console.log(`null == 0: ${null == 0}`); // false\n      console.log(`null == false: ${null == false}`); // false\n      console.log(`undefined == '': ${undefined == ''}`); // false\n      console.log(`undefined == 0: ${undefined == 0}`); // false\n      console.log(`undefined == false: ${undefined == false}`); // false\n\n      console.log(`'[object Object]' == {}: ${'[object Object]' == {}}`); // true\n      console.log(`'1,2,3' == [1, 2, 3]: ${'1,2,3' == [1, 2, 3]}`); // true\n\n      console.log(`'10' > '2': ${'10' > '2'}`); // false\n    </script>\n  </body>\n</html>\n","source":"_posts/js-transform/js-transform.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <script>\n      console.log(`1 - true: ${1 - true}`);\n      console.log(`1 - false: ${1 - false}`);\n      console.log(`1 - null: ${1 - null}`);\n      console.log(`1 - undefined: ${1 - undefined}`);\n      console.log(`2 * ['5']: ${2 * ['5']}`);\n\n      console.log(`123 + '123': ${123 + '123'}`);\n      console.log(`123 + null: ${123 + null}`);\n      console.log(`123 + true: ${123 + true}`);\n      console.log(`123 + {}: ${123 + {}}`);\n\n      console.log(`NaN == NaN: ${NaN == NaN}`);\n\n      console.log(`true == 1: ${true == 1}`);\n      console.log(`true == '2': ${true == '2'}`);\n      console.log(`true == ['1']: ${true == ['1']}`);\n      console.log(`true == ['2']: ${true == ['2']}`);\n      console.log(`undefined == false: ${undefined == false}`);\n      console.log(`null == false: ${null == false}`);\n\n      console.log(`123 == '123': ${123 == '123'}`);\n      console.log(`'' == 0: ${'' == 0}`);\n\n      console.log(`null == undefined: ${null == undefined}`); // true\n      console.log(`null == '': ${null == ''}`); // false\n      console.log(`null == 0: ${null == 0}`); // false\n      console.log(`null == false: ${null == false}`); // false\n      console.log(`undefined == '': ${undefined == ''}`); // false\n      console.log(`undefined == 0: ${undefined == 0}`); // false\n      console.log(`undefined == false: ${undefined == false}`); // false\n\n      console.log(`'[object Object]' == {}: ${'[object Object]' == {}}`); // true\n      console.log(`'1,2,3' == [1, 2, 3]: ${'1,2,3' == [1, 2, 3]}`); // true\n\n      console.log(`'10' > '2': ${'10' > '2'}`); // false\n    </script>\n  </body>\n</html>\n","slug":"js-transform/js-transform","published":1,"date":"2022-08-11T05:19:34.637Z","updated":"2022-08-11T09:29:33.722Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e0zpct0012jktt1qac1vc1","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n  </head>\n  <body>\n    <script>\n      console.log(`1 - true: ${1 - true}`);\n      console.log(`1 - false: ${1 - false}`);\n      console.log(`1 - null: ${1 - null}`);\n      console.log(`1 - undefined: ${1 - undefined}`);\n      console.log(`2 * ['5']: ${2 * ['5']}`);\n\n      console.log(`123 + '123': ${123 + '123'}`);\n      console.log(`123 + null: ${123 + null}`);\n      console.log(`123 + true: ${123 + true}`);\n      console.log(`123 + {}: ${123 + {}}`);\n\n      console.log(`NaN == NaN: ${NaN == NaN}`);\n\n      console.log(`true == 1: ${true == 1}`);\n      console.log(`true == '2': ${true == '2'}`);\n      console.log(`true == ['1']: ${true == ['1']}`);\n      console.log(`true == ['2']: ${true == ['2']}`);\n      console.log(`undefined == false: ${undefined == false}`);\n      console.log(`null == false: ${null == false}`);\n\n      console.log(`123 == '123': ${123 == '123'}`);\n      console.log(`'' == 0: ${'' == 0}`);\n\n      console.log(`null == undefined: ${null == undefined}`); // true\n      console.log(`null == '': ${null == ''}`); // false\n      console.log(`null == 0: ${null == 0}`); // false\n      console.log(`null == false: ${null == false}`); // false\n      console.log(`undefined == '': ${undefined == ''}`); // false\n      console.log(`undefined == 0: ${undefined == 0}`); // false\n      console.log(`undefined == false: ${undefined == false}`); // false\n\n      console.log(`'[object Object]' == {}: ${'[object Object]' == {}}`); // true\n      console.log(`'1,2,3' == [1, 2, 3]: ${'1,2,3' == [1, 2, 3]}`); // true\n\n      console.log(`'10' > '2': ${'10' > '2'}`); // false\n    </script>\n  </body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n  </head>\n  <body>\n    <script>\n      console.log(`1 - true: ${1 - true}`);\n      console.log(`1 - false: ${1 - false}`);\n      console.log(`1 - null: ${1 - null}`);\n      console.log(`1 - undefined: ${1 - undefined}`);\n      console.log(`2 * ['5']: ${2 * ['5']}`);\n\n      console.log(`123 + '123': ${123 + '123'}`);\n      console.log(`123 + null: ${123 + null}`);\n      console.log(`123 + true: ${123 + true}`);\n      console.log(`123 + {}: ${123 + {}}`);\n\n      console.log(`NaN == NaN: ${NaN == NaN}`);\n\n      console.log(`true == 1: ${true == 1}`);\n      console.log(`true == '2': ${true == '2'}`);\n      console.log(`true == ['1']: ${true == ['1']}`);\n      console.log(`true == ['2']: ${true == ['2']}`);\n      console.log(`undefined == false: ${undefined == false}`);\n      console.log(`null == false: ${null == false}`);\n\n      console.log(`123 == '123': ${123 == '123'}`);\n      console.log(`'' == 0: ${'' == 0}`);\n\n      console.log(`null == undefined: ${null == undefined}`); // true\n      console.log(`null == '': ${null == ''}`); // false\n      console.log(`null == 0: ${null == 0}`); // false\n      console.log(`null == false: ${null == false}`); // false\n      console.log(`undefined == '': ${undefined == ''}`); // false\n      console.log(`undefined == 0: ${undefined == 0}`); // false\n      console.log(`undefined == false: ${undefined == false}`); // false\n\n      console.log(`'[object Object]' == {}: ${'[object Object]' == {}}`); // true\n      console.log(`'1,2,3' == [1, 2, 3]: ${'1,2,3' == [1, 2, 3]}`); // true\n\n      console.log(`'10' > '2': ${'10' > '2'}`); // false\n    </script>\n  </body>\n</html>\n"}],"PostAsset":[{"_id":"source/_posts/about-design-model1/abstract-car.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"abstract-car.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/abstract-factory1.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"abstract-factory1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/abstract-factory2.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"abstract-factory2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/abstract-factory3.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"abstract-factory3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/human.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"human.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/lazy-single-instance.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"lazy-single-instance.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/name.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"name.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/person.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"person.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/prototype-inherit1.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"prototype-inherit1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/prototype-inherit2.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"prototype-inherit2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/prototype-model.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"prototype-model.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/safe-factory-model.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"safe-factory-model.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/safe-model-class.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"safe-model-class.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/static-param.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"static-param.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model1/work.png","post":"cl8e0zpc20001jkttdl2m2q3c","slug":"work.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model2/bridge1.png","post":"cl8e0zpc90007jkttfgacdrbd","slug":"bridge1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model2/bridge2.png","post":"cl8e0zpc90007jkttfgacdrbd","slug":"bridge2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model2/bridge3.png","post":"cl8e0zpc90007jkttfgacdrbd","slug":"bridge3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model2/decorator.png","post":"cl8e0zpc90007jkttfgacdrbd","slug":"decorator.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model2/out-look.png","post":"cl8e0zpc90007jkttfgacdrbd","slug":"out-look.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model2/station-culculate.png","post":"cl8e0zpc90007jkttfgacdrbd","slug":"station-culculate.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/chain-model-1.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"chain-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/chain-model-2.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"chain-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/chain-model-3.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"chain-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/chain-model-4.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"chain-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/chain-model-5.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"chain-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/chain-model-6.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"chain-model-6.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/entrust-model-1.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"entrust-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/entrust-model-2.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"entrust-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/lazy-model-1.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"lazy-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/lazy-model-2.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"lazy-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/lazy-model-3.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"lazy-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/lazy-model-4.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"lazy-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/lazy-model-5.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"lazy-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/lazy-model-6.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"lazy-model-6.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/localstorage-model-1.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"localstorage-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/localstorage-model-2.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"localstorage-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/localstorage-model-3.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"localstorage-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/localstorage-model-4.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"localstorage-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/localstorage-model-5.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"localstorage-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/localstorage-model-6.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"localstorage-model-6.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/participate-model-1.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"participate-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/participate-model-2.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"participate-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/participate-model-3.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"participate-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/participate-model-4.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"participate-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/participate-model-5.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"participate-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/participate-model-6.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"participate-model-6.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/template-model-1.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"template-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/template-model-2.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"template-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/template-model-3.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"template-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/template-model-4.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"template-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/template-model-5.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"template-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/template-model-6.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"template-model-6.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/throttle-model-1.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"throttle-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/throttle-model-2.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"throttle-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/throttle-model-3.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"throttle-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/waiter-model-1.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"waiter-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/waiter-model-2.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"waiter-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/waiter-model-3.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"waiter-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/waiter-model-4.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"waiter-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/waiter-model-5.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"waiter-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/waiter-model-6.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"waiter-model-6.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/waiter-model-7.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"waiter-model-7.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model4/waiter-model-8.png","post":"cl8e0zpc60003jktt1k8ibk21","slug":"waiter-model-8.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/class-inherit.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"class-inherit.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/combination-inherit.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"combination-inherit.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/constructor-inherit.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"constructor-inherit.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/create-pop.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"create-pop.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/how-to-inherit.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"how-to-inherit.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/multiple-inherit.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"multiple-inherit.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/multiple-status.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"multiple-status.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/parasitic-combination-inherit.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"parasitic-combination-inherit.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/parasitic-inherit-change.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"parasitic-inherit-change.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/parasitic-inherit.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"parasitic-inherit.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/prototype-inherit.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"prototype-inherit.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/prototype.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"prototype.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/public-and-private.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"public-and-private.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/safe-model.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"safe-model.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/simple-factory1.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"simple-factory1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/simple-factory2.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"simple-factory2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/static-and-public.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"static-and-public.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model/test-prototype-inherit.png","post":"cl8e0zpc80005jktta8ku5w87","slug":"test-prototype-inherit.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/add-message.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"add-message.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/basic-model.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"basic-model.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/cache-model.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"cache-model.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/command-model-1.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"command-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/command-model-2.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"command-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/command-model-3.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"command-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/create-component.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"create-component.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/deal-data.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"deal-data.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/explain-model-1.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"explain-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/explain-model-2.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"explain-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/explain-model-3.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"explain-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/inherit-as-basic-model.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"inherit-as-basic-model.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/inherit-model.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"inherit-model.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/iterator-model.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"iterator-model.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/marry-state.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"marry-state.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/marry-state1.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"marry-state1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/mediator-model.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"mediator-model.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/observer-fire.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"observer-fire.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/observer-regist.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"observer-regist.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/observer-remove.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"observer-remove.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/observer.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"observer.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/price-strategy.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"price-strategy.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/regist-change-num.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"regist-change-num.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/regist-message.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"regist-message.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/send-data.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"send-data.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/visitor-model.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"visitor-model.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model3/vote-status.png","post":"cl8e0zpca0009jktt5k7lg5go","slug":"vote-status.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/appendix-1.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"appendix-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/appendix-10.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"appendix-10.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/appendix-2.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"appendix-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/appendix-3.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"appendix-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/appendix-4.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"appendix-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/appendix-5.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"appendix-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/appendix-6.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"appendix-6.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/appendix-7.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"appendix-7.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/appendix-8.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"appendix-8.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/appendix-9.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"appendix-9.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/async-module-model-1.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"async-module-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/async-module-model-2.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"async-module-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/async-module-model-3.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"async-module-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/async-module-model-4.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"async-module-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/async-module-model-5.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"async-module-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/async-module-model-6.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"async-module-model-6.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/async-module-model-7.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"async-module-model-7.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/async-module-model-8.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"async-module-model-8.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/async-module-model-9.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"async-module-model-9.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/module-model-1.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"module-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/module-model-2.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"module-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/module-model-3.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"module-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/module-model-4.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"module-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/module-model-5.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"module-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvc-model-1.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvc-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvc-model-2.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvc-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvc-model-3.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvc-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvc-model-4.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvc-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvp-model-1.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvp-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvp-model-2.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvp-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvp-model-3.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvp-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvp-model-4.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvp-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvp-model-5.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvp-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvp-model-6.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvp-model-6.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvp-model-7.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvp-model-7.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvvm-model-1.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvvm-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvvm-model-2.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvvm-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvvm-model-3.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvvm-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvvm-model-4.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvvm-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvvm-model-5.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvvm-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvvm-model-6.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvvm-model-6.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvvm-model-7.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvvm-model-7.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/mvvm-model-8.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"mvvm-model-8.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/widget-model-1.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"widget-model-1.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/widget-model-2.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"widget-model-2.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/widget-model-3.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"widget-model-3.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/widget-model-4.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"widget-model-4.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/widget-model-5.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"widget-model-5.png","modified":1,"renderable":1},{"_id":"source/_posts/about-design-model5/widget-model-6.png","post":"cl8e0zpcc000bjktt1s4y2cz6","slug":"widget-model-6.png","modified":1,"renderable":1},{"_id":"source/_posts/js-transform/convert-table.png","post":"cl8e0zpcm000rjktt20j8bhl2","slug":"convert-table.png","modified":1,"renderable":1},{"_id":"source/_posts/js-transform/js-transform.html","post":"cl8e0zpcm000rjktt20j8bhl2","slug":"js-transform.html","modified":1,"renderable":1},{"_id":"source/_posts/fake-array/array_from.png","post":"cl8e0zpcn000tjktt291vev4n","slug":"array_from.png","modified":1,"renderable":1},{"_id":"source/_posts/fake-array/document.png","post":"cl8e0zpcn000tjktt291vev4n","slug":"document.png","modified":1,"renderable":1},{"_id":"source/_posts/fake-array/prototype_call.png","post":"cl8e0zpcn000tjktt291vev4n","slug":"prototype_call.png","modified":1,"renderable":1},{"_id":"source/_posts/fake-array/slice_call.png","post":"cl8e0zpcn000tjktt291vev4n","slug":"slice_call.png","modified":1,"renderable":1},{"_id":"source/_posts/react-render/fiber_tree.png","post":"cl8e0zpco000vjktt9m8k6ha3","slug":"fiber_tree.png","modified":1,"renderable":1},{"_id":"source/_posts/react-render/force_update.png","post":"cl8e0zpco000vjktt9m8k6ha3","slug":"force_update.png","modified":1,"renderable":1},{"_id":"source/_posts/react-render/update_class.png","post":"cl8e0zpco000vjktt9m8k6ha3","slug":"update_class.png","modified":1,"renderable":1},{"_id":"source/_posts/vue3-render/render.png","post":"cl8e0zpcs0010jktthb67ebxh","slug":"render.png","modified":1,"renderable":1},{"_id":"source/_posts/vue3-render/render_function.png","post":"cl8e0zpcs0010jktthb67ebxh","slug":"render_function.png","modified":1,"renderable":1},{"_id":"source/_posts/vue3-render/render_node1.png","post":"cl8e0zpcs0010jktthb67ebxh","slug":"render_node1.png","modified":1,"renderable":1},{"_id":"source/_posts/vue3-render/render_node2.png","post":"cl8e0zpcs0010jktthb67ebxh","slug":"render_node2.png","modified":1,"renderable":1},{"_id":"source/_posts/vue3-render/vue3_render.png","post":"cl8e0zpcs0010jktthb67ebxh","slug":"vue3_render.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}