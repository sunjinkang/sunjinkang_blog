<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HTW_KAP</title>
  
  <subtitle>something about what I have learned and some interesting things</subtitle>
  <link href="https://sunjinkang.github.io/atom.xml" rel="self"/>
  
  <link href="https://sunjinkang.github.io/"/>
  <updated>2025-06-20T06:36:50.121Z</updated>
  <id>https://sunjinkang.github.io/</id>
  
  <author>
    <name>HTW_KAP</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次缺陷的整理</title>
    <link href="https://sunjinkang.github.io/2025/06/04/77-remove-script/"/>
    <id>https://sunjinkang.github.io/2025/06/04/77-remove-script/</id>
    <published>2025-06-04T05:06:54.000Z</published>
    <updated>2025-06-20T06:36:50.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以下是对一次遇到的缺陷进行的整理，主要关于动态添加script</p><h2 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h2><p>场景: react+typescript搭建的单页面系统，登录系统后，通过代码动态添加了script标签，引入js文件，js中的全局代码会自动执行，退出系统后，将添加的script标签通过代码去除，再次登录时，会再次通过代码动态添加script标签，引入相同的js文件。<br>已知：上面的单页面系统操作不涉及刷新页面<br>问题：再次登录时，引入的js文件中，全局代码不会再次执行，导致全局代码失效</p><h2 id="模拟代码"><a href="#模拟代码" class="headerlink" title="模拟代码"></a>模拟代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addScript&quot;</span>&gt;</span>添加script<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;removeScript&quot;</span>&gt;</span>移除script<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> addButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;addScript&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> removeButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;removeScript&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    addButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> body = <span class="variable language_">document</span>.<span class="property">body</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">src</span> = <span class="string">&#x27;./test.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">type</span> = <span class="string">&#x27;module&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">id</span> = <span class="string">&#x27;testScript&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      body.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    removeButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;testScript&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      script.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testName = <span class="string">&#x27;test-remove-script&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> is <span class="variable language_">global</span> <span class="attr">params</span>: $&#123;testName&#125;);</span><br></pre></td></tr></table></figure><p><strong>正确的结论：是否会再次执行 = 取决于 script 的类型和浏览器的缓存行为</strong>。</p><h2 id="✅-实验细节复盘"><a href="#✅-实验细节复盘" class="headerlink" title="✅ 实验细节复盘"></a>✅ 实验细节复盘</h2><p>动态添加的是：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;./test.js&#x27;</span>;</span><br><span class="line">script.<span class="property">type</span> = <span class="string">&#x27;module&#x27;</span>;</span><br><span class="line">script.<span class="property">id</span> = <span class="string">&#x27;testScript&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这意味着添加的是一个 <strong>模块化 script（type=”module”）</strong>。</p><p>点击“添加 script”，控制台打印信息<br>点击“移除 script”，再点击“添加 script”，<strong>控制台无任何输出</strong></p><h2 id="🔍-真实原因解析"><a href="#🔍-真实原因解析" class="headerlink" title="🔍 真实原因解析"></a>🔍 真实原因解析</h2><h3 id="1-type-quot-module-quot-的行为不同于普通-lt-script-gt"><a href="#1-type-quot-module-quot-的行为不同于普通-lt-script-gt" class="headerlink" title="1. type=&quot;module&quot; 的行为不同于普通 &lt;script&gt;"></a>1. <code>type=&quot;module&quot;</code> 的行为不同于普通 <code>&lt;script&gt;</code></h3><ul><li>浏览器会对 <code>type=&quot;module&quot;</code> 的 script <strong>进行缓存和模块解析机制处理</strong>。</li><li><strong>即使删除了 DOM 中的 <code>&lt;script&gt;</code> 标签，再次添加相同 <code>src</code> 的模块脚本，也不会重新执行其中的模块代码</strong>，因为模块已经“加载并执行过”。</li><li>这是 ES Module 的 <strong>“模块缓存机制”</strong> 决定的。</li></ul><p><strong>除非：</strong></p><ul><li>加了 query 参数（如 <code>?v=$&#123;Date.now()&#125;</code>）强制缓存失效</li><li>或者刷新页面</li></ul><h3 id="2-普通-script-则会每次都执行-✅"><a href="#2-普通-script-则会每次都执行-✅" class="headerlink" title="2. 普通 script 则会每次都执行 ✅"></a>2. <code>普通 script</code> 则会每次都执行 ✅</h3><p>如果将 <code>type=&quot;module&quot;</code> 去掉：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>; <span class="comment">// 或直接不设置 type</span></span><br></pre></td></tr></table></figure><p>每次添加 <code>&lt;script&gt;</code>，浏览器就会执行一次 <code>test.js</code> 中的全局代码。</p><h2 id="✅-正确结论（综合考虑-script-类型）"><a href="#✅-正确结论（综合考虑-script-类型）" class="headerlink" title="✅ 正确结论（综合考虑 script 类型）"></a>✅ 正确结论（综合考虑 script 类型）</h2><table><thead><tr><th>script 类型</th><th>是否重新执行（每次添加）</th><th>是否受缓存影响</th></tr></thead><tbody><tr><td><code>type=&quot;module&quot;</code></td><td>❌ 不执行（已缓存）</td><td>✅ 是</td></tr><tr><td>普通 <code>&lt;script&gt;</code></td><td>✅ 每次都会执行</td><td>✅ 是（仅资源缓存，但执行不受影响）</td></tr></tbody></table><hr><h2 id="✅-如何让-module-script-每次都执行？"><a href="#✅-如何让-module-script-每次都执行？" class="headerlink" title="✅ 如何让 module script 每次都执行？"></a>✅ 如何让 module script 每次都执行？</h2><p>加上 cache busting 参数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script.<span class="property">src</span> = <span class="string">`./test.js?t=<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p>这样浏览器认为是一个“新的模块”，会重新加载并执行。</p><hr><h2 id="🧠-总结"><a href="#🧠-总结" class="headerlink" title="🧠 总结"></a>🧠 总结</h2><p>使用 <code>type=&quot;module&quot;</code>，因此触发了 ES Module 的缓存机制，所以：</p><blockquote><p><strong>模块脚本只会执行一次，不管是否移除 <code>&lt;script&gt;</code> 标签。</strong></p></blockquote><hr><p>如需精确控制是否再次执行，可选择以下方式：</p><h3 id="✅-方法一：使用普通-script"><a href="#✅-方法一：使用普通-script" class="headerlink" title="✅ 方法一：使用普通 script"></a>✅ 方法一：使用普通 script</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>; <span class="comment">// or omit entirely</span></span><br></pre></td></tr></table></figure><h3 id="✅-方法二：为-module-script-添加唯一-query-参数"><a href="#✅-方法二：为-module-script-添加唯一-query-参数" class="headerlink" title="✅ 方法二：为 module script 添加唯一 query 参数"></a>✅ 方法二：为 module script 添加唯一 query 参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">script.<span class="property">src</span> = <span class="string">`./test.js?t=<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>;</span><br><span class="line">script.<span class="property">type</span> = <span class="string">&#x27;module&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="模拟代码执行中遇到的问题"><a href="#模拟代码执行中遇到的问题" class="headerlink" title="模拟代码执行中遇到的问题"></a>模拟代码执行中遇到的问题</h3><p>html直接在浏览器中打开，控制台报错：</p><blockquote><p>Access to script at ‘file:///D:/sunjinkang/normal-test/1-test-remove-script/test.js’ from origin ‘null’ has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: chrome, chrome-extension, chrome-untrusted, data, http, https, isolated-app</p></blockquote><p>原因：</p><ul><li>当使用 <code>&lt;script type=&quot;module&quot;&gt;</code> 动态加载 JS 文件时，浏览器会将其视为一个 ES Module。</li><li>ES Modules 遵循严格的 CORS 规则，而 file:// 协议下的页面属于 origin: null，浏览器出于安全原因禁止跨源加载 module 类型的脚本，即使路径是本地文件。</li></ul><p>解决方法：</p><ul><li>方法一<ul><li>使用本地开发服务器<ul><li>使用 npx http-server（Node 环境下）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装（如果你没有安装过）</span><br><span class="line">npm install -g http-server</span><br><span class="line"></span><br><span class="line"># 启动本地服务（在 index.<span class="property">html</span> 所在目录下运行）</span><br><span class="line">http-server .</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问浏览器</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:8080</span></span><br></pre></td></tr></table></figure></li><li>使用 VSCode 的 Live Server 插件<ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">安装 Live Server 插件</a></li><li>右键 index.html → 选择 “Open with Live Server”</li></ul></li></ul></li></ul></li></ul><p>方法二：不使用 module 类型（仅用于普通 script）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./test.js&quot;</span> <span class="attr">id</span>=<span class="string">&quot;testScript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>PS: test.js 文件如果未来会使用 import 等 ES Module 功能，那方法二不适合。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;以下是对一次遇到的缺陷进行的整理，主要关于动态添加script&lt;/p&gt;
&lt;h2 id=&quot;场景说明&quot;&gt;&lt;a href=&quot;#场景说明&quot; clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于弹幕</title>
    <link href="https://sunjinkang.github.io/2025/05/20/76-about-danmu/"/>
    <id>https://sunjinkang.github.io/2025/05/20/76-about-danmu/</id>
    <published>2025-05-20T12:57:18.000Z</published>
    <updated>2025-06-20T06:37:14.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>弹幕，作为一种极具互动性的视觉表达方式，已经成为视频平台（如 Bilibili、爱奇艺、腾讯视频等）的标配。它不仅提升了用户参与感，也在一定程度上丰富了视频内容的表达维度。<br>下面我们将介绍弹幕的基本实现原理并结合 Bilibili 的弹幕思路，构建一个可用的弹幕系统。</p><h2 id="弹幕的本质与核心原理"><a href="#弹幕的本质与核心原理" class="headerlink" title="弹幕的本质与核心原理"></a>弹幕的本质与核心原理</h2><p>弹幕的本质，是在播放视频过程中，将用户生成的文本内容（弹幕）实时渲染在视频层上方，进一步包括<strong>横向滚动、同步展示、支持样式自定义与交互控制等</strong>。</p><p>核心要素包括：</p><ol><li><strong>轨道控制</strong>：防止多条弹幕重叠</li><li><strong>动画渲染</strong>：实现从右至左（或其他方向）的移动</li><li><strong>消息管理</strong>：弹幕的接收、发送、缓存和删除</li><li><strong>播放同步</strong>：弹幕与视频时间对齐</li><li><strong>交互功能</strong>：弹幕开关、颜色、过滤、密度等设置</li></ol><p>下面我们先从一个简单的实现入手</p><h2 id="纯前端的基础弹幕实现"><a href="#纯前端的基础弹幕实现" class="headerlink" title="纯前端的基础弹幕实现"></a>纯前端的基础弹幕实现</h2><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><ul><li>文字从右侧飘入左侧</li><li>随机轨道显示</li><li>动画结束后自动销毁</li></ul><h3 id="HTML-结构"><a href="#HTML-结构" class="headerlink" title="HTML 结构"></a>HTML 结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sample.mp4&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;danmu-layer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.video-container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">640px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">360px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.danmu-layer</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.danmu-item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">animation</span>: move linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100%</span>); &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-实现"><a href="#JavaScript-实现" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createDanmaku</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> layer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.danmaku-layer&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  el.<span class="property">className</span> = <span class="string">&#x27;danmaku-item&#x27;</span>;</span><br><span class="line">  el.<span class="property">textContent</span> = text;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 轨道计算</span></span><br><span class="line">  <span class="keyword">const</span> trackHeight = <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">const</span> trackCount = <span class="title class_">Math</span>.<span class="title function_">floor</span>(layer.<span class="property">clientHeight</span> / trackHeight);</span><br><span class="line">  <span class="keyword">const</span> track = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * trackCount);</span><br><span class="line">  el.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;track * trackHeight&#125;</span>px`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 动画持续时间</span></span><br><span class="line">  <span class="keyword">const</span> duration = <span class="number">8</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2</span>;</span><br><span class="line">  el.<span class="property">style</span>.<span class="property">animationDuration</span> = <span class="string">`<span class="subst">$&#123;duration&#125;</span>s`</span>;</span><br><span class="line"></span><br><span class="line">  layer.<span class="title function_">appendChild</span>(el);</span><br><span class="line"></span><br><span class="line">  el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;animationend&#x27;</span>, <span class="function">() =&gt;</span> el.<span class="title function_">remove</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：每秒生成一条弹幕</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createDanmaku</span>(<span class="string">&#x27;Hello 弹幕~&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="渲染方式选择：DOM-vs-Canvas-vs-WebGL"><a href="#渲染方式选择：DOM-vs-Canvas-vs-WebGL" class="headerlink" title="渲染方式选择：DOM vs Canvas vs WebGL"></a>渲染方式选择：DOM vs Canvas vs WebGL</h2><table><thead><tr><th>渲染方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>DOM（absolute + animation）</strong></td><td>易实现、支持样式多</td><td>性能差，弹幕多时掉帧</td></tr><tr><td><strong>Canvas</strong></td><td>高性能、能支持 1000+ 条弹幕</td><td>开发复杂、不易调试</td></tr><tr><td><strong>WebGL</strong></td><td>超高性能</td><td>最复杂，需 GPU 编程知识</td></tr><tr><td>建议实现：小规模用 DOM 实现，大规模用 Canvas，长期项目考虑 WebGL。</td><td></td><td></td></tr></tbody></table><h2 id="构建一个高级弹幕系统（模拟-Bilibili-实现）"><a href="#构建一个高级弹幕系统（模拟-Bilibili-实现）" class="headerlink" title="构建一个高级弹幕系统（模拟 Bilibili 实现）"></a>构建一个高级弹幕系统（模拟 Bilibili 实现）</h2><h3 id="目标增强功能"><a href="#目标增强功能" class="headerlink" title="目标增强功能"></a>目标增强功能</h3><ul><li>与视频时间同步（非实时发送也能同步）</li><li>使用 Canvas 提升性能</li><li>支持发送自定义颜色弹幕</li><li>弹幕开关</li><li>WebSocket 实时接收弹幕</li><li>使用本地视频进行绑定展示</li></ul><h3 id="HTML-结构（支持输入和控制）"><a href="#HTML-结构（支持输入和控制）" class="headerlink" title="HTML 结构（支持输入和控制）"></a>HTML 结构（支持输入和控制）</h3><ul><li>视频与弹幕分层渲染，避免 DOM 操作影响性能</li><li>Canvas 尺寸需与视频保持比例协调</li><li>控制面板集成色彩选择等实用功能</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./video.mp4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;danmaku-canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;danmakuText&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入弹幕&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">id</span>=<span class="string">&quot;colorPicker&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendUserDanmaku()&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;toggleDanmaku()&quot;</span>&gt;</span>开/关弹幕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Canvas-渲染弹幕核心逻辑"><a href="#Canvas-渲染弹幕核心逻辑" class="headerlink" title="Canvas 渲染弹幕核心逻辑"></a>Canvas 渲染弹幕核心逻辑</h3><ul><li>基于 RAF 的动画循环保证流畅性</li><li>速度随机化（2-3.5px/帧）实现自然运动差异</li><li>measureText 精确计算文本宽度实现内存回收<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;danmaku-canvas&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> danmakus = []; <span class="comment">// 所有弹幕</span></span><br><span class="line"><span class="keyword">let</span> showDanmaku = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染帧</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!showDanmaku) <span class="keyword">return</span> <span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line"></span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">  <span class="keyword">const</span> currentTime = video.<span class="property">currentTime</span>;</span><br><span class="line"></span><br><span class="line">  danmakus.<span class="title function_">forEach</span>(<span class="function"><span class="params">dm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dm.<span class="property">time</span> &lt;= currentTime) &#123;</span><br><span class="line">      dm.<span class="property">x</span> -= dm.<span class="property">speed</span>;</span><br><span class="line">      ctx.<span class="property">font</span> = <span class="string">`<span class="subst">$&#123;dm.fontSize&#125;</span>px sans-serif`</span>;</span><br><span class="line">      ctx.<span class="property">fillStyle</span> = dm.<span class="property">color</span>;</span><br><span class="line">      ctx.<span class="title function_">fillText</span>(dm.<span class="property">text</span>, dm.<span class="property">x</span>, dm.<span class="property">y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  danmakus = danmakus.<span class="title function_">filter</span>(<span class="function"><span class="params">dm</span> =&gt;</span> dm.<span class="property">x</span> &gt; -ctx.<span class="title function_">measureText</span>(dm.<span class="property">text</span>).<span class="property">width</span>);</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(render);</span><br></pre></td></tr></table></figure></li></ul><h3 id="弹幕数据结构和生成方法"><a href="#弹幕数据结构和生成方法" class="headerlink" title="弹幕数据结构和生成方法"></a>弹幕数据结构和生成方法</h3><ul><li>时间戳绑定实现「时移播放」场景支持</li><li>Y 轴随机分布简化轨道管理逻辑</li><li>速度随机化提升视觉效果<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createDanmaku</span>(<span class="params">text, color, time</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    text,</span><br><span class="line">    color,</span><br><span class="line">    time,</span><br><span class="line">    <span class="attr">x</span>: canvas.<span class="property">width</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * canvas.<span class="property">height</span>,</span><br><span class="line">    <span class="attr">speed</span>: <span class="number">2</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1.5</span>,</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="用户发送弹幕"><a href="#用户发送弹幕" class="headerlink" title="用户发送弹幕"></a>用户发送弹幕</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendUserDanmaku</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;danmakuText&#x27;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">const</span> color = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;colorPicker&#x27;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">const</span> time = video.<span class="property">currentTime</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dm = <span class="title function_">createDanmaku</span>(text, color, time);</span><br><span class="line">  danmakus.<span class="title function_">push</span>(dm);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 同时发送到服务器（WebSocket）</span></span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(dm));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WebSocket-实时收发"><a href="#WebSocket-实时收发" class="headerlink" title="WebSocket 实时收发"></a>WebSocket 实时收发</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class="line">ws.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接服务器&#x27;</span>);</span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;getHistory&#x27;</span> &#125;));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (data.<span class="property">type</span> === <span class="string">&#x27;history&#x27;</span>) &#123;</span><br><span class="line">    danmakus.<span class="title function_">push</span>(...data.<span class="property">danmakus</span>); <span class="comment">// 加载历史</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    danmakus.<span class="title function_">push</span>(<span class="title function_">createDanmaku</span>(data.<span class="property">text</span>, data.<span class="property">color</span>, data.<span class="property">time</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="开关弹幕"><a href="#开关弹幕" class="headerlink" title="开关弹幕"></a>开关弹幕</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toggleDanmaku</span>(<span class="params"></span>) &#123;</span><br><span class="line">  showDanmaku = !showDanmaku;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务器建议（Node-js-示例）"><a href="#服务器建议（Node-js-示例）" class="headerlink" title="服务器建议（Node.js 示例）"></a>服务器建议（Node.js 示例）</h3><p>使用简单的 WebSocket server 可实现广播：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> clients = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="keyword">const</span> danmakuHistory = []; <span class="comment">// 所有弹幕存储</span></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  clients.<span class="title function_">add</span>(ws);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(msg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">type</span> === <span class="string">&#x27;getHistory&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 将所有历史弹幕发送给客户端</span></span><br><span class="line">      ws.<span class="title function_">send</span>(</span><br><span class="line">        <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">          <span class="attr">danmakus</span>: danmakuHistory,</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常弹幕处理</span></span><br><span class="line">    danmakuHistory.<span class="title function_">push</span>(data);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> client <span class="keyword">of</span> clients) &#123;</span><br><span class="line">      <span class="keyword">if</span> (client !== ws &amp;&amp; client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">        client.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> clients.<span class="title function_">delete</span>(ws));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上只是简单实现了弹幕的效果，还有一些优化点没有处理，比如：</p><ul><li>添加防碰撞算法（轨道优先级管理）</li><li>实现弹幕类型多样化<ul><li>不同位置的滚动</li><li>不同方向的滚动等等</li></ul></li><li>增加弹幕密度控制</li><li>添加历史弹幕加载功能</li><li>实现字体描边等不同的样式特效或动画特效</li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>弹幕系统的实现，不仅仅是文字飘动那么简单。它融合了动画、轨道管理、实时通信、数据同步、性能优化等多个技术点，是前端开发中非常有趣的一项综合性挑战。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;弹幕，作为一种极具互动性的视觉表达方式，已经成为视频平台（如 Bilibili、爱奇艺、腾讯视频等）的标配。它不仅提升了用户参与感，也在一定</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于IndexedDB</title>
    <link href="https://sunjinkang.github.io/2025/05/15/75-about-indexedDB/"/>
    <id>https://sunjinkang.github.io/2025/05/15/75-about-indexedDB/</id>
    <published>2025-05-15T10:59:20.000Z</published>
    <updated>2025-06-20T06:37:27.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于IndexedDB"><a href="#关于IndexedDB" class="headerlink" title="关于IndexedDB"></a>关于IndexedDB</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家应该都遇到过需要在浏览器中存储数据的情况吧，我们常用的就是cookie、localStorage、sessionStorage，这些方法一般来说能够满足我们的日常开发使用。但是，不知道大家有没有遇到过需要存储大量的数据的情况，这时候，前面提到的这些方法可能就满足不了我们的要求，这时候IndexedDB或许可以成为一个不错的选择。</p><h2 id="什么是IndexedDB？"><a href="#什么是IndexedDB？" class="headerlink" title="什么是IndexedDB？"></a>什么是IndexedDB？</h2><blockquote><p>IndexedDB 是一种底层 API，用于在客户端存储大量的结构化数据（也包括文件/二进制大型对象（blobs））。该 API 使用索引实现对数据的高性能搜索。</p></blockquote><p>主要特点：</p><ul><li>异步API（不会阻塞UI）</li><li>支持事务</li><li>支持索引查询</li><li>同源策略限制</li><li>存储空间较大（通常50MB以上，取决于浏览器）</li></ul><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>需要离线工作的Web应用</li><li>需要存储大量结构化数据的应用</li><li>需要复杂查询的本地数据存储</li><li>需要高性能本地数据访问的应用</li></ul><p>IndexedDB为Web应用提供了强大的本地存储能力，虽然API相对复杂，但能够满足高级的客户端数据存储需求。</p><p><strong>场景举例</strong></p><ul><li>Web 游戏<ul><li>场景： 保存游戏进度、配置、用户数据等。</li><li>示例：本地保存 RPG 游戏的存档数据、存储离线资源（角色模型、场景数据）、用户自定义设置存储（分辨率、按键配置）</li></ul></li><li>渐进式 Web 应用（PWA）<ul><li>场景： 提升 Web 应用的离线体验和性能。</li><li>示例：离线播放音乐或视频（配合 service worker 缓存媒体文件）、离线阅读应用（小说、电子书等）、PWA 的聊天应用暂存聊天记录</li></ul></li></ul><h2 id="基本使用方法介绍"><a href="#基本使用方法介绍" class="headerlink" title="基本使用方法介绍"></a>基本使用方法介绍</h2><p>下面我们介绍一下IndexedDB的一些方法及使用举例。</p><ol><li><code>indexedDB.open(name, version)</code><br>用于打开或创建数据库，name是数据库名称，version可选，数据库版本号。<em>升级数据库结构时需要修改版本。</em></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = indexedDB.<span class="title function_">open</span>(<span class="string">&#x27;MyDatabase&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>request.onupgradeneeded</code><br>当数据库第一次创建或版本升级时触发，用于创建对象仓库（Object Store）和索引等结构。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onupgradeneeded</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// xxxxxx</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>request.onsuccess</code> / <code>request.onerror</code><br><code>onsuccess</code>：打开数据库成功后的回调，<code>onerror</code>：打开数据库失败的回调。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库打开成功&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request.<span class="property">onerror</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;数据库打开失败&#x27;</span>, event.<span class="property">target</span>.<span class="property">error</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>db.createObjectStore(name, options)</code><br>在 <code>onupgradeneeded</code> 中调用，用于创建对象仓库。<code>keyPath</code>：指定主键字段名称（也可使用自动递增：<code>&#123; autoIncrement: true &#125;</code>）。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onupgradeneeded</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">  <span class="keyword">const</span> store = db.<span class="title function_">createObjectStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&#x27;id&#x27;</span> &#125;);</span><br><span class="line">  store.<span class="title function_">createIndex</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/create-indexeddb.png" alt="create"></p><ol start="5"><li><code>db.transaction(storeNames, mode)</code><br>创建一个事务对象，用于读取或写入数据。<code>storeNames</code>：对象仓库名称或数组，<code>mode</code>：操作模式，<code>readonly</code> 或 <code>readwrite</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tx = db.<span class="title function_">transaction</span>([<span class="string">&#x27;users&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> store = tx.<span class="title function_">objectStore</span>(<span class="string">&#x27;users&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li><code>store.add(value)</code> / <code>store.put(value)</code><br>用于添加或更新数据。<code>add()</code>：如果主键已存在会报错，<code>put()</code>：存在则更新，不存在则新增。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">add</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;);</span><br><span class="line">store.<span class="title function_">put</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Alice Smith&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><ol start="7"><li><code>store.get(key)</code><br>用于根据主键获取数据。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">get</span>(<span class="number">1</span>).<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取结果：&#x27;</span>, event.<span class="property">target</span>.<span class="property">result</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="8"><li><code>store.delete(key)</code><br>删除某条数据。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">delete</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ol start="9"><li><code>store.clear()</code><br>清空对象仓库中所有记录。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><ol start="10"><li><code>store.openCursor()</code><br>用于遍历所有数据（类似迭代器）。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cursorRequest = store.<span class="title function_">openCursor</span>();</span><br><span class="line"></span><br><span class="line">cursorRequest.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cursor = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">  <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cursor.<span class="property">key</span>, cursor.<span class="property">value</span>);</span><br><span class="line">    cursor.<span class="title function_">continue</span>();  <span class="comment">// 移动到下一条</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;遍历完成&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="11"><li><code>store.createIndex(name, keyPath, options)</code><br>创建索引，便于通过其他字段查询。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">createIndex</span>(<span class="string">&#x27;nameIndex&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure><p>之后可以通过索引查询：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> index = store.<span class="title function_">index</span>(<span class="string">&#x27;nameIndex&#x27;</span>);</span><br><span class="line">index.<span class="title function_">get</span>(<span class="string">&#x27;Alice&#x27;</span>).<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">result</span>);</span><br></pre></td></tr></table></figure><p>之后可以通过索引查询：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> index = store.<span class="title function_">index</span>(<span class="string">&#x27;nameIndex&#x27;</span>);</span><br><span class="line">index.<span class="title function_">get</span>(<span class="string">&#x27;Alice&#x27;</span>).<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">result</span>);</span><br></pre></td></tr></table></figure><ol start="12"><li>  <code>db.deleteDatabase(name)</code><br>用于删除IndexedDB，name为创建的IndexedDB名称，注意name需要匹配，删除后数据无法恢复，慎用！数据库被打开无法被删除。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deleteRequest = indexedDB.<span class="title function_">deleteDatabase</span>(<span class="string">&#x27;myDatabase&#x27;</span>);</span><br><span class="line">deleteRequest.<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库删除成功&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">deleteRequest.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;数据库删除失败&#x27;</span>, event.<span class="property">target</span>.<span class="property">error</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">deleteRequest.<span class="property">onblocked</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;删除被阻止，可能数据库正被打开中&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>异步操作</strong>：所有IndexedDB操作都是异步的，需要通过事件处理结果</li><li><strong>事务</strong>：任何数据操作都需要在事务中进行</li><li><strong>版本控制</strong>：数据库结构变更需要通过版本升级实现</li><li><strong>错误处理</strong>：务必处理onerror事件，避免静默失败</li><li><strong>浏览器兼容性</strong>：现代浏览器基本都支持，但旧版IE需要特定版本</li></ol><h2 id="常用的库idb"><a href="#常用的库idb" class="headerlink" title="常用的库idb"></a>常用的库idb</h2><p>由于IndexedDB的原生API不友好，idb成为了热门的IndexedDB包装库，方便我们我们操作IndexedDB，大家感兴趣的可以自己去了解一下。<br><a href="https://github.com/jakearchibald/idb">idb的github地址</a></p><p>资料：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API">IndexedDB</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于IndexedDB&quot;&gt;&lt;a href=&quot;#关于IndexedDB&quot; class=&quot;headerlink&quot; title=&quot;关于IndexedDB&quot;&gt;&lt;/a&gt;关于IndexedDB&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS 方法与属性介绍</title>
    <link href="https://sunjinkang.github.io/2025/02/21/74-about-css-new/"/>
    <id>https://sunjinkang.github.io/2025/02/21/74-about-css-new/</id>
    <published>2025-02-21T07:51:10.000Z</published>
    <updated>2025-06-17T07:30:43.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>CSS（层叠样式表）是用于描述 HTML 或 XML 文档外观的样式表语言。随着 Web 技术的不断发展，CSS 也引入了许多新的特性和方法，使得开发者能够更灵活地控制页面的样式和布局。本文将介绍一些现代 CSS 中常用的方法和属性，帮助开发者更好地理解和应用这些特性。</p><h2 id="2-CSS-一些特性介绍"><a href="#2-CSS-一些特性介绍" class="headerlink" title="2. CSS 一些特性介绍"></a>2. CSS 一些特性介绍</h2><h3 id="steps"><a href="#steps" class="headerlink" title="steps()"></a>steps()</h3><p><strong>说明</strong>:<br><code>steps()</code> 是一个用于 <code>animation-timing-function</code> 属性的函数，它允许你将动画分成多个步骤，而不是平滑过渡。这对于创建逐帧动画非常有用。</p><p><strong>使用注意事项</strong>:  </p><ul><li><code>steps()</code> 接受两个参数：第一个参数是步骤的数量，第二个参数是可选的，用于指定步骤的变化点（<code>start</code> 或 <code>end</code>）。</li><li>如果你想要动画在每一步开始时变化，使用 <code>start</code>；如果你想要动画在每一步结束时变化，使用 <code>end</code>。</li></ul><p><strong>常见使用方式举例</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>); &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: move <span class="number">2s</span> <span class="built_in">steps</span>(<span class="number">5</span>, end) infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-变量"><a href="#CSS-变量" class="headerlink" title="CSS 变量"></a>CSS 变量</h3><p><strong>说明</strong>:<br>CSS 变量（也称为自定义属性）允许你在 CSS 中定义可重用的值，并在整个样式表中引用它们。CSS 变量以 <code>--</code> 开头。</p><p><strong>使用注意事项</strong>:  </p><ul><li>CSS 变量是大小写敏感的。</li><li>你可以在 <code>:root</code> 伪类中定义全局变量，也可以在特定选择器中定义局部变量。</li><li>使用 <code>var()</code> 函数来引用变量。</li></ul><p><strong>常见使用方式举例</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--primary-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="min-、max-和-clamp"><a href="#min-、max-和-clamp" class="headerlink" title="min()、max() 和 clamp()"></a>min()、max() 和 clamp()</h3><p><strong>说明</strong>:<br><code>min()</code>、<code>max()</code> 和 <code>clamp()</code> 是 CSS 中的数学函数，用于在样式表中进行动态计算。</p><ul><li><code>min()</code>：返回一组值中的最小值。</li><li><code>max()</code>：返回一组值中的最大值。</li><li><code>clamp()</code>：接受三个参数（最小值、首选值、最大值），并返回一个介于最小值和最大值之间的值。</li></ul><p><strong>使用注意事项</strong>:  </p><ul><li>这些函数可以用于任何接受长度、百分比、角度等值的属性。</li><li><code>clamp()</code> 特别适用于响应式设计，因为它可以根据视口大小动态调整值。</li></ul><p><strong>常见使用方式举例</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">100%</span>, <span class="number">500px</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">clamp</span>(<span class="number">1rem</span>, <span class="number">2.5vw</span>, <span class="number">2rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="supports"><a href="#supports" class="headerlink" title="@supports"></a>@supports</h3><p><strong>说明</strong>:<br><code>@supports</code> 是一个 CSS 规则，用于检测浏览器是否支持某个 CSS 特性。如果支持，则应用其中的样式。</p><p><strong>使用注意事项</strong>:  </p><ul><li><code>@supports</code> 可以用于渐进增强，确保在不支持某些特性的浏览器中提供备用样式。</li><li>你可以使用逻辑运算符（如 <code>and</code>、<code>or</code>、<code>not</code>）来组合多个条件。</li></ul><p><strong>常见使用方式举例</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@supports</span> (<span class="attribute">display</span>: <span class="attribute">grid</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="accent-color"><a href="#accent-color" class="headerlink" title="accent-color"></a>accent-color</h3><p><strong>说明</strong>:<br><code>accent-color</code> 是一个用于设置表单控件（如复选框、单选按钮、进度条等）的强调色的属性。</p><p><strong>使用注意事项</strong>:  </p><ul><li><code>accent-color</code> 目前仅支持部分表单控件。</li><li>该属性可以快速统一表单元素的样式，减少自定义样式的复杂性。</li></ul><p><strong>常见使用方式举例</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span><br><span class="line">  accent-<span class="attribute">color</span>: <span class="number">#3498db</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="container"><a href="#container" class="headerlink" title="@container"></a>@container</h3><p><strong>说明</strong>:<br><code>@container</code> 是一个用于容器查询的 CSS 规则，允许你根据容器的大小而不是视口大小来应用样式。</p><p><strong>使用注意事项</strong>:  </p><ul><li>容器查询目前仍处于实验阶段，浏览器支持有限。</li><li>你需要先定义一个容器，然后使用 <code>@container</code> 来查询该容器的大小。</li></ul><p><strong>常见使用方式举例</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  container-type: inline-size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@container</span> (<span class="attribute">min-width</span>: <span class="number">300px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="color-mix"><a href="#color-mix" class="headerlink" title="color-mix()"></a>color-mix()</h3><p><strong>说明</strong>:<br><code>color-mix()</code> 是一个用于混合两种颜色的 CSS 函数。你可以指定混合的比例。</p><p><strong>使用注意事项</strong>:  </p><ul><li><code>color-mix()</code> 目前仍处于实验阶段，浏览器支持有限。</li><li>你可以使用 <code>in</code> 关键字来指定颜色空间（如 <code>srgb</code>、<code>lab</code> 等）。</li></ul><p><strong>常见使用方式举例</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">color-mix</span>(in srgb, <span class="number">#3498db</span> <span class="number">50%</span>, <span class="number">#e74c3c</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="has"><a href="#has" class="headerlink" title=":has()"></a>:has()</h3><p><strong>说明</strong>:<br><code>:has()</code> 是一个 CSS 伪类，允许你选择包含特定子元素的父元素。</p><p><strong>使用注意事项</strong>:  </p><ul><li><code>:has()</code> 目前仍处于实验阶段，浏览器支持有限。</li><li>该伪类可以用于复杂的选择器，帮助你更精确地选择元素。</li></ul><p><strong>常见使用方式举例</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:has</span>(&gt; <span class="selector-tag">p</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="clip-path-裁剪路径"><a href="#clip-path-裁剪路径" class="headerlink" title="clip-path 裁剪路径"></a>clip-path 裁剪路径</h3><p><strong>说明</strong>:<br><code>clip-path</code> 是一个用于裁剪元素的属性，允许你使用各种形状（如圆形、多边形等）来裁剪元素的可视区域。</p><p><strong>使用注意事项</strong>:  </p><ul><li><code>clip-path</code> 可以使用基本形状（如 <code>circle()</code>、<code>polygon()</code>）或 SVG 路径来定义裁剪区域。</li><li>该属性可以用于创建复杂的视觉效果，如不规则形状的图片裁剪。</li></ul><p><strong>常见使用方式举例</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">0%</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">0%</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter-滤镜效果"><a href="#filter-滤镜效果" class="headerlink" title="filter 滤镜效果"></a>filter 滤镜效果</h3><p><strong>说明</strong>:<br><code>filter</code> 是一个用于应用图形效果（如模糊、亮度调整、对比度调整等）的属性。</p><p><strong>使用注意事项</strong>:  </p><ul><li><code>filter</code> 可以接受多个滤镜函数，如 <code>blur()</code>、<code>brightness()</code>、<code>contrast()</code> 等。</li><li>该属性可以用于创建各种视觉效果，如毛玻璃效果、黑白照片效果等。</li></ul><p><strong>常见使用方式举例</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>) <span class="built_in">grayscale</span>(<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本文介绍了一些现代 CSS 中常用的方法和属性，包括 <code>steps()</code>、CSS 变量、<code>min()</code>、<code>max()</code>、<code>clamp()</code>、<code>@supports</code>、<code>accent-color</code>、<code>@container</code>、<code>color-mix()</code>、<code>:has()</code>、<code>clip-path</code> 和 <code>filter</code>。这些特性和方法为开发者提供了更强大的工具来创建复杂、响应式和视觉效果丰富的网页。随着浏览器对这些特性的支持不断完善，开发者可以更加灵活地应用这些技术，提升用户体验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;CSS（层叠样式表）是用于描述 HTML 或 XML 文档外观的样式表语言。随着 Web 技术的不断发展，CSS 也引入</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于画中画的介绍及简单实现</title>
    <link href="https://sunjinkang.github.io/2025/02/14/64-about-picture-in-picture/"/>
    <id>https://sunjinkang.github.io/2025/02/14/64-about-picture-in-picture/</id>
    <published>2025-02-14T02:07:32.000Z</published>
    <updated>2025-06-17T07:27:25.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于画中画（Picture-in-Picture）的介绍及简单实现"><a href="#关于画中画（Picture-in-Picture）的介绍及简单实现" class="headerlink" title="关于画中画（Picture-in-Picture）的介绍及简单实现"></a>关于画中画（Picture-in-Picture）的介绍及简单实现</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>大家应该都看过下面这种一个小窗悬浮在页面上的效果，这种效果叫做画中画。画中画（Picture-in-Picture，PiP）是一种现代浏览器支持的功能，允许用户将视频或其他媒体元素从网页中分离出来，以一个小窗口的形式浮动在屏幕的任意位置。比较常见的就是视频网站，一个小窗口悬浮在页面最上层，用户可以在浏览其他内容的同时继续观看视频，极大地提升了多任务处理的便利性。本文将重点介绍视频画中画的实现方法。</p><h4 id="画中画原理"><a href="#画中画原理" class="headerlink" title="画中画原理"></a>画中画原理</h4><p>画中画的实现原理基于浏览器的 <strong>Picture-in-Picture API</strong>，主要包括以下几个步骤：</p><p><em>媒体元素分离</em>：</p><ul><li>浏览器将指定的 <code>&lt;video&gt;</code> 元素从 DOM 中分离出来，渲染到一个独立的浮动窗口中。</li><li>这个浮动窗口可以放置在屏幕的任意位置，且始终在最上层显示。</li></ul><p><em>独立控制</em>：</p><ul><li>画中画窗口中的视频可以独立控制（播放、暂停、音量调节等）。</li><li>即使原网页被最小化或切换到其他标签页，画中画窗口仍然可以继续播放。</li></ul><p><em>事件监听</em>：</p><ul><li>通过 JavaScript 监听画中画的状态变化（如进入画中画、退出画中画等），以便进行相应的逻辑处理。</li></ul><p>画中画有两种方法：</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/requestPictureInPicture">video使用的requestPictureInPicture</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentPictureInPicture">document的documentPictureInPicture</a><br>本文主要是介绍video使用的requestPictureInPicture。</li></ul><h4 id="视频画中画的核心介绍"><a href="#视频画中画的核心介绍" class="headerlink" title="视频画中画的核心介绍"></a>视频画中画的核心介绍</h4><p>视频画中画是画中画功能的主要应用场景，其核心依赖于以下 API：</p><p><em>requestPictureInPicture()</em></p><ul><li>用于将 <code>&lt;video&gt;</code> 元素切换到画中画模式。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">video.<span class="title function_">requestPictureInPicture</span>();</span><br></pre></td></tr></table></figure></li></ul><p><em>exitPictureInPicture()</em></p><ul><li>用于退出画中画模式。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">exitPictureInPicture</span>();</span><br></pre></td></tr></table></figure></li></ul><p><em>pictureInPictureEnabled</em></p><ul><li>用于检测当前浏览器是否支持画中画功能。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">pictureInPictureEnabled</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;画中画功能支持&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><em>pictureInPictureElement</em></p><ul><li>用于获取当前处于画中画模式的元素。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipElement = <span class="variable language_">document</span>.<span class="property">pictureInPictureElement</span>;</span><br><span class="line"><span class="keyword">if</span> (pipElement) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前画中画元素：&#x27;</span>, pipElement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><em>enterpictureinpicture、leavepictureinpicture</em></p><ul><li>用于监听进入和退出画中画模式的事件。</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">video.<span class="title function_">addEventListener</span>(<span class="string">&#x27;enterpictureinpicture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;进入画中画模式&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">video.<span class="title function_">addEventListener</span>(<span class="string">&#x27;leavepictureinpicture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;退出画中画模式&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="视频画中画的简单实现"><a href="#视频画中画的简单实现" class="headerlink" title="视频画中画的简单实现"></a>视频画中画的简单实现</h4><p>以下是一个简单的视频画中画实现示例：</p><p><em>HTML</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">&quot;your-video-url.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;pip-button&quot;</span>&gt;</span>开启画中画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>JavaScript</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pipButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pip-button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测浏览器是否支持画中画</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="property">pictureInPictureEnabled</span>) &#123;</span><br><span class="line">  pipButton.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前浏览器不支持画中画功能&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮开启画中画</span></span><br><span class="line">pipButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (video !== <span class="variable language_">document</span>.<span class="property">pictureInPictureElement</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> video.<span class="title function_">requestPictureInPicture</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">document</span>.<span class="title function_">exitPictureInPicture</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;画中画操作失败：&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听进入画中画事件</span></span><br><span class="line">video.<span class="title function_">addEventListener</span>(<span class="string">&#x27;enterpictureinpicture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  pipButton.<span class="property">textContent</span> = <span class="string">&#x27;退出画中画&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听退出画中画事件</span></span><br><span class="line">video.<span class="title function_">addEventListener</span>(<span class="string">&#x27;leavepictureinpicture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  pipButton.<span class="property">textContent</span> = <span class="string">&#x27;开启画中画&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="画中画的适用场景介绍"><a href="#画中画的适用场景介绍" class="headerlink" title="画中画的适用场景介绍"></a>画中画的适用场景介绍</h4><p>画中画功能在以下场景中非常实用：</p><p><em>视频播放器</em></p><ul><li>用户可以在浏览其他内容的同时继续观看视频。</li></ul><p><em>在线会议</em></p><ul><li>将会议视频以小窗口形式浮动，方便用户多任务操作。</li></ul><p><em>教育平台</em></p><ul><li>学生可以在观看课程视频的同时做笔记或查阅资料。</li></ul><p><em>直播平台</em></p><ul><li>用户可以在观看直播的同时浏览其他网页。</li></ul><h4 id="画中画使用的注意事项"><a href="#画中画使用的注意事项" class="headerlink" title="画中画使用的注意事项"></a>画中画使用的注意事项</h4><p><em>浏览器兼容性</em></p><ul><li>画中画功能在现代浏览器中支持较好，但在某些浏览器（如 Safari）中可能存在限制。</li><li>可以通过 <code>document.pictureInPictureEnabled</code> 检测浏览器是否支持。</li></ul><p><em>用户交互</em></p><ul><li>画中画功能必须由用户主动触发（如点击按钮），不能通过脚本自动开启。</li></ul><p><em>安全性</em></p><ul><li>画中画窗口不会显示原网页的其他内容，确保用户隐私安全。</li></ul><p><em>性能优化</em></p><ul><li>如果视频分辨率较高，画中画窗口可能会占用较多系统资源，需注意性能优化。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>画中画功能为用户提供了极大的便利，尤其是在多任务处理场景中。通过浏览器的 <strong>Picture-in-Picture API</strong>，开发者可以轻松实现视频画中画效果。本文详细介绍了视频画中画的原理、核心 API、实现方法、适用场景及注意事项，希望能为开发者提供实用的参考。</p><p>此外，<code>DocumentPictureInPicture</code> 是画中画功能的扩展，允许将整个文档或部分 DOM 元素放入画中画窗口，但目前仍处于实验阶段，兼容性和实用性有限，建议在实际项目中谨慎使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于画中画（Picture-in-Picture）的介绍及简单实现&quot;&gt;&lt;a href=&quot;#关于画中画（Picture-in-Picture）的介绍及简单实现&quot; class=&quot;headerlink&quot; title=&quot;关于画中画（Picture-in-Picture）的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于xpath</title>
    <link href="https://sunjinkang.github.io/2024/11/22/65-about-xpath/"/>
    <id>https://sunjinkang.github.io/2024/11/22/65-about-xpath/</id>
    <published>2024-11-22T02:10:27.000Z</published>
    <updated>2025-06-17T07:27:40.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Xpath 是一种用在 XML 文档中定位元素的语言，同样也支持 HTML 元素的解析。这篇文章主要是关于HTML部分的内容，从这个名字可以看出来，Xpath是关于路径的，Xpath是通过路径查找元素。</p><h4 id="HTML中的Xpath"><a href="#HTML中的Xpath" class="headerlink" title="HTML中的Xpath"></a>HTML中的Xpath</h4><p><img src="/html.png" alt="html"><br><img src="/html-tree.png" alt="html-tree"></p><p>HTML是一种树形结构，HTML 是根节点，所有的其他元素节点都是从根节点发出的。其他的元素都是这棵树上的节点Node，每个节点还可能有属性和文本。<br>而路径就是指某个节点到另一个节点的路线。</p><p>我们一般的路径可以分为绝对路径和相对路径。Xpath中的绝对路径从 HTML 根节点开始算，相对路径从任意节点开始。<br>在浏览器中，我们可以直接复制需要节点的Xpath数据。<br><img src="/copy-path.png" alt="copy-path"><br>chrome浏览器中复制的相对路径会从举例最近的有id的元素开始找。<br><img src="/copy-path-result.png" alt="copy-path-result"><br>从上面这个路径我们可以看到，虽然能根据这个路径找到对应的目标元素，但是这里面有div[1]这种结构，即父节点下面的第一个div，这种路径并不是很可靠。所以，需要我们自己根据需要自定义Xpath数据。</p><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>绝对路径是从根节点/html开始往下，一层层的表示出来直到需要的节点为止，使用起来较为麻烦。这里就不多做介绍了，我们主要来看一下相对路径。</p><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>Xpath 中更常用的方式是相对路径定位方法，以“//”开头。相对路径可以从任意节点开始，不过一般会选取一个可以唯一定位到的元素作为起始节点，可以增加查找的准确性。</p><h5 id="定位语法"><a href="#定位语法" class="headerlink" title="定位语法"></a>定位语法</h5><p>| 表达式 | 说明    | 举例 |<br>| / |    从根节点开始选取 |    /html/div/span |<br>| // |    从任意节点开始选取 |    //input |<br>| . |    选取当前节点 |  |<br>| .. |    选取当前节点的父节点 |    //input/.. 会选取 input 的父节点 |<br>| @ |    选取属性，或者根据属性选取 |    //input[@data] 选取具备 data 属性的 input 元素 //@data 选取所有 data 属性 |<br>| * |    通配符，表示任意节点或任意属性 |  |</p><h5 id="常见的定位方法"><a href="#常见的定位方法" class="headerlink" title="常见的定位方法"></a>常见的定位方法</h5><h6 id="元素属性定位"><a href="#元素属性定位" class="headerlink" title="元素属性定位"></a>元素属性定位</h6><p>属性定位是通过 @ 符号指定需要使用的属性。</p><p>根据元素是否具备某个属性查找元素<br><img src="/at-sign.png" alt="at-sign"></p><p>根据属性是否等于某值查找元素<br><img src="/at-sign-1.png" alt="at-sign-1"></p><p><img src="/at-sign-2.png" alt="at-sign-2"><br>svg和path标签无法进行查找</p><p>注意，属性值必须要加引号，单双引号都可以。</p><h6 id="层级属性结合定位"><a href="#层级属性结合定位" class="headerlink" title="层级属性结合定位"></a>层级属性结合定位</h6><p>遇到某些元素无法精确定位的时候，可以查找其父级及其祖先节点，找到有确定的祖先节点后通过层级依次向下定位。<br>使用星号找不特定的元素；使用..找父级节点；使用//找某一类型的节点等等。</p><h6 id="使用谓语定位"><a href="#使用谓语定位" class="headerlink" title="使用谓语定位"></a>使用谓语定位</h6><p>谓语是 Xpath 中用于描述元素位置。主要有数字下标、最后一个子元素last()、元素下标函数position()，还可以通过position()的比较大小查找某个范围的元素。<br><img src="/at-sign-3.png" alt="at-sign-3"><br><img src="/at-sign-4.png" alt="at-sign-4"><br><img src="/at-sign-5.png" alt="at-sign-5"></p><h6 id="使用逻辑运算符"><a href="#使用逻辑运算符" class="headerlink" title="使用逻辑运算符"></a>使用逻辑运算符</h6><p>如果元素的某个属性无法精确定位到这个元素，我们还可以用逻辑运算符 and、or、| 进行运算定位。</p><p><img src="/at-sign-6.png" alt="at-sign-6"></p><p>注意：|是同时查找多个路径的。</p><h6 id="使用文本定位"><a href="#使用文本定位" class="headerlink" title="使用文本定位"></a>使用文本定位</h6><p>使用文本定位，是 Xpath 中的一大特色。可以通过 text()、string()方法获取元素节点的文本内容。<br>注意：text()和string()的区别在于text()只能获取当前节点的文本内容，string()可以获取当前节点内部所有元素节点的文本内容。<br><img src="/at-sign-7.png" alt="at-sign-7"><br>注意：使用string()查找的时候，在满足文本要求的前提下，查找的元素会把尽可能多的满足要求的节点都列出来，所以，如果需要查找具体的节点，要保证条件限制尽可能严格一点。</p><h6 id="使用部分匹配函数"><a href="#使用部分匹配函数" class="headerlink" title="使用部分匹配函数"></a>使用部分匹配函数</h6><p>Xpath 中有提供了几个函数，用来进行部分匹配。</p><p>| 函数    | 说明    | 举例 |<br>| contains |    选取属性或者文本包含某些字符 |    //div[contains(@id, ‘data’)] 选取 id 属性包含 data 的 div 元素，//div[contains(string(), ‘支付宝’)] 选取内部文本包含“支付宝”的 div 元素 |<br>| starts-with |    选取属性或者文本以某些字符开头 |    //div[starts-with(@id, ‘data’)] 选取 id 属性以 data 开头的 div 元素，//div[starts-with(string(), ‘银联’)] 选取内部文本以“银联”开头的 div 元素 |<br>| ends-with |    选取属性或者文本以某些字符开头    | //div[ends-with(@id, ‘require’)] 选取 id 属性以 require 结尾的 div 元素，//div[ends-with(string(), ‘支付’)] 选取内部文本以“支付”结尾的 div 元素 |</p><p><img src="/at-sign-8.png" alt="at-sign-8"></p><p><em>注意</em><br>兼容性和替代方案<br>需要注意的是，ends-with函数是XPath 2.0的语法，而一些浏览器可能只支持XPath 1.0。如果你在使用XPath 1.0的环境中遇到问题，可以使用以下替代方案：<br>//input[substring(@id, string-length(@id) - string-length(‘123’) + 1) = ‘123’]</p><h5 id="验证-Xpath"><a href="#验证-Xpath" class="headerlink" title="验证 Xpath"></a>验证 Xpath</h5><p>验证 xpath 有两种方法：</p><ul><li>在开发者工具的 Elements 中按Ctrl + F，在搜索框中输入 Xpath</li><li>在开发者工具的 Console 中使用 $x()<br><img src="/at-sign-9.png" alt="at-sign-9"></li></ul><h5 id="Xpath用处"><a href="#Xpath用处" class="headerlink" title="Xpath用处"></a>Xpath用处</h5><ul><li>在网络爬虫中，XPath是一个非常强大的工具，可以帮助我们精确定位和提取需要的数据。</li><li>在Web自动化测试中，XPath用于定位页面元素，执行点击、输入等操作，常用于Selenium等自动化测试框架中‌。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;Xpath 是一种用在 XML 文档中定位元素的语言，同样也支持 HTML 元素的解析。这篇文章主要是关于HTML部分的内容，从这个名字可以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何有效利用浏览器的Devtools？</title>
    <link href="https://sunjinkang.github.io/2024/11/15/72-about-how-to-use-devtools/"/>
    <id>https://sunjinkang.github.io/2024/11/15/72-about-how-to-use-devtools/</id>
    <published>2024-11-14T22:48:08.000Z</published>
    <updated>2025-06-17T07:30:03.050Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>相信大家应该都很熟悉 Chrome DevTools了，我们平时在开发中经常会用Devtools提供的丰富的功能和工具，帮助我们诊断和调试网页应用程序。本文将分享一些 Chrome DevTools 的调试技巧，在开发中提高效率。</p><h4 id="模拟接口响应和网页内容"><a href="#模拟接口响应和网页内容" class="headerlink" title="模拟接口响应和网页内容"></a>模拟接口响应和网页内容</h4><p>通过本地覆盖可以模拟接口返回值和响应头，无需 mock 数据工具，无需等待后端支持，快速复现在一些数据下的 BUG 等。在 DevTools 可以直接修改你想要的 Fetch/XHR 接口数据，还可以修改响应头，解决跨域等问题，不仅可以覆盖 Fetch/XHR，JS、CSS 等资源也可以。</p><p>下面是在 Network 面板快速模拟远程资源的内容和响应头的步骤：<br><img src="/override0.png" alt="override0"><br><img src="/override1.png" alt="override1"><br><img src="/override2.png" alt="override2"><br><img src="/override3.png" alt="override3"></p><p><em>设置本地覆盖步骤：</em></p><ul><li>打开 DevTools，导航至 Network 网络面板，右键单击要覆盖的请求，从下拉菜单中选择 Override content 或 Open in Sources panel。</li><li>如果是首次使用，未设置过本地覆盖文件目录，DevTools 会在顶部的操作栏中提示您选择一个文件夹来存储覆盖文件，并 “允许” 授予 DevTools 对其的访问权限（在 window 下选择了系统盘的文件夹测试发现用不了，可能是权限问题，建议选个非系统盘的文件夹）。</li><li>在 Sources 面板中修改数据，完成后按 Ctrl + S 保存，刷新页面，即可看见修改后的数据（被覆盖的资源在图标右下角会有个紫色的圆点）。</li><li>若要恢复使用服务上的数据，请导航到 Sources &gt; Overrides，可以点击取消 “Enable local overrides” 复选框，或者点击旁边的 Clear 图标，或者如上图演示中的单个删除。</li></ul><p><strong>注意：在Source面板中修改的数据一定要保存</strong></p><p><em>它是怎么工作的？</em><br>当你在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到您指定的文件夹中。<br>当你重新加载页面时，DevTools 会提供本地修改后的文件，而不是网络资源。所以在旧版本支持 Override 的版本中，也可以手动创建一个文件来覆盖内容。</p><h4 id="快速重发请求"><a href="#快速重发请求" class="headerlink" title="快速重发请求"></a>快速重发请求</h4><p>在联调接口或者排查 BUG 的时候，经常需要重新再发一次请求，如果要重新操作一次复杂的交互、重新输入一大堆参数时，这种方式会显得比较麻烦。<br>这时候就可以通过 Replay XHR 来快速重发请求</p><p><img src="/replay.png" alt="replay"></p><p><em>操作步骤：</em></p><ul><li>导航至 Network 网络面板，右击一个 XHR 请求，可以点击 Fetch/XHR 过滤。</li><li>点击 Replay XHR。</li></ul><h4 id="在-Console-中发请求"><a href="#在-Console-中发请求" class="headerlink" title="在 Console 中发请求"></a>在 Console 中发请求</h4><p>针对上面同样的场景，有时候我们需要修改请求头、入参再重新发起请求，那么 Replay XHR 就不支持了。<br>可以通过 Copy as fetch ，在控制台修改请求参数，发起请求</p><p><img src="/copy1.png" alt="copy1"><br><img src="/copy2.png" alt="copy2"></p><p><em>操作步骤：</em></p><ul><li>导航至 Network 网络面板，右击一个 XHR 请求，可以点击 Fetch/XHR 过滤。</li><li>点击 Copy -&gt; Copy as fetch。</li><li>导航至 Console 面板，Ctrl + v 粘贴。</li><li>修改内容，如接口 url、header、body， 然后按回车键即可发起请求。</li></ul><h4 id="Console-中的-符号"><a href="#Console-中的-符号" class="headerlink" title="Console 中的 $符号"></a>Console 中的 $符号</h4><p><em>$0-$4</em><br>当要在 Console 中在调试页面元素时，比如要获取元素的信息，此时就可以使用 4。<br>$0：当前选择的元素 ，**$1：上一次的引用，$2：**上上次的引用，一直到 $4</p><p><img src="/dollar1.png" alt="dollar1"></p><p><em>操作步骤：</em></p><ul><li>点击菜单栏第一个选择图标，或者使用快捷键 Ctrl + Shift + C 选择元素。</li><li>导航至 Console 面板，现在就可以使用 4，例如选择了两次，第一次选择的元素可以使用 1 访问，第二次选择的元素使用 0 访问。</li></ul><p><em>$ 和 $$</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(‘xxx’) 相当于 <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(‘xxx’)  </span><br><span class="line">$$(‘xxx’) 相当于 <span class="title class_">Array</span>.<span class="title function_">form</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorall</span>(‘xxx’))</span><br></pre></td></tr></table></figure><p><img src="/dollar2.png" alt="dollar2"></p><p><em>$_</em><br>调试的过程中，经常需要打印一些变量值，但是如果想查看上一次执行的结果，使用 $_ 是对上次执行结果的引用。</p><p><img src="/dollar3.png" alt="dollar3"></p><h4 id="Element-面板"><a href="#Element-面板" class="headerlink" title="Element 面板"></a>Element 面板</h4><p><em>隐藏 DOM Element</em><br>有时候我们想截图，但是想要隐藏图中的敏感信息，此时就可以隐藏元素或者直接删除对应的元素<br><em>一键展开所有 DOM</em><br>在调式 DOM Element 的时候，如果 DOM 层次比较深的情况下，一个个去展开就比较麻烦，我们可以使用快捷键 Alt + Click 一键展开该层下的所有 DOM</p><p><em>拖拽移动 DOM Element</em><br>当我们想看页面某一部分元素在不同的位置显示效果的时候，可以直接拖拽 DOM 元素调整位置，也可以使用键盘快捷键 Ctrl + 上下箭头。</p><h4 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h4><p>如果想要截取多屏很长的整个页面内容，系统自带的截图软件显然不支持，此时可以使用 command 命令截图</p><p><img src="/screenshot.png" alt="screenshot"></p><p><em>操作步骤：</em></p><ul><li>按 Ctrl + Shift + P 调出 command 命令</li><li>输入命令 capture full size screenshot 后回车。</li></ul><p><em>截图 command：</em></p><ul><li>截框选区域：capture area screenshot</li><li>截滚动全屏：capture full size screenshot</li><li>截选中的节点：capture node screenshot</li><li>截当前窗口内：capture screenshot<br>还有很多其他的命令，如切换主题 Switch to Dark theme，查看所有快捷键 Show shortcuts 等等。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本文介绍了 Chrome DevTools 的调试技巧和最新版本 Chrome 117 中的新功能，包括模拟接口响应和网页内容、快速重发请求、在 Console 中发请求、Console 中的快捷命令、条件断点、Element 面板以及截图命令，这些调试技巧有助于我们在开发中提高效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;相信大家应该都很熟悉 Chrome DevTools了，我们平时在开发中经常会用Devtools提供的丰富的功能和工具，帮助我们诊断和调试网</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何实现一个图片验证？</title>
    <link href="https://sunjinkang.github.io/2024/08/16/73-about-picture-validate/"/>
    <id>https://sunjinkang.github.io/2024/08/16/73-about-picture-validate/</id>
    <published>2024-08-16T07:05:58.000Z</published>
    <updated>2025-07-08T03:03:47.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大家都遇到过拖动某块拼图到对应的位置，拖到大致和缺口重合的位置之后，图片验证通过，可以进行后续的操作，那么这种效果是怎么实现的？下面我们来看一下具体的实现。</p><img src="/2024/08/16/73-about-picture-validate/demo.png" class title="demo"><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><p>CSS Sprite</p><blockquote><p>CSS Sprite，我们一般叫他雪碧图或精灵图，它是一种图像拼合技术。该方法是将小图标和背景图像合并到一张图片上，然后利用 css 的背景定位来显示需要显示的图片部分。</p></blockquote><p>精灵图的优点：</p><ul><li>多张图片合成一张，减少图片的字节 </li><li>减少网页的http请求，从而大大的提高页面的性能。<br>background-position<br>background-position有两个值，第一个值是水平位置，第二个值是垂直位置。即需要将背景图向右调的时候用正值，向左则为负值 同理将背景图上下调动的时候上是用负值，下是正值。<br>offsetLeft：该元素左外边框至窗口左边界的距离。<br>clientX：当事件被触发时鼠标指针相对于窗口左边界的水平坐标。<br>offsetX：当事件被触发时鼠标指针相对于所触发的标签元素的左内边框的水平坐标。<img src="/2024/08/16/73-about-picture-validate/client.png" class title="client"><img src="/2024/08/16/73-about-picture-validate/client-1.png" class title="client-1"></li></ul><h2 id="图片验证的原理"><a href="#图片验证的原理" class="headerlink" title="图片验证的原理"></a>图片验证的原理</h2><p>图片验证核心其实就是按钮的拖动，也就是位置的计算： </p><ul><li>设置两层图片，在下层图片中设置一个缺口，用于匹配验证 </li><li>将上层的图片通过background-position以及其他一些css样式设置，保证只露出和下层缺口一样大小和对应区域的显示 </li><li>通过js控制上层图片的移动，并对比上层图片和下层缺口的位置数据，当两者位置相同或在允许的误差范围内时，即判定验证成功。<img src="/2024/08/16/73-about-picture-validate/offset.png" class title="offset"></li></ul><h2 id="图片验证的实现"><a href="#图片验证的实现" class="headerlink" title="图片验证的实现"></a>图片验证的实现</h2><ul><li>html代码<ul><li><img src="/2024/08/16/73-about-picture-validate/html.png" class title="html"></li></ul></li><li>css代码<ul><li><img src="/2024/08/16/73-about-picture-validate/css.png" class title="css"></li></ul></li><li>js代码<ul><li><img src="/2024/08/16/73-about-picture-validate/js-1.png" class title="js-1"></li><li><img src="/2024/08/16/73-about-picture-validate/js-2.png" class title="js-2"></li></ul></li></ul><p><em>用户还可以根据自身需要进行进一步的扩展，比如设置多张验证图片，每次随机显示不同的图片等等。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信大家都遇到过拖动某块拼图到对应的位置，拖到大致和缺口重合的位置之后，图片验证通过，可以进行后续的操作，那么这种效果是怎么实现的？下面我们</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端定时器</title>
    <link href="https://sunjinkang.github.io/2024/05/15/63-about-fe-timer/"/>
    <id>https://sunjinkang.github.io/2024/05/15/63-about-fe-timer/</id>
    <published>2024-05-15T07:57:42.000Z</published>
    <updated>2025-06-17T07:27:01.676Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>之前做了一个需求，大致内容是：登录系统时，登录接口多次错误后，依据错误次数禁止登录的时间越来越长，即多次登录错误需要等待一定时间才能再次登录，在禁止时间内，即使登录信息填写正确，登录接口也会提示需要等待一定时间才能再次登录。要求在登录页面显示等待的时间，同时等待时间内，禁止使用登录按钮。相信大家看到这个需求之后，首先想到的就是使用定时器，接下来通过这个需求的具体实现来看一下关于定时器的使用及其他方案的探索。</p><h4 id="现有方案及实现过程中遇到的问题"><a href="#现有方案及实现过程中遇到的问题" class="headerlink" title="现有方案及实现过程中遇到的问题"></a>现有方案及实现过程中遇到的问题</h4><p>上面这个需求中，涉及到前端部分其实就是在页面根据接口返回的等待时间，显示一个倒计时，同时倒计时内，禁止使用登录功能。这个需求中其实主要的就是一个定时器，我们先抛开其他，单看定时器的实现。看到倒计时，大家一般都会使用setTimeout、setInterval，这里我选择了使用setTimeout。</p><p>一般来说，如果我们已经拿到了需要倒计时的时间，我们常见的做法可能是使用setTimeout，每秒减去一，把结果展示在页面上，就能实现一个简单的倒计时功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countDown</span> (num) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;timer_num&#x27;</span>).<span class="property">innerText</span> = num;</span><br><span class="line">  <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) <span class="title function_">countDown</span>(num-<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">countDown</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>但是，这里出现了一个问题：我们知道javascript是一种单线程语言，所以当我们停留在倒计时所在的浏览器标签页时，倒计时可以较为准确的显示时间，但是当我们开了一个新的标签页后，js需要优先处理新标签页的任务，也就意味着原先倒计时的任务优先级会降低，即可能出现两三秒才执行一次倒计时，很显然这时倒计时的时间是不准确的。</p><p>那我们应该怎么解决这个问题呢？请教了一位大佬以后，大佬给出的方案：已知倒计时的时间，同时可以获取当前计算机的时间，可以计算得到倒计时截止的时间，离开页面的倒计时无法控制，但是重新回到页面之后可以根据这个时间修正倒计时的时间，从而保证倒计时的准确性。</p><p>根据这个方案，修改后的倒计时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSecondTime</span> = (<span class="params">seconds</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() / <span class="number">1000</span>) + seconds;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleCountDown</span> = (<span class="params">endTime</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> currentTime = <span class="title function_">getSecondTime</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;timer_num&#x27;</span>).<span class="property">innerText</span> = (endTime - currentTime);</span><br><span class="line">  <span class="keyword">const</span> countDownTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(countDownTimer);</span><br><span class="line">    <span class="keyword">if</span> (currentTime &lt; endTime) &#123;</span><br><span class="line">      <span class="title function_">handleCountDown</span>(endTime);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;timer_num&#x27;</span>).<span class="property">innerText</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> totalTime = <span class="title function_">getSecondTime</span>(<span class="number">30</span>);</span><br><span class="line"><span class="title function_">handleCountDown</span>(totalTime);</span><br></pre></td></tr></table></figure><p>计时器实现以后，加上其他如获取等待时间的请求、等待时间内禁止登录的逻辑就可以了。</p><h4 id="实现倒计时的其他方案"><a href="#实现倒计时的其他方案" class="headerlink" title="实现倒计时的其他方案"></a>实现倒计时的其他方案</h4><p>上面的倒计时功能是使用setTimeout实现的，我们常用的一般就是setTimeout、setInterval。接下来我们看一个其他方式实现的倒计时。在介绍这种方式之前，我们需要先了解一下<em>requestAnimationFrame</em>。</p><blockquote><p>window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。<br>若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用 requestAnimationFrame()。requestAnimationFrame() 是一次性的。</p></blockquote><p>根据requestAnimationFrame的使用场景，我们可以得知，通过调用requestAnimationFrame也可以实现我们需要的定时器效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 更新时间差小于1秒，继续更新下一帧动画，回调函数再次调用 requestAnimationFrame</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()-date&lt;<span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>);</span><br><span class="line">    <span class="comment">// 时间差大于1秒并且倒计时未结束，更新页面的倒计时数据及更新时间，继续更新下一帧动画</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;timer_num&#x27;</span>).<span class="property">innerText</span> = a--;</span><br><span class="line">    date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是，在MDN文档中有这样一句话：</p><blockquote><p>为了提高性能和电池寿命，在大多数浏览器里，当 requestAnimationFrame() 运行在后台标签页或者隐藏的 <iframe> 里时，requestAnimationFrame() 会被暂停调用以提升性能和电池寿命。</iframe></p></blockquote><p>也就是说，如果我用requestAnimationFrame实现了一个定时器，当我离开定时器所在的标签页时，这个定时器就停了。。。从这一点上来说，是不是感觉还不如setTimeout和setInterval实现的定时器，但是我们可以通过一些修改来进行达到我们需要的效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSecondTime</span> = (<span class="params">seconds</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() / <span class="number">1000</span>) + seconds;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> endTime = <span class="title function_">getSecondTime</span>(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> requestId = <span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 更新时间差小于1秒，继续更新下一帧动画，回调函数再次调用 requestAnimationFrame</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()-date&lt;<span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    requestId = <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>);</span><br><span class="line">    <span class="comment">// 时间差大于1秒并且倒计时未结束，更新页面的倒计时数据及更新时间，继续更新下一帧动画</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> currentTime = <span class="title function_">getSecondTime</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (currentTime &lt;= endTime) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;timer_num&#x27;</span>).<span class="property">innerText</span> = (endTime - currentTime);</span><br><span class="line">      date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">      requestId = <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;timer_num&#x27;</span>).<span class="property">innerText</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">      <span class="title function_">cancelAnimationFrame</span>(requestId);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面通过系统时间的修正，同样达到了我们的预期。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>综上，我们可以通过多种方式实现定时器，但是纯前端的定时器会存在时间不准的问题，因此需要通过其他的方式进行修正。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;之前做了一个需求，大致内容是：登录系统时，登录接口多次错误后，依据错误次数禁止登录的时间越来越长，即多次登录错误需要等待一定时间才能再次登录</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于github个人博客使用giscus作为评论系统的操作说明</title>
    <link href="https://sunjinkang.github.io/2024/03/28/62-about-giscus/"/>
    <id>https://sunjinkang.github.io/2024/03/28/62-about-giscus/</id>
    <published>2024-03-28T06:05:44.000Z</published>
    <updated>2025-06-17T07:26:41.363Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>本人使用github搭建个人博客，博客框架为Hexo(5.4.2)，博客主题为Volantis(5.8.0)。为了便于使用，接入了Giscus作为评论系统。本篇文章主要说明接入Giscus的具体操作。</p><h4 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h4><ul><li>建一个公共库<br>由于Giscus使用github的discussion作为评论数据存放地，所以使用Giscus需要先建一个github的<em>公共仓库</em>，仓库名称可根据自己的需要进行设置。本文中评论的仓库名为comments。<br><img src="/create-repo.png" alt="create-repo"></li></ul><p><em>除了要求是个公共库之外，是否需要README、gitignore无具体要求</em></p><ul><li>开启公共库的discussion功能</li></ul><p>公共库 -&gt; Settings -&gt; General -&gt; Features -&gt; 勾选discussion<br><img src="/check-discussion.png" alt="check-discussion"></p><h4 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h4><ul><li>公共库安装Giscus<br>前往<a href="https://github.com/apps/giscus">这里</a>，点击 <font color="red">Install</font> 安装Giscus<br><img src="/install-giscus.png" alt="install-giscus"></li></ul><p>选择创建的公共库，将公共库与Giscus关联起来<br><img src="/giscus-select-repo.png" alt="giscus-select-repo"></p><h4 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h4><ul><li>Giscus官网配置<br>前往 <a href="https://giscus.app/">Giscus官网</a>，进行配置。<br><img src="/giscus-config1.png" alt="giscus-config1"><br>仓库名有三个前置条件，如果按照本文顺序进行安装，这里的检查会通过，否则会报错。如果报错了，请检查一下之前的配置是不是有哪里配置错了。</li></ul><p><img src="/giscus-config2.png" alt="giscus-config2"><br>可以根据自己的需要选择，本文默认选了第一个。</p><p><img src="/giscus-config3.png" alt="giscus-config3"><br>选择 Announcements 类型即可，官方也是这样推荐的，因为这样便于管理。</p><p>其他的配置使用默认配置就好。</p><p><img src="/giscus-config4.png" alt="giscus-config4"><br>在你想出现评论的位置添加上面的 <em>&lt;/script/&gt;</em> 标签。但如果已经存在带有giscus类的元素，则评论会被放在那里。<br>将上面标签中的数据填入项目中giscus配置的对应位置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">giscus:</span></span><br><span class="line">  <span class="comment"># 以下配置按照 yml 格式增删填写即可</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment">#data-repo</span></span><br><span class="line">  <span class="attr">repo-id:</span> <span class="comment">#data-repo-id</span></span><br><span class="line">  <span class="attr">category:</span> <span class="comment">#data-category</span></span><br><span class="line">  <span class="attr">category-id:</span> <span class="comment">#data-category-id</span></span><br><span class="line">  <span class="attr">mapping:</span> <span class="string">&quot;pathname&quot;</span></span><br><span class="line">  <span class="attr">reactions-enabled:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">emit-metadata:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><p>以上配置完成后，理论上项目中就可以使用评论系统了。</p><p>登录后，输入评论，可以查看公共库的discussion中是否有对应的评论<br><img src="/giscus-comments.png" alt="giscus-comments"><br><img src="/github-comments.png" alt="github-comments"><br>可以看到，博客中的评论在github的公共仓库中也存在，配置Giscus的评论系统成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;本人使用github搭建个人博客，博客框架为Hexo(5.4.2)，博客主题为Volantis(5.8.0)。为了便于使用，接入了Giscu</summary>
      
    
    
    
    
    <category term="blog, giscus" scheme="https://sunjinkang.github.io/tags/blog-giscus/"/>
    
  </entry>
  
  <entry>
    <title>关于docker的使用问题</title>
    <link href="https://sunjinkang.github.io/2024/01/29/61-about-docker-command/"/>
    <id>https://sunjinkang.github.io/2024/01/29/61-about-docker-command/</id>
    <published>2024-01-29T08:10:54.000Z</published>
    <updated>2025-06-17T07:26:18.090Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题：删除docker网络，报错存在active endpoints</strong><br>例如： while removing network: network docker_dms_net id ec0611ba3525 has active endpoints</p><p>解决方法：<br>第一种：<br>重启docker</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p>第二种：</p><ol><li><p>查看docker的网络</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure></li><li><p>查看网络的endpoint, 停止使用网络的container</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect &lt;network-id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// container-id 是Containers下对应的数据</span></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="comment">// &quot;Containers&quot;: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;6bcc2418b08f9e1446053ab2e95bda066ec79bcbb0bd200c5e5110dc9bc637a3&quot;: &#123;</span></span><br><span class="line"><span class="comment">//       &quot;Name&quot;: &quot;dms-mysql-2&quot;,</span></span><br><span class="line"><span class="comment">//       &quot;EndpointID&quot;: &quot;75b980a5ad52734eccf237b9bcef0b5c1b2b1426274326eb317d006aceac3eff&quot;,</span></span><br><span class="line"><span class="comment">//       &quot;MacAddress&quot;: &quot;02:42:ac:1f:86:03&quot;,</span></span><br><span class="line"><span class="comment">//       &quot;IPv4Address&quot;: &quot;172.31.134.3/24&quot;,</span></span><br><span class="line"><span class="comment">//       &quot;IPv6Address&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// container-id为：6bcc2418b08f9e1446053ab2e95bda066ec79bcbb0bd200c5e5110dc9bc637a3</span></span><br><span class="line">docker container stop &lt;container-id&gt;</span><br></pre></td></tr></table></figure></li></ol><p>停止所有使用network的container之后，删除network即可。如果存在其他报错，建议google一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;问题：删除docker网络，报错存在active endpoints&lt;/strong&gt;&lt;br&gt;例如： while removing network: network docker_dms_net id ec0611ba3525 has active endp</summary>
      
    
    
    
    
    <category term="docker" scheme="https://sunjinkang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>关于shadow dom及如何创建一个shadow dom</title>
    <link href="https://sunjinkang.github.io/2024/01/16/60-about-shadow-dom/"/>
    <id>https://sunjinkang.github.io/2024/01/16/60-about-shadow-dom/</id>
    <published>2024-01-16T03:20:34.000Z</published>
    <updated>2025-06-17T07:25:37.443Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Shadow-Dom？"><a href="#什么是Shadow-Dom？" class="headerlink" title="什么是Shadow Dom？"></a>什么是Shadow Dom？</h4><blockquote><p>一种连接节点的树状结构，代表标记文档（通常是在 web 文档中的 HTML 文档）中出现的不同元素和文本字符串。</p></blockquote><p>浏览器渲染文档的时候会给指定的DOM结构插入编写好的DOM元素，但是插入的Shadow DOM 会与主文档的DOM保持分离，也就是说Shadow DOM不存在于主DOM树上。并且Shadow DOM封装出来的DOM元素是独立的，外部的配置不会影响到内部，内部的配置也不会影响外部。</p><p><strong>Chrome中查看Shadow Dom</strong><br>1.打开浏览器控制台的设置选项<br>2.找到Preference -&gt; Elements，把show user anent shadow dom勾上<br><img src="/chrome-setting.png" alt="chrome-setting"><br><img src="/shadow-dom.png" alt="shadow-dom"></p><h4 id="Shadow-Dom的结构"><a href="#Shadow-Dom的结构" class="headerlink" title="Shadow Dom的结构"></a>Shadow Dom的结构</h4><p><img src="/shadow-dom-structure.png" alt="shadow-dom-structure"></p><p>Shadow DOM术语<br>Shadow host: Shadow DOM 附加到的常规 DOM 节点。<br>Shadow tree: Shadow DOM 内部的 DOM 树。<br>Shadow boundary: Shadow DOM 终止，常规 DOM 开始的地方。<br>Shadow root: Shadow tree的根节点。</p><h4 id="Shadow-DOM的作用及如何创建Shadow-DOM？"><a href="#Shadow-DOM的作用及如何创建Shadow-DOM？" class="headerlink" title="Shadow DOM的作用及如何创建Shadow DOM？"></a>Shadow DOM的作用及如何创建Shadow DOM？</h4><p><em>作用</em><br>Shadow DOM是独立于DOM树的，外部的样式不会影响到Shadow DOM的内部，并且使用一般的javascript操作dom的方式去操作Shadow DOM，都是不生效的。这种良好的密封性，使得Shadow DOM可以用于创建类似video这类的标签，方便开发。</p><p><em>如何创建Shadow DOM？</em></p><p>使用attachShadow给指定元素挂载一个shadow dom，并且返回对shadow root的引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;div id=<span class="string">&quot;first&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>第一个例子<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> firstParent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;first&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> shadow = firstParent.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">span.<span class="property">textContent</span> = <span class="string">&#x27;Shadow DOM&#x27;</span>;</span><br><span class="line">shadow.<span class="title function_">appendChild</span>(span);</span><br></pre></td></tr></table></figure><p><em>Shadow DOM mode</em><br>使用attachShadow()方法，必须传递一个对象作为参数来指定shadow DOM树的封装模式，否则将会抛出一个TypeError。该对象必须具有mode属性，值为 open 或 closed。</p><ul><li><p>open<br>shadow root 元素可以从 js 外部访问根节点，例如使用 shadowRoot:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shadowSpan = firstParent.<span class="property">shadowRoot</span>?.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line"><span class="comment">// shadowRoot 返回一个 ShadowRoot 对象</span></span><br></pre></td></tr></table></figure></li><li><p>closed<br>拒绝从 js 外部访问关闭的 shadow root 节点, shadowRoot 返回 null</p></li></ul><p><img src="/open-closed.png" alt="open-closed"></p><p><em>可以挂载Shadow DOM的标签</em></p><p><img src="/mount-tag.png" alt="mount-tag"></p><p>注意：如果将Shadow DOM挂载到不可挂载标签上，挂载会失败，控制台会报错。<br><img src="/mount-tag-error.png" alt="mount-tag-error"></p><h4 id="Shadow-DOM特点"><a href="#Shadow-DOM特点" class="headerlink" title="Shadow DOM特点"></a>Shadow DOM特点</h4><ul><li>外部的样式不影响Shadow DOM内部<br>Shadow DOM是游离在 DOM 树之外的节点树，所以文档上的CSS不会作用在他身上<br><img src="/normal-css.png" alt="normal-css"></li></ul><p>在MDN上提到了两种方式可以修改Shadow DOM的样式，感兴趣的可以自己去看看：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM#%E5%9C%A8%E5%BD%B1%E5%AD%90_dom_%E5%86%85%E5%BA%94%E7%94%A8%E6%A0%B7%E5%BC%8F">https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM#%E5%9C%A8%E5%BD%B1%E5%AD%90_dom_%E5%86%85%E5%BA%94%E7%94%A8%E6%A0%B7%E5%BC%8F</a></p><p>这里给Shadow DOM添加样式使用的是第二种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;div id=<span class="string">&quot;third&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>第三个例子<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> thirdParent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;third&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> shadow3 = thirdParent.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> span3 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用class的方式设置样式</span></span><br><span class="line">span3.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;text&quot;&gt;Shadow DOM3&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;style&gt;</span></span><br><span class="line"><span class="string">    .text &#123;</span></span><br><span class="line"><span class="string">      border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">      color: pink;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/style&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用伪类host设置样式</span></span><br><span class="line">span3.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;Shadow DOM3&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;style&gt;</span></span><br><span class="line"><span class="string">    :host &#123;</span></span><br><span class="line"><span class="string">      border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">      color: pink;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/style&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">shadow3.<span class="title function_">appendChild</span>(span3);</span><br></pre></td></tr></table></figure><p><img src="/css-class.png" alt="css-class"><br><img src="/css-host.png" alt="css-host"></p><ul><li><p>样式钩子<br>shadow dom还有一个非常重要的一个特点就是可以使用CSS自定义属性来创建样式占位符，并允许用户填充。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;div id=<span class="string">&quot;third&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>第三个例子<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// style</span></span><br><span class="line">#third &#123;</span><br><span class="line">  --<span class="attr">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> thirdParent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;third&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> shadow3 = thirdParent.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> span3 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line"></span><br><span class="line">span3.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;text&quot;&gt;Shadow DOM3&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;style&gt;</span></span><br><span class="line"><span class="string">    .text &#123;</span></span><br><span class="line"><span class="string">      border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">      color: var(--color);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/style&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p><img src="/css-hook.png" alt="css-hook"></p></li><li><p>使用伪类修改Shadow DOM的内部样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style</span></span><br><span class="line">input[placeholder=<span class="string">&#x27;user&#x27;</span>]::-webkit-input-placeholder &#123;</span><br><span class="line">  <span class="attr">color</span>: red;</span><br><span class="line">  font-<span class="attr">size</span>: 18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;input placeholder=<span class="string">&quot;user&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;user&quot;</span> name=<span class="string">&quot;user&quot;</span> type=<span class="string">&quot;text&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">placeholder</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">class</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/fake-class.png" alt="fake-class"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是Shadow-Dom？&quot;&gt;&lt;a href=&quot;#什么是Shadow-Dom？&quot; class=&quot;headerlink&quot; title=&quot;什么是Shadow Dom？&quot;&gt;&lt;/a&gt;什么是Shadow Dom？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;一种连接节点的树状</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于原子CSS引擎 -- unocss</title>
    <link href="https://sunjinkang.github.io/2024/01/06/59-about-unocss/"/>
    <id>https://sunjinkang.github.io/2024/01/06/59-about-unocss/</id>
    <published>2024-01-06T02:23:11.000Z</published>
    <updated>2025-06-17T07:25:23.639Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>unocss是一个即时的原子CSS引擎，它可以让你用简短的类名来控制元素的样式，而不需要写复杂的CSS代码。<br>之前有分享提到过Tailwind，不知道大家是否还记得，Tailwind就是一种原子化的CSS框架。</p><blockquote><p>原子化CSS是一种CSS架构方式，其支持小型、单一用途的类，其名称基于视觉功能。更加通俗的来讲，原子化CSS是一种新的CSS编程思路，它倾向于创建小巧且单一用途的class，并且以视觉效果进行命名。</p></blockquote><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>它可以让你快速地开发和原型设计，而不需要考虑CSS的细节。<br>它可以让你的CSS文件更小，因为它只生成你用到的工具类。<br>它可以让你的CSS更一致，因为它遵循一套预设的规则和变量。<br>它可以让你的CSS更灵活，因为它支持自定义工具类，变体，指令和图标。<br>它可以让你的CSS更易于维护，因为它避免了样式冲突和重复代码。</p><h4 id="unocss的安装和使用"><a href="#unocss的安装和使用" class="headerlink" title="unocss的安装和使用"></a>unocss的安装和使用</h4><p>unocss官网：<a href="https://unocss.dev/">https://unocss.dev/</a></p><p>unocss的安装(支持pnpm/yarn/npm)：</p><blockquote><p>pnpm add -D unocss</p></blockquote><p><strong>在Vite中使用unocss</strong><br>unocss支持多种打包工具，这里仅以vite进行介绍，其他的方式可以查看官方文档。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在vite配置文件中引入unocss</span></span><br><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UnoCSS</span> <span class="keyword">from</span> <span class="string">&#x27;unocss/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">UnoCSS</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 uno.config.ts 文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;unocss&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...UnoCSS options</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;virtual:uno.css&#x27;</span></span><br></pre></td></tr></table></figure><p>在Vite中使用unocss时，支持设置不同的mode：</p><ul><li>global(默认)<br>在这种模式下，需要在项目入口文件中添加 uno.css 的引入，同时这种模式支持热更新，生成的css样式会注入到index.html文件中。</li><li>vue-scoped<br>将生成的css注入<style scoped></li><li>svelte-scoped<br>g该模式已移入对应的svelte-scoped包中</li><li>shadow-dom</li><li>per-module (实验性的)<br>为每个模块生成对应的css样式</li><li>dist-chunk (实验性的)<br>为每个build的chunk文件生成css，对多页面应用更友好</li></ul><p><strong>react+unocss</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UnoCSS</span> <span class="keyword">from</span> <span class="string">&#x27;unocss/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">React</span>(),</span><br><span class="line">    <span class="title class_">UnoCSS</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果项目中使用了 <em>@unocss/preset-attributify</em>，需要把 tsc 从build命令中去除</li><li>如果项目中同时使用了 <em>@vitejs/plugin-react</em> 和 <em>@unocss/preset-attributify</em>，引入unocss插件的位置要放在 <em>@vitejs/plugin-react</em> 前面<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UnoCSS</span> <span class="keyword">from</span> <span class="string">&#x27;unocss/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">UnoCSS</span>(),</span><br><span class="line">    <span class="title class_">React</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>preset</strong></p><p>Presets是UnoCSS的核心功能，能够让开发更便利</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uno.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig, presetAttributify, presetUno &#125; <span class="keyword">from</span> <span class="string">&#x27;unocss&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="title function_">presetAttributify</span>(&#123; <span class="comment">/* preset options */</span>&#125;),</span><br><span class="line">    <span class="title function_">presetUno</span>(),</span><br><span class="line">    <span class="comment">// ...custom presets</span></span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：<br>如果presets的选项设置了具体值，默认preset会自动忽略。同时可以通过空数组的方式禁用默认preset。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uno.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;unocss&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">presets</span>: [], <span class="comment">// disable default preset</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    <span class="comment">// your custom rules</span></span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>官方提供的preset包：<a href="https://unocss.dev/presets/">https://unocss.dev/presets/</a><br>设置提供的preset包：<a href="https://unocss.dev/presets/community">https://unocss.dev/presets/community</a></p><p><em>定义自己的preset</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Preset</span>, definePreset &#125; <span class="keyword">from</span> <span class="string">&#x27;unocss&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">definePreset</span>(<span class="function">(<span class="params">options?: MyPresetOptions</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;my-preset&#x27;</span>,</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">variants</span>: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// uno.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;unocss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> myPreset <span class="keyword">from</span> <span class="string">&#x27;./my-preset&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="title function_">myPreset</span>(&#123; <span class="comment">/* preset options */</span> &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：规则名相同时，后面的会覆盖前面的规则。</p><h4 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h4><p>刚入手 unocss 不知道怎么写规则，可以参考官方（大佬 antfu）给出的 交互式文档，输入你想要的css样式，就可以获得对应的class名称</p><blockquote><p><a href="https://unocss.dev/interactive/">https://unocss.dev/interactive/</a></p></blockquote><p><img src="unocss.png" alt="unocss"></p><p><em>用法</em><br>基础使用：<br>可以依据自身需要，添加对应的class<br><img src="base.png" alt="base"></p><p>自定义规则：</p><ul><li>自定义类<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;unocss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    [<span class="string">&#x27;w-10&#x27;</span>, &#123; <span class="attr">width</span>: <span class="string">&#x27;10px&#x27;</span> &#125;]</span><br><span class="line">    [<span class="regexp">/^h-(\d)$/</span>, <span class="function">(<span class="params">[, d]</span>) =&gt;</span> (&#123; <span class="attr">height</span>: <span class="string">`<span class="subst">$&#123;d&#125;</span>px`</span> &#125;)],</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>静态快捷方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;unocss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">shortcuts</span>: [</span><br><span class="line">    &#123; <span class="string">&#x27;flex-center&#x27;</span>: <span class="string">&#x27;flex items-center justify-center&#x27;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>动态快捷方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;unocss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">shortcuts</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="regexp">/^base-border-(.*)$/</span>,</span><br><span class="line">      <span class="function">(<span class="params">match</span>) =&gt;</span> <span class="string">`border-1 border-style-dashed border-<span class="subst">$&#123;match[<span class="number">1</span>]&#125;</span>`</span>,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="vscode插件"><a href="#vscode插件" class="headerlink" title="vscode插件"></a>vscode插件</h4><p>unocss有自己的vscode插件：UnoCSS<br><img src="unocss-vscode.png" alt="unocss-vscode"></p><p>unocss插件支持提示<br><img src="vscode-1.png" alt="vscode-1"></p><p>页面上使用 unocss 提供的 class 带有虚线，并且能显示类名对应的样式内容<br><img src="vscode-2.png" alt="vscode-2"></p></style></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;unocss是一个即时的原子CSS引擎，它可以让你用简短的类名来控制元素的样式，而不需要写复杂的CSS代码。&lt;br&gt;之前有分享提到过Tail</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>diff算法 -- 快速对比</title>
    <link href="https://sunjinkang.github.io/2023/11/14/58-quick-contrast/"/>
    <id>https://sunjinkang.github.io/2023/11/14/58-quick-contrast/</id>
    <published>2023-11-14T11:51:24.000Z</published>
    <updated>2025-06-17T07:25:03.152Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>  前面我们说了diff算法里面的双端对比，主要是在vue2中使用。但在vue3中，使用了另一种比双端diff更快的算法 – 快速diff，今天我们来看一下快速diff的使用方式。</p><h4 id="快速diff的使用场景"><a href="#快速diff的使用场景" class="headerlink" title="快速diff的使用场景"></a>快速diff的使用场景</h4><ul><li>预处理前置节点</li><li>预处理后置节点</li><li>仅有新增节点</li><li>仅有卸载节点</li><li>新增、卸载、移动节点</li></ul><p>仅从上面这五种场景的字面意思上面我们大概能看出它们对应的处理情况，下面我们来看一下，每种场景具体的处理逻辑是怎么样的。（PS：为了便于理解，本文中的节点仅用数字表示）</p><h5 id="预处理前置节点与预处理后置节点"><a href="#预处理前置节点与预处理后置节点" class="headerlink" title="预处理前置节点与预处理后置节点"></a>预处理前置节点与预处理后置节点</h5><p><img src="/pre-handle.jpg" alt="pre-handle"></p><p>从上图我们可以看到，分别有一个新子节点的组和一个旧子节点的组，我们指定一个变量j来代表当前的索引值。</p><ul><li>预处理前置节点就是表示j从0开始处理当前的两个子节点组，从索引0开始分别对比新旧子节点组，相同的时候不做处理（本文中由于节点元素均为数字所以不做处理，实际使用算法时，根据情况做处理，比如更新旧节点）。索引加1，对比下一索引的节点，从上图里面看，下一索引位置的节点不同，所以前置节点的预处理结束。</li><li>预处理前置节点对比完之后进行预处理后置节点的对比，我们设置newEndIdx和oldEndIdx分别对应新旧子节点组的末尾索引，获取对应位置的子节点进行对比，如果相同，newEndIdx和oldEndIdx就减1，指向前一位继续对比，直到对应位置的子节点不相同。</li></ul><p>从上面这个图可以看出来，当我们经过预处理前置节点和预处理后置节点这两步之后，明显新节点组还剩余一个4，旧节点组已经对比完了，所以我们引入下一种场景：仅有新增节点.</p><p>vue3源码</p><h5 id="仅有新增节点"><a href="#仅有新增节点" class="headerlink" title="仅有新增节点"></a>仅有新增节点</h5><p>仅有新增的节点，我们实际上只需要把节点添加到对应位置去即可，从上一步来看，就是新节点组最后对比的不相同的节点的位置，也就是说放在newEndIdx的位置。对应到真实场景中，比如dom的处理时，是需要把新的节点挂载到newEndIdx+1上去，即newEndIdx+1的位置作为锚点。</p><p>上图中就是新节点组中的4，把它加到旧节点组的对应位置之后，对比就完成了，新旧两个节点组就一样了。</p><h5 id="仅有卸载节点"><a href="#仅有卸载节点" class="headerlink" title="仅有卸载节点"></a>仅有卸载节点</h5><p>仅有卸载节点，就是指，新节点组对比结束了，没有剩余未对比的元素，而旧节点组还有为对比的节点，即剩余的节点在新节点组中不存在，所以直接删除即可，即卸载dom节点。</p><h5 id="新增、卸载、移动节点"><a href="#新增、卸载、移动节点" class="headerlink" title="新增、卸载、移动节点"></a>新增、卸载、移动节点</h5><p><img src="/map-element.jpg" alt="map-element"><br>这种场景较为复杂，我们先从容易的动手，先删除后续不会用到的旧虚拟节点，比如上图的6，下面我们看一下怎么找到6这个位置的节点。</p><p>做法是构建一个新虚拟节点的key与其下标的映射，然后遍历未处理的旧虚拟节点数组，使其每一项访问前面映射的key得出其value，如果value是undefined就证明该虚拟节点在新虚拟节点数组中没有出现，需要删除。</p><p>删除用不到的节点之后，剩下可能的就是“移动”和“创建”两种操作。</p><p>vue3是利用“最长递增算法”求出最长递增序列，不满足最长递增子序列的节点就是需要移动的节点。<br>下面我们来看一下什么是最长递增子序列以及应该怎么使用达到我们的目的。</p><h4 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h4><h5 id="什么是最长递增子序列"><a href="#什么是最长递增子序列" class="headerlink" title="什么是最长递增子序列?"></a>什么是最长递增子序列?</h5><p>以数组每一项为开头，在数组中从前往后对比，前一项要比后一项小（即呈递增趋势），相等也不行，把找到的数拿出来构建的数组叫递增子序列，而“最长递增子序列”则是这些子序列中最长的那个。我们假定有数组【5,1,6,8,10】，那么它的最长递增子序列就是【5,6,8,10】和【1,6,8,10】</p><h5 id="查找最长递增子序列"><a href="#查找最长递增子序列" class="headerlink" title="查找最长递增子序列"></a>查找最长递增子序列</h5><p>查找最长递增子序列的方法有很多种，比如从后往前查找，前一项比当前项小时，子序列长度加1，如果前一项比当前项大或等于当前项时，再将前一项与当前项之后的每一项进行比较，直到数组比较结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> seq = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lis</span>(<span class="params">seq</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> valueToMax = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> len = seq.<span class="property">length</span></span><br><span class="line"><span class="comment">// 先构建格子，1填充</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">valueToMax[seq[i]] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> i = len - <span class="number">1</span> <span class="comment">//最后</span></span><br><span class="line"><span class="keyword">let</span> last = seq[i]</span><br><span class="line"><span class="keyword">let</span> prev = seq[i - <span class="number">1</span>] <span class="comment">// prev才是当前比较基值。 跳过最后一个，直接从倒数第二个开始比较，因为最后一个一定是1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">typeof</span> prev !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 从后往前，两两比较</span></span><br><span class="line"><span class="keyword">let</span> j = i <span class="comment">// 后值的下标</span></span><br><span class="line"><span class="keyword">while</span> (j &lt; len) &#123;</span><br><span class="line">last = seq[j]</span><br><span class="line"><span class="keyword">if</span> (prev &lt; last) &#123;</span><br><span class="line"><span class="comment">// 当前值比后面的值小</span></span><br><span class="line"><span class="keyword">const</span> currentMax = valueToMax[last] + <span class="number">1</span> <span class="comment">// 记录此时比较下的最大值，即后面值的最长子序列长度+1</span></span><br><span class="line"><span class="keyword">if</span> (currentMax &gt; valueToMax[prev]) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比较两个值的最长子序列长度，</span></span><br><span class="line"><span class="comment">如果 “后面值的子序列长度+1” 后比 当前值的子序列 长，</span></span><br><span class="line"><span class="comment">那么当前子序列长度重新赋值，取大的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">valueToMax[prev] = currentMax</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// valueToMax[prev] =valueToMax[prev] !== 1 ? valueToMax[prev] &gt; currentMax ? valueToMax[prev] : currentMax : currentMax</span></span><br><span class="line">&#125;</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">i--</span><br><span class="line">last = seq[i]</span><br><span class="line">prev = seq[i - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> lis = []</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (--len &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 从后往前找，1 -&gt; 2 -&gt; 3...</span></span><br><span class="line"><span class="keyword">const</span> n = seq[len]</span><br><span class="line"><span class="keyword">if</span> (valueToMax[n] === i) &#123;</span><br><span class="line">i++</span><br><span class="line">lis.<span class="title function_">unshift</span>(len)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> lis</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">lis</span>(seq)) <span class="comment">//得到的序列中的位置索引</span></span><br></pre></td></tr></table></figure><h5 id="最长递增子序列的使用"><a href="#最长递增子序列的使用" class="headerlink" title="最长递增子序列的使用"></a>最长递增子序列的使用</h5><p>我们为了便于说明，拿上面的第二张图来举例，上述四种场景的比较之后，我们得到了一个新旧节点之间的映射关系，目前新节点的元素是【6,4,5,8】,我们可以得到映射关系是【6,4,5,0】这个新数组的最长递增子序列是【1,2】,接下来，我们只需要从后往前一次做对比即可。</p><p>我们定义变量 i 记录位置，定义变量 j，记录最长递增子序列的位置，初始化为 1，</p><p>当 i = 3 时，位置值为 0，对应节点为 8，说明 8 是新增节点，直接挂载；</p><p>当 i = 2 时，位置值为 5，对应节点为 5，i = 2 处于最长递增子序列 j = 1 处， 因此无需移动直接跳过。一旦找到最长递增子序列元素，i 和 j 需同时往上移动；</p><p>当 i = 1 时，位置值为 4，对应节点为 5，i = 1 处于最长递增子序列当中 j = 0 处，因此无需移动直接跳过。i 和 j 同时再往上移动；</p><p>当 i = 0 时，位置值为 6，对应节点为 6，i = 0 不处于最长递增子序列中，因此该节点需要移动。</p><p>上述步骤执行结束后，可以看到旧节点已变更为新节点，变更结束。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;  前面我们说了diff算法里面的双端对比，主要是在vue2中使用。但在vue3中，使用了另一种比双端diff更快的算法 – 快速diff，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>diff算法 -- 双端对比</title>
    <link href="https://sunjinkang.github.io/2023/11/09/57-double-end-contrast/"/>
    <id>https://sunjinkang.github.io/2023/11/09/57-double-end-contrast/</id>
    <published>2023-11-09T05:27:17.000Z</published>
    <updated>2025-06-17T07:24:42.959Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>  diff算法，全称为difference算法，是一种用于比较和查找文本、源代码或任何字符串之间差异的算法。前端中在react、vue等中使用diff算法对比虚拟DOM树，进行虚拟DOM树的更新，进而完成真实DOM的更新，达到更新页面的效果。在vue2中使用的就是双端diff算法。</p><h4 id="什么是双端对比？"><a href="#什么是双端对比？" class="headerlink" title="什么是双端对比？"></a>什么是双端对比？</h4><blockquote><p>双端对比，即双端diff算法，一种同时对新旧两组子节点的两个端点进行比较的算法。<br>但就从上面这句话来看，可能有点抽象，可参考下面这张图片<br><img src="/double-end-contrast.png" alt="double-end-contrast"></p></blockquote><h4 id="双端对比的简单实现"><a href="#双端对比的简单实现" class="headerlink" title="双端对比的简单实现"></a>双端对比的简单实现</h4><h6 id="理想情况下的实现"><a href="#理想情况下的实现" class="headerlink" title="理想情况下的实现"></a>理想情况下的实现</h6><p>为了便于理解，我们先从理想情况下看怎么实现双端对比。上面提到了，双端对比需要从新旧两组子节点进行对比，所以需要四个索引值来分别指向新旧两组子节点的端点。本文中将其分别命名为newStartIdx, newEndIdx, oldStartIdx, oldEndIdx，由于本文仅是为了说明双端算法，为了便于理解说明，假定所有的节点均为数字数组中的元素，并进行比较，从代码层实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// newStartIdx 新数组的起始索引</span></span><br><span class="line"><span class="comment">// newEndIdx 新数组的结束索引</span></span><br><span class="line"><span class="comment">// newArray 新数组</span></span><br><span class="line"><span class="comment">// oldStartIdx 旧数组的起始索引</span></span><br><span class="line"><span class="comment">// oldEndIdx 旧数组的结束索引</span></span><br><span class="line"><span class="comment">// oldArray 旧数组</span></span><br><span class="line"><span class="keyword">let</span> oldStartIdx = <span class="number">0</span>, newStartIdx = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> oldEndIdx = oldArray.<span class="property">length</span> - <span class="number">1</span>, newEndIdx = newArray.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> oldStart = oldArray[oldStartIdx], newStart = newArray[newStartIdx]</span><br><span class="line"><span class="keyword">let</span> oldEnd = oldArray[oldEndIdx], newEnd = newArray[newEndIdx]</span><br><span class="line"><span class="keyword">if</span> (oldStart === newStart) &#123;&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newEnd) &#123;&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldStart === newEnd) &#123;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newStart) &#123;&#125;</span><br></pre></td></tr></table></figure><p>那么下面我们来看一下双端算法的具体实现，根据上面的图片，我们将对应数组元素转化为数字：</p><blockquote><p>[1, 2, 3, 4]<br>[4, 2, 1, 3]<br>按照图片中标识的先后顺序，我们可以得出下面的步骤：</p></blockquote><ol><li>比较<em>oldStartIdx</em>和<em>newStartIdx</em>指向的元素，元素不同，不可复用，什么都不用做</li><li>比较<em>oldEndIdx</em>和<em>newEndIdx</em>指向的元素，元素不同，不可复用，什么都不用做</li><li>比较<em>oldStartIdx</em>和<em>newEndIdx</em>指向的元素，元素不同，不可复用，什么都不用做</li><li>比较<em>oldEndIdx</em>和<em>newStartIdx</em>指向的元素，元素相同，可复用，需要移动元素</li></ol><p>代码层面变动如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldStartIdx = <span class="number">0</span>, newStartIdx = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> oldEndIdx = oldArray.<span class="property">length</span> - <span class="number">1</span>, newEndIdx = newArray.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> oldStart = oldArray[oldStartIdx], newStart = newArray[newStartIdx]</span><br><span class="line"><span class="keyword">let</span> oldEnd = oldArray[oldEndIdx], newEnd = newArray[newEndIdx]</span><br><span class="line"><span class="keyword">if</span> (oldStart === newStart) &#123;&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newEnd) &#123;&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldStart === newEnd) &#123;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newStart) &#123;</span><br><span class="line">  <span class="comment">// 省略移动元素的代码。。。</span></span><br><span class="line">  <span class="comment">// 更新索引值，指向下一个位置</span></span><br><span class="line">  oldEnd = oldArray[--oldEndIdx];</span><br><span class="line">  newStart = newArray[++newStartIdx];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行上面的操作之后，数组变更为：</p><blockquote><p>[4, 1, 2, 3]<br>[4, 2, 1, 3]<br>这时，oldArray的起始指向1，结束指向3；newArray的起始指向2，结束指向3。接下来重复进行上面的比对过程即可，由于是重复进行的逻辑，所以把对比的过程封装到一个while循环中：<br>这里需要注意，while循环的判断条件是起始索引小于结束索引，表明数组还没对比完，但这里会引申出其他问题，具体什么问题等一下再说，先往下看</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldStartIdx = <span class="number">0</span>, newStartIdx = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> oldEndIdx = oldArray.<span class="property">length</span> - <span class="number">1</span>, newEndIdx = newArray.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> oldStart = oldArray[oldStartIdx], newStart = newArray[newStartIdx]</span><br><span class="line"><span class="keyword">let</span> oldEnd = oldArray[oldEndIdx], newEnd = newArray[newEndIdx]</span><br><span class="line"><span class="keyword">while</span>(oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldStart === newStart) &#123;&#125; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newEnd) &#123;&#125; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldStart === newEnd) &#123;&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newStart) &#123;</span><br><span class="line">    <span class="comment">// 省略移动元素的代码。。。</span></span><br><span class="line">    <span class="comment">// 更新索引值，指向下一个位置</span></span><br><span class="line">    oldEnd = oldArray[--oldEndIdx];</span><br><span class="line">    newStart = newArray[++newStartIdx];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的数组经过一轮对比之后，重复双端对比的顺序：</p><ol><li>比较<em>oldStartId</em>x和<em>newStartIdx</em>指向的元素，元素不同，不可复用，什么都不用做</li><li>比较<em>oldEndIdx</em>x和<em>newEndIdx</em>指向的元素，元素相同，但由于都处于数组尾部，不需要移动，所以仅更新索引值即可（PS：在具体的代码处理中根据需要自己添加处理，本文仅作双端对比的说明）</li></ol><p>所以，代码变更如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldStartIdx = <span class="number">0</span>, newStartIdx = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> oldEndIdx = oldArray.<span class="property">length</span> - <span class="number">1</span>, newEndIdx = newArray.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> oldStart = oldArray[oldStartIdx], newStart = newArray[newStartIdx]</span><br><span class="line"><span class="keyword">let</span> oldEnd = oldArray[oldEndIdx], newEnd = newArray[newEndIdx]</span><br><span class="line"><span class="keyword">while</span>(oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldStart === newStart) &#123;&#125; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newEnd) &#123;</span><br><span class="line">    <span class="comment">// 省略需要添加的处理代码</span></span><br><span class="line">    oldEnd = oldArray[--oldEndIdx];</span><br><span class="line">    newEnd = newArray[--newEndIdx];</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldStart === newEnd) &#123;&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newStart) &#123;</span><br><span class="line">    <span class="comment">// 省略移动元素的代码。。。</span></span><br><span class="line">    <span class="comment">// 更新索引值，指向下一个位置</span></span><br><span class="line">    oldEnd = oldArray[--oldEndIdx];</span><br><span class="line">    newStart = newArray[++newStartIdx];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，oldArray的起始指向1，结束指向2；newArray的起始指向2，结束指向1。接下来，进行剩余部分的对比：</p><ol><li>比较<em>oldStartId</em>x和<em>newStartIdx</em>指向的元素，元素不同，不可复用，什么都不用做</li><li>比较<em>oldEndIdx</em>x和<em>newEndIdx</em>指向的元素，元素不同，不可复用，什么都不用做</li><li>比较<em>oldStartId</em>x和<em>newEndIdx</em>指向的元素，元素相同，可复用，需要更新索引和移动元素</li></ol><p>代码变更如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ....</span></span><br><span class="line"><span class="keyword">while</span>(oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldStart === newStart) &#123;&#125; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newEnd) &#123;</span><br><span class="line">    <span class="comment">// 省略需要添加的处理代码</span></span><br><span class="line">    <span class="comment">// 更新索引值，指向下一个位置</span></span><br><span class="line">    oldEnd = oldArray[--oldEndIdx];</span><br><span class="line">    newEnd = newArray[--newEndIdx];</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldStart === newEnd) &#123;</span><br><span class="line">    <span class="comment">// 省略移动元素的代码。。。</span></span><br><span class="line">    <span class="comment">// 更新索引值，指向下一个位置</span></span><br><span class="line">    oldStart = oldArray[++oldStartIdx];</span><br><span class="line">    newEnd = newArray[--newEndIdx];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newStart) &#123;</span><br><span class="line">    <span class="comment">// 省略移动元素的代码。。。</span></span><br><span class="line">    <span class="comment">// 更新索引值，指向下一个位置</span></span><br><span class="line">    oldEnd = oldArray[--oldEndIdx];</span><br><span class="line">    newStart = newArray[++newStartIdx];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面对比结束之后，仅剩余一个位置需要对比，由于该位置的元素相同，所以仅需要更新索引即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ....</span></span><br><span class="line"><span class="keyword">while</span>(oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldStart === newStart) &#123;</span><br><span class="line">    oldStart = oldArray[++oldStartIdx];</span><br><span class="line">    newStart = newArray[++newStartIdx];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newEnd) &#123;</span><br><span class="line">    <span class="comment">// 省略需要添加的处理代码</span></span><br><span class="line">    <span class="comment">// 更新索引值，指向下一个位置</span></span><br><span class="line">    oldEnd = oldArray[--oldEndIdx];</span><br><span class="line">    newEnd = newArray[--newEndIdx];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStart === newEnd) &#123;</span><br><span class="line">    <span class="comment">// 省略移动元素的代码。。。</span></span><br><span class="line">    <span class="comment">// 更新索引值，指向下一个位置</span></span><br><span class="line">    oldStart = oldArray[++oldStartIdx];</span><br><span class="line">    newEnd = newArray[--newEndIdx];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newStart) &#123;</span><br><span class="line">    <span class="comment">// 省略移动元素的代码。。。</span></span><br><span class="line">    <span class="comment">// 更新索引值，指向下一个位置</span></span><br><span class="line">    oldEnd = oldArray[--oldEndIdx];</span><br><span class="line">    newStart = newArray[++newStartIdx];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的对比之后，新旧两组数组已经变为拥有相同元素的数组。同时相信大家经过上面这个对比的过程之后，已经对双端对比的过程有了一个基本的了解，但是上面的例子中使用的数组实际上是有一定特殊性的，新旧两个数组拥有相同的元素，只是顺序不一样而已，而且数组的四个索引位置的数据刚好能满足将这个对比进行下去的条件，这只是一种理想情况，但在实际使用中，这种情况可能很少见，比如四个索引位置的元素各不相同怎么办？下面我们来看一下非理想情况下时，双端对比的处理</p><p>和上面类似，我们也用例子进行说明：<br>现有两个较多元素的新旧数组：</p><blockquote><p>[6, 8, 1, 2, 3, 4, 5, 7]<br>[4, 2, 7, 1, 4, 3, 5, 8]<br>从上面的例子可以看出初始时的四个索引位置对应的元素都不相同，针对这种情况，双端对比的处理方式是：查找新元素的首位在旧数组中的对应位置</p></blockquote><ol><li>能够找到新元素的首位在旧数组中的对应位置</li><li>找不到新元素的首位在旧数组中的对应位置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> index = oldArray.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item === newStart);</span><br><span class="line"><span class="comment">// 能够找到新元素的首位在旧数组中的对应位置</span></span><br><span class="line"><span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  <span class="comment">// 为了保证后续不在对该元素进行对比，将其设置为null</span></span><br><span class="line">  oldArray[index] = <span class="literal">null</span>;</span><br><span class="line">  newStart = newArray[++newStartIdx];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 找不到新元素的首位在旧数组中的对应位置</span></span><br><span class="line">  <span class="comment">// 因为oldArray中没有newStart对应的元素，因此需要自己创建一个新的元素然后将元素添加到数组中，具体代码不在添加，可根据实际需要添加</span></span><br><span class="line">  newStart = newArray[++newStartIdx];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>根据上面针对元素的查找，代码变更为：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldStart === <span class="literal">null</span>) &#123;</span><br><span class="line">    oldStart = oldQueue[++oldStartIdx];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === <span class="literal">null</span>) &#123;</span><br><span class="line">    oldEnd = oldQueue[--oldEndIdx];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStart === newStart) &#123;</span><br><span class="line">    oldStart = oldArray[++oldStartIdx];</span><br><span class="line">    newStart = newArray[++newStartIdx];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newEnd) &#123;</span><br><span class="line">    oldEnd = oldArray[--oldEndIdx];</span><br><span class="line">    newEnd = newArray[--newEndIdx];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStart === newEnd) &#123;</span><br><span class="line">    oldStart = oldArray[++oldStartIdx];</span><br><span class="line">    newEnd = newArray[--newEndIdx];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEnd === newStart) &#123;</span><br><span class="line">    oldEnd = oldArray[--oldEndIdx];</span><br><span class="line">    newStart = newArray[++newStartIdx];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = oldArray.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item === newStart);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// ......</span></span><br><span class="line">      oldArray[index] = <span class="literal">null</span>;</span><br><span class="line">      newStart = newArray[++newStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ......</span></span><br><span class="line">      newStart = newArray[++newStartIdx];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面的代码保证了非理想情况下的双端对比能够进行对比处理，但是我们在实际应用双端对比进行处理时，上面的while条件往往会产生问题，如果新旧数组的长度不一致，比如下面这种，那么当短数组对比结束时，长数组还没对比完成，但上面的代码根据while条件实际上已经不能再继续执行，这时候就需要做针对处理，保证对比的正确性</li></ol><blockquote><p>[6, 13, 8, 1, 2, 10, 9, 11, 12, 3, 4, 5, 7]<br>[4, 2, 7, 1, 4, 3, 5, 8]</p></blockquote><p>从while的条件中可以看出，实际上可以分为两种情况进行处理：</p><ol><li>旧数组对比结束，新数组未结束<br>将新数组中剩余未对比的元素移动到新数组的最新结束元素后</li><li>新数组对比结束，旧数组未结束<br>将旧数组中剩余元素删除</li></ol><p>使用双端对比的前提是需要双端连续可持续跳跃，所以双向链表可用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;  diff算法，全称为difference算法，是一种用于比较和查找文本、源代码或任何字符串之间差异的算法。前端中在react、vue等中</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>微信小游戏制作</title>
    <link href="https://sunjinkang.github.io/2023/09/04/56-weixin-mini-game/"/>
    <id>https://sunjinkang.github.io/2023/09/04/56-weixin-mini-game/</id>
    <published>2023-09-04T06:21:41.000Z</published>
    <updated>2025-06-17T07:24:27.531Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><h6 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h6><p>微信小游戏使用《小游戏可视化制作工具》进行制作开发。<a href="https://gamemaker.weixin.qq.com/#/">《小游戏可视化制作工具》</a>是一款web应用，可用于开发微信小游戏。以可视化的操作方式编辑游戏场景，使用积木作为脚本设计精灵的行为逻辑。</p><blockquote><p>《小游戏可视化制作工具》推荐使用Chrome浏览器或者最新的QQ浏览器打开。</p></blockquote><p>《小游戏可视化制作工具》支持微信扫码登录，创建的小游戏项目为开发者私人所有，无法跟他人共享或共同编辑。<br>《小游戏可视化制作工具》的账号密码登录为团队开发登录使用，暂未开放注册。</p><h6 id="小游戏编辑器介绍"><a href="#小游戏编辑器介绍" class="headerlink" title="小游戏编辑器介绍"></a>小游戏编辑器介绍</h6><p><img src="/weixin_idea.png" alt="weixin_idea"></p><p>概览编辑器，可分为8个区域，分别是：</p><ul><li>工具栏：添加素材，运行游戏，预览发布，搜索，保存退出等功能入口；</li><li>场景面板：添加/切换不同场景，如果游戏复杂可能存在多个场景，比如：不同关卡、开始界面、结束界面等等；</li><li>资源面板：管理当前项目的所有资源（包括精灵/声音/函数），资源管理器中的精灵可拖拽进入编辑区域生成一个新的图层精灵实例；</li><li>积木面板：用于控制精灵实例的积木脚本，积木是与资源一一对应的，一个资源的多个实例图层都会公用一套积木；</li><li>图层面板：管理当前场景中的精灵实例，已经在编辑区域有实例的精灵都是一个图层，在图层面板可以拖拽调整图层顺序，也可以打组成为容器（Ctrl+G）；</li><li>编辑区域：这里就是所见即所得的游戏界面！编辑区域与图层是一一对应的，我们可以选中区域中的精灵实例进行拖拽位置，调整大小等；</li><li>属性面板：由两块组成，当我们选择资源时，只显示资源属性，当我们选择图层时，同时显示图层属性和资源属性。每个图层都有自己的属性互不影响；</li><li>数据面板：对（全局/精灵私有）的变量/列表/表格/通知等数据进行管理</li></ul><h6 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h6><ol><li>在浏览器中打开制作工具</li><li>通过 [新建小游戏/复制示例/改编他人作品] 等方式创建一个游戏项目</li><li>导入素材，编辑场景，拖入积木，完善游戏</li><li>在电脑上运行调试</li><li>在移动端预览调试，也可以分享给他人体验</li><li>发布到MP平台，完成小游戏</li></ol><h6 id="游戏世界"><a href="#游戏世界" class="headerlink" title="游戏世界"></a>游戏世界</h6><p><em>精灵</em><br>在计算机图形学中，当一张二维图像集成进场景中，成为整个游戏的一部分时，这张图就被称为精灵（英：Sprite）</p><p><em>数字</em><br>数字也是一类特殊的精灵，它是由 “0-9” 十个数字及“-”和“.”组合形成的一个整体。使用也非常方便，可以通过以下这组积木进行实时动态修改。</p><blockquote><p>外观-「修改[?]的值为(n)」<br>外观-「将[?]的值增加(1)」</p></blockquote><p><em>文字</em><br>文字也是一类特殊的精灵，添加之后可以在图层属性面板修改：对齐方式、字体大小、行高、文字颜色。只能通过以下积木修改内容。</p><blockquote><p>外观-「修改[?]的内容为(你好)」</p></blockquote><h6 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h6><ul><li><p>工具栏</p><ul><li><p>作品设置<br><img src="/work_setting.png" alt="work_setting"><br>[适配模式] 我们可以调整在移动端的适配模式，推荐竖屏游戏使用宽度适配，横屏游戏使用高度适配<br>[使用默认资源进度条] 是否显示默认资源加载中的提示<br>[资源加载方式] 如果项目非常大并且多个场景，建议选择切换场景时加载，并且搭配[资源管理]插件一起使用，建议默认选择全部加载后启动<br>[分享标题] 设置一个好的分享标题可以吸引别人玩你的游戏，出现在小游戏分享给好友的卡片中，如不设置默认显示项目名<br>[分享缩略图] 分享图非常关键，无论是在预览时分享给好友，还是在社区，还是发布成独立小游戏，分享作品时该图片是给人的第一印象<br>[游戏说明] 游戏说明会出现在社区的项目页中，只有需要分享时才有必要设置该项</p></li><li><p>游戏适配<br>1、设计尺寸<br>目前通过可视化工具制作的游戏只能运行在微信小游戏端。官方设定的设计尺寸是：750<em>1334，也就是iPhone 7的尺寸。因此在iPhone 7的手机中，可以完美的展示制作工具中看到界面，不会有任何裁剪或者黑边。也会依照此比例，在其他设备上进行等比缩放。</em>循环滚动逻辑会改造为插件模式。*<br>2、适配方案</p><blockquote><p>设置背景图片的高度设计更高一点，为iPhone X的高度。或者将背景精灵纹理进行拉伸处理，这样能把黑边填充满。<br>设置适配模式为适配高度，将游戏等比缩放，假如iPhone X的高度是iPhone 7 的1.2倍，结果是将游戏等比放大1.2倍。但这种方法带来的问题是水平方向会裁剪，左右会失去一部分细节。<br>通过开启相对于场景布局来调整精灵在不同屏幕尺寸中的适配情况，无需过多的操作，只需要在场景中摆放完后选择开启想要的布局模式即可</p></blockquote></li></ul></li><li><p>资源管理<br>游戏素材是游戏的“原材料”，通常包含图片、文本、音频。图片又可分为：单图、帧动画等。</p></li></ul><p>在《小游戏可视化制作工具》中，游戏资源有以下几类</p><blockquote><p>[精灵] 最常用的资源，用途广泛甚至可以替代背景<br>[文字] 特殊的精灵，有两种文字类型，基础文字和带气泡背景的文字，常用于标题，按钮和提示等展示<br>[数字] 特殊的精灵，由0-9和.-两个符号组成，相当于特殊字体，常用于展示得分和其他数值变化<br>[背景] 特殊的精灵，每个场景只有一个且自动生成，并且不会超出屏幕区域，只适用于快速搭建小场景游戏<br>[容器] 多个精灵的组合层，本身也是独立的空精灵<br>[UI插件] 特殊的资源，自带一些行为属性，较为独立，部分积木无法影响到UI插件<br>[声音] 可以被积木引用并播放<br>[函数] 多个积木的合集，适用于需要在不同精灵多次使用相同积木组合的场合<br>游戏资源 = 素材 + 积木。换句话说可视化制作工具中的资源是具有积木逻辑的素材</p></blockquote><ul><li>系统素材<br>素材库包含：系统素材/我的素材/UI插件三个部分，官方提供了多个拥有自主版权的主题素材，如：《积木小Y》、《彩色飞机大战》等。</li></ul><p><em>素材库中的积木小Y是主要 文本/数字 等素材的导入入口，其中 [基础文字] 最为常用</em></p><ul><li><p>上传素材<br><img src="/upload.png" alt="upload"><br>使用上传素材需要切换到[我的素材]Tab页，同时针对上传的素材有特殊要求：</p></li><li><p>单图和音频：将素材拖拽扔进我的素材或者上传素材的上传区域即可</p></li><li><p>帧动画组：打开上传素材界面，并将帧动画组的素材名称规范命名为：xx1.png、xx2.png、xx3.png、xx4.png、xx5.png…，然后选中整个帧动画组整体拖拽扔进上传区域，即可自动生成帧动画组素材</p></li><li><p>数字：打开上传素材界面，将数字以规范命名为：xx1.png、xx2.png、xx3.png等，即可自动填充到对应的位置，也可以手动点击单个窗口上传对应的数字和字符，只有上传了负号和小数点的数字精灵，才支持负数和显示小数，否则只能显示正整数</p></li><li><p>文本框：打开上传素材界面，上传一张图片作为文本框的背景，还可以调整文本有效区域和真实图片之间的间距</p><ul><li><p>绘图：开发者可以自行对素材进行编辑修改或者创作一些简单的素材</p></li><li><p>录音：开发者可以创作个性的录音素材，并对素材进行剪辑等操作</p></li><li><p>绑定积木脚本：资源是和积木逻辑绑定的，每一个素材资源对应一套积木，关于积木脚本的详细信息可参考后续文章</p></li><li><p>资源的复用<br>除了从素材库添加资源时默认创建在当前场景中的图层实例，还可以从资源管理器直接拖拽“精灵素材”至当前的编辑区域，即可在当前“场景”添加一个精灵实例，并同时会生成一个对应的“图层”。<br>该实例是“精灵素材”资源的引用，将完全继承“精灵素材”的所有积木脚本。其属性会复制原始的“精灵素材”，可以在图层属性面板修改这些属性。</p></li><li><p>声音和音效<br>声音资源也是从素材库添加，声音分为 [音效] 和 [背景音乐] 两类，在资源库中他们名并没有实际的区别，上传声音素材时，时间过长的会被分类为背景音乐，较短的被分类为音效，可以通过选择全部主题，点击音效来播放预览系统提供的一些音效</p></li></ul></li></ul><p><em>声音是咖啡色的积木，总共只有5个相关的积木，我们推荐音效使用播放，背景音乐使用循环播放，在一些手机系统导致的声音暂停的情况下，我们会在重新进入小游戏时把背景音乐自动重启</em><br><em>在编辑游戏的过程中往往会反复调试音效，记得多使用资源面板中的替换音效功能而不是直接删除再添加，会省力的多</em></p><ul><li>场景管理<br>可以添加多个场景，并设置某一个场景为主场景，主场景并不一定是第一个场景，场景之间是通过积木「切换场景到XX」来互相跳转的，目前暂不支持场景的排序<br>和场景相关的积木：</li></ul><ol><li>「事件-当场景启动时」</li><li>「控制-切换场景到XX」</li><li>「控制-销毁XX」</li><li>「控制-重启当前场景」</li></ol><p>主场景<br>游戏首次加载的场景我们称为主场景(左上角有房子标识)。<br>在主场景中我们可以使用「当游戏开始时」积木作为启动事件，此事件只会触发一次。其他场景可通过「当场景启动时」作为启动事件。<br>这里推荐所有入口都用「当场景启动时」作为启动场景的入口事件，「当游戏开始时」这个积木使用限制较多，只推荐在做简单的demo时使用</p><ul><li>图层管理</li></ul><p>层级<br>图层的顺序影响精灵实例渲染的顺序，以及影响该实例对应的资源积木逻辑执行的顺序，所以管理好图层顺序也很重要，可以通过拖拽来调整图层层级顺序（不能拖动到背景层下方）</p><p>隐藏和锁定<br>图层面板选中图层后右键或者点右侧的菜单按钮会出现 [隐藏/锁定/删除] 三个操作：<br>[锁定] 图层的层级在编辑区域也会影响到下一层精灵的选中，我们可以暂时锁定上层的精灵，方便我们选中下一层，这里的锁定只会影响编辑，并不会对游戏运行过程产生影响<br>[隐藏] 我们也可以直接在图层面板隐藏对应的图层，也可以影响编辑区域中的选中关系，注意这里的隐藏会影响到游戏逻辑，隐藏是一个非常重的操作，如果该精灵是隐藏的，那么他将无法参与碰撞和被用户点击到<br>[删除] 删除图层操作只是将当前图层实例从当前场景中删除，并不会删除代码和对应的资源</p><p>摄像机<br>[设置XX为摄像机的世界区域] 摄像机的边界，摄像机不会移出超出该区域的部分，一般使用方法为在场景中放置一个大正方形作为区域并添加该积木，流程较为麻烦后续会优化该积木<br>[将XX移出摄像机镜头] 一般用于UI设置，需要成为UI的资源才有必要添加该积木<br>[设置摄像机的跟随对象为XX] 使用摄像机的主要目的，我们在制作RPG类型的游戏时有时候会需要把摄像机对准主角，主角始终会在游戏的中间<br>[设置摄像机的缩放比例] 设置摄像机缩放的比例，用于特写<br>[设置摄像机的缩放比例增加] 设置摄像机缩放的比例增减，常用于镜头抖动<br>[设置摄像机的偏移] 设置摄像机缩放的偏移，根据具体场景例如其他角色对话时使用<br>[设置摄像机的偏移增加] 设置摄像机缩放的偏移增减，常用于镜头抖动和来回移动对话</p><ul><li>属性<br>属性是精灵在画布上表现的数据体现，属性是和编辑区域看到的是一一对应的，在可视化制作工具里，属性分为图层属性和资源属性</li></ul><p>资源属性<br>当我们选中资源面板的资源时，我们就会显示资源属性，工具弱化了资源属性的功能和展示<br>大部分情况下，资源能设置的只有宽高和造型</p><p>通用属性<br><img src="/normal.png" alt="normal"></p><p>精灵特有属性<br><img src="/jingling.png" alt="jingling"></p><p>数字特有属性<br><img src="/number.png" alt="number"></p><p>文本特有属性<br>纯文本不支持部分属性如宽高或翻转，对话框文本由两个部分组成，修改宽高会修改对话框部分<br><img src="/text.png" alt="text"></p><p>容器特有属性<br><img src="/wrapper.png" alt="wrapper"></p><p>插件特有属性<br>每个插件都有自己定义的属性，各不同用</p><ul><li>数据管理<br>数据面板总共有4种类型，变量/列表/表格/通知，其中 [变量/列表/表格] 是一类，都分别有全局的和私有的两种类型，对应积木列表中的积木标签，而通知相关的积木则在控制和事件标签中。<br>[变量/列表/表格] 都有格子对应的取值积木，分别对应 [红色/橙色/黄色]<br>新建时需要选择是私有变量还是全局变量，<br>全部变量在整个游戏中是唯一的，一旦改变，任何读取全局变量的积木都会拿到最新的值。<br>局部变量局部变量是属于某个精灵个体的，并且精灵的克隆体也拥有其自己的局部变量。</li></ul><p><em>在大部分情况下我们都推荐使用全局变量，只有在当前精灵对象存在克隆体时，为了让每个克隆体单独拥有一份变量才需要设置</em></p><p>列表<br>建议只使用全局列表，除非克隆体需要使用</p><p>表格<br>表格通常是我们用来定义初始化参数用的，例如答题游戏的题目和选项，关卡的配置等</p><ul><li>积木脚本</li></ul><p>积木是可视化制作工具中承担非常重要的逻辑关联的一部分，我们采用事件头触发的模式竖向排列拼接积木，每个事件头被触发后才会执行内部的积木，如果是散落的积木则不会执行<br>这里有几个通用概念，大部分积木都会有主语的选择，当我们选主语为其他精灵时，我们就可以在当前精灵控制其他精灵<br>还有几个固定的选项:<br>自己: 指精灵自己，常用主语，一般积木都默认操作自己，也可以用来在克隆体启动时指代克隆体本身<br>创建者: 特指克隆体的创建者，在当克隆体被创建时使用，用于找到创建该克隆体的对象<br>随机: 只会在屏幕内随机，而不是真正的无限随机<br>手指: 指用户操作屏幕的触发坐标点<br>被碰撞者: 在发生碰撞时使用，在监听碰撞的事件里找到被碰撞的对象<br>X: 横坐标<br>Y: 纵坐标<br>边缘: 特指场景的边缘，通常就是屏幕看到的区域<br>子精灵: 容器特有的选项，通常用于控制被克隆的容器<br>阻塞动画: 部分动画积木具有等待的效果，必须等待动画完成才会往下执行</p><p>事件<br>丰富的事件钩子积木能快速简单的控制游戏流程，监听状态和输入<br>启动事件都是“头部积木”，只有启动事件被触发，其中包含的积木队列才会被依次执行。<br><img src="/event.png" alt="event"></p><p>逻辑<br><img src="/logic.png" alt="logic"></p><p>控制<br><img src="/control.png" alt="control"></p><p>运动<br><img src="/move.png" alt="move"></p><p>函数<br>函数是一系列积木的组合，由开发者自己创建，在当前项目使用<br>如果我们需要多次在不同的精灵里使用同一批积木时，例如敌人和主角的碰撞逻辑，敌人的销毁逻辑等，我们就需要自己创建一些函数来节省我们的积木，提高开发效率<br>并且函数具有传递参数的功能，当我们给函数增加参数并命名后，我们在调用函数时就可以给函数传递对应的参数来达到不同的效果</p><ul><li>碰撞系统</li></ul><p>碰撞描边<br>为了游戏性能，实际的计算不会去判断精灵的像素点是否相交，而是把它们简化为更简单的几个图形。这样做的目的是在碰撞性能与准确性之间保持一个平衡。另外值得注意的一个问题：是越复杂的图形碰撞计算越耗时，也意味着游戏可能会卡顿，所以在制作游戏的时候需要注意。为此编辑器提供了一个设置碰撞图形的功能。<br>系统默认是采用多边形的轮廓，程序会自动计算出来。如果想改变它。<br>往场景里面添加一个精灵，然后选中，在右侧的属性面板可以看到“调整碰撞轮廓”，可以手动去调整描边的类型与大小。<br><em>轮廓是跟随图层实例的，它的描边数据是保存在实例上，而不是对象上。</em></p><p>碰撞积木<br>在积木编辑区域，添加事件列表如下，在列表中选择“当精灵发生碰撞”事件<br>碰到边缘<br>碰到边缘比较简单，就是画布的边界。当这个条件满足的时候就会会触发这个事件的逻辑。<br>碰到精灵<br>当前精灵与其他精灵发生碰撞，也可以选择某一类精灵<br><em>下拉列表，可以跨场景选择到其他场景的精灵，但实际是不生效的。</em></p><p>碰撞与相交<br>相交：两个精灵的碰撞轮廓一直是有重叠区。<br>碰撞：如果两个精灵，从相离到相交，则记录为一次碰撞事件。碰撞事件触发后，两个精灵一直处于相交状态，则不会再次触发碰撞事件。直到两个精灵相离后再次相交。</p><ul><li>插件<br>插件分为两种，全局的和非全局的。像轮盘组件，可以在游戏场景中实例化多次的。而数据缓存，只能有一个全局实例，更像是一个库，只要打开一个开关，就可以使用它提供的功能。不像轮盘还要拖入到画布中实例化才可以使用。插件有两个入口，系统全局的在顶部菜单栏。另一种是在资源库中</li></ul><p><em>注意：不能给UI插件添加物理行为、碰撞事件监听等逻辑，会导致程序异常。</em></p><ul><li><p>固体行为<br>当给精灵添加固体行为的时候，就不能被穿透，可以当做地板或者墙壁使用。假如给A加上固体行为，B碰到A时会被挡住。但是这个行为使用是有场景限制的，必须配合其他行为一起使用。<br>固体行为使其他行为对对象产生反应，就好像它是不可逾越的障碍一样。具有这种行为的对象称为固体。它影响以下行为：<br>方向控制。被固体阻挡<br>平台角色。平台角色无法从下方跳至固体上方</p></li><li><p>跳跃穿透行为<br>当给精灵添加跳跃行为的时候，只能被单向穿透，可以当做特殊地板使用。假如给A加上跳跃穿透行为，B添加了平台角色行为，B跳跃或者横向跑动的时候可以穿过A，但B从高度下落碰到A时，则无法穿透A。这个行为使用有场景限制，必须配合平台角色行为一起使用。</p></li></ul><p><em>单独使用这个行为是没有任何意义，必须配合其他行为使用。</em></p><ul><li><p>平台角色行为<br>当给精灵添加平台角色行为的时候，添加此行为后，精灵可以在平台上跳跃、跑动，配合”固体”和”跳跃穿透”一起使用。<br>平台角色行为实现了侧视图“跳跃并运行”样式的移动。它支持斜坡，移动平台，“跳跃式”平台和任意重力角。<br>平台角色行为将落在具有“固体”或“跳跃穿透”的任何对象上。不同之处在于，平台角色可以从“跳跃穿透”下面跳到上面去，而从固体下跳会使角色反弹，穿透不了。</p></li><li><p>物理行为<br>物理从原来单纯的积木模式，切换行为插件模式。只有给精灵添加了物理行为才能使用物理相关的积木。 物理行为模拟现实的对象物理。它由Box2D驱动。<br>物理行为是相对复杂的。建议使用以下教程，以基本了解如何使用物理行为以及在开始使用物理行为之前要了解的一些要点：<br>物理：基础知识<br>物理：力，脉冲，扭矩和关节</p></li></ul><p><em>强烈建议完全通过物理行为（通过设置力，脉冲，转矩等）来控制物理对象，而不是尝试通过“设置位置”，“设置角度”等来操纵对象。</em></p><ul><li>方向控制行为<br>方向控制行为允许对象在默认情况下由箭头键控制的对角线上，下，左，右和对角线移动。在自顶向下视图游戏中控制玩家通常很有用。也可以将其设置为4个方向，或者简单地向上/向下或向左/向右移动，这对于拨片或滑块很有用。</li></ul><p><em>方向控制行为被具有固体行为的任何对象阻止。</em></p><ul><li><p>遮罩行为<br>遮罩用于规定精灵可渲染的范围，带有遮罩行为的精灵会使用约束框（也就是属性中遮罩类型的Size规定的范围创建一个渲染遮罩，该精灵的所有子精灵（容器的子元素）都会依据这个遮罩进行裁剪，遮罩范围外的将不会渲染。<br>简而言之，就是只绘制精灵的局部。</p></li><li><p>弹出行为<br>利用缓动（允许你以平滑的方式更改对象的属性）做的一个弹出特效行为，模拟游戏常用的动画弹窗。</p></li><li><p>缓动动画行为<br>“缓动动画”行为支持将精灵以特定缓动动画的方式移动到某个位置。它还支持以缓动动画的方式对精灵进行透明度修改、宽高调整以及比例缩放等功能。</p></li></ul><h4 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h4><ul><li>预览和体验：有50人上限的限制，但是最快速便捷，你可以选择下载二维码或者直接在微信右上角拉起分享给他人</li><li>发布到社区</li><li><a href="https://gamemaker.weixin.qq.com/doc/minigame/release.html#%E5%8F%91%E5%B8%83%E5%88%B0%E7%8B%AC%E7%AB%8B%E5%B0%8F%E6%B8%B8%E6%88%8F">发布到独立小游戏</a></li></ul><h4 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h4><p><a href="https://gamemaker.weixin.qq.com/doc/minigame/optimize.html">https://gamemaker.weixin.qq.com/doc/minigame/optimize.html</a></p><p>RPG类型的游戏：rpg游戏是角色扮演游戏类型，rpg是英文Role-Playing Game的缩写简称</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h4&gt;&lt;h6 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h6&gt;&lt;p&gt;微信小</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于埋点</title>
    <link href="https://sunjinkang.github.io/2023/08/09/55-burying-point/"/>
    <id>https://sunjinkang.github.io/2023/08/09/55-burying-point/</id>
    <published>2023-08-09T08:39:45.000Z</published>
    <updated>2025-06-17T07:24:12.564Z</updated>
    
    <content type="html"><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>假设你所在的公司有一个购物网站，想要分析不同用户的喜好偏向，预测商品销售情况等一些情况，这时就需要收集线上活动的用户行为的数据，并结合具体的指标进行分析。那么这些数据怎么收集？通常就可以通过埋点的方式解决类似的问题。</p><h6 id="什么是埋点？"><a href="#什么是埋点？" class="headerlink" title="什么是埋点？"></a>什么是埋点？</h6><p>埋点是一种常用的数据采集方法，是收集并记录用户行为数据的过程。</p><p>通过埋点收集用户行为的有效信息，用作统计页面加载和事件行为的数据支撑，比如访问量、点击率、跳出率等，同时埋点为数据运营提供基础，为未来的业务发展提供有力支持。</p><h6 id="埋点原则："><a href="#埋点原则：" class="headerlink" title="埋点原则："></a>埋点原则：</h6><p>1、获取目标数据；<br>2、获取当前版本情况；<br>    1）新功能使用情况是否符合预期；<br>    2）新功能对其他功能、整体是否有积极影响；<br>    3）运营活动目标群体特征获取；<br>    4）新增商业化目标监测。<br>3、为后续版本做数据支持。<br>    1）规划方向的用户行为分析；<br>    2）画像特征分析；<br>常见沟通过程以埋点文档为载体，以数据埋点评审为终结。</p><h6 id="埋点方式"><a href="#埋点方式" class="headerlink" title="埋点方式"></a>埋点方式</h6><p>埋点方式可以分为前端埋点和后端埋点，目前比较常见的前端埋点有：前端代码埋点、全埋点和可视化埋点。后端埋点通常指的就是后端代码埋点。</p><p>1、代码埋点：<br>实施人员：代码开发人员<br>优点：可以详细的设置某一个事件自定义属性，数据较为准确，比如：约定的id等属性；<br>缺点：时间、人力成本大，需要确定上传的数据，需要开发人员对代码进行修改；数据传输的时效性较差，因为涉及网络，甚至可能出现因为断网等原因导致数据无法上报。</p><p>2、可视化埋点：在可视化界面，点击具体点位做埋点配置；<br>实施人员：数据产品、数据分析师<br>优点：埋点只需业务同学接入，无需开发支持；<br>缺点：仅支持客户端行为。</p><p>可视化埋点的具体流程：</p><ul><li>手机APP嵌入开启可视化功能的SDK，通过WebSocket的方式和服务器、前端进行相互通信，SDK会定时收到服务器下发的页面请求；</li><li>然后会上报页面快照和界面因子信息到服务器，服务器收到信息后会根据界面因子信息对页面的每个元素进行分析，根据控件的类型来标记哪些页面元素是可以被埋点的；</li><li>最后将可埋点信息交给前端渲染，此时，前端Web页面上展示就的就是可以埋点的页面。</li><li>埋点人员在渲染出来的前端Web页面上进行框选，标记事件属性等进行埋点。</li><li>前端Web页面会将对应的埋点信息传递给服务器保存，SDK则会通过策略定时从服务器获取埋点信息。</li></ul><p>3、无埋点：又叫做全埋点，应用集成SDK，SDK自动监测用户所有行为。<br>定义：开发集成SDK后，SDK直接开始捕捉和检测用户在应用中的所有行为。<br>实施人员：数据产品、数据分析师<br>优点：<br>    1）无需开发，业务人员埋点即可；<br>    2）支持先上报数据，后进行埋点。<br>缺点：<br>    1）数据量大；<br>    2）多数有清空机制，超过n天，清空数据，无法追溯；<br>    3）仅仅支持客户端。<br><em>注：无埋点不是不埋点</em></p><p>注意：<br>全埋点和可视化埋点很像。从实际的实现上看，二者的区别就是：可视化埋点先通过界面配置哪些控件的操作数据需要收集；“无埋点”则是先尽可能收集所有的控件的操作数据，然后再通过界面配置哪些数据需要在系统里面进行分析。</p><p>“无埋点”相比可视化埋点的优点：<br>1、解决了数据“回溯”的问题，可视化埋点方案，只能从这一时刻向后收集数据，“无埋点”则从部署 SDK 的时候数据就一直都在收集了；<br>2、“无埋点”方案也可以自动获取很多启发性的信息，例如，“无埋点”可以告诉使用者这个界面上每个控件分别被点击的概率是多大，哪些控件值得做更进一步的分析等等。</p><p><img src="/bury_point_type.jpg" alt="bury-point-type"></p><h6 id="一些埋点工具"><a href="#一些埋点工具" class="headerlink" title="一些埋点工具"></a>一些埋点工具</h6><ul><li>百度统计</li><li>神策数据</li><li>FireBase</li><li>TalkingData</li></ul><h6 id="埋点数据采集遇到的问题："><a href="#埋点数据采集遇到的问题：" class="headerlink" title="埋点数据采集遇到的问题："></a>埋点数据采集遇到的问题：</h6><p>实时性：无网条件下产生的数据，无法实时上报；<br>完整性：部分数据无法采集，根据《用户隐私协议》和《欧盟通用数据保护条例》<br>异常：部分埋点，随版本升级变化，无法获取。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h6&gt;&lt;p&gt;假设你所在的公司有一个购物网站，想要分析不同用户的喜好偏向，预测商品销售情况等一些情况，这时就需要收集线上活动的用户行为的数据，并结合具体的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>进度条中同一文字颜色反差的实现</title>
    <link href="https://sunjinkang.github.io/2023/08/03/54-render-progress-text/"/>
    <id>https://sunjinkang.github.io/2023/08/03/54-render-progress-text/</id>
    <published>2023-08-03T07:19:59.000Z</published>
    <updated>2025-06-17T07:23:51.552Z</updated>
    
    <content type="html"><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>生活中，大家应该都遇到过进度条，有时候进度条的文字在进度条内部，当进度覆盖到文字的时候，会有一种反差，比如：同一个文字被进度覆盖的部分是白色字体，未被进度覆盖的是黑色字体，本文即是针对这种效果的实现。</p><span id="more"></span><h6 id="实现一：使用伪类"><a href="#实现一：使用伪类" class="headerlink" title="实现一：使用伪类"></a>实现一：使用伪类</h6><p><em>预置说明</em><br>content与attr（PS: 本文仅针对需要的使用方式进行说明，不做详细说明，感兴趣的可以前往<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/attr">mdn的attr</a>进行查看）</p><p>content<br>CSS 的 content CSS 属性用于在元素的 ::before 和 ::after 伪元素中插入内容。使用 content 属性插入的内容都是匿名的可替换元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;http://www.mozilla.org/en-US/&quot;</span>&gt;<span class="title class_">Home</span> <span class="title class_">Page</span>&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">a</span>::before &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="title function_">url</span>(<span class="attr">http</span>:<span class="comment">//www.mozilla.org/favicon.ico) &quot; MOZILLA: &quot;;</span></span><br><span class="line">  <span class="attr">font</span>:</span><br><span class="line">    x-small <span class="title class_">Arial</span>,</span><br><span class="line">    freeSans,</span><br><span class="line">    sans-serif;</span><br><span class="line">  <span class="attr">color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见用法：</p><blockquote><p>content: attr(属性名);</p></blockquote><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html code</span></span><br><span class="line">&lt;p data-foo=<span class="string">&quot;hello&quot;</span>&gt;world&lt;/p&gt;</span><br><span class="line"><span class="comment">// css code</span></span><br><span class="line"><span class="attr">p</span>:before &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="title function_">attr</span>(data-foo) <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// result</span></span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>注意：attr理论上可以单独使用，但由于浏览器兼容性问题，目前最好不要使用，本文中attr是与content一起使用，限制较小。<br><img src="/content_attr.png" alt="content_attr"></p><p>方案：使用content和attr可以获取标签中的属性，将进度条的文字同时放在标签的属性里面，再通过伪类和content、attr搭配，根据进度显示不同宽度，将新的文字覆盖到原有的底层文字之上，实现进度条文字反差的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;当前进度：18%&quot;</span>&gt;</span>当前进度：18%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: lightblue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: pre;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-bar</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18%</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-content);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/content-progress.png" alt="content进度条"></p><p><em>说明</em><br>该方案中的文字好像只能处于默认的左侧位置，使用伪类获取的内容文字无法位于中间，暂未找到解决办法</p><h6 id="方案二：使用双层元素层叠"><a href="#方案二：使用双层元素层叠" class="headerlink" title="方案二：使用双层元素层叠"></a>方案二：使用双层元素层叠</h6><p>方案：本质与方案一类似，只不过方案二是把两个元素叠在一起，元素内容相同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bottom&quot;</span>&gt;</span>当前进度：18%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-top&quot;</span>&gt;</span>当前进度：18%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: pre;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress-bottom</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">color</span>: lightblue;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress-top</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果与方案一相同</p><p><em>说明</em><br>方案二同样存在方案一的缺陷，文字只能位于左侧</p><p>上面两种方案都存在文字只能位于左侧的问题，但实际使用中往往文字是位于中间的，进而出现了方案三</p><h6 id="方案三：使用三层元素层叠-js计算"><a href="#方案三：使用三层元素层叠-js计算" class="headerlink" title="方案三：使用三层元素层叠+js计算"></a>方案三：使用三层元素层叠+js计算</h6><p>方案：实现方式与方案二类似，不过文字都位于进度条中间，并在两层元素之间又加了一层元素，新加的这层元素仅用于进度的渲染，同时通过js计算最上层的元素与进度区域的重合部分宽度，修改最上层元素的宽度，展示不同颜色的文字。<br>ps: 本文中未实现具体的js计算逻辑，可根据进度条总长度，文字区域长度等进行计算。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bottom&quot;</span>&gt;</span>当前进度：18%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-top&quot;</span>&gt;</span>当前进度：18%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: pre;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress-bottom</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">color</span>: lightblue;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress-top</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">19%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">56px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案三通过js的计算，在实现文字颜色反差的基础上进一步实现了文字的居中</p><h6 id="进度条插件的实现方案"><a href="#进度条插件的实现方案" class="headerlink" title="进度条插件的实现方案"></a>进度条插件的实现方案</h6><p>暂未发现。。。</p>]]></content>
    
    
    <summary type="html">&lt;h6 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h6&gt;&lt;p&gt;生活中，大家应该都遇到过进度条，有时候进度条的文字在进度条内部，当进度覆盖到文字的时候，会有一种反差，比如：同一个文字被进度覆盖的部分是白色字体，未被进度覆盖的是黑色字体，本文即是针对这种效果的实现。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>js中的void运算符</title>
    <link href="https://sunjinkang.github.io/2023/08/03/53-about-void/"/>
    <id>https://sunjinkang.github.io/2023/08/03/53-about-void/</id>
    <published>2023-08-03T05:42:02.000Z</published>
    <updated>2025-06-17T07:23:32.953Z</updated>
    
    <content type="html"><![CDATA[<h6 id="void运算符的作用"><a href="#void运算符的作用" class="headerlink" title="void运算符的作用"></a>void运算符的作用</h6><blockquote><p>void 运算符对给定的表达式进行求值，然后返回 undefined。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">void</span> expression</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="title function_">void</span>(expression)</span><br></pre></td></tr></table></figure><p>同时需要注意考虑 void 运算符的优先级（void优先级较高），以下加括号的表达式的例子可以帮助你清楚地理解 void 操作符的优先级：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;void运算符的作用&quot;&gt;&lt;a href=&quot;#void运算符的作用&quot; class=&quot;headerlink&quot; title=&quot;void运算符的作用&quot;&gt;&lt;/a&gt;void运算符的作用&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;void 运算符对给定的表达式进行求值，然后返回 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sunjinkang.github.io/2023/07/24/1-hello-world/"/>
    <id>https://sunjinkang.github.io/2023/07/24/1-hello-world/</id>
    <published>2023-07-24T09:24:46.208Z</published>
    <updated>2025-06-17T06:49:04.940Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="deploy产生如下错误的解决方法"><a href="#deploy产生如下错误的解决方法" class="headerlink" title="deploy产生如下错误的解决方法"></a>deploy产生如下错误的解决方法</h3><p>(1)使用hexo部署报错Error: Spawn failed<br>解决办法：删除.deploy_git文件夹 -&gt; 修改_config.yml文件中deploy的repository地址，修改为SSH方式 -&gt; 按顺序执行命令hexo clean、hexo generate、hexo deploy</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
