<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sun ...something</title>
  
  <subtitle>about what I have learned and some interesting things</subtitle>
  <link href="https://sunjinkang.github.io/atom.xml" rel="self"/>
  
  <link href="https://sunjinkang.github.io/"/>
  <updated>2014-07-01T02:48:07.000Z</updated>
  <id>https://sunjinkang.github.io/</id>
  
  <author>
    <name>Sun Jinkang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/thunks/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/thunks/</id>
    <published>2023-04-20T10:43:06.425Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var co = require('..');var assert = require('assert');function get(val, err, error) {  return function(done){    if (error) throw error;    setTimeout(function(){      done(err, val);    }, 10);  }}describe('co(fn)', function(){  describe('with no yields', function(){    it('should work', function(done){      co(function *(){      })(done);    })  })  describe('with one yield', function(){    it('should work', function(done){      co(function *(){        var a = yield get(1);        a.should.equal(1);      })(done);    })  })  describe('with several yields', function(){    it('should work', function(done){      co(function *(){        var a = yield get(1);        var b = yield get(2);        var c = yield get(3);        [a,b,c].should.eql([1,2,3]);      })(done);    })  })  describe('with many arguments', function(){    it('should return an array', function(done){      function exec(cmd) {        return function(done){          done(null, 'stdout', 'stderr');        }      }      co(function *(){        var out = yield exec('something');        out.should.eql(['stdout', 'stderr']);      })(done);    })  })  describe('when the function throws', function(){    it('should be caught', function(done){      co(function *(){        try {          var a = yield get(1, null, new Error('boom'));        } catch (err) {          err.message.should.equal('boom');        }      })(done);    })  })  describe('when an error is passed then thrown', function(){    it('should only catch the first error only', function(done){      co(function *() {        yield function (done){          done(new Error('first'));          throw new Error('second');        }      })(function(err){        err.message.should.equal('first');        done();      });    })  })  describe('when an error is passed', function(){    it('should throw and resume', function(done){      var error;      co(function *(){        try {          yield get(1, new Error('boom'));        } catch (err) {          error = err;        }        assert('boom' == error.message);        var ret = yield get(1);        assert(1 == ret);      })(done);    })  })  describe('with nested co()s', function(){    it('should work', function(done){      var hit = [];      co(function *(){        var a = yield get(1);        var b = yield get(2);        var c = yield get(3);        hit.push('one');        [a,b,c].should.eql([1,2,3]);        yield co(function *(){          hit.push('two');          var a = yield get(1);          var b = yield get(2);          var c = yield get(3);          [a,b,c].should.eql([1,2,3]);          yield co(function *(){            hit.push('three');            var a = yield get(1);            var b = yield get(2);            var c = yield get(3);            [a,b,c].should.eql([1,2,3]);          });        });        yield co(function *(){          hit.push('four');          var a = yield get(1);          var b = yield get(2);          var c = yield get(3);          [a,b,c].should.eql([1,2,3]);        });        hit.should.eql(['one', 'two', 'three', 'four']);      })(done);    })  })  describe('return values', function(){    describe('with a callback', function(){      it('should be passed', function(done){        var fn = co(function *(){          return [            yield get(1),            yield get(2),            yield get(3)          ];        });        fn(function(err, res){          if (err) return done(err);          res.should.eql([1,2,3]);          done();        });      })    })    describe('when nested', function(){      it('should return the value', function(done){        var fn = co(function *(){          var other = yield co(function *(){            return [              yield get(4),              yield get(5),              yield get(6)            ]          });          return [            yield get(1),            yield get(2),            yield get(3)          ].concat(other);        });        fn(function(err, res){          if (err) return done(err);          res.should.eql([1,2,3,4,5,6]);          done();        });      })    })  })  describe('when yielding neither a function nor a promise', function(){    it('should throw', function(done){      var errors = [];      co(function *(){        try {          var a = yield 'something';        } catch (err) {          errors.push(err.message);        }        try {          var a = yield 'something';        } catch (err) {          errors.push(err.message);        }        errors.length.should.equal(2);        var msg = 'yield a function, promise, generator, array, or object';        errors[0].should.include(msg);        errors[1].should.include(msg);      })(done);    })  })  describe('with errors', function(){    it('should throw', function(done){      var errors = [];      co(function *(){        try {          var a = yield get(1, new Error('foo'));        } catch (err) {          errors.push(err.message);        }        try {          var a = yield get(1, new Error('bar'));        } catch (err) {          errors.push(err.message);        }        errors.should.eql(['foo', 'bar']);      })(done);    })    it('should catch errors on .send()', function(done){      var errors = [];      co(function *(){        try {          var a = yield get(1, null, new Error('foo'));        } catch (err) {          errors.push(err.message);        }        try {          var a = yield get(1, null, new Error('bar'));        } catch (err) {          errors.push(err.message);        }        errors.should.eql(['foo', 'bar']);      })(done);    })    it('should pass future errors to the callback', function(done){      co(function *(){        yield get(1);        yield get(2, null, new Error('fail'));        assert(false);        yield get(3);      })(function(err){        err.message.should.equal('fail');        done();      });    })    it('should pass immediate errors to the callback', function(done){      co(function *(){        yield get(1);        yield get(2, new Error('fail'));        assert(false);        yield get(3);      })(function(err){        err.message.should.equal('fail');        done();      });    })    it('should catch errors on the first invocation', function(done){      co(function *(){        throw new Error('fail');      })(function(err){        err.message.should.equal('fail');        done();      });    })    describe('when no callback is provided', function(){      it('should rethrow', function(done){        var addProcessListeners = removeProcessListeners();        process.once('uncaughtException', function(err){          err.message.should.equal('boom');          addProcessListeners();          done();        })        co(function *(){          yield function (done) {            setImmediate(function () {              done(new Error('boom'));            })          }        })();      })      it('should rethrow on a synchronous thunk', function(done){        var addProcessListeners = removeProcessListeners();        process.once('uncaughtException', function(err){          err.message.should.equal('boom');          addProcessListeners();          done();        })        co(function *(){          yield function (done) {            done(new Error('boom'));          }        })();      })    })  })})function removeProcessListeners(){  // Remove mocha listeners first.  var listeners = process.listeners('uncaughtException');  process.removeAllListeners('uncaughtException');  return function addProcessListeners(){    listeners.forEach(function(listener){      process.on('uncaughtException', listener);    });  }}]]></content>
    
    
      
      
    <summary type="html">
var co = require(&#39;..&#39;);
var assert = require(&#39;assert&#39;);

function get(val, err, error) {
  return function(done){
    if (error) throw erro</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/regressions/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/regressions/</id>
    <published>2023-04-20T10:43:06.421Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var co = require('..');var assert = require('assert');describe('bugs', function(){  it('#92', function(done){    var addProcessListeners = removeProcessListeners();    process.once('uncaughtException', function(err){      err.message.should.equal('boom');      addProcessListeners();      done();    })    co(function *() {      yield function (done) {        done(new Error('boom'))      }    })(function(err) {      if (err) throw err;    });  })})function removeProcessListeners(){  // Remove mocha listeners first.  var listeners = process.listeners('uncaughtException');  process.removeAllListeners('uncaughtException');  return function addProcessListeners(){    listeners.forEach(function(listener){      process.on('uncaughtException', listener);    });  }}]]></content>
    
    
      
      
    <summary type="html">var co = require(&#39;..&#39;);
var assert = require(&#39;assert&#39;);

describe(&#39;bugs&#39;, function(){
  it(&#39;#92&#39;, function(done){
    var addProcessListener</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/recursion/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/recursion/</id>
    <published>2023-04-20T10:43:06.418Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var thunk = require('thunkify');var co = require('..');var fs = require('fs');var read = thunk(fs.readFile);describe('co() recursion', function(){  it('should aggregate arrays within arrays', function(done){    co(function *(){      var a = read('index.js', 'utf8');      var b = read('Makefile', 'utf8');      var c = read('package.json', 'utf8');      var res = yield [a, [b, c]];      res.should.have.length(2);      res[0].should.include('exports');      res[1].should.have.length(2);      res[1][0].should.include('test');      res[1][1].should.include('devDependencies');    })(done);  })  it('should aggregate objects within objects', function(done){    co(function *(){      var a = read('index.js', 'utf8');      var b = read('Makefile', 'utf8');      var c = read('package.json', 'utf8');      var res = yield {        0: a,        1: {          0: b,          1: c        }      };      res[0].should.include('exports');      res[1][0].should.include('test');      res[1][1].should.include('devDependencies');    })(done);  })})]]></content>
    
    
      
      
    <summary type="html">
var thunk = require(&#39;thunkify&#39;);
var co = require(&#39;..&#39;);
var fs = require(&#39;fs&#39;);

var read = thunk(fs.readFile);

describe(&#39;co() recursion&#39;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/receiver/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/receiver/</id>
    <published>2023-04-20T10:43:06.414Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var thunk = require('thunkify');var co = require('..');var fs = require('fs');var read = thunk(fs.readFile);var assert = require('assert');var ctx = {  foo: 'bar'};describe('co(receiver).call(ctx)', function(){  it('should set immediate gen receiver', function(done){    co(function *(){      assert(ctx == this);    }).call(ctx, done);  })  it('should set delegate generator receiver', function(done){    function *bar() {      assert(ctx == this);    }    function *foo() {      assert(ctx == this);      yield bar;    }    co(function *(){      assert(ctx == this);      yield foo;    }).call(ctx, done);  })  it('should set function receiver', function(done){    function foo(done) {      assert(this == ctx);      done();    }    co(function *(){      assert(ctx == this);      yield foo;    }).call(ctx, done);  })  it('should set join delegate generator receiver', function(done){    function *baz() {      assert(ctx == this);    }    function *bar() {      assert(ctx == this);    }    function *foo() {      assert(ctx == this);    }    co(function *(){      assert(ctx == this);      yield [foo, bar, baz];    }).call(ctx, done);  })  it('should set join function receiver', function(done){    function baz(done) {      assert(ctx == this);      done();    }    function bar(done) {      assert(ctx == this);      done();    }    function foo(done) {      assert(ctx == this);      done();    }    co(function *(){      assert(ctx == this);      yield [foo, bar, baz];    }).call(ctx, done);  })})describe('co(receiver)(args...)', function(){  it('should pass arguments to the receiver', function(done){    co(function *(a, b, c){      assert(a == 1);      assert(b == 2);      assert(c == 3);    })(1, 2, 3, done);  })  it('should not pass the callback to the receiver', function(done){    co(function *(a, b, c){      assert(arguments.length == 3);    })(1, 2, 3, done);  })  it('should work when less arguments are passed than expected', function(done){    co(function *(a, b, c){      assert(a == 1);      assert(arguments.length == 1);    })(1, done);  })  it('should work without a callback', function(){    co(function *(a, b, c){      assert(a == 1);      assert(arguments.length == 1);    })(1);  })})]]></content>
    
    
      
      
    <summary type="html">
var thunk = require(&#39;thunkify&#39;);
var co = require(&#39;..&#39;);
var fs = require(&#39;fs&#39;);
var read = thunk(fs.readFile);
var assert = require(&#39;asser</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/promises/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/promises/</id>
    <published>2023-04-20T10:43:06.411Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var co = require('..');var assert = require('assert');var bluebird = require('bluebird');function getPromise(val, err) {  return new bluebird(function (resolve, reject) {    if (err) reject(err);    else resolve(val);  });}describe('co(fn)', function(){  describe('with one promise yield', function(){    it('should work', function(done){      co(function *(){        var a = yield getPromise(1);        a.should.equal(1);      })(done);    })  })  describe('with several promise yields', function(){    it('should work', function(done){      co(function *(){        var a = yield getPromise(1);        var b = yield getPromise(2);        var c = yield getPromise(3);        [a,b,c].should.eql([1,2,3]);      })(done);    })  })  describe('when a promise is rejected', function(){    it('should throw and resume', function(done){      var error;      co(function *(){        try {          yield getPromise(1, new Error('boom'));        } catch (err) {          error = err;        }        assert('boom' == error.message);        var ret = yield getPromise(1);        assert(1 == ret);      })(done);    })  })})]]></content>
    
    
      
      
    <summary type="html">
var co = require(&#39;..&#39;);
var assert = require(&#39;assert&#39;);
var bluebird = require(&#39;bluebird&#39;);

function getPromise(val, err) {
  return new b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/objects/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/objects/</id>
    <published>2023-04-20T10:43:06.407Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var thunk = require('thunkify');var co = require('..');var fs = require('fs');var read = thunk(fs.readFile);describe('co(* -> yield {})', function(){  it('should aggregate several thunks', function(done){    co(function *(){      var a = read('index.js', 'utf8');      var b = read('Makefile', 'utf8');      var c = read('package.json', 'utf8');      var res = yield {        a: a,        b: b,        c: c      };      Object.keys(res).should.have.length(3);      res.a.should.include('exports');      res.b.should.include('test');      res.c.should.include('devDependencies');    })(done);  })  it('should noop with no args', function(done){    co(function *(){      var res = yield {};      Object.keys(res).should.have.length(0);    })(done);  })  it('should ignore non-thunkable properties', function(done){    co(function *(){      var foo = {        name: { first: 'tobi' },        age: 2,        address: read('index.js', 'utf8'),        tobi: new Pet('tobi'),        now: new Date      };      var res = yield foo      res.name.should.eql({ first: 'tobi' });      res.age.should.equal(2);      res.tobi.name.should.equal('tobi');      res.now.should.equal(foo.now);      res.address.should.include('exports');    })(done);  })  it('should preserve key order', function(done){    function timedThunk(time){      return function(cb){        setTimeout(cb.bind(null,null,0), time);      }    }        co(function *(){      var before = {        sun: timedThunk(30),        rain: timedThunk(20),        moon: timedThunk(10)      };      var after = yield before;      var orderBefore = Object.keys(before).join(',');      var orderAfter = Object.keys(after).join(',');      orderBefore.should.equal(orderAfter);    })(done);  })})function Pet(name) {  this.name = name;  this.something = function(){};}]]></content>
    
    
      
      
    <summary type="html">
var thunk = require(&#39;thunkify&#39;);
var co = require(&#39;..&#39;);
var fs = require(&#39;fs&#39;);

var read = thunk(fs.readFile);

describe(&#39;co(* -&gt; yield {</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/generators/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/generators/</id>
    <published>2023-04-20T10:43:06.403Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var co = require('..');var assert = require('assert');function sleep(ms) {  return function(done){    setTimeout(done, ms);  }}function *moreWork(calls) {  calls.push('three');  yield sleep(50);  calls.push('four');}function *work() {  var calls = [];  calls.push('one');  yield sleep(50);  calls.push('two');  yield moreWork(calls);  calls.push('five');  return calls;}describe('co(fn)', function(){  describe('with a generator', function(){    it('should wrap with co()', function(done){      co(function *(){        var calls = yield work();        calls.should.eql(['one', 'two', 'three', 'four', 'five']);        var a = work();        var b = work();        var c = work();        var calls = yield [a, b, c];        calls.should.eql([          [ 'one', 'two', 'three', 'four', 'five' ],          [ 'one', 'two', 'three', 'four', 'five' ],          [ 'one', 'two', 'three', 'four', 'five' ] ]);      })(done);    })    it('should catch errors', function(done){      co(function *(){        yield function *(){          throw new Error('boom');        }();      })(function(err){        assert(err);        assert(err.message == 'boom');        done();      });    })  })})]]></content>
    
    
      
      
    <summary type="html">
var co = require(&#39;..&#39;);
var assert = require(&#39;assert&#39;);

function sleep(ms) {
  return function(done){
    setTimeout(done, ms);
  }
}

fun</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/generator-functions/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/generator-functions/</id>
    <published>2023-04-20T10:43:06.400Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var co = require('..');var assert = require('assert');function sleep(ms) {  return function(done){    setTimeout(done, ms);  }}function *work() {  yield sleep(50);  return 'yay';}describe('co(fn)', function(){  describe('with a generator function', function(){    it('should wrap with co()', function(done){      co(function *(){        var a = yield work;        var b = yield work;        var c = yield work;        assert('yay' == a);        assert('yay' == b);        assert('yay' == c);        var res = yield [work, work, work];        res.should.eql(['yay', 'yay', 'yay']);      })(done);    })    it('should catch errors', function(done){      co(function *(){        yield function *(){          throw new Error('boom');        };      })(function(err){        assert(err);        assert(err.message == 'boom');        done();      });    })  })})]]></content>
    
    
      
      
    <summary type="html">
var co = require(&#39;..&#39;);
var assert = require(&#39;assert&#39;);

function sleep(ms) {
  return function(done){
    setTimeout(done, ms);
  }
}

fun</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/arrays/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/arrays/</id>
    <published>2023-04-20T10:43:06.397Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var thunk = require('thunkify');var co = require('..');var fs = require('fs');var read = thunk(fs.readFile);describe('co(* -> yield [])', function(){  it('should aggregate several thunks', function(done){    co(function *(){      var a = read('index.js', 'utf8');      var b = read('Makefile', 'utf8');      var c = read('package.json', 'utf8');      var res = yield [a, b, c];      res.should.have.length(3);      res[0].should.include('exports');      res[1].should.include('test');      res[2].should.include('devDependencies');    })(done);  })  it('should noop with no args', function(done){    co(function *(){      var res = yield [];      res.should.have.length(0);    })(done);  })})]]></content>
    
    
      
      
    <summary type="html">
var thunk = require(&#39;thunkify&#39;);
var co = require(&#39;..&#39;);
var fs = require(&#39;fs&#39;);

var read = thunk(fs.readFile);

describe(&#39;co(* -&gt; yield [</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/arguments/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/test/arguments/</id>
    <published>2023-04-20T10:43:06.394Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var co = require('..');var assert = require('assert');describe('co()(args...)', function(){  it('should not pass the thunk as an arguments', co(function *(){    assert.equal(arguments.length, 0);  }))  it('should not pass error for nil first argument', function(done){    co(function *(i){      assert.equal(i, 0);    })(0, done);  });})]]></content>
    
    
      
      
    <summary type="html">
var co = require(&#39;..&#39;);
var assert = require(&#39;assert&#39;);

describe(&#39;co()(args...)&#39;, function(){
  it(&#39;should not pass the thunk as an argume</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/streams/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/streams/</id>
    <published>2023-04-20T10:43:06.374Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var http = require('http');var co = require('..');var url = process.argv[2] || 'http://nodejs.org';co(function *(){  var res = yield get(url);  console.log('-> %s', res.statusCode);  var buf;  var total = 0;  while (buf = yield read(res)) {    total += buf.length;    console.log('\nread %d bytes (%d total):\n%j', buf.length, total, buf.toString());  }  console.log('done');})()function get(url) {  console.log('GET %s', url);  return function(done){    var req = http.get(url);    req.once('response', function(res) {      done(null, res);    });    req.once('error', function(err) {      done(err);    });  };}function read(res) {  return function(done){    function onreadable() {      // got a "readable" event, try to read a Buffer      cleanup();      check();    }    function onend() {      // got an "end" event, send `null` as the value to signify "EOS"      cleanup();      done(null, null);    }    function onerror(err) {      // got an "error" event while reading, pass it upstream...      cleanup();      done(err);    }    function cleanup() {      res.removeListener('readable', onreadable);      res.removeListener('end', onend);      res.removeListener('error', onerror);    }    function check() {      var buf = res.read();      if (buf) {        // got a Buffer, send it!        done(null, buf);      } else {        // otherwise, wait for any of a "readable", "end", or "error" event...        // wow, streams2 kinda sucks, doesn't it?        res.on('readable', onreadable);        res.on('end', onend);        res.on('error', onerror);      }    }    // kick things off...    check();  };}]]></content>
    
    
      
      
    <summary type="html">
var http = require(&#39;http&#39;);
var co = require(&#39;..&#39;);
var url = process.argv[2] || &#39;http://nodejs.org&#39;;

co(function *(){
  var res = yield g</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/simple/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/simple/</id>
    <published>2023-04-20T10:43:06.370Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var co = require('..');var fs = require('fs');function read(file) {  return function(fn){    fs.readFile(file, 'utf8', fn);  }}co(function *(){  var a = yield read('.gitignore');  var b = yield read('Makefile');  var c = yield read('package.json');  console.log(a);  console.log(b);  console.log(c);})()]]></content>
    
    
      
      
    <summary type="html">
var co = require(&#39;..&#39;);
var fs = require(&#39;fs&#39;);

function read(file) {
  return function(fn){
    fs.readFile(file, &#39;utf8&#39;, fn);
  }
}

co(</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/return/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/return/</id>
    <published>2023-04-20T10:43:06.367Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var thunk = require('thunkify');var co = require('..');var fs = require('fs');var read = thunk(fs.readFile);// sequentialvar sizes = co(function *(){  var a = yield read('.gitignore');  var b = yield read('Makefile');  var c = yield read('package.json');  return [a.length, b.length, c.length];});sizes(function(err, res){  console.log(res);});// parallelvar sizes2 = co(function *(){  var a = read('.gitignore');  var b = read('Makefile');  var c = read('package.json');  return [    (yield a).length,    (yield b).length,    (yield c).length  ];})sizes2(function(err, res){  console.log(res);});]]></content>
    
    
      
      
    <summary type="html">
var thunk = require(&#39;thunkify&#39;);
var co = require(&#39;..&#39;);
var fs = require(&#39;fs&#39;);

var read = thunk(fs.readFile);

// sequential

var sizes </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/requests/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/requests/</id>
    <published>2023-04-20T10:43:06.363Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var request = require('request');var thunk = require('thunkify');var co = require('..');var get = thunk(request);var urls = [  'http://google.com',  'http://yahoo.com',  'http://cloudup.com',  'http://ign.com'];// sequentialco(function *(){  for (var i = 0; i < urls.length; i++) {    var url = urls[i];    var res = yield get(url);    console.log('%s -> %s', url, res[0].statusCode);  }})()// parallelco(function *(){  var reqs = urls.map(function(url){    return get(url);  });  var codes = (yield reqs).map(function(r){ return r.statusCode });  console.log(codes);})()]]></content>
    
    
      
      
    <summary type="html">
var request = require(&#39;request&#39;);
var thunk = require(&#39;thunkify&#39;);
var co = require(&#39;..&#39;);

var get = thunk(request);

var urls = [
  &#39;http</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/redis/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/redis/</id>
    <published>2023-04-20T10:43:06.360Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var thunk = require('thunkify');var redis = require('redis');var db = redis.createClient();var co = require('..');db.set = thunk(db.set);db.get = thunk(db.get);co(function *(){  yield db.set('foo', 'bar');  yield db.set('bar', 'baz');  var res = yield db.get('foo');  console.log('foo -> %s', res);  var res = yield db.get('bar');  console.log('bar -> %s', res);})()]]></content>
    
    
      
      
    <summary type="html">
var thunk = require(&#39;thunkify&#39;);
var redis = require(&#39;redis&#39;);
var db = redis.createClient();
var co = require(&#39;..&#39;);

db.set = thunk(db.se</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/parallel/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/parallel/</id>
    <published>2023-04-20T10:43:06.356Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var co = require('..');var fs = require('fs');// by writing this a bit differently than ./simple.js// you can acheive parallel async operations simply// be deferring the use of "yield" to act as the callback.// alternatively you could use ./simple.js with// var res = yield [a, b, c] to execute them in// parallel.// for an alternative see ./array.js// also if writing all this boilerplate// is not to your liking check out "thunkify"function read(file) {  var finished;  var error;  var value;  var cb;  fs.readFile(file, 'utf8', function(err, str){    if (cb) {      cb(err, str);    } else {      finished = true;      error = err;      value = str;    }  });  return function(fn){    if (finished) {      fn(error, value);    } else {      cb = fn;    }  }}co(function *(){  var a = read('.gitignore');  var b = read('Makefile');  var c = read('package.json');  console.log(yield a);  console.log(yield b);  console.log(yield c);})()]]></content>
    
    
      
      
    <summary type="html">
var co = require(&#39;..&#39;);
var fs = require(&#39;fs&#39;);

// by writing this a bit differently than ./simple.js
// you can acheive parallel async op</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/nested/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/nested/</id>
    <published>2023-04-20T10:43:06.353Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var co = require('..');var fs = require('fs');function size(file) {  return function(fn){    fs.stat(file, function(err, stat){      if (err) return fn(err);      fn(null, stat.size);    });  }}var foo = co(function *(){  var a = yield size('.gitignore');  var b = yield size('Makefile');  var c = yield size('package.json');  return [a, b, c];})var bar = co(function *(){  var a = yield size('examples/return.js');  var b = yield size('examples/nested.js');  var c = yield size('examples/simple.js');  return [a, b, c];})co(function *(){  var a = yield foo;  var b = yield bar;  console.log(a);  console.log(b);})()]]></content>
    
    
      
      
    <summary type="html">
var co = require(&#39;..&#39;);
var fs = require(&#39;fs&#39;);

function size(file) {
  return function(fn){
    fs.stat(file, function(err, stat){
      </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/generator-array/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/generator-array/</id>
    <published>2023-04-20T10:43:06.350Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var request = require('request');var thunk = require('thunkify');var co = require('..');var get = thunk(request.get);// measure response time N timesfunction *latency(url, times) {  var ret = [];  while (times--) {    var start = new Date;    yield get(url);    ret.push(new Date - start);  }  return ret;}// run each test in sequenceco(function *(){  var a = yield latency('http://google.com', 5);  console.log(a);  var b = yield latency('http://yahoo.com', 5);  console.log(b);  var c = yield latency('http://cloudup.com', 5);  console.log(c);})()// run each test in parallel, order is retainedco(function *(){  var a = latency('http://google.com', 5);  var b = latency('http://yahoo.com', 5);  var c = latency('http://cloudup.com', 5);  var res = yield [a, b, c];  console.log(res);})()]]></content>
    
    
      
      
    <summary type="html">
var request = require(&#39;request&#39;);
var thunk = require(&#39;thunkify&#39;);
var co = require(&#39;..&#39;);

var get = thunk(request.get);

// measure respo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/array/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/array/</id>
    <published>2023-04-20T10:43:06.346Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var co = require('..');var fs = require('fs');function size(file) {  return function(fn){    fs.stat(file, function(err, stat){      if (err) return fn(err);      fn(null, stat.size);    });  }}// 3 concurrent stat()s at a timeco(function *(){  var a = yield [size('.gitignore'), size('index.js'), size('Makefile')];  var b = yield [size('.gitignore'), size('index.js'), size('Makefile')];  var c = yield [size('.gitignore'), size('index.js'), size('Makefile')];  console.log(a);  console.log(b);  console.log(c);})()// 9 concurrent stat()sco(function *(){  var a = [size('.gitignore'), size('index.js'), size('Makefile')];  var b = [size('.gitignore'), size('index.js'), size('Makefile')];  var c = [size('.gitignore'), size('index.js'), size('Makefile')];  var d = yield [a, b, c];  console.log(d);})()// 3co(function *(){  var a = size('.gitignore');  var b = size('index.js');  var c = size('Makefile');  var res = yield [a, b, c];  console.log(res);})()]]></content>
    
    
      
      
    <summary type="html">
var co = require(&#39;..&#39;);
var fs = require(&#39;fs&#39;);

function size(file) {
  return function(fn){
    fs.stat(file, function(err, stat){
      </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/arguments/"/>
    <id>https://sunjinkang.github.io/2023/04/20/51-about-thunk-function/co-3.1.0/examples/arguments/</id>
    <published>2023-04-20T10:43:06.343Z</published>
    <updated>2014-07-01T02:48:07.000Z</updated>
    
    <content type="html"><![CDATA[var thunk = require('thunkify');var co = require('..');var fs = require('fs');var read = thunk(fs.readFile);// parallelfunction* sizeGen(file1, file2){  var a = read(file1);  var b = read(file2);  return [    (yield a).length,    (yield b).length  ];}// use co to wrap generatorFunction into callback stylevar size = co(sizeGen);// use `size` as common async callbck style function// all arguments will pass to `function* sizeGen`size('.gitignore', 'README.md', function (err, res) {  if (err) return console.error(err);  console.log(res);});]]></content>
    
    
      
      
    <summary type="html">
var thunk = require(&#39;thunkify&#39;);
var co = require(&#39;..&#39;);
var fs = require(&#39;fs&#39;);

var read = thunk(fs.readFile);

// parallel

function* si</summary>
      
    
    
    
    
  </entry>
  
</feed>
