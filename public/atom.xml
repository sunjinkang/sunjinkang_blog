<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sun ...something</title>
  
  <subtitle>about what I have learned and some interesting things</subtitle>
  <link href="https://sunjinkang.github.io/atom.xml" rel="self"/>
  
  <link href="https://sunjinkang.github.io/"/>
  <updated>2022-09-27T09:21:29.523Z</updated>
  <id>https://sunjinkang.github.io/</id>
  
  <author>
    <name>Sun Jinkang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构与算法阅读笔记(2)</title>
    <link href="https://sunjinkang.github.io/2022/09/23/data-structure2/"/>
    <id>https://sunjinkang.github.io/2022/09/23/data-structure2/</id>
    <published>2022-09-23T07:52:54.000Z</published>
    <updated>2022-09-27T09:21:29.523Z</updated>
    
    <content type="html"><![CDATA[<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>队列是遵循先进先出（FIFO，也称为先来先服务）原则的一组有序的项。队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="built_in">this</span>.lowestCount = <span class="number">0</span>; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向队列添加元素</span></span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items[<span class="built_in">this</span>.count] = element;</span><br><span class="line">    <span class="built_in">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从队列移除元素</span></span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount]; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount]; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    <span class="built_in">this</span>.lowestCount++; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 查看队列头元素</span></span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 检查队列是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count - <span class="built_in">this</span>.lowestCount === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取队列的长度</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count - <span class="built_in">this</span>.lowestCount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清空队列</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">this</span>.lowestCount + <span class="number">1</span>; i &lt; <span class="built_in">this</span>.count; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="built_in">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h6><p>双端队列（deque，或称 double-ended queue）是一种允许我们同时从前端和后端添加和移除元素的特殊队列</p><p>由于双端队列同时遵守了先进先出和后进先出原则，可以说它是把队列和栈相结合的一种数据结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deque</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// 向双端队列的前端添加元素</span></span><br><span class="line">  <span class="function"><span class="title">addFront</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">      <span class="built_in">this</span>.addBack(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.lowestCount &gt; <span class="number">0</span>) &#123; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">      <span class="built_in">this</span>.lowestCount--;</span><br><span class="line">      <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount] = element;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">this</span>.count; i &gt; <span class="number">0</span>; i--) &#123; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">        <span class="built_in">this</span>.items[i] = <span class="built_in">this</span>.items[i - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.count++;</span><br><span class="line">      <span class="built_in">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">this</span>.items[<span class="number">0</span>] = element; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">addBack</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items[<span class="built_in">this</span>.count] = element;</span><br><span class="line">    <span class="built_in">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">removeFront</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount]; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount]; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    <span class="built_in">this</span>.lowestCount++; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">removeBack</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.count--;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">this</span>.items[<span class="built_in">this</span>.count];</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.count];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">peekFront</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">peekBack</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.count - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count - <span class="built_in">this</span>.lowestCount === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="循环队列-击鼓传花"><a href="#循环队列-击鼓传花" class="headerlink" title="循环队列 - 击鼓传花"></a>循环队列 - 击鼓传花</h6><p>场景：在这个游戏中，孩子们围成一个圆圈，把花尽快地传递给旁边的人。某一时刻传花停止，这个时候花在谁手里，谁就退出圆圈、结束游戏。重复这个过程，直到只剩一个孩子（胜者）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span>(<span class="params">elementsList, num</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> Queue(); <span class="comment">// &#123;1&#125; </span></span><br><span class="line">  <span class="keyword">const</span> elimitatedList = [];</span><br><span class="line">  <span class="comment">// 把名单的名字全都加入队列</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elementsList.length; i++) &#123; </span><br><span class="line">    queue.enqueue(elementsList[i]); <span class="comment">// &#123;2&#125; </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 迭代队列</span></span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123; </span><br><span class="line">      <span class="comment">// 将队列开头一项移除，添加到队列末尾</span></span><br><span class="line">      queue.enqueue(queue.dequeue()); <span class="comment">// &#123;3&#125; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 将超出限制的队列开头一项移除，作为淘汰项</span></span><br><span class="line">    elimitatedList.push(queue.dequeue()); <span class="comment">// &#123;4&#125; </span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> &#123; </span><br><span class="line">    <span class="attr">eliminated</span>: elimitatedList, </span><br><span class="line">    <span class="attr">winner</span>: queue.dequeue() <span class="comment">// &#123;5&#125; </span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Camila&#x27;</span>, <span class="string">&#x27;Ingrid&#x27;</span>, <span class="string">&#x27;Carl&#x27;</span>]; </span><br><span class="line"><span class="keyword">const</span> result = hotPotato(names, <span class="number">7</span>);</span><br><span class="line">result.eliminated.forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>在击鼓传花游戏中被淘汰。`</span>); </span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`胜利者： <span class="subst">$&#123;result.winner&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h6 id="回文检查器"><a href="#回文检查器" class="headerlink" title="回文检查器"></a>回文检查器</h6><p>回文：回文是正反都能读通的单词、词组、数或一系列字符的序列，例如 madam或 racecar。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindromeChecker</span>(<span class="params">aString</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 检查传入的字符串参数是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (aString === <span class="literal">undefined</span> || aString === <span class="literal">null</span> || (aString !== <span class="literal">null</span> &amp;&amp; aString.length === <span class="number">0</span>)) &#123; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">const</span> deque = <span class="keyword">new</span> Deque(); <span class="comment">// &#123;2&#125;</span></span><br><span class="line">  <span class="comment">// 将所有字母转化为小写，同时移除所有的空格</span></span><br><span class="line">  <span class="keyword">const</span> lowerString = aString.toLocaleLowerCase().split(<span class="string">&#x27; &#x27;</span>).join(<span class="string">&#x27;&#x27;</span>); <span class="comment">// &#123;3&#125; </span></span><br><span class="line">  <span class="keyword">let</span> isEqual = <span class="literal">true</span>; </span><br><span class="line">  <span class="keyword">let</span> firstChar, lastChar;</span><br><span class="line">  <span class="comment">// 将所有字符串加入队列中</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lowerString.length; i++) &#123; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">    deque.addBack(lowerString.charAt(i)); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (deque.size() &gt; <span class="number">1</span> &amp;&amp; isEqual) &#123; <span class="comment">// &#123;5&#125; </span></span><br><span class="line">    firstChar = deque.removeFront(); <span class="comment">// &#123;6&#125; </span></span><br><span class="line">    lastChar = deque.removeBack(); <span class="comment">// &#123;7&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (firstChar !== lastChar) &#123; </span><br><span class="line">      isEqual = <span class="literal">false</span>; <span class="comment">// &#123;8&#125; </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> isEqual;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">javascript事件循环</a></p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><h6 id="链表数据结构"><a href="#链表数据结构" class="headerlink" title="链表数据结构"></a>链表数据结构</h6><p><img src="/2022/09/23/data-structure2/chain-table-1.png" alt="链表"><br>链表的好处：添加或移除元素的时候不需要移动其他元素<br>要想访问链表中间的一个元素，需要从起点（表头）开始迭代链表直到找到所需的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defaultEquals</span>(<span class="params">a, b</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> a === b; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// models/linked-list-models</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.element = element; </span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">undefined</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defaultEquals &#125; <span class="keyword">from</span> <span class="string">&#x27;../util&#x27;</span>; </span><br><span class="line"><span class="keyword">import</span> &#123; Node &#125; <span class="keyword">from</span> <span class="string">&#x27;./models/linked-list-models&#x27;</span>; <span class="comment">// &#123;1&#125; </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">equalsFn = defaultEquals</span>)</span> &#123; </span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">// &#123;2&#125; </span></span><br><span class="line">    <span class="built_in">this</span>.head = <span class="literal">undefined</span>; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">    <span class="built_in">this</span>.equalsFn = equalsFn; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向链表尾部添加元素</span></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">element</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element); <span class="comment">// &#123;1&#125; </span></span><br><span class="line">    <span class="keyword">let</span> current; <span class="comment">// &#123;2&#125; </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.head == <span class="literal">null</span>) &#123; <span class="comment">// &#123;3&#125; </span></span><br><span class="line">      <span class="built_in">this</span>.head = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current = <span class="built_in">this</span>.head; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">      <span class="keyword">while</span> (current.next != <span class="literal">null</span>) &#123; <span class="comment">// &#123;5&#125; 获得最后一项</span></span><br><span class="line">        current = current.next; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将其 next 赋为新元素，建立链接</span></span><br><span class="line">      current.next = node; <span class="comment">// &#123;6&#125; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">this</span>.count++; <span class="comment">// &#123;7&#125; </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从链表中移除元素</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">index</span>)</span> &#123; </span><br><span class="line">    <span class="comment">// 检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="built_in">this</span>.count) &#123; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head; <span class="comment">// &#123;2&#125; </span></span><br><span class="line">      <span class="comment">// 移除第一项</span></span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; <span class="comment">// &#123;3&#125; </span></span><br><span class="line">        <span class="built_in">this</span>.head = current.next; </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前index的前一个节点</span></span><br><span class="line">        <span class="keyword">const</span> previous = <span class="built_in">this</span>.getElementAt(index - <span class="number">1</span>);</span><br><span class="line">        current = previous.next;</span><br><span class="line">        <span class="comment">// 将 previous 与 current 的下一项链接起来：跳过 current，从而移除它</span></span><br><span class="line">        previous.next = current.next; <span class="comment">// &#123;8&#125; </span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.count--; <span class="comment">// &#123;9&#125; </span></span><br><span class="line">      <span class="keyword">return</span> current.element; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// &#123;10&#125; </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 循环迭代链表直到目标位置</span></span><br><span class="line">  <span class="function"><span class="title">getElementAt</span>(<span class="params">index</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.count) &#123; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">      <span class="keyword">let</span> node = <span class="built_in">this</span>.head; <span class="comment">// &#123;2&#125; </span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index &amp;&amp; node != <span class="literal">null</span>; i++) &#123; <span class="comment">// &#123;3&#125; </span></span><br><span class="line">        node = node.next;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> node; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// &#123;5&#125; </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在任意位置插入元素</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">element, index</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.count) &#123; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">      <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; <span class="comment">// 在第一个位置添加</span></span><br><span class="line">        <span class="keyword">const</span> current = <span class="built_in">this</span>.head; </span><br><span class="line">        node.next = current; <span class="comment">// &#123;2&#125; </span></span><br><span class="line">        <span class="built_in">this</span>.head = node; </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">const</span> previous = <span class="built_in">this</span>.getElementAt(index - <span class="number">1</span>); <span class="comment">// &#123;3&#125; </span></span><br><span class="line">        <span class="keyword">const</span> current = previous.next; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">        node.next = current; <span class="comment">// &#123;5&#125; </span></span><br><span class="line">        previous.next = node; <span class="comment">// &#123;6&#125; </span></span><br><span class="line">      &#125; </span><br><span class="line">      <span class="built_in">this</span>.count++; <span class="comment">// 更新链表的长度</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// &#123;7&#125; </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  indexOf 方法：返回一个元素的位置</span></span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">element</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.count &amp;&amp; current != <span class="literal">null</span>; i++) &#123; <span class="comment">// &#123;2&#125; </span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.equalsFn(element, current.element)) &#123; <span class="comment">// &#123;3&#125; </span></span><br><span class="line">        <span class="keyword">return</span> i; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">      &#125;</span><br><span class="line">      current = current.next; <span class="comment">// &#123;5&#125; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// &#123;6&#125; </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从链表中移除元素</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">element</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">this</span>.indexOf(element); </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(index); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count === <span class="number">0</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getHead</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.head; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.head == <span class="literal">null</span>) &#123; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.head.element&#125;</span>`</span>; <span class="comment">// &#123;2&#125; </span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head.next; <span class="comment">// &#123;3&#125; </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">this</span>.size() &amp;&amp; current != <span class="literal">null</span>; i++) &#123; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;current.element&#125;</span>`</span>; </span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> objString; <span class="comment">// &#123;5&#125; </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management">javascript垃圾回收器</a></p><h6 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h6><p>在双向链表中，链接是双向的：一个链向下一个元素，另一个链向前一个元素<br><img src="/2022/09/23/data-structure2/chain-table-2.png" alt="双向链表"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyNode</span> <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123; <span class="comment">// &#123;1&#125; </span></span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">element, next, prev</span>)</span> &#123; </span><br><span class="line">  <span class="built_in">super</span>(element, next); <span class="comment">// &#123;2&#125; </span></span><br><span class="line">  <span class="built_in">this</span>.prev = prev; <span class="comment">// &#123;3&#125; 新增的</span></span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">equalsFn = defaultEquals</span>)</span> &#123; </span><br><span class="line">    <span class="built_in">super</span>(equalsFn); <span class="comment">// &#123;5&#125; </span></span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">undefined</span>; <span class="comment">// &#123;6&#125; 新增的</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  在任意位置插入新元素</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">element, index</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.count) &#123; </span><br><span class="line">      <span class="keyword">const</span> node = <span class="keyword">new</span> DoublyNode(element); </span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; </span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.head == <span class="literal">null</span>) &#123; <span class="comment">// &#123;1&#125; 新增的</span></span><br><span class="line">            <span class="built_in">this</span>.head = node; </span><br><span class="line">            <span class="built_in">this</span>.tail = node; </span><br><span class="line">          &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            node.next = <span class="built_in">this</span>.head; <span class="comment">// &#123;2&#125; </span></span><br><span class="line">            current.prev = node; <span class="comment">// &#123;3&#125; 新增的</span></span><br><span class="line">            <span class="built_in">this</span>.head = node; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">          &#125; </span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="built_in">this</span>.count) &#123; <span class="comment">// 最后一项 // 新增的</span></span><br><span class="line">        current = <span class="built_in">this</span>.tail; <span class="comment">// &#123;5&#125; </span></span><br><span class="line">        current.next = node; <span class="comment">// &#123;6&#125; </span></span><br><span class="line">        node.prev = current; <span class="comment">// &#123;7&#125; </span></span><br><span class="line">        <span class="built_in">this</span>.tail = node; <span class="comment">// &#123;8&#125; </span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">const</span> previous = <span class="built_in">this</span>.getElementAt(index - <span class="number">1</span>); <span class="comment">// &#123;9&#125; </span></span><br><span class="line">        current = previous.next; <span class="comment">// &#123;10&#125; </span></span><br><span class="line">        node.next = current; <span class="comment">// &#123;11&#125; </span></span><br><span class="line">        previous.next = node; <span class="comment">// &#123;12&#125; </span></span><br><span class="line">        current.prev = node; <span class="comment">// &#123;13&#125; 新增的</span></span><br><span class="line">        node.prev = previous; <span class="comment">// &#123;14&#125; 新增的</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.count++; </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从任意位置移除元素</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">index</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="built_in">this</span>.count) &#123; </span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="built_in">this</span>.head = current.next; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">        <span class="comment">// 如果只有一项，更新 tail // 新增的</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.count === <span class="number">1</span>) &#123; <span class="comment">// &#123;2&#125; </span></span><br><span class="line">          <span class="built_in">this</span>.tail = <span class="literal">undefined</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">          <span class="built_in">this</span>.head.prev = <span class="literal">undefined</span>; <span class="comment">// &#123;3&#125; </span></span><br><span class="line">        &#125; </span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="built_in">this</span>.count - <span class="number">1</span>) &#123; <span class="comment">// 最后一项 //新增的</span></span><br><span class="line">        current = <span class="built_in">this</span>.tail; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">        <span class="built_in">this</span>.tail = current.prev; <span class="comment">// &#123;5&#125; </span></span><br><span class="line">        <span class="built_in">this</span>.tail.next = <span class="literal">undefined</span>; <span class="comment">// &#123;6&#125; </span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        current = <span class="built_in">this</span>.getElementAt(index); <span class="comment">// &#123;7&#125; </span></span><br><span class="line">        <span class="keyword">const</span> previous = current.prev; <span class="comment">// &#123;8&#125; </span></span><br><span class="line">        <span class="comment">// 将 previous 与 current 的下一项链接起来——跳过 current </span></span><br><span class="line">        previous.next = current.next; <span class="comment">// &#123;9&#125; </span></span><br><span class="line">        current.next.prev = previous; <span class="comment">// &#123;10&#125; 新增的</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.count--; </span><br><span class="line">      <span class="keyword">return</span> current.element; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 源码：https://github.com/loiane/javascript-datastructures-algorithms</span></span><br></pre></td></tr></table></figure><h6 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h6><p>循环链表可以像链表一样只有单向引用，也可以像双向链表一样有双向引用。循环链表和链表之间唯一的区别在于，最后一个元素指向下一个元素的指针（tail.next）不是引用undefined，而是指向第一个元素（head）<br>双向循环链表有指向 head 元素的 tail.next 和指向 tail 元素的 head.prev<br><img src="/2022/09/23/data-structure2/chain-table-3.png" alt="循环链表"><br><img src="/2022/09/23/data-structure2/chain-table-4.png" alt="双向循环链表"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">equalsFn = defaultEquals</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(equalsFn); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在任意位置插入新元素</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">element, index</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.count) &#123; </span><br><span class="line">      <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element); </span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.head == <span class="literal">null</span>) &#123; </span><br><span class="line">          <span class="built_in">this</span>.head = node; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">          node.next = <span class="built_in">this</span>.head; <span class="comment">// &#123;2&#125; 新增的</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">          node.next = current; <span class="comment">// &#123;3&#125; </span></span><br><span class="line">          current = <span class="built_in">this</span>.getElementAt(<span class="built_in">this</span>.size()); <span class="comment">// &#123;4&#125; </span></span><br><span class="line">          <span class="comment">// 更新最后一个元素</span></span><br><span class="line">          <span class="built_in">this</span>.head = node; <span class="comment">// &#123;5&#125; </span></span><br><span class="line">          current.next = <span class="built_in">this</span>.head; <span class="comment">// &#123;6&#125; 新增的</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 这种场景没有变化</span></span><br><span class="line">        <span class="keyword">const</span> previous = <span class="built_in">this</span>.getElementAt(index - <span class="number">1</span>); </span><br><span class="line">        node.next = previous.next; </span><br><span class="line">        previous.next = node; </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="built_in">this</span>.count++; </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从任意位置移除元素</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">index</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="built_in">this</span>.count) &#123; </span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size() === <span class="number">1</span>) &#123; </span><br><span class="line">          <span class="built_in">this</span>.head = <span class="literal">undefined</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">          <span class="keyword">const</span> removed = <span class="built_in">this</span>.head; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">          current = <span class="built_in">this</span>.getElementAt(<span class="built_in">this</span>.size()); <span class="comment">// &#123;2&#125; 新增的</span></span><br><span class="line">          <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next; <span class="comment">// &#123;3&#125; </span></span><br><span class="line">          current.next = <span class="built_in">this</span>.head; <span class="comment">// &#123;4&#125; </span></span><br><span class="line">          current = removed; <span class="comment">// &#123;5&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// 不需要修改循环链表最后一个元素</span></span><br><span class="line">        <span class="keyword">const</span> previous = <span class="built_in">this</span>.getElementAt(index - <span class="number">1</span>); </span><br><span class="line">        current = previous.next; </span><br><span class="line">        previous.next = current.next; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.count--; </span><br><span class="line">      <span class="keyword">return</span> current.element; <span class="comment">// &#123;6&#125; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="有序链表"><a href="#有序链表" class="headerlink" title="有序链表"></a>有序链表</h6><p>有序链表是指保持元素有序的链表结构。除了使用排序算法之外，我们还可以将元素插入到正确的位置来保证链表的有序性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Compare = &#123; </span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>, </span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span> </span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultCompare</span>(<span class="params">a, b</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? Compare.LESS_THAN : Compare.BIGGER_THAN; <span class="comment">// &#123;2&#125; </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortedLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">equalsFn = defaultEquals, compareFn = defaultCompare</span>)</span> &#123; </span><br><span class="line">    <span class="built_in">super</span>(equalsFn); </span><br><span class="line">    <span class="built_in">this</span>.compareFn = compareFn; <span class="comment">// &#123;3&#125; </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 有序插入元素</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">element, index = <span class="number">0</span></span>)</span> &#123; <span class="comment">// &#123;1&#125; </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.insert(element, <span class="number">0</span>); <span class="comment">// &#123;2&#125; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">const</span> pos = <span class="built_in">this</span>.getIndexNextSortedElement(element); <span class="comment">// &#123;3&#125; </span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.insert(element, pos); <span class="comment">// &#123;4&#125; </span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="title">getIndexNextSortedElement</span>(<span class="params">element</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head; </span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="built_in">this</span>.size() &amp;&amp; current; i++) &#123; </span><br><span class="line">      <span class="keyword">const</span> comp = <span class="built_in">this</span>.compareFn(element, current.element); <span class="comment">// &#123;5&#125; </span></span><br><span class="line">      <span class="keyword">if</span> (comp === Compare.LESS_THAN) &#123; <span class="comment">// &#123;6&#125; </span></span><br><span class="line">        <span class="keyword">return</span> i; </span><br><span class="line">      &#125; </span><br><span class="line">      current = current.next; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> i; <span class="comment">// &#123;7&#125; </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="创建-StackLinkedList-类"><a href="#创建-StackLinkedList-类" class="headerlink" title="创建 StackLinkedList 类"></a>创建 StackLinkedList 类</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackLinkedList</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">    <span class="built_in">this</span>.items = <span class="keyword">new</span> DoublyLinkedList(); <span class="comment">// &#123;1&#125; </span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">element</span>)</span> &#123; </span><br><span class="line">    <span class="built_in">this</span>.items.push(element); <span class="comment">// &#123;2&#125; </span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.removeAt(<span class="built_in">this</span>.size() - <span class="number">1</span>); <span class="comment">// &#123;3&#125; </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h4&gt;&lt;p&gt;队列是遵循先进先出（FIFO，也称为先来先服务）原则的一组有序的项。队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js中apply怎么把数组转化为参数？</title>
    <link href="https://sunjinkang.github.io/2022/09/21/apply-array-to-params/"/>
    <id>https://sunjinkang.github.io/2022/09/21/apply-array-to-params/</id>
    <published>2022-09-21T09:07:53.000Z</published>
    <updated>2022-09-21T09:08:28.460Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法阅读笔记(1)</title>
    <link href="https://sunjinkang.github.io/2022/09/20/data-structure1/"/>
    <id>https://sunjinkang.github.io/2022/09/20/data-structure1/</id>
    <published>2022-09-20T09:41:00.000Z</published>
    <updated>2022-09-23T07:51:52.037Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 和 javascript 的关系<br>ECMAScript 是一个语言标准，JavaScript 是该标准(最流行)的一个实现。</p><p>ES5、ES6、ES2015、ES7、ES2016、ES8、ES2017 和 ES.Next 的区别</p><p>(1)2009 年 12 月发布的 ECMAScript5(即 ES5，其中的 ES 是 ECMAScript 的简称)</p><p>(2)ECMAScript2015(ES2015)在 2015 年 6 月标准化。负责起草 ECMAScript 规范的委员会决定把定义新标准的模式改为每年更新一次，新的特性<br>一旦通过就加入标准。因此，ECMAScript 第六版更名为 ECMAScript2015(ES6)</p><p>(3)2016 年 6 月，ECMAScript 第七版被标准化，称为 ECMAScript2016 或 ES2016(ES7)</p><p>(4)2017 年 6 月，ECMAScript 第八版被标准化。我们称它为 ECMAScript2017 或 ES2017(ES8)</p><p>(5)ES.Next 用来指代下一个版本的 ECMAScript</p><p>ES6 兼容性：<a href="http://kangax.github.io/compat-table/es6/">http://kangax.github.io/compat-table/es6/</a><br>ES7 兼容性：<a href="http://kangax.github.io/compat-table/es2016plus/">http://kangax.github.io/compat-table/es2016plus/</a></p><p>ES5 中 class 类，使用属性存取器<br>(1)声明 get 和 set 函数，只需要在我们要暴露和使用的函数名前面加上 get 或 set 关键字<br>(2)可以用相同的名字声明类属性，或者在属性名前面加下划线，让这个属性看起来像是私有的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = name; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">    <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// &#123;3&#125;</span></span><br><span class="line">    <span class="built_in">this</span>._name = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> lotrChar = <span class="keyword">new</span> Person(<span class="string">&#x27;Frodo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lotrChar.name); <span class="comment">// &#123;4&#125; // Frodo</span></span><br><span class="line">lotrChar.name = <span class="string">&#x27;Gandalf&#x27;</span>; <span class="comment">// &#123;5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(lotrChar.name); <span class="comment">// Gandalf</span></span><br><span class="line">lotrChar._name = <span class="string">&#x27;Sam&#x27;</span>; <span class="comment">// &#123;6&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(lotrChar.name); <span class="comment">// Sam</span></span><br></pre></td></tr></table></figure><p>乘方运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> area = <span class="number">3.14</span> * r * r;</span><br><span class="line"><span class="keyword">const</span> area = <span class="number">3.14</span> * <span class="built_in">Math</span>.pow(r, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// ES2016 中引入了**运算符，用来进行指数运算</span></span><br><span class="line"><span class="keyword">const</span> area = <span class="number">3.14</span> * r ** <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript 和 ECMAScript 的完整功能列表</a></p><h6 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h6><p>TypeScript 有一个名为鸭子类型的概念：如果它看起来像鸭子，像鸭子一样游泳，像鸭子一样叫，那么它一定是一只鸭子.<br>(1)接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种定义接口的方式</span></span><br><span class="line">interface Person &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  age: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 第二种定义接口的方式：Comparable 接口告诉 MyObject 类，它需要实现一个叫作 compareTo 的方法，</span></span><br><span class="line"><span class="comment">并且该方法接收一个参数。在该方法内部，我们可以实现需要的逻辑。**/</span></span><br><span class="line">interface Comparable &#123;</span><br><span class="line">  compareTo(b): number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> <span class="title">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">  compareTo(b): number &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.age === b.age) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.age &gt; b.age ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JavaScript 中使用一些类型和错误检测功能方式：在计算机上全局安装 TypeScript，使用时，只需要在 JavaScript 文件的第一行添加一句 // @ts-check</strong></p><h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><p>数组是最简单的内存数据结构。JavaScript 里也有数组类型，但它的第一个版本并没有支持数组</p><p>(1)使用@@iterator 对象<br>ES2015 为 Array 类增加了一个@@iterator 属性，需要通过 Symbol.iterator 来访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = numbers[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">iterator = numbers[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> n <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制已有数组</span></span><br><span class="line"><span class="keyword">let</span> numbers2 = <span class="built_in">Array</span>.from(numbers);</span><br><span class="line"><span class="keyword">let</span> numbers3 = <span class="built_in">Array</span>.of(...numbers);</span><br></pre></td></tr></table></figure><p>(2)copyWithin<br>copyWithin 方法复制数组中的一系列元素到同一数组指定的起始位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copyArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">copyArray.copyWithin(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// copyWithin(起始位置，开始位置，结束位置)</span></span><br><span class="line"><span class="comment">// [1, 4, 5, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>(3)排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义排序</span></span><br><span class="line"><span class="keyword">const</span> friends = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Ana&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Chris&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;, <span class="comment">// ES2017 允许存在尾逗号</span></span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comparePerson</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a.age &lt; b.age) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a.age &gt; b.age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(friends.sort(comparePerson));</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">[ </span></span><br><span class="line"><span class="comment"> &#123; name: &#x27;Ana&#x27;, age: 20 &#125;, </span></span><br><span class="line"><span class="comment"> &#123; name: &#x27;Chris&#x27;, age: 25 &#125;,</span></span><br><span class="line"><span class="comment"> &#123; name: &#x27;John&#x27;, age: 30 &#125;, </span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 忽略大小写的比较</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;Ana&#x27;</span>, <span class="string">&#x27;ana&#x27;</span>, <span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;John&#x27;</span>]; <span class="comment">// 重置数组的初始状态</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  names.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.toLowerCase() &lt; b.toLowerCase()) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a.toLowerCase() &gt; b.toLowerCase()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 希望小写字母排在前面或者对带有重音符号的字符做排序的话，那么需要使用 localeCompare 方法</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;Ana&#x27;</span>, <span class="string">&#x27;ana&#x27;</span>, <span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;John&#x27;</span>];</span><br><span class="line">names.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.localeCompare(b));</span><br><span class="line"><span class="comment">// [&#x27;ana&#x27;, &#x27;Ana&#x27;, &#x27;john&#x27;, &#x27;John&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names2 = [<span class="string">&#x27;Maève&#x27;</span>, <span class="string">&#x27;Maeve&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(names2.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.localeCompare(b)));</span><br><span class="line"><span class="comment">// [&quot;Maeve&quot;, &quot;Maève&quot;]</span></span><br></pre></td></tr></table></figure><h6 id="类型数组"><a href="#类型数组" class="headerlink" title="类型数组"></a>类型数组</h6><table><thead><tr><th>类型数组</th><th>数据类型</th></tr></thead><tbody><tr><td>Int8Array</td><td>8 位二进制补码整数</td></tr><tr><td>Uint8Array</td><td>8 位无符号整数</td></tr><tr><td>Uint8ClampedArray</td><td>8 位无符号整数</td></tr><tr><td>Int16Array</td><td>16 位二进制补码整数</td></tr><tr><td>Uint16Array</td><td>16 位无符号整数</td></tr><tr><td>Int32Array</td><td>32 位二进制补码整数</td></tr><tr><td>Uint32Array</td><td>32 位无符号整数</td></tr><tr><td>Float32Array</td><td>32 位 IEEE 浮点数</td></tr><tr><td>Float64Array</td><td>64 位 IEEE 浮点数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> length = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> int16 = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(length);</span><br><span class="line"><span class="keyword">let</span> array16 = [];</span><br><span class="line">array16.length = length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">  int16[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(int16);</span><br></pre></td></tr></table></figure><p>类型数组作用：WebGL API、位操作、处理文件和图像</p><p><a href="https://web.dev/webgl-typed-arrays/">类型数组文档</a></p><h6 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h6><p>栈是一种遵从后进先出（LIFO）原则的有序集合。新添加或待删除的元素都保存在栈的同一端，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底</p><p>栈被用在编程语言的编译器和内存中保存变量、方法调用等，也被用于浏览器历史记录（浏览器的返回按钮）</p><p>(1)创建一个基于数组的栈</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加一个（或几个）新元素到栈顶</span></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除栈顶的元素，同时返回被移除的元素</span></span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）</span></span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果栈里没有任何元素就返回 true，否则返回 false</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回栈里的元素个数。该方法和数组的 length 属性很类似</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除栈里的所有元素</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在使用数组时，大部分方法的时间复杂度是 O(n)。O(n)的意思是，我们需要迭代整个数组直到找到要找的那个元素，在最坏的情况下需要迭代数组的所有位置，其中的 n 代表数组的长度。如果数组有更多元素的话，所需的时间会更长。另外，数组是元素的一个有序集合，为了保证元素排列有序，它会占用更多的内存空间。</strong><br>(2)创建一个基于 JavaScript 对象的 Stack 类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">// count 属性记录栈的大小,也能帮助我们从数据结构中添加和删除元素</span></span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向栈中插入元素,只允许一次插入一个元素</span></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items[<span class="built_in">this</span>.count] = element;</span><br><span class="line">    <span class="built_in">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 验证一个栈的大小</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取栈是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从栈中弹出元素</span></span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.count--;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">this</span>.items[<span class="built_in">this</span>.count];</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.count];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 查看栈顶的值</span></span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.count - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清空栈</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//  while (!this.isEmpty()) &#123;</span></span><br><span class="line">    <span class="comment">//  this.pop();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.items[<span class="number">0</span>]&#125;</span>`</span>; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">this</span>.count; i++) &#123;</span><br><span class="line">      <span class="comment">// &#123;2&#125;</span></span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="built_in">this</span>.items[i]&#125;</span>`</span>; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>javascript 实现私有属性的方法</strong><br>下划线命名约定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中使用下划线命名约定来标记一个属性为私有属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>._items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>下划线命名约定就是在属性名称之前加上一个下划线（_）。不过这种方式只是一种约定，并不能保护数据，而且只能依赖于使用我们代码的开发者所具备的常识</em></p><p><strong>用 ES2015 的限定作用域 Symbol 实现类</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _items = <span class="built_in">Symbol</span>(<span class="string">&#x27;stackItems&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>[_items] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 栈的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">stack.push(<span class="number">5</span>);</span><br><span class="line">stack.push(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">let</span> objectSymbols = <span class="built_in">Object</span>.getOwnPropertySymbols(stack);</span><br><span class="line"><span class="built_in">console</span>.log(objectSymbols.length); <span class="comment">// 输出 1</span></span><br><span class="line"><span class="built_in">console</span>.log(objectSymbols); <span class="comment">// [Symbol()]</span></span><br><span class="line"><span class="built_in">console</span>.log(objectSymbols[<span class="number">0</span>]); <span class="comment">// Symbol()</span></span><br><span class="line">stack[objectSymbols[<span class="number">0</span>]].push(<span class="number">1</span>);</span><br><span class="line">stack.print(); <span class="comment">// 输出 5, 8, 1</span></span><br></pre></td></tr></table></figure><p><em>访问 stack[objectSymbols[0]]得到_items,并且，_items 属性是一个数组，可以进行任意的数组操作，不符合栈的要求</em></p><p><strong>用 ES2015 的 WeakMap 实现类</strong><br>WeakMap 可以存储键值对，其中键是对象，值可以是任意数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(); <span class="comment">// &#123;1&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    items.set(<span class="built_in">this</span>, []); <span class="comment">// &#123;2&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> s = items.get(<span class="built_in">this</span>); <span class="comment">// &#123;3&#125;</span></span><br><span class="line">    s.push(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> s = items.get(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">const</span> r = s.pop();</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>代码的可读性不强，而且在扩展该类时无法继承私有属性</em></p><p><strong>ECMAScript 类属性提案</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  #count = <span class="number">0</span>;</span><br><span class="line">  #items = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 栈的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>从十进制转二进制</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decimalToBinary</span>(<span class="params">decNumber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> remStack = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="keyword">let</span> number = decNumber;</span><br><span class="line">  <span class="keyword">let</span> rem;</span><br><span class="line">  <span class="keyword">let</span> binaryString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(number % <span class="number">2</span>);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty()) &#123;</span><br><span class="line">    binaryString += remStack.pop().toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>进制转换算法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNumber, base</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> remStack = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="keyword">const</span> digits = <span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>; <span class="comment">// &#123;6&#125;</span></span><br><span class="line">  <span class="keyword">let</span> number = decNumber;</span><br><span class="line">  <span class="keyword">let</span> rem;</span><br><span class="line">  <span class="keyword">let</span> baseString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!(base &gt;= <span class="number">2</span> &amp;&amp; base &lt;= <span class="number">36</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(number % base);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number / base);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty()) &#123;</span><br><span class="line">    baseString += digits[remStack.pop()]; <span class="comment">// &#123;7&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baseString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ECMAScript 和 javascript 的关系&lt;br&gt;ECMAScript 是一个语言标准，JavaScript 是该标准(最流行)的一个实现。&lt;/p&gt;
&lt;p&gt;ES5、ES6、ES2015、ES7、ES2016、ES8、ES2017 和 ES.Next 的区别&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式读书笔记(6)</title>
    <link href="https://sunjinkang.github.io/2022/09/20/about-design-model5/"/>
    <id>https://sunjinkang.github.io/2022/09/20/about-design-model5/</id>
    <published>2022-09-20T07:22:12.000Z</published>
    <updated>2022-09-23T06:59:38.606Z</updated>
    
    <content type="html"><![CDATA[<h4 id="架构型设计模式"><a href="#架构型设计模式" class="headerlink" title="架构型设计模式"></a>架构型设计模式</h4><p>架构型设计模式是一类框架结构,通过提供一些子系统，指定他们的职责,并将它们条理清晰地组织在一起。</p><h6 id="同步模块模式"><a href="#同步模块模式" class="headerlink" title="同步模块模式"></a>同步模块模式</h6><p>模块化:将复杂的系统分解成高内聚、低耦合的模块，使系统开发变得可控、可维护、可拓展，提高模块的复用率。<br>同步模块模式——SMD (Synchronous Module Definition):请求发出后，无论模块是否存在，立即执行后续的逻辑，实现模块开发中对模块的立即引用。</p><p>(1)实现模块化开发，首先要有一个模块管理器，它管理着模块的创建与调度。对于模块的调用分为两类，第一类同步模块调度的实现比较简单，不需要考虑模块间的异步加载。第二类异步模块调度的实现就比较繁琐。它可实现对模块的加载调度。</p><p><img src="/2022/09/20/about-design-model5/module-model-1.png" alt="module-model-1"><br><img src="/2022/09/20/about-design-model5/module-model-2.png" alt="module-model-2"><br><img src="/2022/09/20/about-design-model5/module-model-3.png" alt="module-model-3"><br><img src="/2022/09/20/about-design-model5/module-model-4.png" alt="module-model-4"><br><img src="/2022/09/20/about-design-model5/module-model-5.png" alt="module-model-5"></p><h6 id="异步模块模式"><a href="#异步模块模式" class="headerlink" title="异步模块模式"></a>异步模块模式</h6><p>异步模块模式——AMD (Asynchronous Module Definition):请求发出后，继续其他业务逻辑，知道模块加载完成执行后续的逻辑，实现模块开发中对模块加载完成后的引用。</p><p><img src="/2022/09/20/about-design-model5/async-module-model-1.png" alt="async-module-model-1"><br><img src="/2022/09/20/about-design-model5/async-module-model-2.png" alt="async-module-model-2"><br><img src="/2022/09/20/about-design-model5/async-module-model-3.png" alt="async-module-model-3"><br><img src="/2022/09/20/about-design-model5/async-module-model-4.png" alt="async-module-model-4"><br><img src="/2022/09/20/about-design-model5/async-module-model-5.png" alt="async-module-model-5"><br><img src="/2022/09/20/about-design-model5/async-module-model-6.png" alt="async-module-model-6"><br><img src="/2022/09/20/about-design-model5/async-module-model-7.png" alt="async-module-model-7"><br><img src="/2022/09/20/about-design-model5/async-module-model-8.png" alt="async-module-model-8"><br><img src="/2022/09/20/about-design-model5/async-module-model-9.png" alt="async-module-model-9"></p><h6 id="Widget模式"><a href="#Widget模式" class="headerlink" title="Widget模式"></a>Widget模式</h6><p>Widget:(Web Widget指的是一块可以在任意页面中执行的代码块)Widget模式是指借用Web Widget思想将页面分解成部件，针对部件开发，最终组合成完整的页面。</p><p><img src="/2022/09/20/about-design-model5/widget-model-1.png" alt="widget-model-1"><br><img src="/2022/09/20/about-design-model5/widget-model-2.png" alt="widget-model-2"><br><img src="/2022/09/20/about-design-model5/widget-model-3.png" alt="widget-model-3"><br><img src="/2022/09/20/about-design-model5/widget-model-4.png" alt="widget-model-4"><br><img src="/2022/09/20/about-design-model5/widget-model-5.png" alt="widget-model-5"><br><img src="/2022/09/20/about-design-model5/widget-model-6.png" alt="widget-model-6"></p><h6 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h6><p>MVC即模型(model)一视图(view)一控制器(controller)，用一种将业务逻辑、数据、视图分离的方式组织架构代码。</p><p><img src="/2022/09/20/about-design-model5/mvc-model-1.png" alt="mvc-model-1"></p><p><strong>每个对象是一个自动执行的函数</strong><br><strong>3个层次对象可被调用，而声明的函数在执行前是不能被调用的，比如模型对象要被视图和控制器调用，因此执行一遍为其他对象调用提供接口方法</strong></p><p><img src="/2022/09/20/about-design-model5/mvc-model-2.png" alt="mvc-model-2"><br><img src="/2022/09/20/about-design-model5/mvc-model-3.png" alt="mvc-model-3"><br>视图层只有3个部分，一是操作模型数据对象方法的引用(M),二是内部视图创建方法对象，三是外部获取视图创建方法接口</p><p><img src="/2022/09/20/about-design-model5/mvc-model-4.png" alt="mvc-model-4"></p><h6 id="MVP模式"><a href="#MVP模式" class="headerlink" title="MVP模式"></a>MVP模式</h6><p>MVP即模型(Model)一视图(View)一管理器(Presenter): View层不直接引用Model层内的数据，而是通过Presenter层实现对Model层内的数据访问。即所有层次的交互都发生在Presenter层中。</p><p><img src="/2022/09/20/about-design-model5/mvp-model-1.png" alt="mvp-model-1"><br><img src="/2022/09/20/about-design-model5/mvp-model-2.png" alt="mvp-model-2"><br><img src="/2022/09/20/about-design-model5/mvp-model-3.png" alt="mvp-model-3"><br><img src="/2022/09/20/about-design-model5/mvp-model-4.png" alt="mvp-model-4"><br><img src="/2022/09/20/about-design-model5/mvp-model-5.png" alt="mvp-model-5"><br><img src="/2022/09/20/about-design-model5/mvp-model-6.png" alt="mvp-model-6"><br><img src="/2022/09/20/about-design-model5/mvp-model-7.png" alt="mvp-model-7"></p><p>MVP与MVC相比最重要的特征就是MVP中将视图层与数据层完全解耦，使得对视图层的修改不会影响到数据层，数据层内的数据改动又不会影响到视图层。因此，我们在管理器中对数据或者视图灵活地调用就可使数据层内的数据与视图层内的视图得到更高效的复用。因此，MVP模式也可以实现一个管理器，可以调用多个数据，或者创建多种视图，而且是不受限制的。因而管理器有更高的操作权限，因此对于业务逻辑与需求的实现只需专注于管理器的开发即可，当然管理器内过多的逻辑也使得其开发与维护成本提高。</p><h6 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h6><p>MVVM模式，模型(Model)-视图(View)-视图模型(ViewModel):为视图层(View)量身定做一套视图模型(ViewModel)，并在视图模型(ViewModel)中创建属性和方法，为视图层(View)绑定数据(Model)并实现交互。</p><p><img src="/2022/09/20/about-design-model5/mvvm-model-1.png" alt="mvvm-model-1"><br><img src="/2022/09/20/about-design-model5/mvvm-model-2.png" alt="mvvm-model-2"><br><img src="/2022/09/20/about-design-model5/mvvm-model-3.png" alt="mvvm-model-3"><br><img src="/2022/09/20/about-design-model5/mvvm-model-4.png" alt="mvvm-model-4"><br><img src="/2022/09/20/about-design-model5/mvvm-model-5.png" alt="mvvm-model-5"><br><img src="/2022/09/20/about-design-model5/mvvm-model-6.png" alt="mvvm-model-6"><br><img src="/2022/09/20/about-design-model5/mvvm-model-7.png" alt="mvvm-model-7"><br><img src="/2022/09/20/about-design-model5/mvvm-model-8.png" alt="mvvm-model-8"></p><h6 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h6><p><img src="/2022/09/20/about-design-model5/appendix-1.png" alt="appendix-1"><br><img src="/2022/09/20/about-design-model5/appendix-2.png" alt="appendix-2"><br><img src="/2022/09/20/about-design-model5/appendix-3.png" alt="appendix-3"><br><img src="/2022/09/20/about-design-model5/appendix-4.png" alt="appendix-4"><br><img src="/2022/09/20/about-design-model5/appendix-5.png" alt="appendix-5"><br><img src="/2022/09/20/about-design-model5/appendix-6.png" alt="appendix-6"><br><img src="/2022/09/20/about-design-model5/appendix-7.png" alt="appendix-7"><br><img src="/2022/09/20/about-design-model5/appendix-8.png" alt="appendix-8"><br><img src="/2022/09/20/about-design-model5/appendix-9.png" alt="appendix-9"><br><img src="/2022/09/20/about-design-model5/appendix-10.png" alt="appendix-10"></p><p>疑问点：<br>(1)为什么要缓存Array的slice方法？slice = Array.prototype.slice<br>编程方式区分，不要糅合在一起<br>对性能影响可以忽略不计</p><p>(2)有一些模式很像，一定需要做区分吗？<br>从实际场景触发，贴合场景选择设计模式<br>设计模式一定要符合当下场景，在此基础上考虑一些将来的扩展，如果未来不符合要求了，优先考虑修改涉及模式以解决当前场景问题</p><p>(3)柯理化<br>函数；<br>接受多个参数（一个参数没必要用柯理化）；<br>将接受多个参数的函数变成 接受一个参数 的函数（函数嵌套），每个函数返回一个新函数并接受一个新的参数，直到最后返回计算结果<br>调用方式不一样。普通函数：函数名(参数1, 参数2, …);   柯理化：函数名(参数1)(参数2)…</p><p>对函数式编程用处比较大，也可以选择不使用柯理化，使用其他方法解决</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;架构型设计模式&quot;&gt;&lt;a href=&quot;#架构型设计模式&quot; class=&quot;headerlink&quot; title=&quot;架构型设计模式&quot;&gt;&lt;/a&gt;架构型设计模式&lt;/h4&gt;&lt;p&gt;架构型设计模式是一类框架结构,通过提供一些子系统，指定他们的职责,并将它们条理清晰地组织在一起。&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式读书笔记(5)</title>
    <link href="https://sunjinkang.github.io/2022/09/19/about-design-model4/"/>
    <id>https://sunjinkang.github.io/2022/09/19/about-design-model4/</id>
    <published>2022-09-19T09:51:10.000Z</published>
    <updated>2022-09-23T06:51:25.454Z</updated>
    
    <content type="html"><![CDATA[<h4 id="技巧型设计模式"><a href="#技巧型设计模式" class="headerlink" title="技巧型设计模式"></a>技巧型设计模式</h4><p>技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。</p><h6 id="链模式"><a href="#链模式" class="headerlink" title="链模式"></a>链模式</h6><p>链模式(Operate of Responsibility):通过在对象方法中将当前对象返回，实现对同一个对象多个方法的链式调用。从而简化对该对象的多个方法的多次调用时，对该对象的多次引用。</p><p><img src="/2022/09/19/about-design-model4/chain-model-1.png" alt="chain-model-1"><br><img src="/2022/09/19/about-design-model4/chain-model-2.png" alt="chain-model-2"><br><img src="/2022/09/19/about-design-model4/chain-model-3.png" alt="chain-model-3"></p><p>jOuery获取的元素更像一个数组，上面框架返回的更像是一个对象<br>原因：由于JavaScript 的弱类型语言，并且数组、对象、函数都被看成是对象的实例，所以JavaScript中并没有一个纯粹的数组类型。而且JavaScript引擎的实现也没有做严格的校验，也是基于对象实现的。一些浏览器解析引擎在判断对象是否是数组的时候不仅仅判断其有没有length 属性，可否通过‘![索引值]’方式访问元素，还会判断其是否具有数组方法来确定是否要用数组的形式展现，所以只需要在 A.fn中添加几个数组常用的方法来增强数组特性就可以解决问题了<br><img src="/2022/09/19/about-design-model4/chain-model-4.png" alt="chain-model-4"></p><p><img src="/2022/09/19/about-design-model4/chain-model-5.png" alt="chain-model-5"><br><img src="/2022/09/19/about-design-model4/chain-model-6.png" alt="chain-model-6"></p><h6 id="委托模式"><a href="#委托模式" class="headerlink" title="委托模式"></a>委托模式</h6><p>委托模式(Entrust):多个对象接收并处理同一请求，他们将请求委托给另一个对象统一处理请求。</p><p>委托模式可以优化页面中事件的数量。</p><p>事件委托是将子元素的事件委托给父元素，然后通过事件冒泡传递的，再通过判断事件源的某种特性来执行某一业务逻辑</p><p><img src="/2022/09/19/about-design-model4/entrust-model-1.png" alt="entrust-model-1"><br><img src="/2022/09/19/about-design-model4/entrust-model-2.png" alt="entrust-model-2"></p><h6 id="数据访问对象模式"><a href="#数据访问对象模式" class="headerlink" title="数据访问对象模式"></a>数据访问对象模式</h6><p>数据访问对象模式(Data access object-DAO):抽象和封装对数据源的访问与存储，DAO通过对数据源链接的管理方便对数据的访问与存储。</p><p><img src="/2022/09/19/about-design-model4/localstorage-model-1.png" alt="localstorage-model-1"><br><img src="/2022/09/19/about-design-model4/localstorage-model-2.png" alt="localstorage-model-2"><br><img src="/2022/09/19/about-design-model4/localstorage-model-3.png" alt="localstorage-model-3"><br><img src="/2022/09/19/about-design-model4/localstorage-model-4.png" alt="localstorage-model-4"><br><img src="/2022/09/19/about-design-model4/localstorage-model-5.png" alt="localstorage-model-5"><br><img src="/2022/09/19/about-design-model4/localstorage-model-6.png" alt="localstorage-model-6"></p><h6 id="节流模式"><a href="#节流模式" class="headerlink" title="节流模式"></a>节流模式</h6><p>节流模式(Throttler):对重复的业务逻辑进行节流控制，执行最后一次操作并取消其他操作，以提高性能。</p><p><img src="/2022/09/19/about-design-model4/throttle-model-1.png" alt="throttle-model-1"><br><img src="/2022/09/19/about-design-model4/throttle-model-2.png" alt="throttle-model-2"><br><img src="/2022/09/19/about-design-model4/throttle-model-3.png" alt="throttle-model-3"></p><p>节流模式的核心思想是创建计时器，延迟程序的执行。这也使得计时器中回调函数的操作异步执行(这里的异步执行并不是说JavaScript是多线程语言，JavaScript 从设计之初就是单线程语言，异步只是说脱离原来程序执行的顺序,看上去，异步程序像是在同时执行。但是某一时刻，当前执行的程序一定是所有异步程序(包括原程序)中的某一个)。</p><p>节流模式优势<br>(1)第一，程序能否执行是可控的。执行前的某一时刻是否清除计时器来决定程序是否可以继续执行<br>(2)第二，程序是异步的。由于计时器机制，使得程序脱离原程序而异步执行(当然随着worker技术的兴起，也可开启多线程模式实现)，因此不会影响后面的程序的正常执行。在其他方面，比如对异步请求(ajax)应用节流，此时可以优化请求次数来节省资源。</p><h6 id="简单模板模式"><a href="#简单模板模式" class="headerlink" title="简单模板模式"></a>简单模板模式</h6><p>简单模板模式(Simple template):通过格式化字符串拼凑出视图避免创建视图时大量节点操作。优化内存开销。</p><p><img src="/2022/09/19/about-design-model4/template-model-1.png" alt="template-model-1"><br><img src="/2022/09/19/about-design-model4/template-model-2.png" alt="template-model-2"><br><img src="/2022/09/19/about-design-model4/template-model-3.png" alt="template-model-3"><br><img src="/2022/09/19/about-design-model4/template-model-4.png" alt="template-model-4"><br><img src="/2022/09/19/about-design-model4/template-model-5.png" alt="template-model-5"><br><img src="/2022/09/19/about-design-model4/template-model-6.png" alt="template-model-6"></p><h6 id="惰性模式"><a href="#惰性模式" class="headerlink" title="惰性模式"></a>惰性模式</h6><p>惰性模式(layier):减少每次代码执行时的重复性的分支判断，通过对对象重定义来屏蔽原对象中的分支判断。</p><p>两种实现方式<br>(1)第一种就是在文件加载进来时通过闭包执行该方法对其重新定义。不过这样会使页面加载时占用一定资源。<br>(2)第二种方式是在第一种方式基础上做一次延迟执行，在函数第一次调用的时候对其重定义。这么做的好处就是减少文件加载时的资源消耗，但是却在第一次执行时有一定的资源消耗</p><p><img src="/2022/09/19/about-design-model4/lazy-model-1.png" alt="lazy-model-1"><br><img src="/2022/09/19/about-design-model4/lazy-model-2.png" alt="lazy-model-2"><br><img src="/2022/09/19/about-design-model4/lazy-model-3.png" alt="lazy-model-3"><br><img src="/2022/09/19/about-design-model4/lazy-model-4.png" alt="lazy-model-4"><br><img src="/2022/09/19/about-design-model4/lazy-model-5.png" alt="lazy-model-5"><br><img src="/2022/09/19/about-design-model4/lazy-model-6.png" alt="lazy-model-6"></p><h6 id="参与者模式"><a href="#参与者模式" class="headerlink" title="参与者模式"></a>参与者模式</h6><p>参与者(participator):在特定的作用域中执行给定的函数，并将参数原封不动地传递。</p><p><img src="/2022/09/19/about-design-model4/participate-model-1.png" alt="participate-model-1"><br><img src="/2022/09/19/about-design-model4/participate-model-2.png" alt="participate-model-2"></p><p>函数柯里化的思想是对函数的参数分割，这有点像其他面向语言中的类的多态，就是根据传递的参数不同，可以让一个函数存在多种状态，只不过函数柯里化处理的是函数，因此要实现函数的柯里化是要以函数为基础的，借助柯里化器伪造其他函数，让这些伪造的函数在执行时调用这个基函数完成不同的功能</p><p><img src="/2022/09/19/about-design-model4/participate-model-3.png" alt="participate-model-3"><br><img src="/2022/09/19/about-design-model4/participate-model-4.png" alt="participate-model-4"><br><img src="/2022/09/19/about-design-model4/participate-model-5.png" alt="participate-model-5"></p><p>参与者模式实质上是两种技术的结晶，函数绑定和函数柯里化<br>(1)对于函数绑定，它将函数以函数指针(函数名)的形式传递，使函数在被绑定的对象作用域中执行，因此函数的执行中可以顺利地访问到对象内部的数据，由于函数绑定构造复杂，执行时需消耗更多的内存，因此执行速度上要稍慢一些。不过相对于解决的问题来说这种消耗还是值得的，因此它常用于事件，setTimeout或setInterval等异步逻辑中的回调函数。<br>(2)对于函数柯里化即是将接受多个参数的函数转化为接受一部分参数的新函数,余下的参数保存下来，当函数调用时，返回传入的参数与保存的参数共同执行的结果。通常保存下来的参数保存于闭包内,因此函数柯里化的实现要消耗一定的资源。函数的柯里化有点类似类的重载,不同点是类的重载是同一个类对象,函数的柯里化是两个不同的函数。</p><p>随着函数柯里化的发展，现在又衍生出一种反柯里化的函数，其目的是方便我们对方法的调用<br><img src="/2022/09/19/about-design-model4/participate-model-6.png" alt="participate-model-6"></p><h6 id="等待者模式"><a href="#等待者模式" class="headerlink" title="等待者模式"></a>等待者模式</h6><p>等待者模式(waiter):通过对多个异步进程监听，来触发未来发生的动作。</p><p><img src="/2022/09/19/about-design-model4/waiter-model-1.png" alt="waiter-model-1"><br><img src="/2022/09/19/about-design-model4/waiter-model-2.png" alt="waiter-model-2"><br><img src="/2022/09/19/about-design-model4/waiter-model-3.png" alt="waiter-model-3"><br><img src="/2022/09/19/about-design-model4/waiter-model-4.png" alt="waiter-model-4"><br><img src="/2022/09/19/about-design-model4/waiter-model-5.png" alt="waiter-model-5"><br><img src="/2022/09/19/about-design-model4/waiter-model-6.png" alt="waiter-model-6"><br><img src="/2022/09/19/about-design-model4/waiter-model-7.png" alt="waiter-model-7"><br><img src="/2022/09/19/about-design-model4/waiter-model-8.png" alt="waiter-model-8"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;技巧型设计模式&quot;&gt;&lt;a href=&quot;#技巧型设计模式&quot; class=&quot;headerlink&quot; title=&quot;技巧型设计模式&quot;&gt;&lt;/a&gt;技巧型设计模式&lt;/h4&gt;&lt;p&gt;技巧型设计模式是通过一些特定技巧来解决组件的某些方面的问题，这类技巧一般通过实践经验总结得到。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式读书笔记(4)</title>
    <link href="https://sunjinkang.github.io/2022/09/07/about-design-model3/"/>
    <id>https://sunjinkang.github.io/2022/09/07/about-design-model3/</id>
    <published>2022-09-07T09:40:43.000Z</published>
    <updated>2022-09-22T09:17:06.427Z</updated>
    
    <content type="html"><![CDATA[<h4 id="行为型设计模式"><a href="#行为型设计模式" class="headerlink" title="行为型设计模式"></a>行为型设计模式</h4><p>行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象,还涉及类或对象之间的交流模式并加以实现</p><h6 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h6><p>模板方法模式(Template Method):父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时可重新定义算法中某些实现步骤。</p><p>多用于归一化组件</p><p><img src="/2022/09/07/about-design-model3/basic-model.png" alt="basic-model"><br><img src="/2022/09/07/about-design-model3/inherit-model.png" alt="inherit-model"><br><img src="/2022/09/07/about-design-model3/inherit-as-basic-model.png" alt="inherit-as-basic-model"></p><h6 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h6><p>观察者模式(Observer):又被称作发布-订阅者模式或消息机制，定义了一种依赖关系，解决了主体对象与观察者之间功能的耦合。</p><p>观察者对象包含：一个消息容器，订阅消息方法、取消订阅的消息方法、发送订阅的消息方法</p><p><img src="/2022/09/07/about-design-model3/observer.png" alt="observer"><br><img src="/2022/09/07/about-design-model3/observer-regist.png" alt="observer-regist"><br><img src="/2022/09/07/about-design-model3/observer-fire.png" alt="observer-fire"><br><img src="/2022/09/07/about-design-model3/observer-remove.png" alt="observer-remove"></p><p><img src="/2022/09/07/about-design-model3/regist-message.png" alt="regist-message"><br><img src="/2022/09/07/about-design-model3/regist-change-num.png" alt="regist-change-num"><br><img src="/2022/09/07/about-design-model3/add-message.png" alt="add-message"></p><h6 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h6><p>状态模式(State):当一个对象的内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对象。</p><p>状态模式简化了分支判断遍历逻辑</p><p><img src="/2022/09/07/about-design-model3/vote-status.png" alt="vote-status"></p><p>示例<br>思路：首先创建一个状态对象，内部保存状态变量，然后内部封装好每种,动作对应的状态，最后状态对象返回一个接口对象，它可以对内部的状态修改或者调用<br><img src="/2022/09/07/about-design-model3/marry-state.png" alt="marry-state"><br><img src="/2022/09/07/about-design-model3/marry-state1.png" alt="marry-state1"></p><h6 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h6><p>策略模式(Strategy):将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化。</p><p><strong>与状态模式异同点</strong><br>相同点：结构上与状态模式很像，也是在内部封装一个对象，然后通过返回的接口对象实现对内部对象的调用<br>不同点：策略模式不需要管理状态、状态间没有依赖关系、策略之间可以相互替换、在策略对象内部保存的是相互独立的一些算法</p><p><img src="/2022/09/07/about-design-model3/price-strategy.png" alt="price-strategy"></p><p><strong>策略模式的优点</strong><br>第一，策略模式封装了一组代码簇，并且封装的代码相互之间独立，便于对算法的重复引用，提高了算法的复用率。<br>第二，策略模式与继承相比，在类的继承中继承的方法是被封装在类中，因此当需求很多算法时，就不得不创建出多种类，这样会导致算法与算法的使用者耦合在一起,不利于算法的独立演化，并且在类的外部改变类的算法难度也是极大的。<br>第三，同状态模式一样,策略模式也是一种优化分支判断语句的模式,采用策略模式对算法封装使得算法更利于维护。</p><p><strong>策略模式的缺点</strong><br>由于选择哪种算法的决定权在用户，所以对用户来说就必须了解每种算法的实现,增加了用户对策略对象的使用成本。<br>由于每种算法间相互独立，这样对于一些复杂的算法处理相同逻辑的部分无法实现共享，这就会造成一些资源的浪费</p><p><strong>优化分支语句的模式</strong><br>工厂方法模式，状态模式与策略模式<br>工厂方法模式：一种创建型模式，最终目的是创建对象。<br>状态模式是行为型模式，不过在状态模式中，其核心是对状态的控制来决定表现行为，所以状态之间通常是不能相互替代的，否则将产生不同的行为结果。<br>策略模式是行为型模式，核心是算法，由于每种算法要处理的业务逻辑相同，因此他们可以相互替换，当然策略模式并不关心使用者环境，因为同一种策略模式最终产出的结果是一定的。</p><h6 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h6><p>职责链模式(Chain of Responsibility):解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象对分解请求流程，实现请求在多个对象之间的传递，直到最后一个对象完成请求的处理。</p><p>示例<br><img src="/2022/09/07/about-design-model3/send-data.png" alt="send-data"><br><img src="/2022/09/07/about-design-model3/deal-data.png" alt="deal-data"><br><img src="/2022/09/07/about-design-model3/create-component.png" alt="create-component"></p><p><strong>缺点</strong><br>职责链上的每一个对象不一定都能参与请求的传递，有时会造成一丝资源的浪费<br>多个对象参与请求的传递，在代码调试时增加了调试成本</p><h6 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h6><p>命令模式(Command):将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化。<br>命令模式常用于解耦<br><img src="/2022/09/07/about-design-model3/command-model-1.png" alt="command-model-1"><br><img src="/2022/09/07/about-design-model3/command-model-2.png" alt="command-model-2"><br><img src="/2022/09/07/about-design-model3/command-model-3.png" alt="command-model-3"></p><p>命令模式的优点:<br>解决命令使用者之间的耦合。新的命令很容易加入到命令系统中，供使用者使用。<br>命令的使用具有一致性，多数的命令在一定程度上是简化操作方法的使用的。</p><p>命令模式的缺点:<br>命令模式是对一些操作的封装，这就造成每执行一次操作都要调用一次命令对象，增加了系统的复杂度。</p><h6 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h6><p>访问者模式(Visitor):针对于对象结构中的元素，定义在不改变该对象的前提下访问结构中元素的新方法。</p><p><img src="/2022/09/07/about-design-model3/visitor-model.png" alt="visitor-model"></p><h6 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h6><p>中介者模式(Mediator):通过中介者对象封装一系列对象之间的交互，使对象之间不再相互引用，降低他们之间的耦合。有时中介者对象也可改变对象之间的交互。</p><p>(1)观察者模式与中介者模式的区别<br>相同点<br>都是通过消息的收发机制实现的<br>差异点<br>在观察者模式中，一个对象既可以是消息的发送者也可以是消息的接收者，他们之间信息交流依托于消息系统实现的解耦,需要写一个消息系统<br>中介者模式中消息的发送方只有一个，就是中介者对象，而且中介者对象不能订阅消息，只有那些活跃对象(订阅者)才可订阅中介者的消息，当然你也可以看作是将消息系统封装在中介者对象内部，所以中介者对象只能是消息的发送者</p><p><img src="/2022/09/07/about-design-model3/mediator-model.png" alt="mediator-model"></p><h6 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h6><p>备忘录模式(Memento):在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部的状态以便日后对象使用或者对象恢复到以前的某个状态。</p><p><img src="/2022/09/07/about-design-model3/cache-model.png" alt="cache-model"></p><h6 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h6><p>迭代器模式(Iterator):在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。</p><p><img src="/2022/09/07/about-design-model3/iterator-model.png" alt="iterator-model"></p><h6 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h6><p>解释器模式(Interpreter):对于一种语言，给出其文法表示形式，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子。</p><p><img src="/2022/09/07/about-design-model3/explain-model-1.png" alt="explain-model-1"><br><img src="/2022/09/07/about-design-model3/explain-model-2.png" alt="explain-model-2"><br><img src="/2022/09/07/about-design-model3/explain-model-3.png" alt="explain-model-3"></p><p>解释器即是对客户提出的需求，经过解析而形成的一个抽象解释程序。而是否可以应用解释器模式的一条重要准侧是<strong>能否根据需求解析出一套完成的语法规则,不论该语法规则简单或是复杂都是必须的</strong>。因为解释器要按照这套规则才能实现相应的功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;行为型设计模式&quot;&gt;&lt;a href=&quot;#行为型设计模式&quot; class=&quot;headerlink&quot; title=&quot;行为型设计模式&quot;&gt;&lt;/a&gt;行为型设计模式&lt;/h4&gt;&lt;p&gt;行为型设计模式用于不同对象之间职责划分或算法抽象，行为型设计模式不仅仅涉及类和对象,还涉及类或对象之</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式读书笔记(3)</title>
    <link href="https://sunjinkang.github.io/2022/09/06/about-design-model2/"/>
    <id>https://sunjinkang.github.io/2022/09/06/about-design-model2/</id>
    <published>2022-09-06T07:11:48.000Z</published>
    <updated>2022-09-22T09:16:44.404Z</updated>
    
    <content type="html"><![CDATA[<h4 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h4><p>结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计</p><h6 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h6><p>外观模式(Facade):为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易。在JavaScript中有时也会用于对底层结构兼容性做统一封装来简化用户使用</p><p>多用于兼容模式<br><img src="/2022/09/06/about-design-model2/out-look.png" alt="out-look"></p><h6 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h6><p>适配器模式(Adapter):将一个类(对象)的接口(方法或者属性)转化成另外一个接口,以满足用户需求，使类(对象)之间接口的不兼容问题通过适配器得以解决</p><p>(1)适配异类框架<br>(2)参数适配器：通常是以一个参数对象方式传入<br>(3)数据适配<br>比如一个数组，每个元素代表不同意义，数据结构语义不好，将其适配为一个对象等<br>(4)服务端数据适配<br>获取接口的数据，先做一个适配，再使用统一的处理方法</p><h6 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h6><p>代理模式(Proxy):由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介的作用</p><p><strong>代理对象</strong><br>(1)img之类的标签通过src属性可以向其他域下的服务器发送请求<br>缺点：请求是get请求，且是单向的，不会有响应数据<br>示例：站长统计<br><img src="/2022/09/06/about-design-model2/station-culculate.png" alt="station-culculate"></p><p>(2)JSONP<br>通过script标签<br>需要其他域下的服务端配合前端做出针对处理</p><p>(3)代理模板<br>不同域之间相互调用对方的页面是有限制的，那么自己域中的两个页面相互之间的调用是可以的，即代理页面B调用被代理的页面A中对象的方式是可以的。那么要实现这种方式我们只需要在被访问的域中，请求返回的Header重定向到代理页面，并在代理页面中处理被代理的页面A</p><h6 id="装修者模式"><a href="#装修者模式" class="headerlink" title="装修者模式"></a>装修者模式</h6><p>装饰者模式(Decorator):在不改变原对象的基础上，通过对其进行包装拓展(添加属性或者方法)使原有对象可以满足用户的更复杂需求<br><img src="/2022/09/06/about-design-model2/decorator.png" alt="decorator"></p><p><strong>适配器与装修者的区别</strong><br>适配器方法是对原有对象适配，添加的方法与原有方法功能上大致相似；使用适配器时新增的方法是要调用原来的方法，要了解原有方法实现的具体细节<br>装饰者提供的方法与原来的方法功能项是有一定区别的；不需要了解对象原有的功能，并且对象原有的方法照样可以原封不动地使用</p><h6 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h6><p>桥接模式(Bridge):在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦</p><p>先抽象提取共用部分，然后将实现与抽象通过桥接方法链接在一起，来实现解耦的作用</p><p><img src="/2022/09/06/about-design-model2/bridge1.png" alt="bridge1"><br><img src="/2022/09/06/about-design-model2/bridge2.png" alt="bridge2"><br><img src="/2022/09/06/about-design-model2/bridge3.png" alt="bridge3"></p><p>桥接模式最主要的特点即是将实现层(如元素绑定的事件)与抽象层(如修饰页面UI逻辑)解耦分离，使两部分可以独立变化</p><h6 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h6><p>组合模式(Composite):又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><p>组合模式常用语创建表单。</p><h6 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h6><p>享元模式(Flyweight):运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。</p><p>享元模式主要还是对其数据、方法共享分离，它将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或者共有的数据和方法,所以将这一部分提取出来减少开销，以提高性能。</p><p>在一些小程序中，性能与内存的消耗对程序的执行影响不大时，强行应用享元模式而引入复杂的代码逻辑,往往会收到负效应。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;结构型设计模式&quot;&gt;&lt;a href=&quot;#结构型设计模式&quot; class=&quot;headerlink&quot; title=&quot;结构型设计模式&quot;&gt;&lt;/a&gt;结构型设计模式&lt;/h4&gt;&lt;p&gt;结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计&lt;/p&gt;
&lt;h6 id=&quot;外观</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Object获取及设置原型对象</title>
    <link href="https://sunjinkang.github.io/2022/09/05/get-and-set-prototypeof/"/>
    <id>https://sunjinkang.github.io/2022/09/05/get-and-set-prototypeof/</id>
    <published>2022-09-05T05:54:58.000Z</published>
    <updated>2022-09-05T06:42:22.960Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Object获取原型对象：Object-getPrototypeOf"><a href="#Object获取原型对象：Object-getPrototypeOf" class="headerlink" title="Object获取原型对象：Object.getPrototypeOf"></a>Object获取原型对象：Object.getPrototypeOf</h6><p>Object.getPrototypeOf用于获取指定对象的原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(obj);</span><br></pre></td></tr></table></figure><p><strong>参数</strong><br>obj: 参数为要获取原型对象的对象<br><strong>返回值</strong><br>返回指定对象的原型对象或null<br>注意：<br>es5中，如果参数不是对象，会抛出TypeError错误<br>es6中，如果参数不是对象，会强制类型转换为对象<br><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="string">&#x27;12&#x27;</span>) === <span class="built_in">String</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="number">12</span>) === <span class="built_in">Number</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(&#123;&#125;) === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="literal">true</span>) === <span class="built_in">Boolean</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Symbol</span>(<span class="string">&#x27;test&#x27;</span>)) === <span class="built_in">Symbol</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="literal">null</span>)); <span class="comment">// Uncaught TypeError: Cannot convert undefined or null to object</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="literal">undefined</span>)); <span class="comment">// Uncaught TypeError: Cannot convert undefined or null to object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对没有原型对象的对象进行操作</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj)); <span class="comment">// null</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(<span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj)); <span class="comment">// Uncaught TypeError: Object prototype may only be an Object or null: undefined</span></span><br></pre></td></tr></table></figure><h6 id="Object修改原型对象-Object-setPrototypeOf"><a href="#Object修改原型对象-Object-setPrototypeOf" class="headerlink" title="Object修改原型对象: Object.setPrototypeOf"></a>Object修改原型对象: Object.setPrototypeOf</h6><p>Object.setPrototypeOf用于将指定对象的原型对象设置到一个新的对象或null上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br></pre></td></tr></table></figure><p><strong>参数</strong><br>obj: 要设置原型对象的对象<br>proto: 要设置的新原型对象或null，未设置时抛出TypeError错误</p><p><strong>返回值</strong><br>设置了新原型对象的对象</p><p>注意：该操作实际上是个很耗时的操作，如果对性能有更高的要求，不建议直接修改已有对象的原型，而应该通过Object.create()方法来创建一个新的对象</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">Object</span>.create(obj);</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(newObj, obj);</span><br><span class="line"><span class="built_in">console</span>.log(newObj.name); <span class="comment">// &#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> otherObj = &#123; <span class="attr">age</span>: <span class="number">12</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(newObj) === obj); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(newObj, otherObj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(newObj) === obj); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(newObj) === otherObj); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.name); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.age); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;Object获取原型对象：Object-getPrototypeOf&quot;&gt;&lt;a href=&quot;#Object获取原型对象：Object-getPrototypeOf&quot; class=&quot;headerlink&quot; title=&quot;Object获取原型对象：Object.getP</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开发中使用的便捷代码</title>
    <link href="https://sunjinkang.github.io/2022/09/05/some-convenient-code/"/>
    <id>https://sunjinkang.github.io/2022/09/05/some-convenient-code/</id>
    <published>2022-09-05T05:24:10.000Z</published>
    <updated>2022-09-05T05:42:03.830Z</updated>
    
    <content type="html"><![CDATA[<h6 id="基于条件设置对象属性"><a href="#基于条件设置对象属性" class="headerlink" title="基于条件设置对象属性"></a>基于条件设置对象属性</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空值</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; ...name &amp;&amp; &#123;name&#125;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="comment">// 非空值</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;test_name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; ...name &amp;&amp; &#123;name&#125;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; name: &#x27;test_name&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h6 id="无中间变量交换变量值"><a href="#无中间变量交换变量值" class="headerlink" title="无中间变量交换变量值"></a>无中间变量交换变量值</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one = <span class="string">&#x27;12&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> two = <span class="string">&#x27;34&#x27;</span>;</span><br><span class="line">[one, two] = [two, one];</span><br><span class="line"><span class="built_in">console</span>.log(one); <span class="comment">// &#x27;34&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(two); <span class="comment">// &#x27;12&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="过滤Boolean值为false的值"><a href="#过滤Boolean值为false的值" class="headerlink" title="过滤Boolean值为false的值"></a>过滤Boolean值为false的值</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">0</span>, <span class="literal">false</span>, <span class="number">12</span>, <span class="literal">true</span>, <span class="string">&#x27;12&#x27;</span>, <span class="literal">undefined</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">8</span>, <span class="literal">null</span>];</span><br><span class="line"><span class="keyword">const</span> result = array.filter(<span class="built_in">Boolean</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [12, true, &#x27;12&#x27;, 8]</span></span><br></pre></td></tr></table></figure><h6 id="转换元素类型"><a href="#转换元素类型" class="headerlink" title="转换元素类型"></a>转换元素类型</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将Number类型转换为String</span></span><br><span class="line"><span class="keyword">const</span> string = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>].map(<span class="built_in">String</span>);</span><br><span class="line"><span class="built_in">console</span>.log(string); <span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;12&#x27;]</span></span><br><span class="line"><span class="comment">// 将String类型转换为Number</span></span><br><span class="line"><span class="keyword">const</span> string = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;12&#x27;</span>].map(<span class="built_in">Number</span>);</span><br><span class="line"><span class="built_in">console</span>.log(string); <span class="comment">// [1, 2, 3, 12]</span></span><br></pre></td></tr></table></figure><h6 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> repeatArray = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">23</span>,<span class="number">45</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...new <span class="built_in">Set</span>(repeatArray)];</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [1, 3, 5, 6, 7, 8, 9, 23, 45, 2]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;基于条件设置对象属性&quot;&gt;&lt;a href=&quot;#基于条件设置对象属性&quot; class=&quot;headerlink&quot; title=&quot;基于条件设置对象属性&quot;&gt;&lt;/a&gt;基于条件设置对象属性&lt;/h6&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tab</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式读书笔记(2)</title>
    <link href="https://sunjinkang.github.io/2022/09/04/about-design-model1/"/>
    <id>https://sunjinkang.github.io/2022/09/04/about-design-model1/</id>
    <published>2022-09-04T13:29:09.000Z</published>
    <updated>2022-09-22T09:16:30.022Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h4><p>创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度</p><h6 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h6><p>(1)简单工厂模式(Simple Factory):又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例。主要用来创建同一类对象。<br><img src="/2022/09/04/about-design-model1/simple-factory1.png" alt="simple-factory1"><br><img src="/2022/09/04/about-design-model1/simple-factory2.png" alt="simple-factory2"></p><p>(2)一个对象有时也可代替许多类<br><img src="/2022/09/04/about-design-model1/create-pop.png" alt="create-pop"></p><p>第一种是通过类实例化对象创建的，第二种是通过创建一个新对象然后包装增强其属性和功能来实现的。他们之间的差异性也造成前面通过类创建的对象,如果这些类继承同一父类，那么他们的父类原型上的方法是可以共用的。而后面寄生方式创建的对象都是一个新的个体，所以他们的方法就不能共用了</p><h6 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h6><p>安全模式类：可以屏蔽使用这对类的错误使用造成的错误<br><img src="/2022/09/04/about-design-model1/safe-model-class.png" alt="safe-model-class"><br><img src="/2022/09/04/about-design-model1/safe-factory-model.png" alt="safe-factory-model"></p><h6 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h6><p>抽象工厂模式(Abstract Factory):通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例</p><p>(1)抽象类<br>抽象类是一种声明但不能使用的类<br><img src="/2022/09/04/about-design-model1/abstract-car.png" alt="abstract-car"><br>创建的这个car类其实什么都不能做，创建时没有任何属性，然而原型prototype上的方法也不能使用，否则会报错。但在继承上却是很有用的，因为定义了一种类,并定义了该类所必备的方法，如果在子类中没有重写这些方法，那么当调用时能找到这些方法便会报错。这一特点是很有必要的，因为在一些大型应用中，总会有一些子类去继承另一些父类，这些父类经常会定义一些必要的方法，却没有具体的实现，如 car类中的 getPrice()和getSpeed()方法，那么一旦用子类创建了一个对象，该对象总是应该具备一些必要的方法，但如果这些必要的方法从父类中继承过来而没有具体去重写实现,那么实例化对象便会调用父类<br>中的这些方法，如果父类能有一个友好提示，那么对于忘记重写子类的这些错误遗漏的避免是很有帮助的。这也是抽象类的一个作用，即定义一个产品簇，并声明一些必备的方法，如果子类中没有去重写就会抛出错误。</p><p>(2)抽象工厂模式：一般用它来作为父类创建一些子类<br><img src="/2022/09/04/about-design-model1/abstract-factory1.png" alt="abstract-factory1"><br><img src="/2022/09/04/about-design-model1/abstract-factory2.png" alt="abstract-factory2"><br>抽象工厂其实是一个实现子类继承父类的方法，在这个方法中需要通过传递子类以及要继承父类(抽象类)的名称，并且在抽象工厂方法中又增加了一次对抽象类存在性的一次判断，如果存在，则将子类继承父类的方法。然后子类通过寄生式继承。继承父类过程中有一个地方需要注意，就是在对过渡类的原型继承时，不是继承父类的原型，而是通过new关键字复制的父类的一个实例，这么做是因为过渡类不应仅仅继承父类的原型方法，还要继承父类的对象属性，所以要通过new关键字将父类的构造函数执行一遍来复制构造函数中的属性和方法。对抽象工厂添加抽象类也很特殊,因为抽象工厂是个方法不需要实例化对象，故只需要一份，因此直接为抽象工厂添加类的属性即可，于是就可以通过点语法在抽象工厂上添加需要的三个汽车簇抽象类Car、Bus、Truck<br><img src="/2022/09/04/about-design-model1/abstract-factory3.png" alt="abstract-factory3"></p><h6 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h6><p>建造者模式(Builder):将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示</p><p>工厂模式主要是为了创建对象实例或者类簇(抽象工厂)，关心的是最终产出(创建)的是什么。不关心你创建的整个过程，仅仅需要知道你最终创建的结果。所以通过工厂模式我们得到的都是对象实例或者类簇。<br>建造者模式在创建对象时要更为复杂一些，虽然其目的也是为了创建对象，但是它更多关心的是创建这个对象的整个过程，甚至于创建对象的每一个细节<br><img src="/2022/09/04/about-design-model1/human.png" alt="human"><br><img src="/2022/09/04/about-design-model1/name.png" alt="name"><br><img src="/2022/09/04/about-design-model1/work.png" alt="work"><br><img src="/2022/09/04/about-design-model1/person.png" alt="person"></p><p>工厂模式创建出来的是一个对象，它追求的是创建的结果<br>建造者模式不仅仅可得到创建的结果，也参与了创建的具体过程，对于创建的具体实现的细节也参与了干涉，这种模式创建的对象是一个复合对象</p><p><strong>注意：这种方式对于整体对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低并且变动不大，最好还是创建整体对象</strong></p><h6 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h6><p>原型模式(Prototype):用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法</p><p>原型模式就是将可复用的、可共享的、耗时大的从基类中提出来然后放在其原型中，然后子类通过组合继承或者寄生组合式继承而将方法和属性继承下来，对于子类中那些需要重写的方法进行重写,这样子类创建的对象既具有子类的属性和方法也共享了基类的原型方法<br><img src="/2022/09/04/about-design-model1/prototype-model.png" alt="prototype-model"><br>原型模式有一个特点就是在任何时候都可以对基类或者子类进行方法的拓展，而且所有被实例化的对象或者类都能获取这些方法</p><p>(1)原型继承<br>原型模式更多的是用在对对象的创建上。比如创建一个实例对象的构造函数比较复杂，或者耗时比较长，或者通过创建多个对象来实现。此时最好不要用new关键字去复制这些基类，但可以通过对这些对象属性或者方法进行复制来实现创建，这是原型模式的最初思想。如果涉及多个对象，也可以通过原型模式来实现对新对象的创建。那么首先要有一个原型模式的对象复制方法<br><img src="/2022/09/04/about-design-model1/prototype-inherit1.png" alt="prototype-inherit1"><br><img src="/2022/09/04/about-design-model1/prototype-inherit2.png" alt="prototype-inherit2"></p><p><strong>原型对象更适合在创建复杂的对象时，对于那些需求一直在变化而导致对象结构不停地改变时，将那些比较稳定的属性与方法共用而提取的继承的实现</strong></p><h6 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h6><p>单例模式(Singleton):又被称为单体模式，是只允许实例化一次的对象类。有时我们也用一个对象来规划一个命名空间，井井有条地管理对象上的属性与方法</p><p>(1)命名空间<br>命名空间就是人们所说的namespace，有人也叫它名称空间。<br>它解决这么一类问题:为了让代码更易懂，人们常常用单词或者拼音定义变量或者方法，但由于人们可用的单词或者汉字拼音是有限的，所以不同的人定义的变量使用的单词名称很有可能重复，此时就需要用命名空间来约束每个人定义的变量来解决这类问题</p><p>(2)静态变量<br><img src="/2022/09/04/about-design-model1/static-param.png" alt="static-param"></p><p>(3)惰性单例<br><img src="/2022/09/04/about-design-model1/lazy-single-instance.png" alt="lazy-single-instance"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;创建型设计模式&quot;&gt;&lt;a href=&quot;#创建型设计模式&quot; class=&quot;headerlink&quot; title=&quot;创建型设计模式&quot;&gt;&lt;/a&gt;创建型设计模式&lt;/h4&gt;&lt;p&gt;创建型设计模式是一类处理对象创建的设计模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>es6对象增强</title>
    <link href="https://sunjinkang.github.io/2022/09/02/es6-object-strong/"/>
    <id>https://sunjinkang.github.io/2022/09/02/es6-object-strong/</id>
    <published>2022-09-02T02:42:05.000Z</published>
    <updated>2022-09-02T05:49:32.109Z</updated>
    
    <content type="html"><![CDATA[<h4 id="对象字面量语法扩展"><a href="#对象字面量语法扩展" class="headerlink" title="对象字面量语法扩展"></a>对象字面量语法扩展</h4><p>(1)属性赋值简写：给一个属性赋变量值时，如果变量和属性的名称相同，可以省略冒号、变量名，直接写属性名即可，js 引擎执行代码时，会自动查找与属性名相同的变量进行属性赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;name: &#x27;test&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>(2)简化属性方法定义：给一个属性赋匿名函数方法时，可以使用更简洁的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">const</span> es5Obj = &#123;</span><br><span class="line">  <span class="attr">testFunction</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;es5&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es5Obj.testFunction()); <span class="comment">// es5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> es6Obj = &#123;</span><br><span class="line">  <span class="function"><span class="title">testFunction</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;es6&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es6Obj.testFunction()); <span class="comment">// es6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **注意：只有赋值的是匿名函数，才可以使用简介语法**</span></span><br><span class="line"><span class="keyword">const</span> es6Obj1 = &#123;</span><br><span class="line">  <span class="attr">testFunction</span>: <span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es6Obj1.testFunction()); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p><strong>常见给函数取名字的情况：(1)递归，自己调用自己；(2)debugger 的时候，方便问题定位</strong></p><p>(3)计算属性名：属性可以动态生成，需要把动态属性用[]包括起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> es6Obj = &#123;</span><br><span class="line">  [<span class="string">&#x27;first&#x27;</span> + <span class="string">&#x27;second&#x27;</span>]: <span class="string">&#x27;hanmeimei&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es6Obj[<span class="string">&#x27;first&#x27;</span> + <span class="string">&#x27;second&#x27;</span>]); <span class="comment">// hanmeimei</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> first = <span class="string">&#x27;first&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> es6Obj1 = &#123;</span><br><span class="line">  [first + <span class="string">&#x27;second&#x27;</span>]: <span class="string">&#x27;hanmeimei&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es6Obj[first + <span class="string">&#x27;second&#x27;</span>]); <span class="comment">// hanmeimei</span></span><br></pre></td></tr></table></figure><p>(4)重复属性名的处理：es5 中，给对象赋值，如果存在相同的属性名，会报错；es6 中，不会报错，相同属性名的最后一个，会覆盖之前的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> es6Obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;second&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es6Obj); <span class="comment">// &#123;name: &#x27;second&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="新方法"><a href="#新方法" class="headerlink" title="新方法"></a>新方法</h4><p>(1)Object.is()<br>作用：判断两个数是否相等，与===基本一致，不过有两点不同：+0 不等于-0；NaN 等于 NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> == -<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>(2)Object.assign()<br>作用：将所有可枚举属性从一个或多个源对象复制到目标对象，并返回目标对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.assign(target, ...sources);  target为目标对象  sources为源对象</span></span><br><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source = &#123; <span class="attr">b</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> returnedTarget = <span class="built_in">Object</span>.assign(target, source);</span><br><span class="line"><span class="built_in">console</span>.log(target); <span class="comment">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(returnedTarget); <span class="comment">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure><p>(3)Object.setPrototypeOf()<br>作用：设置对象的原型对象，有两个参数，一个是对象，一个是对象要链接到的原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.setPrototypeOf(object, prototypeObject);</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">  <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;woof&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// obj 链接到person</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, person);</span><br><span class="line"><span class="built_in">console</span>.log(obj.greeting()); <span class="comment">// hello</span></span><br><span class="line"><span class="comment">// obj 链接到dog</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, dog);</span><br><span class="line"><span class="built_in">console</span>.log(obj.greeting()); <span class="comment">// woof</span></span><br></pre></td></tr></table></figure><p>当在对象上有某个方法时，会直接调用对象上的方法，不会去原型链上找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">  <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;woof&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"> <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;obj&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, person);</span><br><span class="line"><span class="built_in">console</span>.log(obj.greeting()); <span class="comment">// obj</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, dog);</span><br><span class="line"><span class="built_in">console</span>.log(obj.greeting()); <span class="comment">// obj</span></span><br></pre></td></tr></table></figure><p>在obj 对象中定义的方法，可能使用到原型对象上的同名方法， 只要调用原型对象上面的方法再进行一下组装就可以达到要求了。ES6 提供了super 关键词，它就指向原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">  <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;woof&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"> <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.greeting() + <span class="string">&#x27;obj&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, person);</span><br><span class="line"><span class="built_in">console</span>.log(obj.greeting()); <span class="comment">// helloobj</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, dog);</span><br><span class="line"><span class="built_in">console</span>.log(obj.greeting()); <span class="comment">// woofobj</span></span><br></pre></td></tr></table></figure><p>对象方法的定义只能使用简洁的语法形式，否则报错:Uncaught SyntaxError: ‘super’ keyword unexpected here<br><strong>为什么？？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;woof&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"> <span class="comment">// 以下写法报错：Uncaught SyntaxError: &#x27;super&#x27; keyword unexpected here</span></span><br><span class="line"> <span class="attr">greeting</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.greeting() + <span class="string">&#x27;obj&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, person);</span><br><span class="line"><span class="built_in">console</span>.log(obj.greeting());</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, dog);</span><br><span class="line"><span class="built_in">console</span>.log(obj.greeting());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;woof&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"> <span class="comment">// 以下方法可以正常运行</span></span><br><span class="line"> <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.greeting() + <span class="string">&#x27;obj&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, person);</span><br><span class="line"><span class="built_in">console</span>.log(obj.greeting()); <span class="comment">// helloobj</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, dog);</span><br><span class="line"><span class="built_in">console</span>.log(obj.greeting()); <span class="comment">// woofobj</span></span><br></pre></td></tr></table></figure><p><strong>在ES6 中，如果一个对象中定义了方法，这个方法自动获取到一个内置的属性[[HomeObject]], 来指向这个对象。super 呢，就是通过Object.getPrototypeOf([[HomeObject]]) 来获取到原型对象。obj.greeting() greeting() 方法中的[[HomeObject]] 就指向了obj.  那里面的super 就是Object.getPrototypeOf(obj), 那就是person 或dog 了，super.greeting() 就相当于person.greeting()了， 更为准确的说是 person.greeting.call(this).  因为如果person中的greenting有this, 我们还要给它指定this 指向， 不能让里面的this 指向别的对象， 只能让this 指向 obj 了。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;对象字面量语法扩展&quot;&gt;&lt;a href=&quot;#对象字面量语法扩展&quot; class=&quot;headerlink&quot; title=&quot;对象字面量语法扩展&quot;&gt;&lt;/a&gt;对象字面量语法扩展&lt;/h4&gt;&lt;p&gt;(1)属性赋值简写：给一个属性赋变量值时，如果变量和属性的名称相同，可以省略冒号、变</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式读书笔记(1)</title>
    <link href="https://sunjinkang.github.io/2022/08/20/about-design-model/"/>
    <id>https://sunjinkang.github.io/2022/08/20/about-design-model/</id>
    <published>2022-08-20T06:47:46.000Z</published>
    <updated>2022-09-22T09:15:58.613Z</updated>
    
    <content type="html"><![CDATA[<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>一、面向过程与面向对象<br>面向对象编程就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性)与动作（方法)。这个对象我们称之为类。面向对象编程思想其中有一个特点就是封装，就是说把你需要的功能放在一个对象里<br>二、封装<br>1、使用原型(prototype)为类添加属性和方法的两种方式(<strong>注意两种不能混用</strong>)：<br>(1)为原型对象属性赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book.prototype.display = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)将一个对象赋值给类的原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book.prototype = &#123;</span><br><span class="line">  display = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用this和原型(prototype)为类添加属性和方法的区别：<br>(1)使用this添加的属性和方法是在当前对象上添加的，每次通过类创建新对象时，this指向的属性和方法都会得到相应的创建<br>(2)通过prototype继承的属性和方法是每个对象通过prototype访问到的，新创建对象时，不会再新创建属性和方法</p><p>3、constructor是什么？<br>constructor是一个属性，当创建一个函数或者对象时都会为其创建一个原型对象prototype，在 prototype对象中又会像函数中创建 this一样创建一个constructor属性，那么constructor属性指向的就是拥有整个原型对象的函数或对象。<br><img src="/2022/08/20/about-design-model/prototype.png" alt="prototype"></p><p>4、属性与方法的封装<br>(1)私有属性与私有方法<br>由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的,通过此特性创建类的私有变量以及私有方法<br>(2)共有属性和共有方法<br>在函数内部通过 this创建的属性和方法，在类创建对象时，每个对象自身都拥有一份并且可以在外部访问到。因此通过this创建的属性可看作是对象共有属性和对象共有方法<br>(3)特权方法(类的构造器)<br>通过this创建的方法，不但可以访问这些对象的共有属性与共有方法，而且还能访问到类（创建时）或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性,因此这些在创建对象时调用的特权方法还可以看作是类的构造器<br><img src="/2022/08/20/about-design-model/public-and-private.png" alt="public-and-private"></p><p>5、在类的外部通过点语法定义的属性和方法以及在外部通过 prototype定义的属性和方法作用<br>(1)类的外部通过点语法定义的属性和方法：通过new关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到,所以新创建的对象中无法获取他们，但是可以通过类来使用。因此在类外面通过点语法定义的属性以及方法被称为类的静态共有属性和类的静态共有方法<br>(2)外部通过 prototype定义的属性和方法: 类通过prototype创建的属性或者方法在类实例的对象中是可以通过 this访问到的，所以我们将prototype对象中的属性和方法称为共有属性和共有方法<br><img src="/2022/08/20/about-design-model/static-and-public.png" alt="static-and-public"><br>通过new关键字创建的对象实质是对新对象 this 的不断赋值，并将prototype指向类的prototype所指向的对象，而类的构造函数外面通过点语法定义的属性方法是不会添加到新创建的对象上去的。因此要想在新创建的对象中使用 isChinese就得通过Book类使用而不能通过this，如 Book.isChinese，而类的原型 prototype 上定义的属性在新对象里就可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。</p><p>6、闭包<br>闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可访问到类函数作用域中的变量</p><p>7、创建对象的安全模式<br>new关键字的作用可以看作是对当前对象的this不停地赋值,没有用new，所以就会直接执行函数，而函数在全局作用域中执行所以在全局作用域中 this指向的当前对象自然就是全局变量<br><img src="/2022/08/20/about-design-model/safe-model.png" alt="safe-model"></p><p>三、继承<br>1、子类的原型对象 - 类式继承<br><img src="/2022/08/20/about-design-model/class-inherit.png" alt="class-inherit"><br>声明2个类而已，类式继承需要将第一个类的实例赋值给第二个类的原型<br>类的原型对象的作用就是为类的原型添加共有方法,但类不能直接访问这些属性和方法,必须通过原型prototype来访问。而我们实例化一个父类的时候，新创建的对象复制了父类的构造函数内的属性与方法并且将原型_proto_指向了父类的原型对象，这样就拥有了父类的原型对象上的属性与方法，并且这个新创建的对象可直接访问到父类原型对象上的属性与方法。如果我们将这个新创建的对象赋值给子类的原型，那么子类的原型就可以访问到父类的原型属性和方法。<br>新创建的对象不仅仅可以访问父类原型上的属性和方法，同样也可访问从父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型,那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。这是类式继承的原理</p><p>(1)可以使用instanceof来检测某个对象是否是某个类的实例，或者说某个对象是否继承了某个类<br>注意：instanceof是通过判断对象的 prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构<br><strong>instanceof是判断前面的对象是否是后面类(对象)的实例，它并不表示两者的继承，在实现上面的 subClass 继承superClass时是通过将 superClass的实例赋值给subClass 的原型prototype，所以说SubClass.prototype继承了superClass</strong></p><p>(2)类式继承的缺点<br>其一：由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的共有属性要是引用类型，就会在子类中被所有实例共用,因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其他子类<br>其二：由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的,因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化</p><p>2、创建即继承 - 构造函数继承<br><img src="/2022/08/20/about-design-model/constructor-inherit.png" alt="constructor-inherit"><br>SuperClass.call(this，id);这条语句是构造函数式继承的精华，由于 call这个方法可以更改函数的作用环境，因此在子类中，对superClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共用，这样就违背了代码复用的原则</p><p>3、将优点为我所用 - 组合继承<br>(1)类式继承是通过子类的原型prototype对父类实例化来实现的,构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的<br><img src="/2022/08/20/about-design-model/combination-inherit.png" alt="combination-inherit"><br>在子类构造函数中执行父类构造函数，在子类原型上实例化父类就是组合模式<br>(2)缺点<br>在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。因此父类构造函数调用了两遍</p><p>4、洁净的继承者 - 原型式继承<br><img src="/2022/08/20/about-design-model/prototype-inherit.png" alt="prototype-inherit"><br>对类式继承的一个封装，其实其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现的，目的是为了创建要返回的新的实例化对象<br><img src="/2022/08/20/about-design-model/test-prototype-inherit.png" alt="test-prototype-inherit"></p><p>5、如虎添翼 - 寄生式继承<br><img src="/2022/08/20/about-design-model/parasitic-inherit.png" alt="parasitic-inherit"><br>寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展,这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法</p><p>6、终极继承者 - 寄生组合式继承<br>寄生式继承和构造函数继承</p><p>寄生式继承的改造<br><img src="/2022/08/20/about-design-model/parasitic-inherit-change.png" alt="parasitic-inherit-change"></p><p><img src="/2022/08/20/about-design-model/parasitic-combination-inherit.png" alt="parasitic-combination-inherit"></p><p><img src="/2022/08/20/about-design-model/how-to-inherit.png" alt="how-to-inherit"></p><p><strong>子类再想添加原型方法必须通过 prototype.对象，通过点语法的形式一个一个添加方法了，否则直接赋予对象就会覆盖掉从父类原型继承的对象</strong></p><p>四、多继承<br>单继承(extend)：对对象中的属性的一个浅复制过程，只能复制值类型的属性，无法复制引用类型属性<br><img src="/2022/08/20/about-design-model/multiple-inherit.png" alt="multiple-inherit"></p><p>五、多态<br>同一个方法多种调用方式<br><img src="/2022/08/20/about-design-model/multiple-status.png" alt="multiple-status"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h4&gt;&lt;p&gt;一、面向过程与面向对象&lt;br&gt;面向对象编程就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性)与动作（方法)。这</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基本数据类型-Symbol</title>
    <link href="https://sunjinkang.github.io/2022/08/19/about-symbol/"/>
    <id>https://sunjinkang.github.io/2022/08/19/about-symbol/</id>
    <published>2022-08-19T05:37:24.000Z</published>
    <updated>2022-08-19T05:42:42.437Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Symbol"><a href="#什么是Symbol" class="headerlink" title="什么是Symbol?"></a>什么是Symbol?</h4><h4 id="有什么用处？"><a href="#有什么用处？" class="headerlink" title="有什么用处？"></a>有什么用处？</h4><h4 id="Symbol的属性"><a href="#Symbol的属性" class="headerlink" title="Symbol的属性"></a>Symbol的属性</h4><h4 id="Symbol的方法"><a href="#Symbol的方法" class="headerlink" title="Symbol的方法"></a>Symbol的方法</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是Symbol&quot;&gt;&lt;a href=&quot;#什么是Symbol&quot; class=&quot;headerlink&quot; title=&quot;什么是Symbol?&quot;&gt;&lt;/a&gt;什么是Symbol?&lt;/h4&gt;&lt;h4 id=&quot;有什么用处？&quot;&gt;&lt;a href=&quot;#有什么用处？&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunjinkang.github.io/2022/08/11/js-transform/js-transform/"/>
    <id>https://sunjinkang.github.io/2022/08/11/js-transform/js-transform/</id>
    <published>2022-08-11T05:19:34.637Z</published>
    <updated>2022-08-11T09:29:33.722Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Document</title>  </head>  <body>    <script>      console.log(`1 - true: ${1 - true}`);      console.log(`1 - false: ${1 - false}`);      console.log(`1 - null: ${1 - null}`);      console.log(`1 - undefined: ${1 - undefined}`);      console.log(`2 * ['5']: ${2 * ['5']}`);      console.log(`123 + '123': ${123 + '123'}`);      console.log(`123 + null: ${123 + null}`);      console.log(`123 + true: ${123 + true}`);      console.log(`123 + {}: ${123 + {}}`);      console.log(`NaN == NaN: ${NaN == NaN}`);      console.log(`true == 1: ${true == 1}`);      console.log(`true == '2': ${true == '2'}`);      console.log(`true == ['1']: ${true == ['1']}`);      console.log(`true == ['2']: ${true == ['2']}`);      console.log(`undefined == false: ${undefined == false}`);      console.log(`null == false: ${null == false}`);      console.log(`123 == '123': ${123 == '123'}`);      console.log(`'' == 0: ${'' == 0}`);      console.log(`null == undefined: ${null == undefined}`); // true      console.log(`null == '': ${null == ''}`); // false      console.log(`null == 0: ${null == 0}`); // false      console.log(`null == false: ${null == false}`); // false      console.log(`undefined == '': ${undefined == ''}`); // false      console.log(`undefined == 0: ${undefined == 0}`); // false      console.log(`undefined == false: ${undefined == false}`); // false      console.log(`'[object Object]' == {}: ${'[object Object]' == {}}`); // true      console.log(`'1,2,3' == [1, 2, 3]: ${'1,2,3' == [1, 2, 3]}`); // true      console.log(`'10' > '2': ${'10' > '2'}`); // false    </script>  </body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta nam</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>装箱拆箱操作</title>
    <link href="https://sunjinkang.github.io/2022/08/09/devan-operation/"/>
    <id>https://sunjinkang.github.io/2022/08/09/devan-operation/</id>
    <published>2022-08-09T05:43:57.000Z</published>
    <updated>2022-08-18T07:29:53.069Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道属性和方法是对象上的，但是基本数据类型可以访问属性和方法，比如：’hello world’.length。这是由于浏览器在内部做了装箱和拆箱操作。</p><h4 id="什么是装箱拆箱？"><a href="#什么是装箱拆箱？" class="headerlink" title="什么是装箱拆箱？"></a>什么是装箱拆箱？</h4><p>装箱：把基本数据类型转化为对应的引用类型的操作<br>拆箱：把引用类型转化为基本数据类型的操作</p><p>基本数据类型：字符串(String)、数字(Number)、布尔(Boolean)、空(Null)、未定义(Undefined)、Symbol<br>引用数据类型：对象(Object)、数组(Array)、函数(Function)<br>四个基本的包装类型 String、Number、Boolean、Symbol</p><p>什么是包装类型？<br>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，之所以具有对象特征的原因是字符串、数值、布尔类型数据是JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型</p><h4 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h4><p>装箱分为显式装箱和隐式装箱</p><h6 id="显式装箱"><a href="#显式装箱" class="headerlink" title="显式装箱"></a>显式装箱</h6><p>通过基本包装类型对象对基本类型进行显式装箱，即通过new的方式声明数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;test_string&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> number = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>显式装箱可以对声明的对象进行属性和方法的添加，这是因为通过new创建的实例，在执行流离开当前作用域之前一直保留在内存中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;test_string&#x27;</span>);</span><br><span class="line">string.name = <span class="string">&#x27;for test&#x27;</span>;</span><br><span class="line">string.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this is test string&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(string.name); <span class="comment">// for test</span></span><br><span class="line">string.sayHi(); <span class="comment">// this is test string</span></span><br></pre></td></tr></table></figure><h6 id="隐式装箱"><a href="#隐式装箱" class="headerlink" title="隐式装箱"></a>隐式装箱</h6><p>隐式装箱是引擎自动执行的<br>基本类型不能添加属性和方法，添加会报错。但是常常在使用的时候，可以直接调用方法，比如：’test_string’.substring()、’test_string’.indexOf()等，这是由于浏览器在内部做了隐式装箱。</p><p>下面以一个例子进行说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">&#x27;test_string&#x27;</span>;</span><br><span class="line"><span class="comment">// 第二步</span></span><br><span class="line"><span class="keyword">var</span> result = string.substring(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// _string</span></span><br></pre></td></tr></table></figure><p>在上面这段代码里面实际的执行步骤是：<br>1、先创建一个String类型的一个实例<br>2、在实例中调用方法<br>3、销毁这个实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">&#x27;test_string&#x27;</span>;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> newString = <span class="keyword">new</span> <span class="built_in">String</span>(string);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> result = newString.substring(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">newString = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>基于以上的隐式装箱操作，我们可以在基本类型上使用方法<br>隐式装箱当读取一个基本类型值时，后台会创建一个该基本类型所对应的基本包装类型对象。在这个基本类型的对象上调用方法，其实就是在这个基本类型对象上调用方法。这个基本包装类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立即被销毁。这也是在基本类型上添加属性和方法会不识别或报错的原因了</p><p>显式装箱可以添加属性和方法，隐式装箱不能添加属性和方法</p><p>引用类型与基本包装类型的主要区别就是对象的生存期，使用new创建的引用类型实例当执行流离开当前作用域之前，都一直保存在内存中，而自动创建的基本包装类型的对象，则只存在于一行代码执行的瞬间，然后就被销毁。这就意味着我们不能给基本包装类型添加属性和方法。</p><h4 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h4><p>拆箱是和装箱相反的操作，即把引用类型转换成基本的数据类型。通常通过引用类型的valueOf()和toString()方法来实现，toString()返回字符串，valueOf()返回对象本身。<br>需要注意的是，toString() 和 valueOf() 返回的值有一定差别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberObj = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">64</span>);</span><br><span class="line"><span class="keyword">var</span> stringObj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;64&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> numberObj); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> stringObj); <span class="comment">// object</span></span><br><span class="line"><span class="comment">// 拆箱</span></span><br><span class="line"><span class="built_in">console</span>.log(numberObj.valueOf()); <span class="comment">// 64</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> numberObj.valueOf()); <span class="comment">// number 基本的数字类型</span></span><br><span class="line"><span class="built_in">console</span>.log(numberObj.toString()); <span class="comment">// &#x27;64&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> numberObj.toString()); <span class="comment">// string 基本的字符类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringObj.valueOf()); <span class="comment">// &#x27;64&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> stringObj.valueOf()); <span class="comment">// string 基本的数据类型</span></span><br><span class="line"><span class="built_in">console</span>.log(stringObj.toString()); <span class="comment">// &#x27;64&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> stringObj.toString()); <span class="comment">// string 基本的数据类型</span></span><br></pre></td></tr></table></figure><p>在进行拆箱操作的时候，toString()和valueOf()先执行哪个？在回答这个问题之前，我们先暂停一下，看一下包装类型中的symbol。</p><p>这里简单介绍一下Symbol，感兴趣的可以自己去学习。</p><h6 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h6><p>Symbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突<br>创建Symbol</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;sym&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意：<br>1、每次调用Symbol都会创建新的symbol<br>2、不可以用new 创建Symbol（围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。）<br>3、symbol的参数可以不传，这个参数是用于描述symbol，可以用于调试但不是用于访问symbol本身<br>4、创建Symbol包装器对象，可以使用Object()函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Symbol</span>(<span class="string">&#x27;sym&#x27;</span>) === <span class="built_in">Symbol</span>(<span class="string">&#x27;sym&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> sym = <span class="keyword">new</span> <span class="built_in">Symbol</span>(); <span class="comment">// TypeError: Symbol is not a constructor</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;sym&#x27;</span>);</span><br><span class="line"><span class="keyword">typeof</span> sym2; <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"><span class="keyword">let</span> sym2Obj = <span class="built_in">Object</span>(sym2);</span><br><span class="line"><span class="keyword">typeof</span> sym2Obj; <span class="comment">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure><p>在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">symbol的文档</a>中，有一个属性<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive">Symbol.toPrimitive</a>。文档中关于它的介绍是：</p><p>Symbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。该函数被调用时，会被传递一个字符串参数 hint ，表示要转换到的原始值的预期类型。 hint 参数的取值是 “number”、”string” 和 “default” 中的任意一个。</p><p>我们看一下这个属性是怎么干扰一个对象转换为原始值的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个没有提供 Symbol.toPrimitive 属性的对象，参与运算时的输出结果</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(+obj1);     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;obj1&#125;</span>`</span>); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1 + <span class="string">&quot;&quot;</span>); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hint == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hint == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(+obj2);     <span class="comment">// 10      -- hint 参数值是 &quot;number&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;obj2&#125;</span>`</span>); <span class="comment">// &quot;hello&quot; -- hint 参数值是 &quot;string&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2 + <span class="string">&quot;&quot;</span>); <span class="comment">// &quot;true&quot;  -- hint 参数值是 &quot;default&quot;</span></span><br></pre></td></tr></table></figure><p>注意：<br>hint 取值为：<br>‘number’:该场合需要转成数值，<br>‘string’:该场合需要转成字符串，<br>‘default’:该场合可以转成数值，也可以转成字符串。</p><h4 id="对象转换成原始值的方法及执行顺序"><a href="#对象转换成原始值的方法及执行顺序" class="headerlink" title="对象转换成原始值的方法及执行顺序"></a>对象转换成原始值的方法及执行顺序</h4><p>以下优先级从上到下依次降低<br>1、先判断对象中是否有/[Symbol.toPrimitive/]/(hint/)方法，如果有的话，优先执行该方法<br>2、如果预期被转化成字符串类型时，则优先执行toString()方法<br>3、如果预期被转化成默认类型或数字类型时，则优先执行valueOf()方法<br>注意：若没有valueOf()方法，但是定义了toString()方法，则会执行toString()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(hint);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;symbol&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">valueOf</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;valueOf&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(obj)); <span class="comment">// string symbol</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(obj)); <span class="comment">// number NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">valueOf</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;valueOf&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(obj1)); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(obj1)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(obj2)); <span class="comment">// &#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(obj2)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">  <span class="function"><span class="title">valueOf</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(obj3)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(obj3)); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们都知道属性和方法是对象上的，但是基本数据类型可以访问属性和方法，比如：’hello world’.length。这是由于浏览器在内部做了装箱和拆箱操作。&lt;/p&gt;
&lt;h4 id=&quot;什么是装箱拆箱？&quot;&gt;&lt;a href=&quot;#什么是装箱拆箱？&quot; class=&quot;headerlin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开发一个vscode插件的流程</title>
    <link href="https://sunjinkang.github.io/2022/08/05/create-vscode-plugin/"/>
    <id>https://sunjinkang.github.io/2022/08/05/create-vscode-plugin/</id>
    <published>2022-08-05T02:33:23.000Z</published>
    <updated>2022-08-05T06:08:56.829Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vscode中文手册"><a href="#vscode中文手册" class="headerlink" title="vscode中文手册"></a>vscode中文手册</h4><p><a href="https://www.bookstack.cn/read/CN-VScode-Docs/README.md">https://www.bookstack.cn/read/CN-VScode-Docs/README.md</a></p><h4 id="vscode插件脚手架"><a href="#vscode插件脚手架" class="headerlink" title="vscode插件脚手架"></a>vscode插件脚手架</h4><p>安装脚手架和代码生成器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo generator-code</span><br></pre></td></tr></table></figure><p>生成vscode脚手架项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo code</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;vscode中文手册&quot;&gt;&lt;a href=&quot;#vscode中文手册&quot; class=&quot;headerlink&quot; title=&quot;vscode中文手册&quot;&gt;&lt;/a&gt;vscode中文手册&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.bookstack.cn/read</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Map 结构</title>
    <link href="https://sunjinkang.github.io/2022/08/04/about-map/"/>
    <id>https://sunjinkang.github.io/2022/08/04/about-map/</id>
    <published>2022-08-04T06:07:12.000Z</published>
    <updated>2022-08-04T07:31:23.549Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Map"><a href="#什么是Map" class="headerlink" title="什么是Map?"></a>什么是Map?</h4><p>由ES6提供的一种数据结构。它类似于对象，也是键值对的集合，但和对象不同的是，对象的键只能是字符串，map的键可以是各种类型的值（包括对象）。即，Object提供了 字符串-值 的对应，map提供了 值-值 的对应，是一种更完善的Hash结构实现。</p><h4 id="怎么创建map？"><a href="#怎么创建map？" class="headerlink" title="怎么创建map？"></a>怎么创建map？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br></pre></td></tr></table></figure><p>map可以使用一个对象作为键</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">p</span>: <span class="string">&#x27;string&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">map.set(o, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">map.get(o); <span class="comment">// text</span></span><br><span class="line"></span><br><span class="line">map.has(o); <span class="comment">// true</span></span><br><span class="line">map.delete(o);</span><br></pre></td></tr></table></figure><p>map还可以接受一个数组作为参数，该数组成员是一个个表示键值对的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">12</span>]]);</span><br><span class="line">map.size; <span class="comment">// 2</span></span><br><span class="line">map.has(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">map.get(<span class="string">&#x27;age&#x27;</span>); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>如果对同一个键多次赋值，后面的值将覆盖前面的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.set(<span class="number">1</span>, <span class="string">&#x27;qw&#x27;</span>).set(<span class="number">1</span>, <span class="string">&#x27;sdf&#x27;</span>);</span><br><span class="line">map.get(<span class="number">1</span>); <span class="comment">// sdf</span></span><br></pre></td></tr></table></figure><h4 id="map的实例属性和方法"><a href="#map的实例属性和方法" class="headerlink" title="map的实例属性和方法"></a>map的实例属性和方法</h4><p>1、size<br>用法：map.size<br>作用：获取map结构的大小<br>返回：map结构的长度大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.size; <span class="comment">// 0</span></span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line">map.size; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>2、set()<br>用法：map.set(key, value)<br>作用：向map中添加或修改map的数据<br>返回：修改后的map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>3、get()<br>用法：map.get(key)<br>作用：获取对应key的value值<br>返回：map结构中key对应的值，不存在对应key时，返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line">map.get(<span class="number">1</span>); <span class="comment">// 12</span></span><br><span class="line">map.get(<span class="number">2</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>4、has()<br>用法：map.has(key)<br>作用：判断map中是否有对应的key<br>返回：true/false，依据map中是否有对应的key，返回true或false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line">map.has(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">map.has(<span class="number">2</span>); <span class="comment">// has</span></span><br></pre></td></tr></table></figure><p>5、delete()<br>用法：map.delete(key)<br>作用：删除map中对应的key及value<br>返回：true/false，删除成功返回true，删除失败返回false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line">map.delete(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">map.delete(<span class="number">2</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>6、clear()<br>用法：map.clear()<br>作用：清空map中的数据<br>返回：undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line">map.clear(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="map的遍历方法"><a href="#map的遍历方法" class="headerlink" title="map的遍历方法"></a>map的遍历方法</h4><p>1、keys()<br>2、values()<br>3、entries()<br>4、forEach()</p><p>参考：<a href="https://www.jianshu.com/p/93b5a5940de8">https://www.jianshu.com/p/93b5a5940de8</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是Map&quot;&gt;&lt;a href=&quot;#什么是Map&quot; class=&quot;headerlink&quot; title=&quot;什么是Map?&quot;&gt;&lt;/a&gt;什么是Map?&lt;/h4&gt;&lt;p&gt;由ES6提供的一种数据结构。它类似于对象，也是键值对的集合，但和对象不同的是，对象的键只能是字符串，ma</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>伪数组</title>
    <link href="https://sunjinkang.github.io/2022/08/04/fake-array/"/>
    <id>https://sunjinkang.github.io/2022/08/04/fake-array/</id>
    <published>2022-08-04T02:57:14.000Z</published>
    <updated>2022-08-04T07:17:36.091Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>ArrayLike，也叫作类数组。是一种按照索引存储数据且具有length属性的对象。</p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><p>1、具有length属性<br>2、按照索引方式存储数据<br>3、不具有数组的方法，如push、pop等<br><img src="/2022/08/04/fake-array/document.png" alt="document获取的伪数组"></p><h4 id="有哪些常见的伪数组"><a href="#有哪些常见的伪数组" class="headerlink" title="有哪些常见的伪数组"></a>有哪些常见的伪数组</h4><p>1、function的arguments对象<br>2、document.getElementsByTagName、document.getElementsByClassName等document方法获取的NodeList对象<br>3、上传文件是选择的file对象<br>4、自定义的某些对象</p><h4 id="判断一个数组是不是伪数组的方法"><a href="#判断一个数组是不是伪数组的方法" class="headerlink" title="判断一个数组是不是伪数组的方法"></a>判断一个数组是不是伪数组的方法</h4><p>1、Array.isArray</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fakeArray表示伪数组</span></span><br><span class="line"><span class="comment">// array 表示正常数组</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(fakeArray); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(array); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>2、instanceof</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fakeArray表示伪数组</span></span><br><span class="line"><span class="comment">// array 表示正常数组</span></span><br><span class="line">fakeArray <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// false</span></span><br><span class="line">array <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="将数组转为真正数组的方法"><a href="#将数组转为真正数组的方法" class="headerlink" title="将数组转为真正数组的方法"></a>将数组转为真正数组的方法</h4><p>1、使用Array.prototype.slice.call()<br><img src="/2022/08/04/fake-array/prototype_call.png" alt="Array.prototype.slice.call转换"><br>2、使用[].slice.call()<br><img src="/2022/08/04/fake-array/slice_call.png" alt="slice.call转换"><br>3、使用Array.from()<br><img src="/2022/08/04/fake-array/array_from.png" alt="array.from转换"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;ArrayLike，也叫作类数组。是一种按照索引存储数据且具有length属性的对象。&lt;/p&gt;
&lt;h4 id=&quot;特征&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javascript DOM编程艺术阅读笔记</title>
    <link href="https://sunjinkang.github.io/2022/07/31/about-dom/"/>
    <id>https://sunjinkang.github.io/2022/07/31/about-dom/</id>
    <published>2022-07-31T05:42:45.000Z</published>
    <updated>2022-08-30T10:54:33.610Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JavaScript简史"><a href="#JavaScript简史" class="headerlink" title="JavaScript简史"></a>JavaScript简史</h4><p>1、DOM<br>DOM是一套对文档的内容进行抽象和概念化的方法。</p><p>第0级DOM(DOM Level 0)<br>试验性质的初级DOM，在还未形成统一标准的初期阶段，“第0级DOM”的常见用途是翻转图片和验证表单数据。</p><p>第1级DMO(DOM Level 1)<br>Netscape、微软和其他一些浏览器制造商们还能抛开彼此的敌意而与W3C携手制定新的标准，并于1998年10月完成了“第1级DOM”(DOM Level 1) 。</p><p>2、浏览器战争<br>2.1 DHTML<br>DHTML是“Dynamic HTML”(动态HTML)的简称。DHTML并不是一项新技术，而是描述HTML、CSS和.JavaScript技术组合的术语。背后含义:<br>(1)利用HTML把网页标记为各种元素;<br>(2)利用CSS设置元素样式和它们的显示位置;<br>(3)利用JavaScript实时地操控页面和改变样式。</p><h4 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h4><p>循环语句<br>1、while循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)&#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do…while循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure><p>  2、for循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initial condition; test condition; alter condition)&#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<br>1、变量的作用域<br>全局变量(global variable)可以在脚本中的任何位置被引用。一旦你在某个脚本里声明了一个全局变量，就可以从这个脚本中的任何位置―一包括函数内部—―引用它。全局变量的作用域是整个脚本。<br>局部变量(local variable）只存在于声明它的那个函数的内部，在那个函数的外部是无法引用它的。局部变量的作用域仅限于某个特定的函数。</p><p>对象<br>对象（object）是一种非常重要的数据类型，但此前我们还没有认真对待它。对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性（property)和方法(method) :<br>-属性是隶属于某个特定对象的变量<br>-方法是只有某个特定对象才能调用的函数<br>对象就是由一些属性和方法组合在一起而构成的一个数据实体</p><p>1、用户定义对象(user-defined object)<br>由程序员自行创建的对象</p><p>2、内建对象(native object)<br>JavaScript提供了一系列预先定义好的对象，这些可以拿来就用的对象称为内建对象( native object)<br>Array、Math、Date等</p><p>3、宿主对象(host object)<br>由浏览器提供的预定义对象被称为宿主对象(host object )<br>宿主对象包括document、Form、Image和Element等。我们可以通过这些对象获得关于网页上表单、图像和各种表单元素等信息</p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>1、文档:DOM中的’D’<br>如果没有document(文档），DOM也就无从谈起。当创建了一个网页并把它加载到Web浏览器中时，DOM就在幕后悄然而生。它把你编写的网页文档转换为一个文档对象</p><p>2、对象:DOM中的’O’<br>如上对象</p><p>3、模型:DOM中的’M’<br>DOM中的“M”代表着“Model”(模型)，但说它代表着“Map”(地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表着一列真正的火车、一张城市街道图代表着一个实际存在的城市那样，DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型)，可以通过JavaScript去读取这张地图</p><p>4、节点<br>(1)元素节点<br>(2)文本节点<br>(3)属性节点<br>(4)CSS<br>(5)获取元素<br>-getElementById 返回一个对象<br>-getElementsByTagName 返回一个对象数组，使用通配符（*）获取文档中总共有多少元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shopping = <span class="built_in">document</span>.getElementById(<span class="string">&quot;purchases&quot;</span>) ;</span><br><span class="line"><span class="keyword">var</span> items = shopping.getElementsByTagName(<span class="string">&quot;*&quot;</span>) ;</span><br></pre></td></tr></table></figure><p>-getElementsByClassName 返回一个对象数组<br>使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中用空格分隔类名即可<br>注意，即使在元素的class属性中，类名的顺序和参数中指定的不一样，也照样会匹配该元素。不仅类名的实际顺序不重要，就算元素还带有更多类名也没有关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shopping = <span class="built_in">document</span>.getElementById(<span class="string">&quot;purchases&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> sales = shopping.getElementsByClassName(<span class="string">&quot;sale&quot;</span>);</span><br></pre></td></tr></table></figure><p>5、获取和设置属性<br>(1)getAttribute 只能通过元素节点调用<br>(2)setAttribute 只能通过元素节点调用，修改属性值<br>细节:通过setAttribute对文档做出修改后，在通过浏览器的viewsource(查看源代码）选项去查看文档的源代码时看到的仍将是改变前的属性值，也就是说，setAttribute做出的修改不会反映在文档本身的源代码里。这种“表里不一”的现象源自DOM的工作模式:先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。这正是DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。</p><h4 id="案例研究：JavaScript图片库"><a href="#案例研究：JavaScript图片库" class="headerlink" title="案例研究：JavaScript图片库"></a>案例研究：JavaScript图片库</h4><p>DOM是一种适用于多种环境和多种程序设计语言的通用型API。如果想把DOM技巧运用在Web浏览器以外的应用环境里，严格遵守“第1级DOM”能够避免与兼容性有关的任何问题。<br>1、childNodes属性 用来获取任何一个元素的所有子元素<br>2、nodeType属性 共有12中可取值<br>以下3种具有实用价值：<br>-元素节点的nodeType属性值是1<br>-属性节点的nodeType属性值是2<br>-文本节点的nodeType属性值是3<br>3、nodeValue属性 得到和设置节点的值<br>4、firstChild和lastChild</p><h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><p>1、平稳退化<br>平稳退化(graceful degradation)，虽然某些功能无法使用，但最基本的操作仍能顺利完成<br>2、“javascript:”伪协议<br>“真”协议用来在因特网上的计算机之间传输数据包，如HTTP协议(http://) 、FTP协议（ftp://)等，伪协议则是一种非标准化的协议<br>“javascript:”伪协议让我们通过一个链接来调用JavaScript函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript:popUp(&#x27;http://www.example.com/&#x27;);&quot;</span>&gt;Example&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>3、CSS<br>结构与样式分离<br>渐进增强，用一些额外的信息层去包裹原始数据<br>4、分离javascript<br>5、向后兼容<br>(1)对象检测：检测浏览器对JavaScript的支持程度<br>(2)浏览器嗅探技术<br>通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可以通过JavaScript代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善JavaScript脚本代码的向后兼容性，但这是一种风险非常大的技术。<br>首先，浏览器有时会“撒谎”。因为历史原因，有些浏览器会把自己报告为另外一种浏览器，还有一些浏览器允许用户任意修改这些信息<br>其次，为了适用于多种不同的浏览器，浏览器嗅探脚本会变得越来越复杂。如果想让浏览器嗅探脚本能够跨平台工作，就必须测试所有可能出现的供应商和版本号组合。这是一个无穷尽的任务，测试的组合情况越多，代码就越复杂和冗长<br>最后，许多浏览器嗅探脚本在进行这类测试时要求浏览器的版本号必须得到精确的匹配。因此，每当市场上出现新版本时，就不得不修改这些脚本<br>6、性能考虑<br>(1)尽量少访问DOM和尽量减少标记<br>(2)合并和放置脚本<br>多个脚本合并，减少请求次数<br>把所有/<script>标签都放到文档的末尾，/&lt;/body/&gt;标记之前，就可以让页面变得更快<br>(3)压缩脚本<br>压缩工具：<br>-Douglas Crockford的JSMin (<a href="http://www.crockford.com/javascript/jsmin.html">http://www.crockford.com/javascript/jsmin.html</a>)<br>-雅虎的YUI Compressor (<a href="http://developer.yahoo.com/yui/compressor">http://developer.yahoo.com/yui/compressor</a>)<br>-谷歌的Closure Compiler (<a href="http://closure-compiler.appspot.com/home">http://closure-compiler.appspot.com/home</a>)</p><h4 id="动态创建标记"><a href="#动态创建标记" class="headerlink" title="动态创建标记"></a>动态创建标记</h4><p>1、document.write &amp; innerHTML属性<br>2、DOM方法<br>(1)createElement<br>(1)appendChild<br>(1)createTextNode<br>(1)insertBefore<br>3、Ajax<br>(1)XMLHttpRequest对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHTTPObject</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest == <span class="string">&quot;undefined&quot;</span>) xMLHttpRequest =<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> Activexobject ( <span class="string">&quot;Msxm12.XMLHTTP.6.0&quot;</span>); )<span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> ActivexObject (<span class="string">&quot;Msxm12.XMLHTTP.3.0&quot;</span>);)<span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> ActivexObject ( <span class="string">&quot;Msxm12.XMLHTTP&quot;</span>); )<span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest ( ) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XHTML5<br>本质上是使用严格的XML规则编写的HTML5。从技术角度说，Web浏览器应该将任何XHTML5文档都视为XML文档，而不是HTML文档。而在现实中，你还得在文档的头部发送正确的MIME类型，即application/xhtml+xml。有些浏览器不认识这个MIME类型，因而一般要在服务器端对浏览器进行探查后再发送。否则最坏的情况，页面很可能根本不会在浏览器中呈现。因此，绝大多数XHTML页面仍然是以HTML类型发送的。</p><h4 id="CSS-DOM"><a href="#CSS-DOM" class="headerlink" title="CSS-DOM"></a>CSS-DOM</h4><p>1、三位一体的网页<br>(1)结构层<br>网页的结构层(structural layer)由HTML或XHTML之类的标记语言负责创建<br>(2)表示层<br>表示层(presentation layer)由CSS负责完成。CSS描述页面内容应该如何呈现<br>(3)行为层<br>行为层(behavior layer)负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM主宰的领域<br>(4)分离<br>-使用(X)HTML去搭建文档的结构<br>-使用CSS去设置文档的呈现效果<br>-使用DOM脚本去实现文档的行为<br>2、style属性<br>在外部样式表里声明的样式不会进入style对象，在文档的<head>部分里声明的样式也是如此<br>style对象只包含在HTML代码里用style属性声明的样式<br>3、何时该使用DOM脚本设置样式<br>(1)根据元素在节点树里的位置来设置样式<br>(2)根据某种条件反复设置某种样式<br>(3)响应事件<br>4、className属性</p><h4 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h4><p>1、canvas<br>2、video和audio</p><p>疑问点：<br>1、遇到的知识点觉得掌握了，没有记录，后面又忘了<br>重要的知识点都记录，不管有没有掌握<br>2、任务拆分评估时间不准<br>更深入的了解项目代码和业务逻辑<br>3、看书遇到问题的时候，先记录继续阅读，还是先解决问题在阅读？<br>先记录继续阅读，看后面是否有解答<br>4、原型链<br>不建议研究__proto__这种知识点，可以看看es6中新的关于原型链的继承<br>理解知识的时候，不要添加太多概念，避免混乱</p></script></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;JavaScript简史&quot;&gt;&lt;a href=&quot;#JavaScript简史&quot; class=&quot;headerlink&quot; title=&quot;JavaScript简史&quot;&gt;&lt;/a&gt;JavaScript简史&lt;/h4&gt;&lt;p&gt;1、DOM&lt;br&gt;DOM是一套对文档的内容进行抽象和概念化的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js-基本类型与引用类型</title>
    <link href="https://sunjinkang.github.io/2022/07/19/origin-type-and-reference-type/"/>
    <id>https://sunjinkang.github.io/2022/07/19/origin-type-and-reference-type/</id>
    <published>2022-07-19T08:23:28.000Z</published>
    <updated>2022-08-10T03:14:27.201Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
